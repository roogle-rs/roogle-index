{"root":"0:0:1830","crate_version":"1.16.0","includes_private":false,"index":{"0:0:1830":{"id":"0:0:1830","crate_id":0,"name":"num_cpus","span":{"filename":"src/lib.rs","begin":[1,0],"end":[485,1]},"visibility":"public","docs":"A crate with utilities to determine the number of CPUs available on the\ncurrent system.\n\nSometimes the CPU will exaggerate the number of CPUs it contains, because it can use\n[processor tricks] to deliver increased performance when there are more threads. This \ncrate provides methods to get both the logical and physical numbers of cores.\n\nThis information can be used as a guide to how many tasks can be run in parallel.\nThere are many properties of the system architecture that will affect parallelism,\nfor example memory access speeds (for all the caches and RAM) and the physical\narchitecture of the processor, so the number of CPUs should be used as a rough guide\nonly.\n\n\n## Examples\n\nFetch the number of logical CPUs.\n\n```\nlet cpus = num_cpus::get();\n```\n\nSee [`rayon::Threadpool`] for an example of where the number of CPUs could be\nused when setting up parallel jobs (Where the threadpool example uses a fixed\nnumber 8, it could use the number of CPUs).\n\n[processor tricks]: https://en.wikipedia.org/wiki/Simultaneous_multithreading\n[`rayon::ThreadPool`]: https://docs.rs/rayon/1.*/rayon/struct.ThreadPool.html","links":{},"attrs":["#![deny(missing_docs)]","#![allow(non_snake_case)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:72:1690","0:73:1708"],"is_stripped":false}}},"2:12211:31259":{"id":"2:12211:31259","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4538:31259"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43859:9458","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12101:24586":{"id":"2:12101:24586","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41601:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41599:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9882:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9882:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12105:24588":{"id":"2:12105:24588","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9882:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9882:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12111:9267":{"id":"2:12111:9267","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11991:419"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43530:9259","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12115:29720":{"id":"2:12115:29720","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12114:29743"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43843:9547","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12182:31253":{"id":"2:12182:31253","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12148:31244":{"id":"2:12148:31244","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11788:16590","str::split":"2:12136:1969","prim@char":"1:11991:419","str::split_terminator":"2:12145:31243"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43628:9540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:9239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11793:9239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11808:16588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12195:31256":{"id":"2:12195:31256","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11991:419","self::pattern":"2:11788:16590"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:9239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11793:9239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11808:16588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12209:24517":{"id":"2:12209:24517","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12110:24612":{"id":"2:12110:24612","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:12109:24611"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12192:24631":{"id":"2:12192:24631","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11991:419","self::pattern":"2:11788:16590"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41599:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:9239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11793:9239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11808:16588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12108:31241":{"id":"2:12108:31241","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11997:1417","crate::ops::IndexMut":"2:2984:11318","str::slice_unchecked":"2:12107:31240"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12119:24628":{"id":"2:12119:24628","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11991:419","self::pattern":"2:11788:16590"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:9239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12096:31239":{"id":"2:12096:31239","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12086":{"id":"2:12086","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12087:820","2:12088:2050","2:12089:31236","2:12090:31237","2:12092:31238","2:12095:25749","2:12096:31239","2:12097:315","2:12098:314","2:12099:1690","2:12101:24586","2:12103:24587","2:12105:24588","2:12107:31240","2:12108:31241","2:12109:24611","2:12110:24612","2:12111:9267","2:12112:9556","2:12113:6632","2:12114:29743","2:12115:29720","2:12116:1966","2:12117:31242","2:12118:29708","2:12119:24628","2:12122:24629","2:12125:24630","2:12128:2034","2:12132:6641","2:12136:1969","2:12139:24620","2:12142:24622","2:12145:31243","2:12148:31244","2:12151:24624","2:12154:24626","2:12157:31245","2:12160:31246","2:12163:2195","2:12166:31247","2:12169:31248","2:12172:31249","2:12175:1973","2:12177:31250","2:12179:31251","2:12181:31252","2:12182:31253","2:12183:31254","2:12186:31255","2:12189:2015","2:12192:24631","2:12195:31256","2:12198:31257","2:12201:31258","2:12204:1822","2:12206:24513","2:12207:24514","2:12208:24516","2:12209:24517","2:12210:24518","2:12211:31259","2:12213:11294","2:12214:31260"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12112:9556":{"id":"2:12112:9556","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11991:419"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43536:9537","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12113:6632":{"id":"2:12113:6632","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43546:2284","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12207:24514":{"id":"2:12207:24514","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39638:24526","Self::is_ascii":"2:12206:24513"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41599:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39638:24526","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12166:31247":{"id":"2:12166:31247","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11788:16590","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11991:419","str::matches":"2:12163:2195"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43782:9544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:9239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11793:9239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11808:16588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12160:31246":{"id":"2:12160:31246","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41599:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:9239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11793:9239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11808:16588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12092:31238":{"id":"2:12092:31238","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:12090:31237"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12109:24611":{"id":"2:12109:24611","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_mut":"2:12110:24612"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12139:24620":{"id":"2:12139:24620","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11991:419","self::pattern":"2:11788:16590"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11604:9246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:9239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12145:31243":{"id":"2:12145:31243","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11788:16590","str::split":"2:12136:1969","prim@char":"1:11991:419","`DoubleEndedIterator`":"2:7306:121","str::rsplit_terminator":"2:12148:31244"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43610:9539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:9239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12183:31254":{"id":"2:12183:31254","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11991:419","self::pattern":"2:11788:16590"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:9239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11793:9239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11813:16587","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12128:2034":{"id":"2:12128:2034","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41601:179","prim@char":"1:11991:419","self::pattern":"2:11788:16590"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41599:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:9239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12090:31237":{"id":"2:12090:31237","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73:1708":{"id":"0:73:1708","crate_id":0,"name":"get_physical","span":{"filename":"src/lib.rs","begin":[108,0],"end":[110,1]},"visibility":"public","docs":"Returns the number of physical cores of the current system.\n\nThis will always return at least `1`.\n\n# Note\n\nPhysical count is supported only on Linux, mac OS and Windows platforms.\nOn other platforms, or if the physical count fails on supported platforms,\nthis function returns the same as [`get()`], which is the number of logical\nCPUS.\n\n# Examples\n\n```\nlet logical_cpus = num_cpus::get();\nlet physical_cpus = num_cpus::get_physical();\nif logical_cpus > physical_cpus {\n    println!(\"We have simultaneous multithreading with about {:.2} \\\n              logical cores to 1 physical core.\", \n              (logical_cpus as f64) / (physical_cpus as f64));\n} else if logical_cpus == physical_cpus {\n    println!(\"Either we don't have simultaneous multithreading, or our \\\n              system doesn't support getting the number of physical CPUs.\");\n} else {\n    println!(\"We have less logical CPUs than physical CPUs, maybe we only have access to \\\n              some of the CPUs on our system.\");\n}\n```\n\n[`get()`]: fn.get.html","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12163:2195":{"id":"2:12163:2195","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11788:16590","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11991:419","str::rmatches":"2:12166:31247"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43764:9543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:9239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12154:24626":{"id":"2:12154:24626","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11991:419","str::splitn":"2:12151:24624","self::pattern":"2:11788:16590"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43682:9252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:9239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11793:9239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11808:16588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12177:31250":{"id":"2:12177:31250","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12118:29708":{"id":"2:12118:29708","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43852:9266","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12125:24630":{"id":"2:12125:24630","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11991:419","self::pattern":"2:11788:16590"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:9239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11793:9239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11808:16588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12198:31257":{"id":"2:12198:31257","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11991:419","self::pattern":"2:11788:16590"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:9239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12098:314":{"id":"2:12098:314","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12008:1520"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12201:31258":{"id":"2:12201:31258","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11991:419","self::pattern":"2:11788:16590"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:9239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11793:9239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11808:16588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12099:1690":{"id":"2:12099:1690","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41601:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41599:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9882:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9882:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12136:1969":{"id":"2:12136:1969","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11788:16590","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11991:419","str::split_whitespace":"2:12114:29743","str::rsplit":"2:12142:24622"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43560:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:9239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12142:24622":{"id":"2:12142:24622","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11788:16590","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11991:419","str::split":"2:12136:1969"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43578:9249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:9239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11793:9239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11808:16588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12179:31251":{"id":"2:12179:31251","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12186:31255":{"id":"2:12186:31255","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11991:419","self::pattern":"2:11788:16590"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:9239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12107:31240":{"id":"2:12107:31240","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11997:1417","str::slice_mut_unchecked":"2:12108:31241","crate::ops::Index":"2:2980:11317"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12181:31252":{"id":"2:12181:31252","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12204:1822":{"id":"2:12204:1822","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11749:127","`FromStr`":"2:11748:2337"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41743:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:11748:2337","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11748:2337","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12116:1966":{"id":"2:12116:1966","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43814:2281","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12114:29743":{"id":"2:12114:29743","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12115:29720"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43834:9546","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12206:24513":{"id":"2:12206:24513","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5527:31919":{"id":"5:5527:31919","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7451:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12122:24629":{"id":"2:12122:24629","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11991:419","self::pattern":"2:11788:16590"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:9239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12210:24518":{"id":"2:12210:24518","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5511":{"id":"5:5511","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5512:31916","5:5513:6589","5:5516:31917","5:5519:31918","5:5527:31919","5:5528:31920","5:5529:2310","5:5530:25833","5:5531:25834"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5513:6589":{"id":"5:5513:6589","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7451:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:9239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5516:31917":{"id":"5:5516:31917","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7451:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:9239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12132:6641":{"id":"2:12132:6641","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41601:179","prim@char":"1:11991:419","self::pattern":"2:11788:16590"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41599:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:9239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11793:9239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11808:16588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12175:1973":{"id":"2:12175:1973","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:72:1690":{"id":"0:72:1690","crate_id":0,"name":"get","span":{"filename":"src/lib.rs","begin":[73,0],"end":[75,1]},"visibility":"public","docs":"Returns the number of available CPUs of the current system.\n\nThis function will get the number of logical cores. Sometimes this is different from the number\nof physical cores (See [Simultaneous multithreading on Wikipedia][smt]).\n\nThis will always return at least `1`.\n\n# Examples\n\n```\nlet cpus = num_cpus::get();\nif cpus > 1 {\n    println!(\"We are on a multicore system with {} CPUs\", cpus);\n} else {\n    println!(\"We are on a single core system\");\n}\n```\n\n# Note\n\nThis will check [sched affinity] on Linux, showing a lower number of CPUs if the current\nthread does not have access to all the computer's CPUs.\n\nThis will also check [cgroups], frequently used in containers to constrain CPU usage.\n\n[smt]: https://en.wikipedia.org/wiki/Simultaneous_multithreading\n[sched affinity]: http://www.gnu.org/software/libc/manual/html_node/CPU-Affinity.html\n[cgroups]: https://www.kernel.org/doc/Documentation/cgroup-v1/cgroups.txt","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12214:31260":{"id":"2:12214:31260","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4536:31260"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43877:9457","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12117:31242":{"id":"2:12117:31242","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43824:9545","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12172:31249":{"id":"2:12172:31249","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11788:16590","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11991:419","str::match_indices":"2:12169:31248"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43728:9542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:9239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11793:9239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11808:16588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12097:315":{"id":"2:12097:315","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12098:314","`u8`":"1:12008:1520"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5519:31918":{"id":"5:5519:31918","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7451:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12151:24624":{"id":"2:12151:24624","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11991:419","self::pattern":"2:11788:16590","str::rsplitn":"2:12154:24626"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43664:9251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:9239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5528:31920":{"id":"5:5528:31920","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2507","`String`":"5:7451:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2507","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7184:9153","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5529:2310":{"id":"5:5529:2310","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7451:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5512:31916":{"id":"5:5512:31916","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2507","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7184:9153","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2507","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7184:9153","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5530:25833":{"id":"5:5530:25833","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12209:24517"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12089:31236":{"id":"2:12089:31236","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5531:25834":{"id":"5:5531:25834","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12210:24518"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12088:2050":{"id":"2:12088:2050","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12208:24516":{"id":"2:12208:24516","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12213:11294":{"id":"2:12213:11294","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4539:11294"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43868:9191","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12189:2015":{"id":"2:12189:2015","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11991:419","self::pattern":"2:11788:16590"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41599:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:9239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12157:31245":{"id":"2:12157:31245","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41599:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:9239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12095:25749":{"id":"2:12095:25749","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11348:16591"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12103:24587":{"id":"2:12103:24587","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9882:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9882:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12087:820":{"id":"2:12087:820","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11991:419"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12169:31248":{"id":"2:12169:31248","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11788:16590","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11991:419","str::rmatch_indices":"2:12172:31249"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43710:9541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:9239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"2:20863:29879":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"1:5741:2356":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:10654:7633":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:7677:7252":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"20:3071:5161":{"crate_id":20,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:2811:16716":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"16:7313:32741":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:11128:2003":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"5:4034:7143":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"19:0:1040":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:20815:11431":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:22628:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:43530:9259":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"6:4587:5180":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:9474:16671":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"16:5028:8552":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:10633:7631":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"11:2174:10620":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:11753:7765":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"2:43536:9537":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"16:7584:8888":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:12424:7914":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:12013:796":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:9913:7553":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:11074:7417":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:13732:8243":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"20:3308:5184":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:1557:3756":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:2203:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:42863:9509":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:3837:9729":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"11:2186:32719":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"20:3080:1956":{"crate_id":20,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:21070:11425":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"5:3330:7177":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"2:40433:9206":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:7268:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:41514:29573":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:10293:7583":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:12526:7929":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:41735:193":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"6:7511:5222":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"20:1368:3753":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:46193:9611":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:12792:7989":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"16:4592:8539":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"5:35:7139":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:40354:9472":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:10515:2303":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"20:1431:3759":{"crate_id":20,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:41794:9069":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"6:494:2992":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:2162:16733":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"6:474:2989":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"16:6289:8678":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:43859:9458":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:8285:11384":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:41650:6645":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"20:4824:2783":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:10609:7629":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:7915:2296":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:2752:11419":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"20:3059:5159":{"crate_id":20,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:8871:9745":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:43834:9546":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:43095:9518":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:10054:9069":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:10038:7562":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:14163:8371":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:43468:9532":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:8492:2331":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"6:5767:5728":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"16:7038:8789":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:40442:9481":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:2470:2255":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:2523:237":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"17:9866:7545":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:7738:11337":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:948:9062":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:3934:2271":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"1:6603:2368":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:8813:9849":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:10873:9256":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:45550:9582":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"6:4818:10680":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:43376:9525":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:4:1023":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:22364:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"9:330:10627":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"20:5046:6234":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:21991:9289":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"20:483:2991":{"crate_id":20,"path":["libc","unix","timeval"],"kind":"struct"},"20:3226:5178":{"crate_id":20,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:11388:19672":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"20:3174:5172":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:1833:9719":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:11669:7747":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"11:695:9053":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"5:6790:7187":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:833:2333":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:42855:9507":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:41573:9233":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"6:5863:10781":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:1975:184":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"16:6427:8691":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:7847:2247":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"16:6571:19605":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"20:614:3023":{"crate_id":20,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:8827:9850":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"5:2461:10887":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"6:6067:10842":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:2471:16667":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:46649:9637":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"16:530:8454":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"16:6357:8685":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:47935:9690":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:4900:11394":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"16:3441:8524":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:22562:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:47988:9693":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:547:2998":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:42880:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:9180:2254":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:2921:2501":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"16:8252:8965":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"6:4475:5171":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:7665:8515":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:2737:2554":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"1:9047:24467":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"20:3257:5180":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:39423:9319":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"11:968:8792":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:21964:9288":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"20:4995:6230":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:5955:10803":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:44579:9078":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:43966:9549":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:4810:10676":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"5:3570:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"5:0:286":{"crate_id":5,"path":["alloc"],"kind":"module"},"16:6540:8505":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:21246:11435":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"14:0:2094":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:9098:218":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:9222:6715":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"1:615:9707":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:3385:9190":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"1:6973:27402":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"11:1831:7177":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"6:506:2994":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"16:6789:8756":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:631:9708":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:10122:9246":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:41494:10965":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:1913:11348":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:9275:9719":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"5:4428:7167":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"16:7025:8786":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:11998:1501":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:9477:7250":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:40068:29553":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:20984:11434":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:40188:9465":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:32145:9311":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:2962:16558":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"16:5626:8563":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"16:2781:8491":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"20:3389:5192":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"20:3414:5195":{"crate_id":20,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:14197:8383":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:10486:7610":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"17:11888:7799":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"11:1838:9073":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"16:7855:19612":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:11272:7719":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:12851:7995":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:9215:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:43944:16602":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"6:4800:10673":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:9020:9862":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:13981:8308":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:21469:11440":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"17:2133:7409":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"5:1672:7143":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:11116:9850":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:13125:8039":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:10671:19767":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:30925:183":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:47869:9684":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:12004:7817":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:41726:6703":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:40098:9455":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"6:4678:5189":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:11997:1417":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:14282:8406":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"16:6323:8681":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:12365:7906":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:30953:2565":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:10313:7585":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"2:2980:11317":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"16:8138:8956":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"6:6744:6228":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"5:3217:32696":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:1583:9076":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:21464:11432":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"6:526:2995":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"16:7331:32743":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"5:7292:6646":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:2371:2235":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"11:1538:9072":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:3233:16557":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"20:489:2992":{"crate_id":20,"path":["libc","unix","timespec"],"kind":"struct"},"1:3106:2315":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"17:13949:8300":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:14044:8322":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"6:4704:5192":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"20:4042:5706":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:3339:2292":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:9220:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:10927:9131":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:43439:9529":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:10417:7604":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"20:4165:5736":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlmsghdr"],"kind":"struct"},"6:5044:10762":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"20:477:2990":{"crate_id":20,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:13167:8046":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:4605:16656":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"18:491:7338":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:5074:10770":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:582:7401":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:4010:9193":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:9777:19680":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"6:6607:6222":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"20:3482:5202":{"crate_id":20,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:2931:2504":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"20:4180:5738":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"6:5015:5203":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"18:707:7374":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:21976:29565":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"16:5689:8569":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"16:7763:19611":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"6:4992:10743":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"18:574:7339":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:41802:6646":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:11298:9759":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"9:426:18592":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"6:1717:3772":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:5076:9738":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:12065:7830":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:8145:2314":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:9083:7388":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:4380:7198":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"16:7362:19609":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"6:4341:5158":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"6:488:2991":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:1566:9073":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"13:0:2087":{"crate_id":13,"path":["std_detect"],"kind":"module"},"6:6705:6224":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:12118:7843":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:43366:9524":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"20:4817:6223":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:3980:11363":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"5:2170:10882":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:10253:7580":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:8231:9825":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:1466:1714":{"crate_id":2,"path":["core","mem"],"kind":"module"},"16:6886:8508":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"20:4077:5729":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"11:2060:9064":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"6:482:2990":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"18:644:7339":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:40534:9484":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:2740:2500":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:11552:9893":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"16:4724:8542":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"20:5479:5225":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:7698:29392":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:10823:28934":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:40392:9200":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:41585:9235":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"20:5485:5226":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:9528:32752":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:2683:220":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"5:6081:2271":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:46809:9639":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"16:4476:8535":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:42902:9516":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"6:7564:10871":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:11178:7705":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:12891:7999":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"6:573:3002":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"6:4787:10668":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:42070:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:14102:8364":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"20:4298:5765":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"20:5033:6233":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","termios2"],"kind":"struct"},"5:7213:7160":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:9226:6717":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"16:3042:18743":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:12681:11305":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"5:3171:2333":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"18:564:7348":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:10097:7569":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:7622:8889":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:14380:8431":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:10199:7577":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:5234:190":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"17:10511:7614":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"2:43610:9539":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"6:4568:5179":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"5:2690:10890":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"6:6573:3684":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:46047:9607":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:2984:11318":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:12133:7849":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"5:6888:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"16:4032:8531":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:10341:9253":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:41431:9230":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:40475:9482":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:8795:9848":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:14015:8315":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:1075:7402":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:22016:29560":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:21561:9277":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:915:9053":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:10957:7680":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"18:113:23619":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"16:8152:8518":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"16:6658:8729":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:43868:9191":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:20851:11433":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"6:4626:5183":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"9:0:2090":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:44159:9566":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:7661:16701":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:12433:192":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:1835:9720":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"16:8210:8850":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:4258:9196":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:8977:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:13882:8281":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:4792:7231":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"5:4848:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"16:7474:8511":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"18:766:23629":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"16:3220:8522":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:11852:7794":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:5612:8559":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:4631:10482":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"16:5363:19599":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:12631:7945":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:2795:16713":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:10141:9871":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"6:4764:10654":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"5:1426:9069":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"6:7575:10875":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"16:5301:8555":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:9966:7532":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:3994:11365":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"5:3722:2298":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:9344:32754":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"2:21220:11426":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"2:39444:8850":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"2:4389:6727":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:2928:2503":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:47889:9686":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:48065:9696":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:4785:29544":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"11:0:2092":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"17:9977:7533":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"5:1374:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:12106:7840":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"0:73:1708":{"crate_id":0,"path":["num_cpus","get_physical"],"kind":"function"},"17:9952:7509":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"16:6815:8757":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:22089:9302":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:43710:9541":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:45995:9605":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:40875:9220":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"16:7592:19610":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:12566:7937":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"16:6197:8657":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:1810:9718":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"20:5473:5224":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"16:4620:8540":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"16:8086:8949":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:9146:9867":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:11475:9728":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"16:5651:8502":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:2516:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:47878:9685":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:11989:372":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1:1422:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:40108:9456":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"5:3802:7177":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:4144:9195":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:14403:8435":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"16:6713:8742":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:8997:19647":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:5819:2365":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:7264:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:41811:183":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"6:4368:5159":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:12371:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:5611:206":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"5:6932:7190":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"6:4854:10684":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:11813:16587":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"20:138:2679":{"crate_id":20,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:10555:7621":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:14350:8426":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:12864:7997":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"16:3777:8527":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:11264:7717":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"6:7463:6233":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:45662:9587":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:6533:2362":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"16:6872:8507":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"6:4748:10652":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:47667:9679":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:8428:9239":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:10581:7626":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"6:4518:5176":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"20:4069:5728":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:42350:6716":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:4231:9731":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"6:4638:5184":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:7295:6577":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:2355:2230":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:1069:9068":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:30361:6596":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:0:1409":{"crate_id":1,"path":["std"],"kind":"module"},"17:13043:8030":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:42673:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:8865:6646":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:13604:8216":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"5:276:2507":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:5589:9205":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"20:3348:5187":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Chdr"],"kind":"struct"},"6:4944:10739":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"6:1649:3764":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:925:11304":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:11290:19670":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:9232:6719":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:21908:9282":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:14259:8405":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:20632:29414":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:4958:11401":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"16:3025:8519":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:12008:1520":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:2779:8806":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:11979:7814":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"11:311:10617":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"5:2131:7157":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"6:5793:5730":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"14:40:7781":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:9195:10991":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:4325:7197":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:9163:9868":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"16:8068:8947":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"16:7505:8512":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"20:4925:6227":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:10458:7607":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"20:3032:5158":{"crate_id":20,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:21239:2255":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:10327:9252":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:12840:7994":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"20:3209:5176":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"6:6648:3713":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"16:4868:8547":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"6:4483:5172":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:4022:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:43664:9251":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"5:1138:32609":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:11520:7417":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:12003:751":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:8206:2284":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:20907:11438":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"2:42150:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"20:3137:5167":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:45570:9583":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:9103:219":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:11788:16590":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:46619:9636":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:10079:2285":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:46095:9608":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:1051:9063":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:12878:7998":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:13368:8106":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:6239:32742":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"18:624:32761":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:43764:9543":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:9224:6716":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:39305:199":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"5:4350:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:6834:16697":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"20:563:3001":{"crate_id":20,"path":["libc","unix","sigval"],"kind":"struct"},"1:2357:2231":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:13914:8289":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:6243:7233":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:43518:9536":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:12994:8017":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"6:7517:5223":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:11276:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:1973:7405":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:40162:9461":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:1629:589":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"5:3737:9155":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:5389:9740":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"18:80:23617":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"5:7284:6646":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:40462:9212":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:40424:9480":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:9887:7550":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"16:5775:8578":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:21999:9290":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"6:4872:10695":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"5:6308:11516":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:13803:8261":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:39430:9320":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:13448:8168":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"6:6598:10850":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:11371:7726":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:40524:9215":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"20:557:3000":{"crate_id":20,"path":["libc","unix","linger"],"kind":"struct"},"17:14177:8377":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:11578:9763":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:2748:2558":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"6:4496:5174":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:41786:2333":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"20:5004:6231":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:43347:9521":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:890:7160":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:40363:9473":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:6589:2367":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"11:760:7177":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:21037:11430":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"2:2846:16721":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:46141:9609":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:8857:9853":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"18:690:7371":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:7998:9778":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:400:7397":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"15:306:18696":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:498:7157":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"20:4943:6228":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"5:7440:7173":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"2:44060:9560":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"16:6939:19607":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:42618:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"6:7505:5221":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:4734:11371":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:22529:9307":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:44192:9270":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:3078:11319":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:6460:2366":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"5:5925:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:3151:234":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:1732:16744":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:40904:2313":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:10544:7620":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:30321:6594":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:2265:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:3141:16724":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:8550:2334":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:7367:27376":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"20:4919:6226":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:20813:2255":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"10:0:2091":{"crate_id":10,"path":["adler"],"kind":"module"},"1:7993:9777":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:13620:8219":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:10994:7683":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"6:4469:5170":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"20:4209:5742":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"5:2243:10886":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:11049:7256":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:2804:8807":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:44476:205":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"20:1479:3763":{"crate_id":20,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"6:4716:5193":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:2208:2227":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"6:4685:5190":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:42228:2355":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:6351:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:14329:8420":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:11553:9264":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"16:2803:8492":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:11104:9849":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"6:6565:2916":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:10339:7593":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"6:5979:5188":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:9806:19681":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"2:44303:10981":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:42646:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"6:4949:5153":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:5805:5732":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"16:55:8934":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"16:7289:8829":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"6:4420:5164":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"5:7367:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"18:727:7381":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:12457:7922":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"20:4272:5764":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:9472:2247":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"5:1464:9054":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:13639:8220":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"16:7553:8885":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:8748:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"20:3086:5039":{"crate_id":20,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:2152:590":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:10249:7579":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:12579:7938":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"20:3104:5163":{"crate_id":20,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:46361:9616":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:10231:11412":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"14:160:9043":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"11:2130:18665":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"2:41717:6705":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:1578:9075":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:13707:8234":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:3988:11364":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:8659:19660":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"5:3212:9073":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:9442:32755":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"6:4842:5737":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:25984:9181":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"5:1482:9070":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"6:532:2996":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"16:4396:8533":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"6:6671:3685":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:5900:5742":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:12757:7978":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:10030:2333":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:8475:2330":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:9875:7547":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:9655:7533":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:12905:8002":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:12671:7950":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"16:5843:8590":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"20:5439:6576":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:43682:9252":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:9318:7520":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:40219:29572":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:9939:7556":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:2799:16715":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:3410:2271":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:2757:11421":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:44279:10975":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"1:8003:2299":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"5:3183:32694":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:9108:9754":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:30355:6595":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"5:895:2333":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:8156:2250":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:2488:1946":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:9439:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"15:394:18706":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:3196:16556":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:22397:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:10091:26485":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"16:6864:8763":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:4764:389":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:9882:222":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"6:4862:10689":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"13:226:10612":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:9899:7552":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"16:6915:32745":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:7656:9766":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"6:4413:5163":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"20:5494:6578":{"crate_id":20,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"20:1504:3765":{"crate_id":20,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:42630:8921":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:10785:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"17:14315:8413":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"11:986:9063":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:11250:7714":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"6:62:2602":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"5:4987:2271":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:3179:27135":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:2691:2551":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:504:7400":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:47924:9689":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:21573:29419":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"16:7568:32744":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:3382:2313":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"6:4955:5198":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:42910:9517":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"20:1416:3758":{"crate_id":20,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"5:3142:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:9336:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"5:2960:32206":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:44124:9561":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:20647:29414":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"5:3583:2333":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:10745:10997":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"16:7012:8783":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:39391:2217":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:1755:9183":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"6:6775:6229":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:42871:9510":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"20:3111:5164":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"16:6142:194":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:2850:16722":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:12009:1517":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"20:3471:5201":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"18:736:23628":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:2212:2030":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"6:4304:5155":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"20:4185:5739":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:10799:7666":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"3:0:443":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"17:10303:7466":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:47851:9683":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"20:3154:5169":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:5080:10773":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:8325:9833":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"16:4900:8548":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:12394:7911":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:40207:9466":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"11:736:9055":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:11696:7753":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:41465:11356":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:8983:9858":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:22694:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"17:10444:7606":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"18:660:7362":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:22082:10898":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"15:288:18695":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:3513:7160":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"1:4815:11370":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:12354:7903":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:7599:10880":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:12161:7859":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:44315:10984":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:13029:8029":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:43728:9542":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:11199:7709":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:13557:8208":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"16:6057:18714":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:6536:2363":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:10721:9880":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"20:1386:3755":{"crate_id":20,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"18:590:7349":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"20:3065:5160":{"crate_id":20,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"16:7255:6704":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"20:1398:3756":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:9665:32757":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:4909:11395":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:13749:8248":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"6:541:2997":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"5:5130:2354":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:11940:9899":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:47775:9681":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:9068:10987":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"6:7586:10876":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"16:7693:8506":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"5:7263:9171":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:10403:7603":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:21940:9283":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:47605:9678":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"20:1361:3752":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"11:1822:6646":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"5:1102:32611":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:8168:2253":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"20:1514:3766":{"crate_id":20,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:40047:9450":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:43824:9545":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"20:501:2994":{"crate_id":20,"path":["libc","unix","rusage"],"kind":"struct"},"6:1673:3766":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"6:4770:10657":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"20:3127:5166":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:2313:188":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:9230:194":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:11793:9239":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:4383:9733":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:3810:8528":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:43995:9557":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"20:3363:5189":{"crate_id":20,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:13830:8265":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"20:4797:2874":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:500:2993":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"5:1776:7177":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"17:9485:32749":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:11991:419":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:936:9059":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"6:6711:6225":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:6250:8676":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:11189:7707":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"16:4996:8551":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:11144:7702":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:9127:2261":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:11329:19671":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:2627:2297":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:1572:9074":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:1037:8792":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"20:0:825":{"crate_id":20,"path":["libc"],"kind":"module"},"5:2959:6693":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"9:177:18657":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:11328:9762":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"20:3433:5197":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"6:1500:3751":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"5:1503:9053":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:12539:7932":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:4028:11366":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"20:4151:5721":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:11604:9246":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"6:1575:3758":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:4113:9194":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:12011:1519":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:11642:7746":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:3495:2254":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"6:4315:5156":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"16:5959:8606":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:22496:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"17:0:2097":{"crate_id":17,"path":["object"],"kind":"module"},"16:5100:8554":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"16:4753:8543":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"20:5455:5221":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:5737:5706":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:11056:19792":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:7277:2506":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"5:5841:7160":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"5:4236:2333":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:11248:7257":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"17:12646:7948":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:43852:9266":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:9234:6720":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:10529:7616":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"6:568:3001":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"11:805:11304":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"6:4489:5173":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:21924:10895":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:1060:9064":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:21:686":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"17:13683:8232":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"20:2982:5154":{"crate_id":20,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:40136:9458":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"20:4910:6225":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"20:4120:5733":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"20:134:2678":{"crate_id":20,"path":["libc","unix","FILE"],"kind":"enum"},"18:96:23618":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:14341:8422":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:8872:19666":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:3930:11361":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"6:4606:5181":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:4887:10700":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"5:6800:7189":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"1:582:11293":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:44486:211":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"1:11992:1536":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"16:7240:32746":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:10377:7600":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:1972:185":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"16:2663:8486":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"16:6456:8500":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:44287:10977":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:42892:2329":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:12626:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:11032:7254":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:10013:7560":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:13083:8035":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:40931:9226":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"18:671:7368":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:3998:9192":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:3317:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"17:10323:7587":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"16:4564:8538":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:12014:1574":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"16:3894:8530":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:41875:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:9872:2255":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:45724:9589":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"6:4695:5191":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:2565:7211":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:44307:10982":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"16:5639:8568":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:13456:8169":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:8136:2312":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:7869:2245":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"7:32:18576":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:13795:8259":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"14:202:16604":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:6156:7239":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:1917:9187":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"18:755:7386":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"6:5051:10765":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"5:1257:8792":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:10775:2248":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"17:10051:7563":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"20:4138:5735":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:7278:10857":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:47950:9691":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:14205:8384":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:10319:26483":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"14:165:18676":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"16:5673:19600":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:9274:2284":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:2915:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:41667:9069":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:13957:8303":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"6:6841:10854":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"6:4740:5196":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"20:3119:5165":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"5:1273:9064":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:47275:9675":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:14007:8314":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:4738:11374":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:12010:1518":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:11164:7704":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:410:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:43782:9544":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:10266:7581":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:44291:10978":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"20:4095:5730":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:6044:10836":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"20:1410:3757":{"crate_id":20,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:7799:8902":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:1709:3771":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"5:5364:16575":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"11:1818:2333":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"16:6317:8680":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"20:1490:3764":{"crate_id":20,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"9:393:18591":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:864:9054":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:11808:16588":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:21683:2255":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:22037:29562":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:900:7177":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"5:4004:7160":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:8384:11405":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:1920:658":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"1:10814:28936":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"17:12727:7959":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:5625:7234":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:9188:7391":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"11:399:32725":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"18:699:7372":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:41743:210":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"6:4456:5168":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:8236:11355":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:40882:9221":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"2:7231:16702":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:11569:9265":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:11109:7698":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:45865:9595":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:5409:9741":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:40056:9451":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:8903:11416":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:2510:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"20:5467:5223":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:9479:9242":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:653:3023":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:10080:7566":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:9706:7534":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"16:2314:8465":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:11020:7685":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:41599:181":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:12982:8015":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"20:3443:5198":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:4664:5186":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:1666:1096":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"16:6175:8642":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:5882:5739":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:5829:5734":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:40664:2283":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:10845:7670":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"20:3092:5162":{"crate_id":20,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:46919:9642":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:7657:11308":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:41537:9499":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"5:2035:2298":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:11924:7806":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"16:6018:19603":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"16:3295:8523":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:1561:7177":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"6:4328:5157":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:7705:11299":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:40372:9474":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:40249:1811":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"5:4395:2271":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:2695:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"16:5567:8501":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"11:723:9054":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:8307:9831":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"11:2049:9063":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:43287:9519":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"16:2497:8479":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:7651:9764":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:12921:8004":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:47417:9676":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"16:2759:8490":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"6:6688:3688":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:13055:8031":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"16:6128:8635":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:4736:11373":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"16:6396:8689":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"16:6850:8761":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"6:7272:6576":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:11973:26472":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:45795:9592":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:11571:9763":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:10936:9744":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:12303:7890":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:20662:29630":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"20:3461:5200":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:20998:16733":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"1:8273:9730":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:12174:7860":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:14359:8428":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"6:7546:5225":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"16:7707:8892":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:10863:7532":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"16:4965:8550":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:3504:26930":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:5375:9739":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:12502:7928":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:21122:11429":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"7:79:18583":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"6:5025:10748":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"6:5068:10768":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"11:1068:9066":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:1550:2333":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:12004:748":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"18:515:7336":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:11496:9729":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:10914:16584":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:10966:9851":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:44592:9581":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:40235:9467":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:43546:2284":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:44172:9570":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:41953:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:9223:7392":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:5494:9744":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:5440:9743":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:9693:7216":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"18:0:2098":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:720:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"5:2970:32205":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:12346:7901":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:4050:11369":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:3257:2308":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:44138:16603":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:9604:7532":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:12815:7990":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:4042:11368":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:9561:7531":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"6:5890:5740":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:4814:8545":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"18:582:2565":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"6:4754:5197":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:12711:7954":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"16:7494:8883":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"18:507:7339":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"11:1501:18671":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"6:6156:5765":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:3438:1947":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:9399:7528":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:13427:8158":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:5618:7233":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:10923:9774":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:39265:200":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:11045:7687":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:8108:2249":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"16:2352:8473":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:14227:8390":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:6064:7235":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"11:1048:32718":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"16:2567:8482":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:7227:16703":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"6:5775:5729":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"5:676:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:43578:9249":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"6:6834:10851":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:1772:9716":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:7731:9771":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"1:12006:750":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"5:7414:9175":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:13109:8037":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"6:1590:3759":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:8189:2282":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:10148:7572":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"16:2737:8489":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:9431:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:13574:8210":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:20619:2565":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:7588:7248":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:9048:7387":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"11:1517:9071":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:10786:7665":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:9228:6718":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:9614:32748":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"16:4536:8537":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:39465:9322":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"16:6372:8499":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"16:7631:8890":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:39638:24526":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:1636:6591":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:1884:9721":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:11955:7810":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"20:590:3005":{"crate_id":20,"path":["libc","unix","protoent"],"kind":"struct"},"20:3215:5177":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"16:5793:8582":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"16:6986:8782":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"6:4729:5195":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"5:4076:9069":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:9678:7211":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"5:6441:7160":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"20:4229:5743":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:47898:9687":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"15:327:18700":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:11155:7703":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:12148:7855":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"11:1103:9067":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:2398:1944":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:5383:2271":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"6:4929:10730":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:11454:7730":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:3296:2304":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:42600:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:10355:9254":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:12333:7899":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"17:10945:7679":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:2551:2295":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:6983:2312":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"6:5967:10807":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:4254:207":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"16:6667:8730":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:40401:9202":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"6:6726:6227":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:44537:9577":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"16:2541:8481":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"6:1569:3757":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"5:7184:9153":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:12077:7831":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"6:4374:5160":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:12412:7912":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"6:5987:5187":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:40510:7359":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:42109:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"16:7739:8504":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"20:495:2993":{"crate_id":20,"path":["libc","unix","rlimit"],"kind":"struct"},"18:719:7378":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:5302:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:11996:1387":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"17:13513:8203":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:13719:8237":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:21248:9279":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:13999:8312":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"5:685:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"16:5590:8503":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:11411:7259":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:41659:2333":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:12691:7953":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:42364:6717":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:12592:7940":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:43560:2285":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"5:7398:29572":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:9475:7529":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:3513:2252":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:2243:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"20:5447:6577":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"12:0:2093":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"16:5720:8574":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:7015:7244":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:6140:7221":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:12435:7915":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:10161:9247":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:2745:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:46495:9619":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"6:1696:3769":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:6805:6231":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"20:4773:2916":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:2832:8812":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"6:6850:6234":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"11:2194:10624":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:47069:9643":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:4038:11367":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:41448:9232":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"11:365:7134":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"16:4928:8549":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:8958:2359":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:7123:28919":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:45616:9585":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"20:5417:2949":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:40485:9483":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"5:1523:9152":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"20:4131:5734":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:11434:9727":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:1774:9717":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"16:6516:8703":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"16:6332:8682":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"5:2962:10883":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"16:7539:8514":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:11313:9760":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"18:599:32759":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:43843:9547":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"20:549:2999":{"crate_id":20,"path":["libc","unix","winsize"],"kind":"struct"},"11:119:7130":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"11:793:9070":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:45847:9594":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:13787:8257":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:46217:9612":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"5:6771:7175":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"15:0:2095":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:8972:9855":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:2602:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:3181:29918":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:3395:7415":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:595:3005":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:3670:11357":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:11043:7255":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"9:357:18605":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"14:7:9043":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"16:6214:8663":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:12826:7992":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"6:5877:5738":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:42357:6715":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"16:6303:8497":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"6:4401:5162":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:11872:7795":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:43814:2281":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"17:11234:7712":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:261:7395":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"16:7833:8906":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:14150:8365":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"16:8043:8944":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:40678:9217":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:10981:7682":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:4633:10484":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"17:12318:7894":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"20:3334:5186":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:6420:1948":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"4:0:2088":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"11:630:2333":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:9025:9863":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:30130:11358":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:11220:19793":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:10948:26469":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:10330:7590":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"5:3204:9075":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:11767:7766":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:10750:2244":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"2:22661:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"20:3451:5199":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"13:110:32726":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:12936:8008":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"6:4879:1010":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"6:1527:3753":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"16:2611:8484":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:8794:19664":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"6:123:2679":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"5:7451:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:3156:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:12254:7865":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"20:2995:5155":{"crate_id":20,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:434:7399":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:6651:6652":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"9:237:2329":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:562:3000":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:2507:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:45825:9593":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:32109:10623":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:40202:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"5:6639:7143":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:911:9052":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"6:4616:5182":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"11:817:9059":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:4311:9732":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:13862:8274":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:11210:7710":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:639:11296":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"5:7339:2223":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:22430:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"16:2926:18741":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"5:2966:32204":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"20:4203:5741":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlattr"],"kind":"struct"},"17:9926:7554":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"6:1520:3752":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:21685:11428":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:20951:11439":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"6:4650:5185":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"9:52:18608":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:12012:1516":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:45746:9590":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:5471:2271":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:43458:9531":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:40410:9477":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:20677:29628":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:10509:2305":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"6:4543:10648":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"20:568:3002":{"crate_id":20,"path":["libc","unix","itimerval"],"kind":"struct"},"17:10161:7573":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"20:3166:5171":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"6:7552:5226":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:2355:189":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:2694:225":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"11:1826:7160":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"5:2049:9155":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"5:778:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:6291:206":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:3217:2306":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"16:2874:8495":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:352:9703":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:13991:8311":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:4619:11365":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:4535:10643":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"20:3019:5157":{"crate_id":20,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"16:5737:19601":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"20:542:2998":{"crate_id":20,"path":["libc","unix","pollfd"],"kind":"struct"},"5:5977:17022":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"5:7201:9170":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:12377:7908":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:13303:8055":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"16:2443:8477":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:8291:9829":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"16:6438:8692":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"16:6724:8743":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"16:8166:8958":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:8199:2283":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"16:4506:8536":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"5:1514:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:10450:7251":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"17:11600:19674":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:4811:802":{"crate_id":2,"path":["core","iter"],"kind":"module"},"20:3238:5179":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:10110:7570":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:39369:203":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"6:6589:2874":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:6028:10831":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:4389:1956":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:14417:8438":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:7529:9896":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:10313:9251":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:9595:7207":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"16:3867:8529":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"6:4833:5736":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"20:521:2995":{"crate_id":20,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"16:7679:8516":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:1746:10893":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:13757:8251":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:8841:19665":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:11967:7811":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"6:6077:5743":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:5058:5200":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:1820:9186":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:8740:19662":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"18:681:7369":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:41550:9730":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"20:3147:5168":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"5:6957:7193":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"5:3596:9069":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:4151:11380":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:13870:8275":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:9409:32750":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"5:7351:2224":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:21054:2255":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"6:4917:10721":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"20:3286:5182":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"5:7547:7181":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:10175:7532":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:12035:7826":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"6:1595:3760":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"20:4806:6222":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"18:636:7361":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:5849:5721":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:22727:9308":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:39458:6726":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"2:2842:16720":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"5:5614:7175":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"20:3276:5181":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:8544:2333":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:30449:29575":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"16:6931:8768":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"11:1845:9074":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:8841:9851":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:11748:2337":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"11:844:9062":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:2246:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:4550:10650":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"16:4698:8541":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:43448:9530":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:2821:16718":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"16:2689:8487":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:9661:7210":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:4697:11385":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"5:878:7151":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"20:3160:5170":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:30555:29570":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:14:2198":{"crate_id":2,"path":["core","write"],"kind":"macro"},"6:5008:5202":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:20679:29633":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:7754:9774":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:40453:9211":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:1757:612":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:12016:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:43356:9523":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:9850:19682":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:7907:9776":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"6:5836:5735":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:48003:9694":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"20:4974:6229":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:41684:6704":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"3:234:210":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:9190:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:11136:10984":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"1:5554:2727":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:3936:11360":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:12952:8009":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"20:1444:3761":{"crate_id":20,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:44550:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:11530:9263":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:12966:8011":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"6:1536:3754":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"6:6171:10844":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:4409:2390":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:5557:11410":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:8322:11409":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"16:0:2096":{"crate_id":16,"path":["gimli"],"kind":"module"},"16:8021:8943":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"11:332:7132":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:8801:186":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:11591:7707":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"20:4278:1749":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:6804:11423":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:13923:8290":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:45949:9598":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:12589:7221":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:47973:9692":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:44012:9558":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"11:836:9061":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:7043:2349":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"16:6347:19604":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:2164:7412":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:877:9055":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:2767:8802":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:2513:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"16:149:7126":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:20865:16733":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"16:2900:8496":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:1184:7404":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:2164:16734":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"1:10512:2307":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"2:45764:9591":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:7758:9311":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"17:13179:8053":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"6:4436:5166":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:7882:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"6:6625:2783":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:13854:8273":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:4469:11385":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"20:582:3004":{"crate_id":20,"path":["libc","unix","servent"],"kind":"struct"},"20:2976:5153":{"crate_id":20,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:44529:9575":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"6:4506:5175":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:4167:11382":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:9032:7519":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:2318:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"16:6554:8705":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:3456:2251":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"16:2465:8478":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:40889:1948":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:846:9069":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:46263:9614":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"20:3320:5185":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"20:4107:5732":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"20:536:2997":{"crate_id":20,"path":["libc","unix","iovec"],"kind":"struct"},"16:6502:8701":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:40041:9191":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:11348:16591":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:6036:10833":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:11623:7743":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:8949:19669":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:8351:9734":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"20:5019:6232":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:40084:9454":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"20:1377:3754":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:13894:8282":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"6:5799:5731":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:3966:11362":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:14236:8392":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"16:5704:8572":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:4180:11383":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:10597:7628":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"6:1545:3755":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"16:7525:8513":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:8329:2783":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:39451:9321":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"17:9153:7390":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"18:538:7346":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:40143:16662":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"16:7407:8610":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"0:72:1690":{"crate_id":0,"path":["num_cpus","get"],"kind":"function"},"11:644:9069":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"16:6977:8779":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:4908:10715":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"20:3006:5156":{"crate_id":20,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:40341:2282":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:46855:9640":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"18:531:7343":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"5:1118:32202":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:43110:10974":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"16:5553:8498":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:40332:9471":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"6:6796:6230":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:11726:7757":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:11943:7807":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"5:7384:9172":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"5:7255:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:8299:9823":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"11:1121:9068":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"16:8105:8952":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"16:7648:198":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"20:1543:3770":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:8890:9854":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:11318:16790":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:9013:9861":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:10499:7611":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"2:40923:9224":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:8899:19667":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:11007:7684":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:9990:7559":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:46415:9618":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:46731:9638":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:20660:29632":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"16:7753:8894":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"6:0:825":{"crate_id":6,"path":["libc"],"kind":"module"},"1:11995:312":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"5:7233:32688":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:2743:2556":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"18:481:7337":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:40282:7199":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:2783:11420":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:5965:7233":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"6:7540:5224":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:10621:7630":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"6:4428:5165":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:41836:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:8280:10985":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:5748:2357":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:11155:2261":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"17:9296:7396":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:11990:945":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"16:4323:8532":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:7518:7401":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:11774:7263":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:7329:2505":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:10199:9248":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:9571:32756":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"6:4395:5039":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"6:6720:6226":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:4824:10681":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"6:4723:5194":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"16:2373:8474":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"6:4556:5178":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:8534:2332":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"5:2141:9156":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:3520:1945":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"16:2637:8485":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:10123:7552":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:22053:29566":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:10351:7597":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:12017:7818":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:10555:7252":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:4263:9197":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"0:0:1830":{"crate_id":0,"path":["num_cpus"],"kind":"module"},"20:4101:5731":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"20:1635:3826":{"crate_id":20,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:12659:7949":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"5:1442:6646":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:12618:7943":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:11568:19673":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"16:6160:8640":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"5:2223:32687":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"20:1550:3771":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:46573:9635":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:1681:3767":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:4291:5154":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"20:3408:5194":{"crate_id":20,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"16:2421:8476":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"18:521:23630":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:4335:6726":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:22115:11359":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:10883:7672":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"11:2168:10619":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:2762:8805":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"20:3355:5188":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Chdr"],"kind":"struct"},"17:10361:7598":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:13937:8297":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:48026:9695":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:8219:2281":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"11:2201:2223":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:2787:11422":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:9518:7530":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:13332:8075":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:3168:16639":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:2910:2287":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:11542:7735":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:47729:9680":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:13566:8209":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:11428:7729":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"6:7250:2949":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:3735:9728":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:5994:10814":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:8605:19646":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"6:1631:3762":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"20:4904:6224":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:14037:8320":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:11346:11001":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:14216:8389":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"20:4781:3684":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:40155:9460":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:46392:9617":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:8916:30294":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:10280:7582":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:4491:11386":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:3162:16640":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"16:3058:7424":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:47813:9682":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:10272:9250":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:39281:198":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:12007:746":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:2897:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:44149:9562":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:11791:7780":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:2349:182":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:45594:9584":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:9840:7544":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"16:5994:19602":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"16:5398:7519":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"6:1733:3773":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"20:1522:3767":{"crate_id":20,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:21215:2255":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:32236:2559":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"20:3197:5175":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"20:3380:5191":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:7384:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:14301:8411":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"20:4847:3713":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:2826:8811":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:7899:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"16:5882:8593":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"6:6022:10828":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"16:6900:8765":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:2878:7230":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:7842:2246":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:45884:9596":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"11:749:7160":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:12089:7832":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:11992:7816":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:6740:16705":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:39164:16638":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:42695:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:41675:6646":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:13778:8256":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"16:6484:8693":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:4629:10480":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:7306:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"16:6763:8755":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:44567:9580":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:1543:2271":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:5122:191":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"5:1302:9068":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:6889:7243":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"6:7529:10866":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:9734:7535":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:587:3004":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:10471:7608":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"1:6424:2360":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:527:7224":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"17:13069:8032":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:5045:9738":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:5916:8450":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:12458:9275":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:7523:10865":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:46885:9641":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"6:1663:3765":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"20:469:2989":{"crate_id":20,"path":["libc","unix","group"],"kind":"struct"},"2:46025:9606":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:12014:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:7720:11300":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"20:55:2602":{"crate_id":20,"path":["libc","unix","DIR"],"kind":"enum"},"2:42031:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:10302:9743":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"10:36:10626":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"20:1531:3768":{"crate_id":20,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:8911:29394":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:46314:9615":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:11127:7733":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"16:7433:8870":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:2205:2226":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:6637:217":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:2838:16719":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:39250:9315":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:2693:226":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:7852:2244":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"16:2857:8494":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"6:1495:3750":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"5:7531:7177":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:40913:7205":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"6:6136:1749":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:8225:9823":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:2913:210":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"5:782:7146":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:43338:9520":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"6:4380:5161":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"16:7445:8871":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:9744:32751":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"6:6008:10825":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"14:31:9043":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:11493:9260":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:39325:202":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"5:6487:7143":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"16:5342:8556":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"20:3425:5196":{"crate_id":20,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:43413:9469":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:5990:9207":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"16:2962:18742":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:41992:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:10840:9255":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:10390:7602":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:10223:7578":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"5:7476:9179":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:551:9706":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:9118:7389":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"5:5771:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"5:261:7143":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"20:1350:3750":{"crate_id":20,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:8265:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:8561:2335":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"11:403:32720":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:11334:9257":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"6:4963:5199":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:11416:7728":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:32149:9312":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"1:942:9061":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"5:6560:6646":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:41914:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:8935:11417":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:44494:195":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"20:3180:5173":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"6:4524:5177":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"16:4841:8546":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:6188:9750":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"16:4441:8534":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"6:6618:6223":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:2519:238":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"1:8212:2285":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"20:527:2996":{"crate_id":20,"path":["libc","unix","hostent"],"kind":"struct"},"1:5425:9742":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:1557:7160":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:7654:2336":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"16:2825:8493":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:22595:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"17:2105:19725":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"6:4794:10670":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:8743:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:11118:7699":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:11173:10999":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"17:13155:7707":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:9968:9496":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"5:4365:7167":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"11:2180:10621":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:12552:7638":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"18:652:7339":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:2705:2552":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"16:8125:8953":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:7859:2248":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1:856:6646":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:11498:7733":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"16:7073:19608":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"6:4446:5167":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"6:4973:5201":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:11241:19794":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"5:5956:2354":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:45640:9586":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"11:667:9052":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:256:7394":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:8321:11302":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:45902:9597":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:13771:8254":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:10072:9718":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:11802:7374":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"20:5461:5222":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"11:2033:8792":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:2925:2502":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:2791:16714":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"16:8176:19613":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:7923:2298":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:11034:7686":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:44355:9572":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:40692:9218":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:43387:9526":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:4159:11381":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:10812:7668":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:2700:228":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:44283:10976":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:12384:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:3647:6646":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"6:4984:10741":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:4186:6725":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"6:7609:6578":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:30377:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"16:5067:8553":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"20:1355:3751":{"crate_id":20,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:2855:16723":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"6:6130:5764":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:8542:19648":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"16:2589:8483":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:10969:7681":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:9179:210":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"1:11962:11301":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:7631:2255":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"6:6820:6232":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:4436:6728":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:8711:19661":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:21855:9281":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:8849:2333":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"11:97:10613":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:3176:24373":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"20:3296:5183":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:8323:9238":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"20:3401:5193":{"crate_id":20,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:6787:29872":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:2383:2241":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"14:221:9050":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"14:215:9048":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"9:450:18590":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:40128:9191":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:2590:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:10234:9249":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"5:1011:7143":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:7558:10870":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:12002:647":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:3215:2305":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"11:285:10614":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:42655:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"5:7427:9177":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:11265:9755":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:21802:9280":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"6:554:2999":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:12015:1140":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:9093:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"9:507:9134":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"11:1611:7136":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:14189:8380":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:43628:9540":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:4563:11391":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:12479:7923":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:8990:24129":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:42371:6718":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"10:44:9079":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"16:6470:8517":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"16:3580:8525":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"6:1506:10638":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:12578:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:9016:7518":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"16:7061:8791":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:44299:10980":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"14:187:18683":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:13673:8231":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:919:9056":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:4463:5169":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:12406:29797":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:10407:9848":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:11859:16596":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:3182:27145":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:42189:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"20:4870:3685":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:8924:19668":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:14395:8432":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:7632:9705":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:11354:7486":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:44295:10979":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:42590:10966":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:2816:16717":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"5:7465:9178":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:13096:8036":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:44367:16829":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"20:1472:3762":{"crate_id":20,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:8632:19659":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:13548:8204":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:11084:7689":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:13016:8028":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:9716:32753":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"16:2332:8467":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:4129:28915":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:14054:8327":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:5981:206":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:39203:16559":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"20:1436:3760":{"crate_id":20,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:46171:9610":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:11340:11000":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:3255:2307":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"5:7223:7155":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"16:6386:8688":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:4045:16555":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:10763:9885":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:46239:9613":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:40898:9222":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"5:3238:9076":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"6:1513:10641":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:5818:5733":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:13964:8304":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:13140:8043":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:358:9704":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:2373:2236":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:21136:9279":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:11905:7801":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"20:5064:6235":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:11957:27365":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:10520:7615":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"16:4785:8544":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:8402:2328":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"20:1537:3769":{"crate_id":20,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:13847:8272":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"6:1690:3768":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:477:7223":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:12001:645":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:22103:9303":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"6:1603:3761":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"16:5414:8557":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:13971:8305":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:39347:201":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:41408:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:40494:9213":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:13697:8233":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"16:5972:8456":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:47527:9677":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"5:5368:16576":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"20:4193:5740":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"20:1574:3773":{"crate_id":20,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:40120:9457":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:10795:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"7:0:1564":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:47909:9688":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"16:6232:8673":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"5:4166:2271":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:5531:9203":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"5:5320:7143":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"16:5382:7518":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"20:3370:5190":{"crate_id":20,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:0:497":{"crate_id":2,"path":["core"],"kind":"module"},"5:3178:9074":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"16:7099:9865":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"20:4887:3688":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:11192:9754":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"5:4196:2271":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"5:1473:9055":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:3186:7413":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:2587:2288":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"16:6531:7129":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"20:4174:5737":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlmsgerr"],"kind":"struct"},"5:1411:2333":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:13659:8228":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:906:9070":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"11:657:6646":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"20:574:3003":{"crate_id":20,"path":["libc","unix","tms"],"kind":"struct"},"2:21114:2255":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:8452:2329":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:3519:7416":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"11:1858:9076":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:2690:2499":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:634:9710":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:9821:7542":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"16:2715:8488":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:4694:11396":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"20:3187:5174":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:13905:8286":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"5:1492:9052":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"5:822:7149":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:7569:7246":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:11564:29296":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"16:5807:8583":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:12769:7980":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"11:1852:9075":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:9033:9865":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:44334:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:13591:8211":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"16:7463:8879":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"6:1702:3770":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"6:6015:10827":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"20:3489:5203":{"crate_id":20,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:43981:9554":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:13435:8161":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"6:1638:3763":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"5:7247:6646":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:12186:7863":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:43426:9528":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"11:1027:18670":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:22463:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:10805:2250":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"6:5920:10782":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:40312:9469":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:2773:16712":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:9185:26980":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"6:579:3003":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"6:4848:5741":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:12605:7941":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:8771:19663":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"16:2293:18715":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:11271:9892":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"9:486:18589":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:11832:7784":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:43877:9457":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:3294:2303":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:12053:7827":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"5:3671:7143":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:10832:7669":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"16:2519:8480":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"6:1911:3826":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:13492:8198":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"16:3635:7428":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:9465:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"6:6868:6235":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:5774:2358":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:30391:29554":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"11:798:9056":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"5:207:7141":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:10568:7624":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:7726:9715":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"17:11467:7732":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"16:5940:8599":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"5:1288:9063":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:10931:7675":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:14026:8319":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"5:629:9147":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"16:7484:8882":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:40169:16663":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:10906:7673":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:3732:9727":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:23174:9180":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"5:7193:6646":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:45694:9588":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:1554:6646":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:44087:9269":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:40292:9468":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:44311:10983":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:40382:9476":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"6:119:2678":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"18:609:7355":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:10066:7564":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"16:3744:8526":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:3373:16621":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"1:11994:1058":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:11815:7781":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:21116:11427":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"8:0:2089":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"11:1012:9064":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:10740:10995":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"20:1558:3772":{"crate_id":20,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"16:2399:8475":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:12005:749":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:10430:7605":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"6:4895:10705":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:11098:7694":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"6:4781:10665":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:43504:9533":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:49871:11442":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"18:614:32760":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"16:7515:8884":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:43114:9243":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"16:6692:19606":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:8919:11415":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:4938:10736":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"}},"external_crates":{"20":{"name":"libc","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}