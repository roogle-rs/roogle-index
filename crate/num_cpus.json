{"root":"0:0:2544","crate_version":"1.16.0","includes_private":false,"index":{"2:13873:26135":{"id":"2:13873:26135","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13878:26312":{"id":"2:13878:26312","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1148:38224"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13763:2774":{"id":"2:13763:2774","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13778:26363":{"id":"2:13778:26363","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11576:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11576:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13823:26398":{"id":"2:13823:26398","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"Returns an iterator over substrings of the given string slice, separated\nby a pattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12642:492","self::pattern":"2:13452:17987","str::rsplitn":"2:13825:26400"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44837:10072","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:10056","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13881:12532":{"id":"2:13881:12532","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Returns an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5069:12532"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:45041:10003","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13871:26134":{"id":"2:13871:26134","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13849:33827":{"id":"2:13849:33827","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5715:34547":{"id":"5:5715:34547","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:10056","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13789:10088":{"id":"2:13789:10088","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12642:492"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44703:10080","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13787:26392":{"id":"2:13787:26392","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divides one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13786:26391"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42733:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13793:31670":{"id":"2:13793:31670","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13792:31669"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:45016:10265","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5717:34548":{"id":"5:5717:34548","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13782:33817":{"id":"2:13782:33817","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12648:1771","str::slice_mut_unchecked":"2:13783:33818","crate::ops::Index":"2:40276:12560"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13866:33833":{"id":"2:13866:33833","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12642:492","self::pattern":"2:13452:17987"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:10056","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13459:10056","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13476:17989","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5729:26132":{"id":"5:5729:26132","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13875:26130"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13882:33835":{"id":"2:13882:33835","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Returns an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5066:33835"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:45050:10167","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5711":{"id":"5:5711","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5712:34546","5:5713:7333","5:5715:34547","5:5717:34548","5:5725:34549","5:5726:34550","5:5727:3045","5:5728:26133","5:5729:26132"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13794:2690":{"id":"2:13794:2690","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"Returns an iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44987:3015","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13770:26303":{"id":"2:13770:26303","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12975:17990"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13877:26311":{"id":"2:13877:26311","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1148:38224"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13761":{"id":"2:13761","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13762:1027","2:13763:2774","2:13764:33813","2:13765:33814","2:13767:33815","2:13770:26303","2:13771:33816","2:13772:352","2:13773:2455","2:13774:2417","2:13776:26362","2:13778:26363","2:13780:26364","2:13782:33817","2:13783:33818","2:13784:26387","2:13785:26388","2:13786:26391","2:13787:26392","2:13789:10088","2:13790:10274","2:13791:7375","2:13792:31669","2:13793:31670","2:13794:2690","2:13795:33819","2:13796:31671","2:13797:26404","2:13799:26405","2:13801:26406","2:13804:2758","2:13807:7384","2:13811:2693","2:13813:26394","2:13815:26396","2:13818:33820","2:13820:33821","2:13823:26398","2:13825:26400","2:13828:26402","2:13830:26403","2:13833:2924","2:13835:33822","2:13838:33823","2:13840:33824","2:13843:2697","2:13845:33825","2:13847:33826","2:13849:33827","2:13850:33828","2:13851:33829","2:13854:33830","2:13856:2739","2:13858:26407","2:13861:33831","2:13864:33832","2:13866:33833","2:13869:2537","2:13871:26134","2:13872:26307","2:13873:26135","2:13874:26131","2:13875:26130","2:13876:26310","2:13877:26311","2:13878:26312","2:13879:33834","2:13881:12532","2:13882:33835","2:13883:27588"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5712:34546":{"id":"5:5712:34546","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:299:3248","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:299:3248","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13850:33828":{"id":"2:13850:33828","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5728:26133":{"id":"5:5728:26133","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13874:26131"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13854:33830":{"id":"2:13854:33830","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12642:492","self::pattern":"2:13452:17987"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:10056","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13765:33814":{"id":"2:13765:33814","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13872:26307":{"id":"2:13872:26307","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40629:17860","Self::is_ascii":"2:13871:26134"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42733:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40629:17860","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5727:3045":{"id":"5:5727:3045","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13815:26396":{"id":"2:13815:26396","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"Returns an iterator over substrings of the given string slice, separated\nby characters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:13452:17987","`DoubleEndedIterator`":"2:8393:134","prim@char":"1:12642:492","str::split":"2:13811:2693"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44751:10070","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:10056","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13459:10056","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13476:17989","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13820:33821":{"id":"2:13820:33821","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"Returns an iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:13452:17987","str::split":"2:13811:2693","prim@char":"1:12642:492","str::split_terminator":"2:13818:33820"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44801:10258","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:10056","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13459:10056","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13476:17989","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13801:26406":{"id":"2:13801:26406","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12642:492","self::pattern":"2:13452:17987"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:10056","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13459:10056","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13476:17989","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13811:2693":{"id":"2:13811:2693","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"Returns an iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:13452:17987","`DoubleEndedIterator`":"2:8393:134","prim@char":"1:12642:492","str::split_whitespace":"2:13792:31669","str::rsplit":"2:13815:26396"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44733:3019","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:10056","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13864:33832":{"id":"2:13864:33832","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12642:492","self::pattern":"2:13452:17987"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:10056","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13799:26405":{"id":"2:13799:26405","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12642:492","self::pattern":"2:13452:17987"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:10056","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5725:34549":{"id":"5:5725:34549","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13804:2758":{"id":"2:13804:2758","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42735:203","prim@char":"1:12642:492","self::pattern":"2:13452:17987"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42733:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:10056","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13780:26364":{"id":"2:13780:26364","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11576:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11576:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13835:33822":{"id":"2:13835:33822","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"Returns an iterator over the disjoint matches of a pattern within this\nstring slice, yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:13452:17987","`DoubleEndedIterator`":"2:8393:134","prim@char":"1:12642:492","str::matches":"2:13833:2924"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44955:10262","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:10056","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13459:10056","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13476:17989","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13847:33826":{"id":"2:13847:33826","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13876:26310":{"id":"2:13876:26310","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1148:38224"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2544":{"id":"0:0:2544","crate_id":0,"name":"num_cpus","span":{"filename":"src/lib.rs","begin":[1,0],"end":[485,1]},"visibility":"public","docs":"A crate with utilities to determine the number of CPUs available on the\ncurrent system.\n\nSometimes the CPU will exaggerate the number of CPUs it contains, because it can use\n[processor tricks] to deliver increased performance when there are more threads. This \ncrate provides methods to get both the logical and physical numbers of cores.\n\nThis information can be used as a guide to how many tasks can be run in parallel.\nThere are many properties of the system architecture that will affect parallelism,\nfor example memory access speeds (for all the caches and RAM) and the physical\narchitecture of the processor, so the number of CPUs should be used as a rough guide\nonly.\n\n\n## Examples\n\nFetch the number of logical CPUs.\n\n```\nlet cpus = num_cpus::get();\n```\n\nSee [`rayon::Threadpool`] for an example of where the number of CPUs could be\nused when setting up parallel jobs (Where the threadpool example uses a fixed\nnumber 8, it could use the number of CPUs).\n\n[processor tricks]: https://en.wikipedia.org/wiki/Simultaneous_multithreading\n[`rayon::ThreadPool`]: https://docs.rs/rayon/1.*/rayon/struct.ThreadPool.html","links":{},"attrs":["#![deny(missing_docs)]","#![allow(non_snake_case)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:72:2417","0:73:2435"],"is_stripped":false}}},"2:13785:26388":{"id":"2:13785:26388","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divides one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:13784:26387","str::split_at_mut_checked":"2:13787:26392"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13773:2455":{"id":"2:13773:2455","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12661:1902"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13807:7384":{"id":"2:13807:7384","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42735:203","prim@char":"1:12642:492","self::pattern":"2:13452:17987"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42733:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:10056","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13459:10056","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13476:17989","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13774:2417":{"id":"2:13774:2417","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42735:203"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42733:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11576:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11576:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13795:33819":{"id":"2:13795:33819","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"Returns an iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44997:10263","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13813:26394":{"id":"2:13813:26394","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"Returns an iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nDiffers from the iterator produced by `split` in that `split_inclusive`\nleaves the matched part as the terminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12642:492","self::pattern":"2:13452:17987"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:13239:10067","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:10056","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13767:33815":{"id":"2:13767:33815","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:13765:33814"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13784:26387":{"id":"2:13784:26387","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divides one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_checked":"2:13786:26391","str::split_at_mut":"2:13785:26388"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13828:26402":{"id":"2:13828:26402","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42733:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:10056","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13840:33824":{"id":"2:13840:33824","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"Returns an iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:13452:17987","`DoubleEndedIterator`":"2:8393:134","prim@char":"1:12642:492","str::match_indices":"2:13838:33823"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44901:10260","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:10056","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13459:10056","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13476:17989","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13883:27588":{"id":"2:13883:27588","crate_id":2,"name":"substr_range","span":null,"visibility":"public","docs":"Returns the range that a substring points to.\n\nReturns `None` if `substr` does not point within `self`.\n\nUnlike [`str::find`], **this does not search through the string**.\nInstead, it uses pointer arithmetic to find where in the string\n`substr` is derived from.\n\nThis is useful for extending [`str::split`] and similar methods.\n\nNote that this method may return false positives (typically either\n`Some(0..0)` or `Some(self.len()..self.len())`) if `substr` is a\nzero-length `str` that points at the beginning or end of another,\nindependent, `str`.\n\n# Examples\n```\n#![feature(substr_range)]\n\nlet data = \"a, b, b, a\";\nlet mut iter = data.split(\", \").map(|s| data.substr_range(s).unwrap());\n\nassert_eq!(iter.next(), Some(0..1));\nassert_eq!(iter.next(), Some(3..4));\nassert_eq!(iter.next(), Some(6..7));\nassert_eq!(iter.next(), Some(9..10));\n```","links":{"`str::split`":"2:13811:2693","`str::find`":"2:13804:2758"},"attrs":["#[must_use]","#[unstable(feature = \"substr_range\", issue = \"126769\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["substr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42733:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Range","id":"2:40308:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13783:33818":{"id":"2:13783:33818","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12648:1771","crate::ops::IndexMut":"2:3628:12561","str::slice_unchecked":"2:13782:33817"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13856:2739":{"id":"2:13856:2739","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12642:492","self::pattern":"2:13452:17987"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42733:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:10056","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5726:34550":{"id":"5:5726:34550","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:299:3248","`String`":"5:7774:257"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:299:3248","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13776:26362":{"id":"2:13776:26362","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42735:203"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42733:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11576:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11576:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13843:2697":{"id":"2:13843:2697","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13792:31669":{"id":"2:13792:31669","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13793:31670"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:45007:10264","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13845:33825":{"id":"2:13845:33825","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13879:33834":{"id":"2:13879:33834","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Returns an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5068:33834"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:45032:10168","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13861:33831":{"id":"2:13861:33831","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12642:492","self::pattern":"2:13452:17987"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:10056","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13459:10056","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13476:17989","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13764:33813":{"id":"2:13764:33813","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5713:7333":{"id":"5:5713:7333","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:10056","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13858:26407":{"id":"2:13858:26407","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12642:492","self::pattern":"2:13452:17987"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42733:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:10056","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13459:10056","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13476:17989","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13771:33816":{"id":"2:13771:33816","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13818:33820":{"id":"2:13818:33820","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"Returns an iterator over substrings of the given string slice, separated\nby characters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:13452:17987","str::split":"2:13811:2693","prim@char":"1:12642:492","`DoubleEndedIterator`":"2:8393:134","str::rsplit_terminator":"2:13820:33821"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44783:10257","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:10056","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:72:2417":{"id":"0:72:2417","crate_id":0,"name":"get","span":{"filename":"src/lib.rs","begin":[73,0],"end":[75,1]},"visibility":"public","docs":"Returns the number of available CPUs of the current system.\n\nThis function will get the number of logical cores. Sometimes this is different from the number\nof physical cores (See [Simultaneous multithreading on Wikipedia][smt]).\n\nThis will always return at least `1`.\n\n# Examples\n\n```\nlet cpus = num_cpus::get();\nif cpus > 1 {\n    println!(\"We are on a multicore system with {} CPUs\", cpus);\n} else {\n    println!(\"We are on a single core system\");\n}\n```\n\n# Note\n\nThis will check [sched affinity] on Linux, showing a lower number of CPUs if the current\nthread does not have access to all the computer's CPUs.\n\nThis will also check [cgroups], frequently used in containers to constrain CPU usage.\n\n[smt]: https://en.wikipedia.org/wiki/Simultaneous_multithreading\n[sched affinity]: http://www.gnu.org/software/libc/manual/html_node/CPU-Affinity.html\n[cgroups]: https://www.kernel.org/doc/Documentation/cgroup-v1/cgroups.txt","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13762:1027":{"id":"2:13762:1027","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12642:492"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13825:26400":{"id":"2:13825:26400","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"Returns an iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning at\nmost `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12642:492","str::splitn":"2:13823:26398","self::pattern":"2:13452:17987"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44855:10073","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:10056","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13459:10056","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13476:17989","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13833:2924":{"id":"2:13833:2924","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"Returns an iterator over the disjoint matches of a pattern within the\ngiven string slice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:13452:17987","`DoubleEndedIterator`":"2:8393:134","prim@char":"1:12642:492","str::rmatches":"2:13835:33822"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44937:10261","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:10056","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13790:10274":{"id":"2:13790:10274","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12642:492"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44709:10255","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13875:26130":{"id":"2:13875:26130","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13772:352":{"id":"2:13772:352","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13773:2455","`u8`":"1:12661:1902"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13797:26404":{"id":"2:13797:26404","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12642:492","self::pattern":"2:13452:17987"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:10056","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73:2435":{"id":"0:73:2435","crate_id":0,"name":"get_physical","span":{"filename":"src/lib.rs","begin":[108,0],"end":[110,1]},"visibility":"public","docs":"Returns the number of physical cores of the current system.\n\nThis will always return at least `1`.\n\n# Note\n\nPhysical count is supported only on Linux, mac OS and Windows platforms.\nOn other platforms, or if the physical count fails on supported platforms,\nthis function returns the same as [`get()`], which is the number of logical\nCPUS.\n\n# Examples\n\n```\nlet logical_cpus = num_cpus::get();\nlet physical_cpus = num_cpus::get_physical();\nif logical_cpus > physical_cpus {\n    println!(\"We have simultaneous multithreading with about {:.2} \\\n              logical cores to 1 physical core.\", \n              (logical_cpus as f64) / (physical_cpus as f64));\n} else if logical_cpus == physical_cpus {\n    println!(\"Either we don't have simultaneous multithreading, or our \\\n              system doesn't support getting the number of physical CPUs.\");\n} else {\n    println!(\"We have less logical CPUs than physical CPUs, maybe we only have access to \\\n              some of the CPUs on our system.\");\n}\n```\n\n[`get()`]: fn.get.html","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13786:26391":{"id":"2:13786:26391","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divides one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13787:26392"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42733:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13874:26131":{"id":"2:13874:26131","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13796:31671":{"id":"2:13796:31671","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:45025:10087","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13869:2537":{"id":"2:13869:2537","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:13411:149","`FromStr`":"2:13410:3072"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:43001:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:13410:3072","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:13410:3072","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13838:33823":{"id":"2:13838:33823","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"Returns an iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:13452:17987","`DoubleEndedIterator`":"2:8393:134","prim@char":"1:12642:492","str::rmatch_indices":"2:13840:33824"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44883:10259","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:10056","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13851:33829":{"id":"2:13851:33829","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12642:492","self::pattern":"2:13452:17987"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:10056","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13459:10056","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:13481:17988","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13830:26403":{"id":"2:13830:26403","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42733:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:10056","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13459:10056","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13476:17989","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13791:7375":{"id":"2:13791:7375","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"Returns an iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44719:3018","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"2:8090:3084":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"20:4791:3622":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"18:96:25807":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:44855:10073":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:10800:26077":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"2:48209:10434":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:3965:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"17:13183:8253":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"20:4998:6978":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"5:2364:11667":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"20:3471:5948":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:14093:8375":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:13509:7908":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:45348:10280":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:11469:21628":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"6:8249:11647":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:8824:3063":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:3874:132":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:4513:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"6:479:3739":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"20:3032:5905":{"crate_id":20,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:10883:169":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"20:5455:5969":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:12093:8127":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:12072:8120":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:4140:12616":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:1696:4518":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:11728:8084":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:12229:25921":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"2:44622:10246":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"16:7383:9414":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:11667:8080":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:9552:174":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:22203:2984":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"17:14443:8459":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"16:2770:9127":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:11576:252":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"20:4904:6972":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:9310:10624":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:12889:8229":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"16:6082:9200":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"6:6737:11610":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"20:4775:4432":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"18:623:35218":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:11654:8050":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"16:7492:9432":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:982:9705":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:8798:10600":{"crate_id":1,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"17:14498:8468":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:8393:134":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:2509:2964":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"5:7510:9814":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:8765:10488":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"20:3174:5919":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:13231:8257":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"6:485:3740":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:45484:11762":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:12661:1902":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"1:12011:10525":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:12034:10072":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:42473:182":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:3596:154":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:953:9720":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:3622:2672":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"6:5539:5948":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"6:5271:11381":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:10672:7468":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"6:5036:11367":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:10369:21608":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:11512:21629":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"17:14258:8408":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"20:5449:5968":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"18:659:7852":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:316:7885":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:43899:150":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:11800:3019":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"1:9279:10623":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:12062:10074":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:22787:2984":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:8289:2977":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1:12428:26090":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:42511:10047":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:12022:11787":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"5:4473:281":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"16:6109:9210":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"18:80:25806":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"16:6995:9343":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:15389:8648":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:36997:9462":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:2877:147":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"6:6459:6482":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"8:0:2813":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:14558:8477":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:45781:192":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:41243:10172":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"11:1866:9720":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:11502:8066":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"17:15937:8831":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:14081:8374":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"16:7575:10635":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:45771:10298":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"17:10524:21613":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"5:1411:9717":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"16:4927:9179":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:45681:163":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:48118:10423":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"16:2858:9131":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:3467:3038":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:2568:2669":{"crate_id":1,"path":["std","io"],"kind":"module"},"17:12022:8112":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"5:3843:3033":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"5:884:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:13021:21747":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"20:1436:4508":{"crate_id":20,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"20:3433:5944":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"6:5357:11411":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"11:389:35166":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:40308:222":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"17:14910:8544":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"16:2548:9117":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:0:2821":{"crate_id":17,"path":["object"],"kind":"module"},"2:8812:17910":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:11770:21648":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"1:5022:10490":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:11751:3068":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:6669:198":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:16538:8997":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"2:41300:10175":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:8624:3018":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:6296:232":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:3576:17838":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"1:1643:9811":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"5:5515:33404":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"16:7505:9436":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:3872:12600":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"16:7369:9149":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"6:1675:4515":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:8434:10544":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:47861:10410":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"5:4157:33404":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:16250:8933":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"20:3389:5939":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:562:12530":{"crate_id":1,"path":["std","thread","thread_name_string","ThreadNameString"],"kind":"struct"},"1:8092:10459":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:11346:8052":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:16051:8861":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:1233:7893":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:38928:17930":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:45488:11763":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:22177:33120":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"16:2948:9135":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:4363:12638":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"11:2275:9442":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"6:7430:6972":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:11210:35211":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"5:888:9805":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"11:2414:9720":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"3:2062:9862":{"crate_id":3,"path":["compiler_builtins","int","big","u256"],"kind":"struct"},"2:41955:10038":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"16:3306:9105":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"6:4984:5919":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:41394:10185":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"16:3585:9164":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"6:7562:6981":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"18:608:7844":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:32935:10151":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:47056:10334":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:47159:10339":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:11939:8107":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:11318:8051":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"16:6841:9331":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:9596:10056":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:2511:2965":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"17:13630:8286":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"6:1494:4499":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:12666:996":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:11882:10068":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:14054:10095":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"1:650:12531":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:12979:8237":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:7973:7892":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"6:6893:11628":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:4701:7476":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:11888:8102":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:45698:239":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:14388:10106":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"11:676:7389":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:7472:26082":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:12654:782":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:41285:18057":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:45504:11767":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:14178:8403":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:16269:8946":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:13983:8357":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"6:7367:4461":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"20:483:3739":{"crate_id":20,"path":["libc","unix","timeval"],"kind":"struct"},"20:4039:6453":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:8344:10541":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:45016:10265":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"16:8025:9534":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"14:219:9699":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:10670:218":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"11:2115:9712":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:12081:8123":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:7570:29711":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:40196:17823":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:12385:8160":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"5:2156:9816":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"20:3443:5945":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"16:6792:9325":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"2:2787:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:23065:17946":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"18:706:7864":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"16:6981:9158":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:3797:159":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:15659:8762":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:22652:12687":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"6:8326:7325":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:4850:7477":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"6:1684:4516":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:6054:3091":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:6310:10019":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:47567:10373":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"2:45007:10264":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"5:1001:3068":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:15595:8752":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:41516:10026":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:11594:10664":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"20:4092:6477":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"5:3079:7438":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:45025:10087":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"6:8284:11652":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:23468:31570":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"5:6513:18400":{"crate_id":5,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"17:14834:8535":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:34256:12678":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"20:5488:7325":{"crate_id":20,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"20:3461:5947":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:11855:8100":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"11:357:35164":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"16:2964:9136":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"20:1444:4509":{"crate_id":20,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:41946:2673":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:2784:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"6:4842:5905":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"6:4914:5910":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"5:7074:18019":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:12100:10481":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:41495:10020":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:12608:8201":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:42960:226":{"crate_id":2,"path":["core","range","RangeInclusive"],"kind":"struct"},"2:3803:17825":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"20:3380:5938":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:11590:8075":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"9:490:9787":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:23221:10109":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"16:5111:9184":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"11:123:11337":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:16777:9071":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"16:4692:9173":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"16:4871:9177":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"16:2898:9133":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"6:5375:6484":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:31331:7339":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"6:6719:11602":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"2:43206:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"6:5494:11474":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"16:7279:9405":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:42860:10057":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"6:6631:11576":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:47191:10341":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"6:5557:11481":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:16177:8912":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"16:2658:9122":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:3707:2670":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"5:3925:9811":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1:5045:12626":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:9250:10620":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:10766:7883":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:41377:10183":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:1919:10471":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:537:12515":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:1123:9713":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:11575:11783":{"crate_id":1,"path":["std","sys","exit_guard","PThread"],"kind":"struct"},"2:41156:10168":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"5:6030:9720":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:8643:10589":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:42639:31596":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"6:5462:11461":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:44901:10260":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:23136:12764":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"1:12161:10483":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:2834:3291":{"crate_id":2,"path":["core","clone","InitializingSlice"],"kind":"struct"},"17:13157:8252":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"2:8325:177":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"6:5295:11394":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:31704:208":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:13730:8300":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:45530:135":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:10875:165":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:12725:8210":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"16:0:2820":{"crate_id":16,"path":["gimli"],"kind":"module"},"16:8148:9157":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:47529:10371":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"9:435:20525":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:9293:10502":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"11:1885:9724":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"16:7935:9528":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:6998:10028":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"17:10898:151":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"5:4292:3000":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:4436:10485":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:1660:9725":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"11:1898:9726":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:23526:12601":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"5:7694:9841":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:16730:9061":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"2:47094:10336":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:10311:21606":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"6:5301:11397":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:22175:33118":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"6:6638:11577":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:47109:10337":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"20:3320:5932":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:6379:26067":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"16:4265:9171":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"5:6826:7389":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:43049:9718":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:10879:3042":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"1:3424:3042":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"16:3985:7931":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"1:9835:151":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"6:8231:5969":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"6:8260:5971":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:7463:6975":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:7004:11676":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"16:6967:9141":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"20:4800:6969":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:5230:5942":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"5:0:325":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:3334:30405":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"16:7355:9148":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:8700:12641":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:3322:261":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"16:7997:9154":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"20:4272:2474":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:47993:10414":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:8167:12537":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:8040:35202":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"16:8595:9604":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:927:9703":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"16:6939:9341":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"6:6360:6453":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"16:7966:9532":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:3937:10482":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:12787:8215":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:12669:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"17:15785:8796":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:16700:9053":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"16:8011:9155":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:12217:10666":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"17:12214:8138":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"16:7156:9378":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:15456:8703":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"5:5560:17977":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"20:5040:6981":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:10255:21604":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:23453:31569":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:11920:10069":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:680:7892":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:16211:8924":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:8895:3065":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:13771:8309":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:699:10462":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"14:186:20618":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:4193:12620":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:44692:10254":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:15896:8822":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"5:1573:9703":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:10586:8027":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:7409:25967":{"crate_id":1,"path":["std","sys","backtrace","print","DisplayBacktrace"],"kind":"struct"},"2:14368:10105":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"5:4565:33414":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:3069:175":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:45272:10090":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:1132:9717":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:2025:12588":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:23361:10112":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"20:3209:5923":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:15324:8597":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:38873:17929":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:5749:116":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"16:2878:9132":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:8910:3066":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"16:8666:9500":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"6:7439:6973":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:16717:9055":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"16:7835:21548":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:31061:12603":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"11:1136:9717":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:2341:2955":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"16:4182:9169":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:2671:697":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:46952:10320":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"18:735:25815":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:42495:10045":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:1005:9710":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"20:4292:6512":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:8743:3532":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:41463:10016":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:23595:10137":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"5:3332:9723":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"6:4970:5917":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"11:2469:20601":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"1:4848:11242":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"17:12836:21745":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:14337:8442":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"1:12668:1460":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"5:7668:2946":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:8102:10529":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"3:1785:238":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"11:686:9701":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:14476:8467":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:16814:9080":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"17:11102:8047":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"6:8272:5973":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:14776:8523":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:41251:10173":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:11064:11776":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"17:13700:8296":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:22276:10108":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:11256:26075":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"16:3124:20680":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:16116:8905":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"16:2702:9124":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:5697:10496":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:6280:10500":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:31731:3310":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"6:7990:11638":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:11437:11778":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"6:6398:6476":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:13909:8344":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:44127:10235":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:39617:17933":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:15198:8595":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:14373:8448":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:9226:211":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:45688:231":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:3063:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"6:5428:11436":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"20:3334:5933":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:13260:21615":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:3688:29944":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"20:3215:5924":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"20:5013:6979":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:6727:11603":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"6:5265:11378":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"16:8264:9550":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:13836:8327":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:15035:8573":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"6:5617:11506":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"20:3451:5946":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"20:3370:5937":{"crate_id":20,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:11179:25917":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:4555:17828":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"17:11901:8103":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:4838:12621":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:8294:11656":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:14521:8473":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"16:6638:9287":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"1:3590:3000":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"5:1612:9702":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:16350:8967":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:22647:2984":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"9:470:20524":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"20:4266:6511":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:46770:10301":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:9373:3094":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:2099:209":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:12990:8238":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:42820:7454":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"20:4919:6974":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:3628:12561":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:11690:8081":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"15:0:2819":{"crate_id":15,"path":["addr2line"],"kind":"module"},"16:5316:9191":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"16:8093:9537":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:41597:10197":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"20:501:3742":{"crate_id":20,"path":["libc","unix","rusage"],"kind":"struct"},"2:11214:32325":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"16:6873:9335":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:2736:3030":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:47367:10365":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:7741:17856":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:1919:7591":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"5:2344:33495":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:44709:10255":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:16058:8863":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:8311:152":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"6:1563:4505":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:14585:8482":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"6:6679:11592":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"5:7762:9855":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"2:3587:3243":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:7337:6970":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:16512:8309":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"2:23584:10136":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"2:22256:2984":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"6:4921:5911":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"6:6769:11620":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:43565:7465":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:45684:176":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:31357:31578":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"15:306:20631":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:14152:8398":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:41370:2978":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"17:16068:8868":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:11458:8062":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"5:3686:194":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:5947:10501":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"15:394:20641":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"17:12737:8211":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:10601:7877":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:11118:2979":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"16:6267:9225":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"6:1500:11362":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:6441:6480":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:15733:8779":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:47176:10340":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:14431:8457":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:12035:8113":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"5:4519:3000":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"11:808:9719":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:10674:7469":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:44333:11759":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"5:7569:33492":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:11971:10518":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:11775:9718":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:8851:32880":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:16417:8979":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:23276:10110":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:14545:8474":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:16848:8359":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"11:2394:7389":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"20:3238:5926":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:44652:10249":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"9:226:3064":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:896:3068":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"5:7723:18057":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"20:1431:4507":{"crate_id":20,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:32914:9500":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"1:3934:10481":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:43572:7464":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"16:6887:9140":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:42868:10219":{"crate_id":2,"path":["core","range","iter","IterRange"],"kind":"struct"},"18:635:7851":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:16219:8925":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:47027:10325":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"20:4206:6489":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:23661:10143":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"17:15088:8577":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:23014:17946":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"1:8429:10543":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:10132:21600":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"1:2348:2754":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"20:5473:5972":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"20:1635:4574":{"crate_id":20,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:2914:214":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:13125:10081":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:4959:7479":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:22674:10107":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:4922:12652":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"20:3147:5915":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"11:983:9442":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"18:598:35216":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"16:5346:9192":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:12120:8130":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:5313:10494":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:7494:6976":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:9864:131":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"2:33917:17919":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:12575:8198":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:45797:10299":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:3517:3025":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:12008:8111":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"5:6566:12775":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"1:7820:28334":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:2235:9865":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:41557:10029":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:2129:7335":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:4355:12637":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:9404:25908":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:15448:8700":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"6:6710:11600":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"17:15817:8802":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:8299:2974":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"13:229:11335":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"20:4117:6480":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"11:1558:9721":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"6:6505:6486":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:6670:11586":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"16:5058:9182":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:12959:10078":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:4384:12640":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"5:7679:2947":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"5:3337:33600":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:519:7890":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"5:6915:33404":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"14:164:20611":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:22:845":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:33002:3242":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:45500:11766":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"11:0:2816":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:42769:9718":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"6:5366:6483":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:619:10460":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"16:2682:9123":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"6:5341:11409":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"2:7806:32484":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"5:928:12545":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:47906:10411":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:4902:5909":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"16:5415:9194":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:43354:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:11455:174":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"20:3019:5904":{"crate_id":20,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"20:4841:4461":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:3097:150":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:15534:8745":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:10622:156":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:48081:10420":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:11989:8109":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:46931:10319":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:15062:8575":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"20:3489:5950":{"crate_id":20,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:47322:10348":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:2226:17958":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:15746:8785":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:3061:10479":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"11:763:9704":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:12430:8164":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:12667:1966":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"18:481:7826":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:43815:7474":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:35121:9461":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"16:894:9100":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"6:6590:11558":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:41434:10188":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:11155:10658":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"17:11395:21626":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:12065:8117":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"17:11356:35213":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:14730:8499":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"6:5288:11392":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:15801:8798":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:42981:224":{"crate_id":2,"path":["core","range","RangeFrom"],"kind":"struct"},"11:423:35168":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"18:0:2822":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:11200:8049":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:11563:2984":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:8125:8168":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"6:6878:6512":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:1632:4511":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:12649:1861":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:8334:3247":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:16341:8963":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:44320:11758":{"crate_id":2,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"16:4402:9172":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:23433:31568":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:43860:31661":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"20:4200:6488":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlattr"],"kind":"struct"},"6:1597:4509":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"16:8206:9145":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:11099:152":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"1:12593:10669":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"14:213:9697":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:46969:10321":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"5:1520:3068":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:14845:8537":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:10604:2983":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"5:7108:18021":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"16:6026:9139":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"16:4239:9170":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:43430:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"20:134:3427":{"crate_id":20,"path":["libc","unix","FILE"],"kind":"enum"},"18:491:7827":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:6775:2673":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:43243:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:7445:6974":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:9437:10633":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:10647:116":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"17:14057:8370":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:47240:10344":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:11552:8070":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"16:5755:9198":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:15919:8827":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:45238:10278":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"20:536:3745":{"crate_id":20,"path":["libc","unix","iovec"],"kind":"struct"},"2:10655:123":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1:3697:2981":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:45138:10267":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:11868:8074":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"6:5640:11512":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"2:22162:33115":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"6:5044:11372":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:23051:12773":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"19:0:1327":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:4171:12618":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:10634:7879":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"6:5405:11426":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"16:7956:9531":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"20:3071:5908":{"crate_id":20,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"14:0:2818":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"6:5652:11519":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:3837:115":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:12652:763":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"6:5139:5931":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:45476:11760":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"6:6645:11578":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:4501:10005":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:13856:8337":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:2722:9125":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"20:3006:5903":{"crate_id":20,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"20:3257:5927":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"11:859:9711":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:33493:9455":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:41722:3017":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:3524:7904":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:4199:12621":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:23012:33346":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"2:41047:10160":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"6:5205:5939":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:41939:10037":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:11089:2977":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"11:2440:9811":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"11:718:9702":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"6:5658:11521":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:44801:10258":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:3719:223":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"5:7797:9857":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:46917:10318":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:11059:11774":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"16:7347:9412":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"16:2484:9114":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:3411:9456":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"6:7515:6977":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:1636:7389":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:16672:9046":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"6:4997:5921":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:8569:3049":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"6:5387:11415":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:14710:8498":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:14071:10098":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"11:2323:9713":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"1:9534:247":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:13465:8273":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"1:12653:766":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:14690:8495":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"11:787:9811":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:45050:10167":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"6:4829:5904":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:1632:3068":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:4185:12619":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:45706:219":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"5:984:12546":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:42851:7452":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"16:6806:9138":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:10150:21601":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"6:5241:5943":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"5:6746:33404":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"16:7786:35198":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:508:26039":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"16:6254:9224":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"16:8134:9156":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:42695:10048":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:16755:9069":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"2:45820:10300":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"17:14788:8525":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"20:2976:5900":{"crate_id":20,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:9237:10619":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:11112:35209":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"20:2982:5901":{"crate_id":20,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:15884:8816":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:47417:10367":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:16744:9064":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"2:47739:10408":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"11:1027:9713":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:9215:10617":{"crate_id":1,"path":["std","pipe","PipeWriter"],"kind":"struct"},"17:10455:21611":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"6:473:3738":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"11:321:11341":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:1654:9724":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"16:7189:21545":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"6:4957:5915":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:12133:8132":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"20:4128:6481":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:11749:26079":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"6:5325:11405":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"5:4488:33414":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:12656:939":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:41932:10036":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"17:12749:8212":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"16:5083:9183":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"6:1703:4519":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"20:5058:6982":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:44559:10241":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"6:553:3748":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"6:1643:4512":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:3072:157":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"16:3012:20678":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:11196:10621":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"20:3408:5941":{"crate_id":20,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:13585:8282":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"17:13000:21746":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"6:5107:5928":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:5604:11500":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"20:5479:5973":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:43057:7389":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:47935:10412":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:12298:21720":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"16:2618:9120":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:3593:153":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"11:1862:7389":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:9386:10625":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:12236:10526":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:41732:10033":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:2534:2972":{"crate_id":1,"path":["std","fs","exists"],"kind":"function"},"1:436:197":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:8739:10599":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"11:102:11336":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:5940:10500":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:45358:10284":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:978:9702":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:6954:3103":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"2:23395:31566":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:8107:10531":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:1648:9723":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"6:4990:5920":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"11:1878:9723":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:10176:21602":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"16:6121:9143":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"6:559:3749":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"6:7962:3697":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"6:8266:5972":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"16:2818:9129":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"16:8118:222":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:12774:8214":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"5:3792:33404":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:7256:9404":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:15144:8584":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"16:6779:9324":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:13162:10084":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"20:2995:5902":{"crate_id":20,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:485:7888":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"11:427:35169":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:48092:10421":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"5:724:9802":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:12103:8128":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"5:4990:229":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"20:4937:6975":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"5:3712:9718":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"16:7421:21546":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:10876:3040":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"16:6911:9339":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:41264:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:9847:26072":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"2:43874:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"16:6850:9332":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:5154:12651":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"6:6422:6478":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:1667:4514":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:41472:10190":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"6:1690:4517":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:6578:11554":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:5585:11486":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"11:2340:9729":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"2:22205:12685":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:8173:12578":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"17:16658:9042":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"16:6186:9216":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"20:3080:2680":{"crate_id":20,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"16:7916:9520":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"6:7553:11635":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:41103:10164":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"6:1539:4503":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:2258:133":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"17:15001:8560":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:909:9718":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:45153:10272":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"5:40:12562":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"6:4976:5918":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:41538:10195":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"11:2513:11344":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:15048:8574":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"5:299:3248":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:41352:2526":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"5:3090:33604":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:7878:25968":{"crate_id":1,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"6:4964:5916":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"5:6148:3090":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:1942:10472":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:6899:3101":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:9529:246":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:40293:225":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"6:1507:11365":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:15861:8813":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"5:1601:9701":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"5:7591:222":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"16:3108:9160":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:10975:35206":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:13892:8342":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:12028:11788":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:5154:7913":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"17:15713:8775":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:4621:10006":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"6:1584:4507":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:15985:8846":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"6:4890:2680":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"18:581:3310":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:11164:10499":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"1:919:7389":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:4371:12639":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"6:1530:4502":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"16:6736:35195":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"11:1118:9716":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:13608:21586":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:8950:3067":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"20:4968:6976":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:12287:8149":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:7009:11675":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"6:497:3742":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"6:545:3747":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"20:1416:4506":{"crate_id":20,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"6:5057:5925":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"16:8500:9592":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:15578:8750":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:11053:8046":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:43920:7475":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:12864:8220":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"2:47816:10409":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:15792:8797":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:7023:245":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:16230:8930":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:7916:25972":{"crate_id":1,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"17:13066:8249":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"2:44117:3064":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:16288:8947":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"20:3425:5943":{"crate_id":20,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"16:7804:35199":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:707:12534":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:32944:249":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:22133:3310":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:8695:11771":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:1885:10470":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:3560:3048":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"16:2433:20677":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"1:1665:9726":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:4803:12648":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"5:3699:3068":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:43095:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:2424:9869":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"6:5395:11420":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:12642:492":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"20:4898:6971":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:44105:169":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:13959:8353":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:16395:8973":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:3199:9870":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"2:11843:10067":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:15971:8844":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"9:345:20540":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"14:159:9691":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:10666:7466":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:45808:9731":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1:11241:26073":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:6133:3095":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:41573:7849":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"6:5630:5947":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:2838:9130":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:43132:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:23331:10111":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:13436:8272":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:8360:3033":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:44679:10251":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:6061:3092":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:13795:8323":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:9675:10472":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"20:5027:6980":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","termios2"],"kind":"struct"},"6:0:1032":{"crate_id":6,"path":["libc"],"kind":"module"},"1:12625:25950":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"16:8063:21549":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:46998:10323":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:5356:454":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"20:1350:4498":{"crate_id":20,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:8803:162":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:12331:8152":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"20:574:3751":{"crate_id":20,"path":["libc","unix","tms"],"kind":"struct"},"2:41274:10174":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:1727:4521":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:4816:5903":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"5:3448:9811":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"2:43393:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"16:6864:21543":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"11:851:9710":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:12898:8230":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"20:3308:5931":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:41322:10176":{"crate_id":2,"path":["core","ffi","va_list","VaListImpl"],"kind":"struct"},"11:776:9720":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"16:6366:9087":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"11:1063:35175":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"16:8720:150":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"18:680:7859":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"5:5289:3090":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:12878:8225":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:22187:33121":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"20:527:3744":{"crate_id":20,"path":["libc","unix","hostent"],"kind":"struct"},"20:1558:4520":{"crate_id":20,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:11643:8049":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:10860:7887":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:2820:3290":{"crate_id":2,"path":["core","clone","CloneToUninit"],"kind":"trait"},"18:670:7858":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:4071:9720":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"17:2394:21676":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"20:1368:4501":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"6:8304:11657":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:12664:1896":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:2685:17946":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"1:4963:12627":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"16:2988:9137":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:12975:17990":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:34457:17922":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:16029:8856":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"16:6062:9144":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:23547:2984":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"16:6678:9307":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"20:3065:5907":{"crate_id":20,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:14165:8402":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:10440:7482":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"2:48052:10417":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:45180:10276":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:9458:25909":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"5:7599:9848":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"5:4362:3068":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"16:6950:9342":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:3792:268":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:16613:8327":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"2:44633:10247":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"5:6116:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"20:1514:4514":{"crate_id":20,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:10662:7464":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:6810:10021":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:14678:8494":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"16:8623:9606":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:8714:10589":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"20:3226:5925":{"crate_id":20,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"11:292:11338":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"6:1489:4498":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:4150:9168":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:4928:3128":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"11:2206:8120":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"18:726:7871":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:15721:8776":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:9432:10632":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"6:1514:4500":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:11715:8083":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"20:1355:4499":{"crate_id":20,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:10507:10645":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"11:832:9708":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:11794:21649":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"16:6387:9241":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:7284:3664":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"5:7200:280":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:22962:12769":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1:2495:2960":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:43832:11757":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"16:6335:9235":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"6:4881:5908":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"0:72:2417":{"crate_id":0,"path":["num_cpus","get"],"kind":"function"},"5:1623:222":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:40445:9873":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"6:5623:11509":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:11069:2973":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"16:6586:9282":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"2:8030:3047":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:14883:8542":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:4413:3000":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"16:7334:9410":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:10918:12592":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:10664:28281":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"16:7551:21547":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:46864:10311":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"11:2525:35160":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:3373:3041":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"6:5217:5940":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"20:3180:5920":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:10553:21614":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"3:2077:9863":{"crate_id":3,"path":["compiler_builtins","int","big","i256"],"kind":"struct"},"20:489:3740":{"crate_id":20,"path":["libc","unix","timespec"],"kind":"struct"},"6:6852:6511":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:44703:10080":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:596:7891":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:45739:10293":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:4925:12642":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"20:542:3746":{"crate_id":20,"path":["libc","unix","pollfd"],"kind":"struct"},"20:4989:6977":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"16:4118:9167":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"5:5414:17975":{"crate_id":5,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"11:1001:9712":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:4771:10008":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:23705:10147":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"16:8162:9147":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:43805:11748":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:3328:30257":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:48186:10433":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:9445:10635":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"6:5249:11376":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:14159:32930":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:7292:4432":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:40330:224":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"6:5512:11478":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"17:12761:8213":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:15115:8581":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"16:4808:9175":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:14069:8373":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:4906:7478":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:11080:10638":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"17:12643:8049":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:14322:8437":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:46832:10309":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"16:2568:9118":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"5:1582:9704":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:23094:2984":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"5:3303:33599":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:11814:8094":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"5:1227:33602":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"11:481:166":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:14482:12547":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"20:549:3747":{"crate_id":20,"path":["libc","unix","winsize"],"kind":"struct"},"17:16315:8954":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:23502:10131":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:47662:10376":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"5:284:33404":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"17:15477:8711":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:15677:8770":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"5:1885:9811":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"16:906:7886":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"17:16021:8855":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:16403:8976":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:12187:8136":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"11:2507:11343":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"11:2533:11348":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"10:44:9733":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:2908:207":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"1:9570:2990":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"20:1472:4510":{"crate_id":20,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"16:7041:9146":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"16:8055:9536":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:14859:8539":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:15469:8710":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:41088:31591":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"20:4148:6468":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:15995:8849":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:11485:8063":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:16631:8337":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"16:8582:9601":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:47290:10346":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:14897:8543":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"11:1579:9722":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:3599:155":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:15951:8838":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"3:0:527":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"1:6779:3097":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"20:3296:5930":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:5871:3476":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"16:6606:218":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:11540:8069":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"20:3401:5940":{"crate_id":20,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:43882:7474":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:0:585":{"crate_id":2,"path":["core"],"kind":"module"},"17:12686:8204":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:9446:10054":{"crate_id":2,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"5:4202:9718":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"5:2291:11663":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:22986:2984":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"2:3043:17859":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:13592:8283":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"2:12076:10075":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"6:5611:11503":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"2:45496:11765":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:1506:168":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"5:6169:18392":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"20:614:3771":{"crate_id":20,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:3075:272":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"6:1521:4501":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"16:5280:9190":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:31293:7338":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:44080:10226":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:48171:10432":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:47223:10343":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:15844:8806":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:13247:150":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"20:1574:4521":{"crate_id":20,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:11564:8073":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"16:6500:20649":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"6:6543:11533":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:23694:10146":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"1:8028:26091":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"6:6416:6477":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:12646:351":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:10664:7465":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:14955:8553":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:23495:11680":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"18:573:7828":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:14870:8540":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:42926:10221":{"crate_id":2,"path":["core","range","iter","IterRangeFrom"],"kind":"struct"},"17:15074:8576":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:41116:10165":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:10815:8028":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"17:11269:21629":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"20:3187:5921":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:14746:8504":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:14413:8456":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:15699:8774":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"16:3139:7918":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"6:8007:7324":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:8578:2979":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"5:5564:17978":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"20:4104:6479":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"16:7880:9252":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"5:2142:3033":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:14307:8433":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:15963:8841":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:2493:2959":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:41970:10201":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:15763:8790":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"6:7308:3622":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:45760:31718":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"1:8560:3047":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"17:12924:8231":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:45371:10288":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:14110:8383":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:4767:233":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"16:4981:9181":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:48061:10418":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:5874:12667":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:47138:10338":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:47641:10375":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"2:47077:10335":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:40438:10158":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:7502:26084":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"20:3197:5922":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"16:8609:9159":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"20:477:3738":{"crate_id":20,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:6471:26071":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:9397:10628":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:40276:12560":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"6:7326:6969":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"9:168:20592":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"5:6274:3000":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:5506:215":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:8446:3246":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:41746:10034":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:23346:11677":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:12447:21721":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"20:4811:6970":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:10882:3038":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"11:2519:11345":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"5:6547:12774":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"6:5186:5937":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:8706:10595":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:9391:119":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:13481:17988":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:12711:8206":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:44590:10244":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"6:586:3753":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:23639:10141":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"16:6040:9142":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"5:7774:257":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"11:1542:20606":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:47964:10413":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"6:7344:3532":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:4850:11244":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"17:13928:8349":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"11:1042:20605":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"16:155:9084":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:13476:17989":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:11438:8059":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:41548:10196":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"18:651:7828":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:10756:10618":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:4776:10009":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:14137:8392":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:44541:10238":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"6:5088:5927":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:14350:8444":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"2:22685:33123":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"16:8525:9595":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"16:3439:9163":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"6:5282:11389":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:42829:12539":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"6:5503:11477":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"6:6523:6489":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:16329:8961":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"20:3086:5786":{"crate_id":20,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"6:6792:11626":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"6:517:3743":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:6513:6487":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:40368:226":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"6:5488:11472":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"6:532:3745":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:969:9719":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"5:3358:9726":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:11907:3064":{"crate_id":1,"path":["std","sys","thread_local","native","eager","State"],"kind":"enum"},"16:7209:9391":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"16:5253:9189":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"20:3166:5918":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:8220:9542":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"16:5196:9187":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:41041:10003":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"16:6406:9248":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:15353:8617":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:44751:10070":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:2810:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"5:7519:7389":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:3371:3040":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"5:1122:33404":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:14190:8406":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:10821:8029":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"16:7398:35196":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:47612:10374":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"6:5051:11374":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:5417:1007":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:15771:8793":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"20:495:3741":{"crate_id":20,"path":["libc","unix","rlimit"],"kind":"struct"},"1:9588:10637":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:12579:10077":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"1:10925:8168":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"16:544:9091":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"5:7583:7389":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:321:7886":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:909:12602":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"2:7740:17855":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"1:9271:3068":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:12662:1884":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"16:6835:9330":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:3315:277":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"6:5151:5932":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"11:2126:9713":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"16:5170:9186":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:47434:10368":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"7:31:20512":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:47508:10370":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:15159:8588":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:2344:2956":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:32868:11347":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"1:9506:3096":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"6:5179:5936":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"5:7527:9845":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:47208:10342":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"5:5960:265":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:12609:28335":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:16005:8852":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:11616:8078":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:15928:8830":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"16:6460:21541":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"5:7738:9852":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"11:649:3068":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"5:7098:18020":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:48014:10415":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:13757:8308":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"2:44837:10072":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"20:1386:4503":{"crate_id":20,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"5:7619:7389":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:3640:2980":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:8272:2975":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:11660:9784":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"2:42555:11747":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"5:1535:9718":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:12814:8217":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:13387:8268":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"6:5025:5924":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:5575:5950":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:11127:25951":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"5:4322:3000":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"5:3082:11664":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:4247:12624":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"20:3286:5929":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"16:6096:9205":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"20:3059:5906":{"crate_id":20,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"4:0:2812":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"5:1211:34996":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:912:202":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"17:10283:21605":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:40629:17860":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"6:6744:11611":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"20:3276:5928":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"5:7750:9854":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:11370:10619":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:9483:10055":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:14624:8486":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"5:2167:9817":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"5:1632:9810":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:14598:8483":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:23000:12772":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"1:8960:3068":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:7890:25970":{"crate_id":1,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"5:1551:7389":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:5130:12649":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:12945:18072":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:15174:8236":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:45337:18003":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:9514:3000":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"17:12935:8232":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:16650:9041":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"1:4965:12629":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:10113:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:32945:251":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"5:2579:11668":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:3327:3294":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:10405:21609":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:1352:7895":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:42733:206":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:48072:10419":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:13876:8338":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:22880:12767":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"1:11135:25953":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"5:1591:9719":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"18:689:7861":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:5136:17847":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:22372:2984":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:12645:1352":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:4967:12630":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:42908:10220":{"crate_id":2,"path":["core","range","iter","IterRangeInclusive"],"kind":"struct"},"1:11106:10644":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"17:15013:8562":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"16:7762:9479":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:10062:21599":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"16:8230:21550":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:3426:17924":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"2:43169:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"18:507:7828":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:13673:8290":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"6:1551:4504":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:5529:5946":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:13529:8277":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:41403:3016":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:42713:10051":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:14811:8534":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:45041:10003":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"20:1398:4504":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:16802:9077":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"2:3782:17936":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"20:1543:4518":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:12397:8161":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"20:1537:4517":{"crate_id":20,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:14365:8446":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"6:5319:11404":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:31325:3292":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:44135:10236":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:32928:7477":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"2:13185:10085":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:8630:3019":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"16:7013:9350":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:3079:271":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"11:2540:2946":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"5:7710:9849":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:11576:8074":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"18:698:7862":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:12663:1890":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:14186:217":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:43317:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"20:4182:6486":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"16:2413:20650":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:2422:7900":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:6503:10508":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"18:531:7832":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:3558:128":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:2043:3000":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"2:41425:10187":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:42777:7389":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:4840:11674":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:14985:8556":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:13219:8256":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"2:41525:10027":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:5344:10494":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:7317:11634":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"20:4913:6973":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:47546:10372":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:5311:11400":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:5328:7915":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"6:1711:4520":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:8649:10591":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:44550:10239":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:11483:11779":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"9:380:20526":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:12648:1771":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:6197:10017":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:15102:8580":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:3357:3296":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"20:568:3750":{"crate_id":20,"path":["libc","unix","itimerval"],"kind":"struct"},"6:6802:6490":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:1100:9442":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:8237:5970":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"10:36:11350":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:44569:10242":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:12854:7908":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:10668:7467":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:3042:2984":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"20:3414:5942":{"crate_id":20,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"16:8708:9613":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:10431:21610":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"20:1490:4512":{"crate_id":20,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:940:9704":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:6896:3100":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:2811:3032":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"11:663:9718":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:44490:10237":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:8277:2976":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"16:2746:9126":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"5:3291:3068":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:12643:1924":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"1:4591:10487":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:12318:8150":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"16:2918:9134":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:4:1292":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:16359:8969":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"6:6756:11613":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"16:2448:9106":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"18:765:25816":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:22141:33112":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"1:377:10455":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:13120:8050":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"16:4954:9180":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:4653:10007":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"6:6858:2474":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:7390:4433":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:45480:11761":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:42661:10214":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"6:6602:5935":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:5568:5949":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:15611:8753":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:45117:18002":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:46785:10304":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:41587:10031":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:4517:10486":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"16:7302:9406":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:41140:10167":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:46984:10322":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"16:8102:9538":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:4233:12622":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:3571:3051":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:11993:10071":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"6:6695:11598":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"16:8543:9597":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"16:5377:9193":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"15:288:20630":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:8336:10540":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"16:5222:9188":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:988:12544":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:45565:18111":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"14:7:9691":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:2303:201":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:12201:8137":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:44579:10243":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:9220:10618":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:11420:2990":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"6:538:3746":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"18:589:7838":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"20:3355:5935":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Chdr"],"kind":"struct"},"1:12657:921":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:8688:10484":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"20:4066:6475":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:4536:17827":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"6:6472:6468":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"16:2794:9128":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:9501:199":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:6817:3098":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:40348:227":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"5:3262:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"11:1083:9715":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:3431:17925":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"2:34390:17920":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:40280:10154":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"11:2374:9718":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"16:3887:7923":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:12958:8234":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"18:521:25817":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:10295:32881":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:5117:5929":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:41202:10170":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:11977:10665":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:8806:12551":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:16380:8972":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:11259:8050":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"12:0:2817":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"15:327:20635":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"20:4767:3664":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:11757:8088":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"1:5139:12650":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"17:12663:8203":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:43467:3089":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:41126:10166":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:12140:10482":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:12640:436":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1:12647:1737":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:48248:10450":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:3809:17824":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"5:2251:12515":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:14426:164":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"16:5725:8026":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:11014:35207":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"11:2354:3068":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"5:1366:9442":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:10479:21612":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:33035:278":{"crate_id":2,"path":["core","marker","UnsizedConstParamTy"],"kind":"trait"},"20:4135:6482":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:14211:10100":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:6500:6485":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:45676:11770":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"1:5803:10499":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"6:491:3741":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:10603:238":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"1:3679:2983":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"5:7787:9856":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"18:643:7828":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:11494:8065":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"16:2528:9116":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"5:3080:33605":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:23515:10132":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:12357:8157":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:12944:8233":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"6:8278:11651":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"6:7984:7323":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"16:6438:21540":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:44719:3018":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"6:4937:5913":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:14039:8369":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:2228:17959":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"20:1522:4515":{"crate_id":20,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:5471:11467":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:43280:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:12263:8144":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"20:4818:3532":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:23683:10145":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"1:789:166":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"20:4177:6485":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:45747:10295":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:48035:10416":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:15587:8751":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:16766:9070":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"6:5196:5938":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:5412:1279":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:12665:1878":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"16:6300:9232":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:14924:8547":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"16:4900:9178":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:14454:8460":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:40388:228":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:13819:8324":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"20:4098:6478":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"20:1410:4505":{"crate_id":20,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:1114:9712":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:8607:3016":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:5733:10498":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"6:5477:11470":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"20:5467:5971":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"20:590:3753":{"crate_id":20,"path":["libc","unix","protoent"],"kind":"struct"},"2:44987:3015":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1:8720:10597":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"20:55:3351":{"crate_id":20,"path":["libc","unix","DIR"],"kind":"enum"},"17:16164:8906":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:45512:11769":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:2159:1397":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"20:4864:4433":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:41236:10171":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:6455:10105":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:8280:17911":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:16791:9075":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"1:12659:933":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"6:5255:5944":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"5:1382:9713":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:8617:3017":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:46885:10316":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:46817:10308":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:12658:927":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"0:0:2544":{"crate_id":0,"path":["num_cpus"],"kind":"module"},"1:3095:238":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"6:6486:11532":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:42936:222":{"crate_id":2,"path":["core","range","Range"],"kind":"struct"},"5:2261:9818":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"20:4074:6476":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:44642:10248":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:10108:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:14008:8360":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"18:515:7825":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:39038:17932":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:14650:8490":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"11:1892:9725":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"20:3482:5949":{"crate_id":20,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:33034:118":{"crate_id":2,"path":["core","marker","ConstParamTy_"],"kind":"trait"},"2:13687:123":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:41163:17853":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"18:718:7868":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:4243:12623":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:5323:32314":{"crate_id":2,"path":["core","ffi","va_list","sealed_trait","VaArgSafe"],"kind":"trait"},"17:10700:7881":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"20:563:3749":{"crate_id":20,"path":["libc","unix","sigval"],"kind":"struct"},"16:4842:9176":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"14:31:9691":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:11221:32326":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"18:538:7835":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:45508:11768":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:7983:10527":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:10923:10062":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:13044:8245":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"5:3086:33603":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:42752:185":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:43579:7466":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"20:5411:3697":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"20:1377:4502":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:4897:17836":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:44937:10261":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:8439:3034":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:44611:10183":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:5450:11452":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"11:1703:168":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:41980:10039":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"5:1247:34997":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:10505:10646":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"2:3066:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:44997:10263":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:22164:33117":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"16:6142:21538":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:12546:10076":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"16:8562:9600":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"16:8295:9554":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:1883:10469":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"20:3111:5911":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:41504:10194":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"18:613:35217":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:48156:10431":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:13207:8255":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"1:9425:10631":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:9544:3106":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"1:8807:12661":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:3423:17923":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"6:7524:6978":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"7:78:20519":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:11383:10620":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"16:6747:9098":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:12800:8216":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:44883:10259":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:44337:10064":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"5:3298:9724":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:45032:10168":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:974:9701":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:4852:11246":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"11:1871:9811":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:7857:17906":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:10571:8026":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"5:778:264":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"11:1652:35173":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:11040:10655":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"2:33705:9452":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"20:3092:5909":{"crate_id":20,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:23384:10117":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"20:3154:5916":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"16:7468:9431":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:13575:8236":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:16241:8931":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"20:4171:6484":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlmsgerr"],"kind":"struct"},"11:2297:9712":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"17:10333:21607":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:46800:10305":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:32946:258":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:2453:7903":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"16:5447:9195":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"16:3693:9165":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:14611:8485":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:40408:2953":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:8977:3070":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"16:6571:9279":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:12562:8197":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:3743:7906":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:43001:238":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"6:6651:11581":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:10660:133":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"5:787:122":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:48133:10424":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:2521:2970":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"16:7728:7453":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"16:7946:9152":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:8498:190":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:11743:8086":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:1944:10473":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"20:5461:5970":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:43071:208":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:11083:32324":{"crate_id":2,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"6:6428:6479":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:13360:21617":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"20:1361:4500":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:9263:10621":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:14345:119":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:16203:8921":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"6:570:3751":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:11328:35212":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"6:5019:5923":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:11997:10523":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:4171:7389":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:16573:9027":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"6:1589:4508":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:12229:8140":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"2:44662:10250":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:13459:10056":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:41148:10003":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:14971:8554":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"6:5127:5930":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:41077:10161":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:13971:8354":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:13079:8250":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"2:3364:3298":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"17:13648:8289":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"16:8176:9540":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"20:3127:5913":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"11:344:35161":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:5222:12657":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"6:4792:5901":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:4703:12642":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"16:7165:9379":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"9:0:2814":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"5:3324:9725":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:9478:11773":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:32921:10150":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"17:12055:8115":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"5:5134:3000":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:465:3737":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:23672:10144":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"2:45389:10091":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:13239:10067":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:15640:8761":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:4255:12625":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:13052:8247":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"17:13014:8240":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:16013:8853":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:9352:12673":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:2750:18086":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"16:5707:21537":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"18:113:25808":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:2243:7896":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:10486:10471":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"16:6419:9093":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"16:8480:9591":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:5933:232":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"20:4881:4436":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"0:73:2435":{"crate_id":0,"path":["num_cpus","get_physical"],"kind":"function"},"16:2638:9121":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:16040:8860":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"16:7977:9153":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:41444:146":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:12344:8154":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"16:3046:20679":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:13489:8275":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:23650:10142":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"17:11915:8049":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"13:110:35177":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:2032:813":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"5:6700:9720":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"9:412:20527":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:8587:2982":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:6558:10500":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"6:1625:4510":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:3540:17934":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"16:901:7885":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"2:41988:10041":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"14:201:18004":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:15569:8746":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"16:7518:9439":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"5:7273:33467":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:11423:21627":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:14122:8386":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:16828:9081":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"6:5521:5945":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:8352:3031":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:702:10464":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:13553:21618":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:11963:8108":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:45492:11764":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"16:6694:9310":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:34775:17927":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"16:7027:9352":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"20:138:3428":{"crate_id":20,"path":["libc","unix","fpos_t"],"kind":"enum"},"6:6749:11612":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"1:5390:216":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"6:4929:5912":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:11151:8048":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:34189:12676":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:1996:10474":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:14021:8361":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:15908:8823":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:33032:3299":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"1:2772:3022":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:22384:10108":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:9322:12672":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"16:5647:9196":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:15624:8758":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:12146:8133":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:12825:8218":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:12260:26088":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"16:5142:9185":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:4489:10004":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"20:1550:4519":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:32910:10149":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"18:754:7876":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"20:0:1032":{"crate_id":20,"path":["libc"],"kind":"module"},"17:11842:8099":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:8317:21551":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:10202:21603":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"7:0:1956":{"crate_id":7,"path":["unwind"],"kind":"module"},"11:820:12544":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"20:3348:5934":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Chdr"],"kind":"struct"},"11:813:9705":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:13470:7864":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:5165:5933":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:4947:5914":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"6:6390:6475":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"16:7220:9392":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:12614:12538":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:3147:127":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:34323:17921":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:47307:10347":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:12409:8162":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:9210:10616":{"crate_id":1,"path":["std","pipe","PipeReader"],"kind":"struct"},"2:43844:9569":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"6:5441:11446":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:12048:10073":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:8316:11661":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"6:5550:11479":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"16:6901:9338":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"16:7987:9533":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"5:7248:33463":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:46849:10310":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:23141:12762":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"1:1639:9720":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"16:4764:9174":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:11825:8096":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:14396:8453":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"6:8225:5968":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:22264:12684":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:42673:10484":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:46902:10317":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:41961:3048":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:7580:6982":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:10733:7882":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"16:6203:21539":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:12660:914":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"11:750:9703":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"11:2099:9442":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:2096:210":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:10965:8045":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:47013:10324":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:12242:8141":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"20:3137:5914":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"5:1781:33404":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:47396:10366":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:9287:7389":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"6:4896:5786":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:48107:10422":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:41486:10193":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:13996:8359":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:7539:6979":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:0:1763":{"crate_id":1,"path":["std"],"kind":"module"},"1:6088:3093":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:3426:3043":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"20:1531:4516":{"crate_id":20,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:11151:10538":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"17:12621:8202":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"6:578:3752":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"20:4190:6487":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:6452:6481":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"20:3119:5912":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:6659:11583":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"20:1479:4511":{"crate_id":20,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:11629:8010":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:2122:696":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"20:1504:4513":{"crate_id":20,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:11995:8110":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"6:7407:4436":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"16:2465:9108":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:8325:131":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"5:7549:9846":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:45323:10279":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"6:6617:11565":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:24259:248":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"6:5334:11408":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"1:6968:3104":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"17:13399:8269":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"6:5349:11410":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"14:40:8324":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"11:1858:3068":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:11161:35210":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"6:6702:11599":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"1:8872:3064":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:16525:8323":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"9:318:11351":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:15809:8800":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:10830:8032":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"5:214:9800":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:42761:3068":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"6:6687:11595":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"1:4725:12643":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"6:5664:11524":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"6:4869:5906":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"16:3832:9166":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:16684:9048":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"2:8276:17912":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:16191:8918":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:43586:7467":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"10:0:2815":{"crate_id":10,"path":["adler"],"kind":"module"},"1:963:9811":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:22382:12682":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"6:1657:4513":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:13030:8242":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"16:7055:9354":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"16:7413:9417":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:5375:3020":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"16:6711:9311":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:42789:7453":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"1:10378:10211":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"6:5381:6488":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:14571:8170":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"20:5441:7324":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:11063:35208":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:8966:3069":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:9337:12671":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:41312:3018":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"20:582:3752":{"crate_id":20,"path":["libc","unix","servent"],"kind":"struct"},"20:469:3737":{"crate_id":20,"path":["libc","unix","group"],"kind":"struct"},"17:12373:8159":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:8153:12536":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:43041:3068":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"16:6237:9220":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:16838:8354":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"2:23108:12763":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"2:47479:10369":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:31346:7474":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:6606:232":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"16:6623:9285":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"16:2588:9119":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:4333:29710":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:13529:17996":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:5576:133":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"20:4226:6490":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:44733:3019":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:44783:10257":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"20:4162:6483":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlmsghdr"],"kind":"struct"},"1:383:10457":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"18:563:7837":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:40456:10159":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:3469:3039":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:22258:12681":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:2687:17947":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"2:3317:121":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:11358:32327":{"crate_id":2,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"16:2504:9115":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:13947:8350":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:11394:2727":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:41332:10182":{"crate_id":2,"path":["core","ffi","va_list","VaList"],"kind":"struct"},"16:6820:21542":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"2:12618:17956":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"5:7559:9847":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"5:1397:9712":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:12243:10526":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:13195:8254":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"1:1867:722":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:4134:12617":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:15513:8740":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:999:9708":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:3481:9457":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"5:7539:9720":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:15868:8814":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"13:0:2811":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:22789:12683":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:45167:10275":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:41454:10014":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:42830:12662":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"5:7856:9811":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"16:5740:8027":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"20:3160:5917":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:12969:8236":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"9:49:20543":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:13243:8258":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:45554:10290":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:12641:1208":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:13201:10086":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"16:5687:9197":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:595:12521":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"6:8175:6980":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"6:7424:6971":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:1948:2438":{"crate_id":2,"path":["core","mem"],"kind":"module"},"17:13328:7985":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:44096:10229":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:47269:10345":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:8188:10538":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:23617:10139":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"16:7713:35197":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"16:6729:9321":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:8654:12598":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"1:5683:10495":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:14665:8493":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:10300:31776":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"16:6157:9211":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:15978:8845":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"20:3104:5910":{"crate_id":20,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:12173:8135":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:3877:7907":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"16:7072:21544":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:38983:17931":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:12655:761":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"6:4805:5902":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:8314:158":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:5717:10497":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:12077:26086":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:9842:2976":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"1:1011:9711":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:11402:11769":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"1:8637:3015":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"5:3858:9816":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"5:5821:18019":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:14637:8488":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"6:564:3750":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"6:1569:4506":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:23628:10140":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"2:13410:3072":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:41416:10186":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:13344:8266":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:13133:8251":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"1:4039:10483":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"16:7904:9519":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:7251:12679":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"6:5069:5926":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"5:7627:7389":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"20:521:3743":{"crate_id":20,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"16:6171:9214":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:11983:10522":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:13108:8049":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"17:11603:8076":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:34948:17928":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:10840:3018":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:5007:5922":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:44088:10228":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:2663:2671":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:11955:10070":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"5:1483:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:26659:283":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:10667:7880":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:11143:10599":{"crate_id":1,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"17:15876:8815":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:13423:8270":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:9539:3105":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"2:2229:2959":{"crate_id":2,"path":["core","ptr","metadata","metadata"],"kind":"function"},"17:14384:8451":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:8087:2984":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:22151:33112":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"17:15691:8773":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"5:4552:3000":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"1:683:10461":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:12045:7966":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"18:548:165":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:2872:213":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:8282:2973":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"20:5433:7323":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:33003:3300":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:8331:10477":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"17:12588:8200":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:13304:21616":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:12907:8275":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:34602:17926":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"20:557:3748":{"crate_id":20,"path":["libc","unix","linger"],"kind":"struct"},"5:7872:9859":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:15:2927":{"crate_id":2,"path":["core","write"],"kind":"macro"},"6:5420:11431":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"2:14094:10193":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"17:15186:8591":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"6:5224:5941":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:8243:11646":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"6:523:3744":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:12160:8134":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:22924:12768":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"17:16301:8952":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:13093:8074":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"16:8633:21552":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:42527:12599":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:11262:26076":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:10880:8034":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:14940:8549":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:23606:10138":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"2:44955:10262":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:3331:30404":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"5:4127:9720":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:40232:17935":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"2:3396:12675":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:6121:3000":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:3158:150":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"6:6610:5934":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"20:3363:5936":{"crate_id":20,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:3401:12677":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:12272:8145":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:15128:8582":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"16:7539:9441":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"5:2810:11671":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:12254:8143":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"2:13452:17987":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:2339:151":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:23417:10119":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:7635:7395":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:3822:32556":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"6:5482:5900":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"16:6656:9301":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:7902:25971":{"crate_id":1,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"2:23409:10118":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"6:4875:5907":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"16:7459:9428":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"}},"external_crates":{"20":{"name":"libc","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":33}