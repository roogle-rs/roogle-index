{"root":"0:0:1767","crate_version":"1.15.0","includes_private":false,"index":{"2:11832:1632":{"id":"2:11832:1632","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:48736:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9702:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9702:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11852:26731":{"id":"2:11852:26731","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11521:16198"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:9096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11893:33426":{"id":"2:11893:33426","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:9096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11526:9096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11541:16196","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11945:10951":{"id":"2:11945:10951","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4501:10951"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:51034:9047","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11896:2122":{"id":"2:11896:2122","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11521:16198","`DoubleEndedIterator`":"2:7125:120","prim@char":"1:11843:410","str::matches":"2:11896:2122"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:50930:9282","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:9096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11908:1899":{"id":"2:11908:1899","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11823:33417":{"id":"2:11823:33417","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11830:310":{"id":"2:11830:310","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11831:1672","`u8`":"1:11860:1464"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11850:33422":{"id":"2:11850:33422","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:50990:9284","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11899:33427":{"id":"2:11899:33427","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11521:16198","`DoubleEndedIterator`":"2:7125:120","prim@char":"1:11843:410","str::matches":"2:11896:2122"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:50948:9283","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:9096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11526:9096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11541:16196","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11858:26733":{"id":"2:11858:26733","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11521:16198"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:9096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11526:9096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11541:16196","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11838:26692":{"id":"2:11838:26692","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9702:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9702:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11881:33424":{"id":"2:11881:33424","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11521:16198","str::split":"2:11869:1895","prim@char":"1:11843:410","str::split_terminator":"2:11878:33423"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:50794:9279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:9096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11526:9096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11541:16196","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11919:33435":{"id":"2:11919:33435","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11521:16198"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:9096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11937:1759":{"id":"2:11937:1759","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11483:126","`FromStr`":"2:11482:2266"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48878:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11482:2266","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11482:2266","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11841:33421":{"id":"2:11841:33421","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11849:1368","crate::ops::IndexMut":"2:2995:10973","str::slice_unchecked":"2:11840:33420"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11847:30942":{"id":"2:11847:30942","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11848:30951"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:51000:9285","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5304:2236":{"id":"5:5304:2236","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7158:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7158:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11822:33416":{"id":"2:11822:33416","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11869:1895":{"id":"2:11869:1895","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11521:16198","`DoubleEndedIterator`":"2:7125:120","prim@char":"1:11843:410","str::split_whitespace":"2:11847:30942","str::rsplit":"2:11875:26725"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:50726:2210","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:9096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5306:26578":{"id":"5:5306:26578","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11942:26576"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7158:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11865:6576":{"id":"2:11865:6576","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:48736:176","prim@char":"1:11843:410","self::pattern":"2:11521:16198"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:9096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11526:9096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11541:16196","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11890:33425":{"id":"2:11890:33425","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:9096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11848:30951":{"id":"2:11848:30951","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11847:30942"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:51009:9286","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11875:26725":{"id":"2:11875:26725","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11521:16198","`DoubleEndedIterator`":"2:7125:120","prim@char":"1:11843:410","str::split":"2:11869:1895"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:50744:9106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:9096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11526:9096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11541:16196","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11840:33420":{"id":"2:11840:33420","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11849:1368","str::slice_mut_unchecked":"2:11841:33421","crate::ops::Index":"2:2991:10972"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11942:26576":{"id":"2:11942:26576","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:73:1650":{"id":"0:73:1650","crate_id":0,"name":"get_physical","span":{"filename":"src/lib.rs","begin":[108,0],"end":[110,1]},"visibility":"public","docs":"Returns the number of physical cores of the current system.\n\nThis will always return at least `1`.\n\n# Note\n\nPhysical count is supported only on Linux, mac OS and Windows platforms.\nOn other platforms, or if the physical count fails on supported platforms,\nthis function returns the same as [`get()`], which is the number of logical\nCPUS.\n\n# Examples\n\n```\nlet logical_cpus = num_cpus::get();\nlet physical_cpus = num_cpus::get_physical();\nif logical_cpus > physical_cpus {\n    println!(\"We have simultaneous multithreading with about {:.2} \\\n              logical cores to 1 physical core.\", \n              (logical_cpus as f64) / (physical_cpus as f64));\n} else if logical_cpus == physical_cpus {\n    println!(\"Either we don't have simultaneous multithreading, or our \\\n              system doesn't support getting the number of physical CPUs.\");\n} else {\n    println!(\"We have less logical CPUs than physical CPUs, maybe we only have access to \\\n              some of the CPUs on our system.\");\n}\n```\n\n[`get()`]: fn.get.html","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11820:797":{"id":"2:11820:797","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11843:410"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11922:1941":{"id":"2:11922:1941","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11521:16198"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:9096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11844:9124":{"id":"2:11844:9124","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11843:410"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:50696:9116","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11939:26580":{"id":"2:11939:26580","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11845:9295":{"id":"2:11845:9295","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11843:410"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:50702:9276","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11931:33437":{"id":"2:11931:33437","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11521:16198"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:9096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11943:33439":{"id":"2:11943:33439","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4500:33439"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:51025:9199","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11925:26734":{"id":"2:11925:26734","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11521:16198"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:9096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11526:9096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11541:16196","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11828:30033":{"id":"2:11828:30033","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11089:16199"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11934:33438":{"id":"2:11934:33438","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11521:16198"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:9096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11526:9096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11541:16196","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11941:26577":{"id":"2:11941:26577","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11902:33428":{"id":"2:11902:33428","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11521:16198","`DoubleEndedIterator`":"2:7125:120","prim@char":"1:11843:410","str::rmatch_indices":"2:11905:33429"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:50876:9280","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:9096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11843:26715":{"id":"2:11843:26715","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:11842:26714"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11940:26581":{"id":"2:11940:26581","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11884:26727":{"id":"2:11884:26727","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11521:16198","str::rsplitn":"2:11887:26729"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:50830:9108","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:9096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11846:6567":{"id":"2:11846:6567","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:50712:2208","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5288:2212":{"id":"5:5288:2212","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7158:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7158:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:9096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5287:34089":{"id":"5:5287:34089","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:2444","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6909:9010","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:2444","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6909:9010","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11836:26691":{"id":"2:11836:26691","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9702:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9702:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11878:33423":{"id":"2:11878:33423","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11521:16198","str::split":"2:11869:1895","prim@char":"1:11843:410","`DoubleEndedIterator`":"2:7125:120","str::rsplit_terminator":"2:11881:33424"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:50776:9278","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:9096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11821:1976":{"id":"2:11821:1976","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11842:26714":{"id":"2:11842:26714","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_mut":"2:11843:26715"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11851:30941":{"id":"2:11851:30941","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:51018:9123","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11825:33418":{"id":"2:11825:33418","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:11823:33417"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11914:33432":{"id":"2:11914:33432","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5302:34092":{"id":"5:5302:34092","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7158:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7158:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11861:1960":{"id":"2:11861:1960","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:48736:176","prim@char":"1:11843:410","self::pattern":"2:11521:16198"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:9096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:72:1632":{"id":"0:72:1632","crate_id":0,"name":"get","span":{"filename":"src/lib.rs","begin":[73,0],"end":[75,1]},"visibility":"public","docs":"Returns the number of available CPUs of the current system.\n\nThis function will get the number of logical cores. Sometimes this is different from the number\nof physical cores (See [Simultaneous multithreading on Wikipedia][smt]).\n\nThis will always return at least `1`.\n\n# Examples\n\n```\nlet cpus = num_cpus::get();\nif cpus > 1 {\n    println!(\"We are on a multicore system with {} CPUs\", cpus);\n} else {\n    println!(\"We are on a single core system\");\n}\n```\n\n# Note\n\nThis will check [sched affinity] on Linux, showing a lower number of CPUs if the current\nthread does not have access to all the computer's CPUs.\n\nThis will also check [cgroups], frequently used in containers to constrain CPU usage.\n\n[smt]: https://en.wikipedia.org/wiki/Simultaneous_multithreading\n[sched affinity]: http://www.gnu.org/software/libc/manual/html_node/CPU-Affinity.html\n[cgroups]: https://www.kernel.org/doc/Documentation/cgroup-v1/cgroups.txt","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5294:34091":{"id":"5:5294:34091","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7158:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7158:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11819":{"id":"2:11819","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:11084:1368","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11820:797","2:11821:1976","2:11822:33416","2:11823:33417","2:11825:33418","2:11828:30033","2:11829:33419","2:11830:310","2:11831:1672","2:11832:1632","2:11834:26690","2:11836:26691","2:11838:26692","2:11840:33420","2:11841:33421","2:11842:26714","2:11843:26715","2:11844:9124","2:11845:9295","2:11846:6567","2:11847:30942","2:11848:30951","2:11849:1892","2:11850:33422","2:11851:30941","2:11852:26731","2:11855:26732","2:11858:26733","2:11861:1960","2:11865:6576","2:11869:1895","2:11872:26723","2:11875:26725","2:11878:33423","2:11881:33424","2:11884:26727","2:11887:26729","2:11890:33425","2:11893:33426","2:11896:2122","2:11899:33427","2:11902:33428","2:11905:33429","2:11908:1899","2:11910:33430","2:11912:33431","2:11914:33432","2:11915:33433","2:11916:33434","2:11919:33435","2:11922:1941","2:11925:26734","2:11928:33436","2:11931:33437","2:11934:33438","2:11937:1759","2:11939:26580","2:11940:26581","2:11941:26577","2:11942:26576","2:11943:33439","2:11945:10951","2:11946:33440"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11916:33434":{"id":"2:11916:33434","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11521:16198"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:9096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11526:9096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11546:16195","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5286":{"id":"5:5286","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5197:1368","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5287:34089","5:5288:2212","5:5291:34090","5:5294:34091","5:5302:34092","5:5303:34093","5:5304:2236","5:5305:26579","5:5306:26578"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11912:33431":{"id":"2:11912:33431","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1767":{"id":"0:0:1767","crate_id":0,"name":"num_cpus","span":{"filename":"src/lib.rs","begin":[1,0],"end":[459,1]},"visibility":"public","docs":"A crate with utilities to determine the number of CPUs available on the\ncurrent system.\n\nSometimes the CPU will exaggerate the number of CPUs it contains, because it can use\n[processor tricks] to deliver increased performance when there are more threads. This \ncrate provides methods to get both the logical and physical numbers of cores.\n\nThis information can be used as a guide to how many tasks can be run in parallel.\nThere are many properties of the system architecture that will affect parallelism,\nfor example memory access speeds (for all the caches and RAM) and the physical\narchitecture of the processor, so the number of CPUs should be used as a rough guide\nonly.\n\n\n## Examples\n\nFetch the number of logical CPUs.\n\n```\nlet cpus = num_cpus::get();\n```\n\nSee [`rayon::Threadpool`] for an example of where the number of CPUs could be\nused when setting up parallel jobs (Where the threadpool example uses a fixed\nnumber 8, it could use the number of CPUs).\n\n[processor tricks]: https://en.wikipedia.org/wiki/Simultaneous_multithreading\n[`rayon::ThreadPool`]: https://docs.rs/rayon/1.*/rayon/struct.ThreadPool.html","links":{},"attrs":["#![deny(missing_docs)]","#![allow(non_snake_case)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:72:1632","0:73:1650"],"is_stripped":false}},"2:11928:33436":{"id":"2:11928:33436","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11521:16198"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:9096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11526:9096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11541:16196","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5291:34090":{"id":"5:5291:34090","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7158:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7158:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:9096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11831:1672":{"id":"2:11831:1672","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11860:1464"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11946:33440":{"id":"2:11946:33440","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4498:33440"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:51043:9192","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11910:33430":{"id":"2:11910:33430","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11887:26729":{"id":"2:11887:26729","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11843:410","str::splitn":"2:11884:26727","self::pattern":"2:11521:16198"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:50848:9109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:9096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11526:9096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11541:16196","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11849:1892":{"id":"2:11849:1892","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:50980:2211","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5305:26579":{"id":"5:5305:26579","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11941:26577"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7158:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11834:26690":{"id":"2:11834:26690","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:48736:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9702:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9702:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11855:26732":{"id":"2:11855:26732","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11521:16198"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:9096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11905:33429":{"id":"2:11905:33429","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11521:16198","`DoubleEndedIterator`":"2:7125:120","prim@char":"1:11843:410","str::match_indices":"2:11902:33428"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:50894:9281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:9096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11526:9096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11541:16196","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11915:33433":{"id":"2:11915:33433","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11829:33419":{"id":"2:11829:33419","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:5303:34093":{"id":"5:5303:34093","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:288:2444","`String`":"5:7158:221"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:2444","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6909:9010","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7158:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11872:26723":{"id":"2:11872:26723","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11521:16198"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:11345:9103","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:9096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"16:5703:8443":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:9692:11029":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:48017:9078":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"2:54831:9433":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"16:6376:19104":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:52336:9320":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:2686:225":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:50980:2211":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"6:4296:5105":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:7788:2154":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:39870:9173":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:22102:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:51358:9127":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:2229:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:11774:7787":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"16:5447:8413":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"5:3127:8920":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:10849:9592":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"20:1550:3706":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:1531:3687":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:8247:9572":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:54495:9417":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:4057:26510":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"16:6690:8359":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"6:7299:6513":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:48066:9083":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"5:6089:7071":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"2:53181:9355":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"5:6203:7033":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:21669:9146":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"20:5046:6168":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"20:536:2932":{"crate_id":20,"path":["libc","unix","iovec"],"kind":"struct"},"2:46913:195":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"17:386:7291":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:11848:1338":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:1737:16366":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:3426:2181":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"9:33:18090":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"2:50077:9255":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:10845:7567":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:11174:7663":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:29974:6530":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:8569:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"20:5417:2884":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:10121:7532":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:3858:11018":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"16:2411:8328":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:11863:1463":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:9553:7412":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:7097:2443":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"13:220:10318":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:11535:7268":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:11011:1929":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:8741:183":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"16:6359:8555":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:8176:11010":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"16:6472:8580":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:9722:7470":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:8774:7290":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:4024:16161":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"20:3433:5131":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:4289:7088":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"6:5871:5699":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:8087:2240":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"5:6941:7045":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"20:3006:5090":{"crate_id":20,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"5:1708:7024":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"16:6052:8522":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:2784:16330":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:54754:9430":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"18:690:7265":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:11034:7641":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"5:7141:9033":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"16:6781:8628":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"16:6842:8638":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"12:353:7022":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"16:2433:8329":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:8269:2718":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"16:3716:8380":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"18:538:7240":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:7637:8755":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"20:3414:5129":{"crate_id":20,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:6818:7152":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","fast","Key"],"kind":"struct"},"2:50285:10628":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:2869:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:4373:2328":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"16:7372:34386":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"6:6991:10518":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"6:1728:3707":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"20:549:2934":{"crate_id":20,"path":["libc","unix","winsize"],"kind":"struct"},"17:13327:8216":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:7202:156":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"16:6171:8535":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:11842:921":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"5:3057:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"20:5447:6511":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:9024:6660":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:3051:2241":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"20:4120:5667":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:12948:8105":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"0:72:1632":{"crate_id":0,"path":["num_cpus","get"],"kind":"function"},"6:5886:10505":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:13203:8170":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:11828:7795":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"11:36:10331":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"5:1376:8916":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"6:4241:5098":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"9:592:18039":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"8:0:2015":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"16:5664:8440":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:11235:7674":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"5:3093:8921":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"16:6316:8551":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"6:4544:5128":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:7699:9173":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"1:1586:8921":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:13527:8277":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"16:7659:19111":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:11528:7748":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"16:5628:8433":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:1436:143":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:51132:9288":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:47082:8699":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"20:3408:5128":{"crate_id":20,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:1825:9042":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:50513:9260":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"5:3872:7054":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:12087:7849":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:4222:9053":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:4976:9477":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"18:548:140":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"12:822:10959":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:57559:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:11661:7770":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:47655:9059":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"5:1243:8910":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:8165:9564":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"5:0:283":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:10350:7310":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"5:7128:9031":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:10394:7561":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"6:4485:5120":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:11684:7775":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:12225:7877":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:4311:9472":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:20871:11029":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:47716:9069":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:49251:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:4828:11052":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"6:4602:10372":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:51708:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"6:5682:10468":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"20:0:802":{"crate_id":20,"path":["libc"],"kind":"module"},"6:4807:10428":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:48734:178":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"9:649:18041":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"1:2210:2155":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:3236:2230":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:12355:202":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"1:4664:11031":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"5:5725:2283":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:50744:9106":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"5:4264:2197":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:4087:11039":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:4108:11041":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:48878:207":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:13492:8264":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"5:1463:9009":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:13071:8133":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"16:6877:19107":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"5:4034:2197":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:487:7294":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:8474:2257":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"17:10283:7546":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:13031:8124":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"14:221:8897":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"20:3380:5125":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:9155:7414":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:12198:7875":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:10310:7548":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:11974:7836":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"6:0:802":{"crate_id":6,"path":["libc"],"kind":"module"},"16:4262:8384":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:2861:16340":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:3387:2178":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"6:4683:10396":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:11526:9096":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:2849:16337":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:2213:2159":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:49091:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:9947:19253":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:6277:163":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"5:3943:8916":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"20:4817:6157":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:47729:9222":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"18:699:7266":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"16:6463:8579":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"15:214:18201":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"16:7357:8734":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"20:5479:5159":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:51110:16203":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:2511:234":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:10156:9110":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:9869:8916":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:50085:9256":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"9:863:18019":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:4491:11049":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:12781:8067":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:8141:9095":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"5:6918:6581":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:3119:29345":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:8272:19163":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"20:3154:5103":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:47636:9216":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:51521:9310":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:5494:9062":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"5:1432:8899":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"16:7288:8731":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"16:6210:8539":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"5:7081:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:11617:7762":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"20:5439:6510":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:52591:9330":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"5:5615:7054":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:13594:8289":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:50542:9264":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"5:1055:33220":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:7672:9512":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"17:13007:8116":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:9176:9459":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"16:5411:8354":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"12:1555:8919":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:48785:6580":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:48629:10620":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:21539:9137":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"14:187:18191":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:13114:8148":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"20:1431:3694":{"crate_id":20,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"5:688:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:4886:11059":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"16:2557:8334":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"18:491:7232":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"12:1120:8914":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:48720:9092":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:51449:10630":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"16:3689:8379":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:12291:7884":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:5891:7124":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:1931:7302":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:11345:9103":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"6:4506:5124":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:4557:10187":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"16:5780:8456":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:48971:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:52761:9342":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:8917:106":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:9193:34399":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:11070:7646":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:12730:8051":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"16:4721:8398":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:12638:8016":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"6:6303:2809":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:9539:7450":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"16:7319:8733":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:29980:6531":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:9488:7447":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:11853:631":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"16:5996:8492":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:10233:7542":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:6114:9489":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:361:9444":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"20:3180:5107":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"16:6059:34390":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:7679:10983":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:48024:1874":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:2768:11080":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"5:288:2444":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"16:6298:8543":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:8941:7409":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:11747:111":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:12137:30878":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:7810:2158":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"6:5482:5662":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:4371:10357":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:5490:5663":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:4344:7089":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:9250:7420":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"12:632:2258":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:11485:7737":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:9845:2258":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:49854:6655":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"2:47788:9224":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:8935:23973":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:9371:2154":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"16:8069:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"6:5597:5673":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:21592:9138":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"17:9165:34395":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:8737:31427":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:12748:8056":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"20:5473:5158":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:11853:7797":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:558:9446":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:9778:7476":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:51481:10638":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"6:1601:3694":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"16:7117:34391":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:10810:8988":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"16:7343:8365":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:5669:2285":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:10932:7149":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"16:7956:8369":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:10075:7528":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:9930:7495":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:4081:9050":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:8631:7284":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"5:273:7033":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:5615:5676":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:2939:2440":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:5990:7126":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"16:7483:8367":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"16:6284:8368":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"16:7298:8732":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:10497:19280":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"16:7396:19109":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"18:681:7263":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:9350:7394":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"16:4749:8399":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:11059:16420":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"7:0:1507":{"crate_id":7,"path":["unwind"],"kind":"module"},"6:4645:10388":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:7662:9455":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"6:1586:3693":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"12:697:8900":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"20:489:2927":{"crate_id":20,"path":["libc","unix","timespec"],"kind":"struct"},"17:12972:8110":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"16:8056:8814":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:2916:7306":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:22201:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:47489:9207":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"16:6345:8356":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"12:2053:8641":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"16:4385:8388":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:4559:10189":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:11814:10957":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"20:3296:5117":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:4675:10391":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"20:3401:5127":{"crate_id":20,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:50990:9284":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:54739:9429":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"6:7289:10535":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:10915:7147":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"12:2190:34366":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"6:4136:5090":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:22399:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"16:6865:8640":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:12860:8083":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:11310:9122":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:13126:8151":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:57585:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:0:487":{"crate_id":2,"path":["core"],"kind":"module"},"5:7112:30295":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:11859:727":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:11856:729":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:4625:11045":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:11861:1461":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"6:1547:3689":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:51737:8925":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:49757:130":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"17:11343:7706":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:46882:9177":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:10831:24462":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:7587:9505":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:49796:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"6:4516:5125":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"16:153:7015":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"16:4545:8392":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:50794:9279":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:3312:2239":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"6:5730:10488":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:51477:10637":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:5482:2662":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:1571:7054":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:2837:8660":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"20:3209:5110":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"6:4112:5088":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"6:4345:5111":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:12909:8094":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:9061:7412":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:12265:7882":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"6:6440:6161":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:13231:8178":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:11639:7769":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:13100:8141":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"12:0:2019":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"1:10193:9482":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:1849:9460":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"5:1413:8902":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:51315:9300":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"20:3137:5101":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"20:483:2926":{"crate_id":20,"path":["libc","unix","timeval"],"kind":"struct"},"2:47646:9057":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:12103:7851":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:9644:7458":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:3159:2232":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:54183:9413":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:22069:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:4561:10191":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:50894:9281":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:11075:9494":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"2:47055:9181":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:47423:16278":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:7613:7145":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:9110:24572":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","fast","DtorState"],"kind":"enum"},"17:9658:7459":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:12324:7112":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:11939:7825":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:847:2258":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:11075:9114":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"16:4297:8385":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:47001:200":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:11447:9632":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"6:532:2931":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"6:4216:4974":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"16:5472:8353":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"20:1490:3699":{"crate_id":20,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:52406:9323":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"18:755:7280":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:8767:9591":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:2773:8654":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"5:5139:16181":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"6:5792:5677":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:8110:19146":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"16:6743:19106":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:9382:7436":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:9458:7443":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:4353:6672":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:54041:9412":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"18:636:7255":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:6519:2296":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"5:836:7039":{"crate_id":5,"path":["alloc","collections","binary_heap","retain","RebuildOnDrop"],"kind":"struct"},"16:2367:8326":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:13413:8243":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:12756:8057":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:3601:11013":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"20:1574:3708":{"crate_id":20,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"20:5004:6165":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:119:2613":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"17:13221:8173":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:10374:7556":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:51469:10635":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:12797:8070":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"20:3370:5124":{"crate_id":20,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:6270:8351":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"12:1138:8915":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:10796:7595":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:8159:2211":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1:8096:2177":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:12164:7862":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"16:2930:18243":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"12:2205:2150":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:47813:9074":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:9702:219":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"6:7224:5156":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"16:7469:8366":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:8140:11067":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:8875:11074":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"6:5533:5667":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:1524:10348":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:11151:9631":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"16:6593:8605":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"20:55:2537":{"crate_id":20,"path":["libc","unix","DIR"],"kind":"enum"},"16:2341:8325":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"20:1558:3707":{"crate_id":20,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:47739:9223":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:50614:9269":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:10088:7530":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:2459:16282":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"12:274:10320":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"5:1366:2258":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:12103:135":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:47617:9213":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"20:3187:5108":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"5:3680:7024":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"12:387:34372":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"16:7890:8798":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:53835:9380":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"5:3501:8916":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:8245:9096":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:13214:8171":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:4001:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"5:6670:7084":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:10520:7577":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"10:0:2017":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:2613:2223":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"20:1479:3698":{"crate_id":20,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:11734:7500":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"12:853:8908":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"20:1504:3700":{"crate_id":20,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:2936:2439":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:12884:8085":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:11865:775":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"18:614:34408":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"5:2604:10545":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:11271:7679":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"20:4174:5671":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlmsgerr"],"kind":"struct"},"17:13141:8155":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:2806:16331":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"5:5549:229":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:50504:9259":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:2371:2173":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:8139:11068":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:1083:8915":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"6:6339:2718":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:1701:3703":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:47764:7253":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:7125:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"20:4272:5698":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:7656:10954":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"5:6513:7081":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"16:6123:8348":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"20:1350:3685":{"crate_id":20,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:10123:11071":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:3916:11021":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:2798:11081":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"5:1422:8917":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:12514:7922":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"18:521:22921":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:22300:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:54433:9416":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:20690:11084":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"20:3104:5097":{"crate_id":20,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:49784:109":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"1:9064:9494":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:11592:16205":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"6:4708:5132":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:12896:8088":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:12739:8055":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"12:1836:6581":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"20:1444:3696":{"crate_id":20,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"16:4662:8396":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:8991:34400":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"12:985:8641":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:7848:9517":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"9:622:18040":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"1:933:8903":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:5007:9477":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:11356:7707":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"16:5815:19101":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"5:632:9004":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:21721:30297":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"16:5219:7400":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:47687:9063":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:10332:19278":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:47103:9184":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:46937:196":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"6:4408:5114":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:4814:10431":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"6:4669:5675":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"5:6909:9010":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"16:2300:8318":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:1771:599":{"crate_id":1,"path":["std","env"],"kind":"module"},"6:4726:5134":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:1614:3696":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:4743:11027":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:9016:6657":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:1568:6581":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"16:6676:8358":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:6066:7112":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:12116:16287":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:10997:7627":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"12:1044:18178":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"20:4974:6163":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:8484:2258":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:12964:8108":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:547:2933":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:9976:9104":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:6169:7124":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"5:881:2258":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"20:477:2925":{"crate_id":20,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:21645:9141":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:12550:7953":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:9631:7457":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"15:0:2021":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:10625:7586":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:2866:16341":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"20:5485:5160":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"16:7543:8355":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"16:6070:8525":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"16:6704:8614":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:47664:9217":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:12313:106":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:2921:2213":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:8418:19168":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:47409:9200":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:11864:1460":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:6805:2238":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:48852:6640":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"20:614:2958":{"crate_id":20,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:7479:16319":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"16:7166:19108":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:12609:8005":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"16:7135:34388":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:8596:7283":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:54579:9419":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"18:531:7237":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:48583:9089":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:9820:7482":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:54675:9425":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:50055:144":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"6:4447:5117":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"16:2894:18242":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:51009:9286":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:54541:9418":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"20:4806:6156":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"5:7235:7024":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"12:2178:10325":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:10108:7531":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:3326:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:8797:9594":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"16:4888:8403":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"6:4201:5095":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:39883:2491":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:3435:24394":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:8966:131":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:5233:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:7864:2224":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"12:444:141":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:5882:9064":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:22432:9166":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"16:2389:8327":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"20:1361:3687":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:9012:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:12617:8008":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:10608:7374":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:50030:9246":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:6458:6162":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:7840:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:2973:16164":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"17:11800:7790":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:51226:9298":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:50046:9249":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"6:4437:5116":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:8055:19148":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:11857:730":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:53415:9374":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:51290:9299":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:2301:185":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:51253:9126":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:11844:1480":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"6:4550:5129":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"20:3308:5118":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:48039:2239":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"16:4689:8397":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:3864:11017":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"16:6146:8531":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"9:676:18027":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"17:9764:7475":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:6474:6587":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:11893:7801":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"20:3111:5098":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"6:4747:10407":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:8526:7281":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:53575:9376":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"12:1003:8910":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"12:646:8916":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"12:751:7054":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:2815:8656":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"20:3471:5135":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:12955:8107":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"5:6645:7071":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:11288:7687":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:47023:2144":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:4419:11046":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:49371:2284":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:48870:190":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"5:3623:9012":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"12:1534:8918":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:9433:7440":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"20:501:2929":{"crate_id":20,"path":["libc","unix","rusage"],"kind":"struct"},"1:2361:2168":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:51634:202":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"16:5963:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:9831:7483":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:8129:2206":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:52650:9333":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:11056:10649":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"16:5541:8424":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:12337:7567":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:12237:7878":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:48033:9079":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:8342:2244":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:8291:9473":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:3195:2233":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"20:3174:5106":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:2498:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1:8965:9603":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"6:5737:10489":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"6:6555:10515":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:51473:10636":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"20:1472:3697":{"crate_id":20,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:1556:3690":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"16:2771:8343":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:1760:9039":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"20:4278:1691":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:8822:34396":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"1:10341:7144":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"20:3065:5094":{"crate_id":20,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:10999:9591":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"16:7278:8362":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:47386:16277":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"2:21287:9440":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"16:6790:8631":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:1636:578":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:3191:30671":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:3125:24307":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"16:5558:19100":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:1962:7305":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:51445:10629":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"1:11128:7150":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"1:929:8900":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"20:3086:4974":{"crate_id":20,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:9303:7429":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"20:1537:3704":{"crate_id":20,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"5:5143:16182":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:49870:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1:7575:11029":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:9376:7143":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:49733:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"16:2282:8316":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"20:3257:5114":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:9283:7424":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:8441:19169":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"20:3127:5100":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"5:2874:34279":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"6:4304:5106":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:4239:9471":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"14:40:7627":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:3122:24302":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:2822:16334":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"6:5743:10492":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:4575:5131":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"16:6017:8506":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"17:12361:7900":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"18:707:7268":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:46979:198":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"3:0:434":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"16:2842:8346":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:12073:7846":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"5:7098:9028":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"16:0:2022":{"crate_id":16,"path":["gimli"],"kind":"module"},"18:80:22908":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:52561:9329":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:47827:9075":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:11315:7696":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:50634:9271":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:50592:9267":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:6563:16323":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:8324:11060":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:20768:9134":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:11137:7657":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:52428:9324":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:9364:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"20:4151:5655":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"20:590:2940":{"crate_id":20,"path":["libc","unix","protoent"],"kind":"struct"},"2:2843:8661":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:8561:7282":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"6:4459:5118":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"16:2825:8345":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:6602:9490":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"2:3977:9048":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"9:827:18115":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:5422:9483":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:1751:10548":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"20:1635:3761":{"crate_id":20,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"20:3389:5126":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"20:5455:5155":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:9526:7449":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:9873:7490":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"6:4389:5113":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:3234:2229":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:1919:9043":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:11038:2187":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"17:12836:8079":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"16:2535:8333":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"20:2982:5088":{"crate_id":20,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:10170:9111":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"20:4910:6159":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:6312:10511":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"5:781:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:10708:7590":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:1771:7298":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"20:563:2936":{"crate_id":20,"path":["libc","unix","sigval"],"kind":"struct"},"5:5705:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:53651:9378":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:11214:9503":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:8231:9570":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"14:7:8890":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:57202:11121":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"20:1416:3693":{"crate_id":20,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"6:4631:10383":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:7237:8719":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"5:6601:241":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:9293:7427":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:47586:9211":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:247:7289":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"12:1518:18179":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"6:6419:6158":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"16:7497:8357":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:9483:7101":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:5305:9478":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:1575:7024":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"17:12485:7902":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"20:582:2939":{"crate_id":20,"path":["libc","unix","servent"],"kind":"struct"},"17:8339:19165":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:2942:2441":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:11161:7661":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:11813:7792":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:11576:7758":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:6217:203":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:52382:9322":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:8970:9604":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"6:4222:5096":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"6:494:2927":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"6:4149:5091":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"16:7929:8802":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"12:1866:8922":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:3125:7308":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:12436:10975":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"6:1707:3704":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:8992:23921":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:9230:140":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"9:920:18021":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:48543:152":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:30074:30312":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:7513:7139":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:21629:10550":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"12:320:7020":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:12850:8082":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"6:4339:5110":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:11594:7759":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:7823:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"17:13158:8159":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:11248:7152":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"16:2793:8344":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:9500:7102":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:50696:9116":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"1:8923:9599":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:1847:9459":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"5:1212:8641":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:30016:30313":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"20:4042:5640":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"20:568:2937":{"crate_id":20,"path":["libc","unix","itimerval"],"kind":"struct"},"2:21:668":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:20721:11086":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"5:7158:221":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:9371:7413":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:48794:2258":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"6:4771:5136":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:13404:8241":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:13572:8283":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:10321:7549":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:1786:9456":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"16:6829:8635":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:10455:7569":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"3:223:207":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:21135:11112":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"20:4165:5670":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlmsghdr"],"kind":"struct"},"20:4138:5669":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:7247:5158":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"16:6567:8604":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:8666:7285":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"0:0:1767":{"crate_id":0,"path":["num_cpus"],"kind":"module"},"6:4608:10375":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"16:4786:8400":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"6:1642:3697":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:47456:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:11866:1517":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:4547:11022":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"12:1029:8911":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:47096:6671":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"2:8955:207":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"2:58933:9442":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"17:10270:7545":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:20602:11092":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"20:557:2935":{"crate_id":20,"path":["libc","unix","linger"],"kind":"struct"},"20:4095:5664":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:9031:34397":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:10642:19172":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:2501:147":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:30002:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"6:541:2932":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:13082:8137":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"16:5374:8349":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"16:7426:8738":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:9339:7433":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:47291:9186":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:2359:2167":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"9:111:18034":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"1:8047:2176":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"1:10210:29370":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"19:0:1011":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:6350:1874":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"6:1606:3695":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:11106:7653":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"6:4257:5100":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:8152:2210":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"6:5605:5674":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"12:60:34371":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:11862:1462":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:8805:6581":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"20:3080:1882":{"crate_id":20,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:21486:9136":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:12118:7855":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"5:7065:2151":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:2831:7121":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:47355:9192":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:10399:2231":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:53621:9377":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:51161:9296":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"5:2880:34280":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"5:6949:34254":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:48929:8916":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:51453:10631":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"20:134:2613":{"crate_id":20,"path":["libc","unix","FILE"],"kind":"enum"},"2:20433:31908":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:57637:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:11787:7788":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:54644:9422":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:47566:9209":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:4150:6670":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"20:5467:5157":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:9805:7478":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:4622:11054":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"16:4606:8394":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:9284:9100":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:1989:181":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:4720:7122":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:2723:2490":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:48937:6581":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:9022:191":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:50289:9101":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:51461:10633":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"20:521:2930":{"crate_id":20,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:6610:31396":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:51338:9308":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"20:3092:5096":{"crate_id":20,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:53005:9350":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:12176:7864":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:9054:215":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"6:5670:10464":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:47778:9072":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:8701:7286":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:54690:9426":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:7475:10962":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:52613:9331":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:11855:732":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:8295:19164":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:7464:7295":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:2683:222":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"20:3226:5112":{"crate_id":20,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:7516:31968":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"5:5741:16666":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"20:1355:3686":{"crate_id":20,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"20:3425:5130":{"crate_id":20,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:8753:9590":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:7695:9515":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"20:495:2928":{"crate_id":20,"path":["libc","unix","rlimit"],"kind":"struct"},"12:119:7018":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:49291:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:8830:9595":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"20:4069:5662":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:12164:189":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:8392:2254":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:47073:9182":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:3970:11025":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:47748:9070":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"5:3477:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"20:3461:5134":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:123:2614":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:47402:9199":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:29757:11014":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:13148:8156":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:11500:7741":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:9987:26511":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"16:7452:195":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:5485:11069":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:10405:2229":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"16:5525:8422":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:413:162":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"6:5578:10442":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:8368:19166":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:11294:9121":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:52530:9328":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:51043:9192":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"6:4377:5112":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:46835:16165":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"2:2794:11079":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"6:4736:5135":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:21808:9161":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:48819:6639":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"17:11125:7654":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"6:4693:10402":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:38678:2496":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"16:4921:8404":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"20:4887:3623":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"18:507:7233":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:47303:30343":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"12:1832:2258":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:10402:2233":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"16:3010:18244":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:4:995":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"15:193:18197":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:10142:9109":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:4499:5123":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"14:165:18184":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:3088:10974":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:8432:2256":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:6917:7137":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"16:5203:7399":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:8978:9606":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:1580:8920":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:54701:9427":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:11145:9496":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"16:4574:8393":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:6567:214":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:1672:1067":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"6:4471:5119":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"18:624:34409":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:7475:9633":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"16:5949:8485":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"12:815:8903":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:3640:6581":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"20:542:2933":{"crate_id":20,"path":["libc","unix","pollfd"],"kind":"struct"},"5:2884:34278":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:7576:9445":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:12189:9132":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:47707:9068":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"6:4249:5099":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:21613:9140":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:11841:367":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1:2573:2214":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"16:3566:8376":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:11867:1104":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:8213:9469":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:10466:7570":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"12:762:7024":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"16:2465:8330":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"12:2198:10329":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:9362:7412":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"20:5461:5156":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"6:4162:5092":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:914:7024":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"2:11271:9120":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:8951:34401":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:9751:7474":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:11226:10650":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:22168:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:8265:9574":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:2749:2492":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"18:590:7243":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:3966:11024":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"16:7872:8796":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:12674:8045":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"16:3402:8375":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:7025:26513":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:10819:9483":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"1:7856:2222":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"5:6276:6581":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:10128:9108":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:51500:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"5:219:7031":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:13039:8125":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:8859:11073":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"12:98:10319":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"16:3632:8378":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"13:108:34373":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"16:2683:8339":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:5319:9479":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"6:6510:6164":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:5165:187":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"17:13506:8271":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:7051:16320":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:53158:9354":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:8212:19161":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:48861:6635":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"5:7180:9035":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:2679:2436":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"5:1612:7033":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:38661:180":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"12:861:8909":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:9223:19179":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:6738:11082":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"16:6034:8512":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"6:7008:6511":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"20:3215:5111":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"20:4229:5677":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:51000:9285":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:5759:10497":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:11854:632":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"20:3451:5133":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:9021:7411":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:10403:7593":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:5702:2287":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:51178:9297":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"5:6924:9026":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:1051:8641":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:5514:5665":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"5:3153:8923":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:7944:2225":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:9857:7488":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:54716:9428":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"6:5544:5668":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:6656:16315":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:48672:9239":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"12:777:7026":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"1:3765:9468":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:2217:1956":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"16:3263:8374":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:2802:16332":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:10528:7579":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"6:4317:5108":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:49331:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:10360:7551":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"20:4925:6161":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:47461:9206":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:10257:7544":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:9071:34394":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"6:652:2958":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"12:834:8906":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:3172:16254":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:52460:9325":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:5417:9060":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:4108:9052":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"6:488:2926":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:52316:9319":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"5:784:7036":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:10612:9619":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"17:12211:7876":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:6425:6159":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:4079:11038":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"16:3854:8381":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:52791:9343":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"6:1649:3698":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:679:10956":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"2:2832:16336":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:21681:30330":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:50553:9265":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"12:659:6581":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:12349:7893":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:904:7054":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:13192:8166":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:3206:16162":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:12768:8062":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"20:1522:3702":{"crate_id":20,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:1894:3761":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"6:5851:1691":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"5:1973:9012":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:11606:7761":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:925:8899":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"6:6489:6163":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:49507:6658":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"6:4621:10380":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:13059:8132":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"20:4131:5668":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:2763:11078":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:47696:9221":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"16:5981:8490":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:13374:8234":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"6:5751:10494":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:51034:9047":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:50948:9283":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"16:7970:8807":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:10049:9106":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"16:2657:8338":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:9328:7431":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:11521:16198":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:3662:9466":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"18:719:7272":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:420:7293":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:8139:2207":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"17:10532:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:50712:2208":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:52907:9346":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"20:3334:5120":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"20:3238:5113":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:53080:9352":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:12322:7890":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"20:4193:5674":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:51147:9293":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:52360:9321":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"6:579:2938":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:355:9443":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"16:7059:6639":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:8881:34402":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:50702:9276":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:9014:6656":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"20:2995:5089":{"crate_id":20,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:47416:9201":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:53127:9353":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"16:3026:7316":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:54664:9424":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:50038:9248":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"20:3147:5102":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:10973:7626":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:11259:7678":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:8564:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"6:595:2940":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:4666:11032":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:6362:3648":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:8956:2181":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"18:574:7233":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"18:609:7249":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"20:4203:5675":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlattr"],"kind":"struct"},"2:54617:9420":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:10445:7567":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"5:2094:10537":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"16:2605:8336":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:13091:8140":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"20:4919:6160":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"18:671:7262":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:47536:7090":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:8494:7399":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"6:7176:6167":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:1927:11004":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:30180:30318":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:11858:731":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:1788:9457":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"9:382:18124":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:52959:9348":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:2908:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"16:5163:8406":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"6:1692:3702":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:50670:9272":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:10062:7527":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:11541:16196":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"16:2631:8337":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:11186:7664":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:20847:11029":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:11234:9117":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"12:2184:10326":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"16:4635:8395":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:3342:2197":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:2932:2438":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:13580:8286":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"16:7309:8363":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:10987:9590":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"5:6971:195":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"16:6161:19103":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:8796:7401":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:10682:7589":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"6:4663:5671":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:11368:7710":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:50684:9275":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"6:474:2924":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:22333:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:2549:7102":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"6:1744:3708":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:12874:8084":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"16:2868:8347":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:54635:9421":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:10875:7602":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"6:562:2935":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:2853:16338":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:9108:7413":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"20:3286:5116":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"16:6186:8350":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:2790:8655":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"5:1257:8915":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:1552:2197":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:7783:2153":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:10221:7541":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"20:4185:5673":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:1660:3699":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:21393:11029":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:3444:2179":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"12:1845:7024":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"16:3457:7320":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"6:554:2934":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:22135:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"20:3276:5115":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:48010:9077":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:11873:7800":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:48810:6581":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:3249:7309":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"5:4219:242":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:870:6581":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"6:1568:3691":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"16:7249:8720":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:9691:7462":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:11748:7784":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:11199:9501":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:10636:10647":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:49131:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:48802:8916":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"6:4195:5094":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:4159:9470":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:3166:134":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"16:6816:8632":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:3377:16234":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"5:6933:7054":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:49818:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"16:7211:8460":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"20:1386:3690":{"crate_id":20,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:57598:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"20:3059:5093":{"crate_id":20,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:20665:11094":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"1:10654:9624":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"20:1398:3691":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:10139:7412":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:10949:7612":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:10583:19171":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:9738:7472":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"20:4797:2809":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"20:1377:3689":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"9:586:10332":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"2:2995:10973":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"5:3098:34290":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:8137:19159":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:8225:11042":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:11054:7642":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"5:4103:2258":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:9018:6658":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:11847:308":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:50270:9257":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"13:0:2013":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:50726:2210":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:12251:7879":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:3932:2197":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:10854:19174":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:29940:6529":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"5:6351:7033":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:7939:9519":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"1:7800:2157":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1:10037:9610":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:39874:9174":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:49766:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"5:4939:2283":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"16:5839:19102":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:9118:34393":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:2208:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:47595:2206":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:1898:9461":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:11909:7806":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"16:5510:8419":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:3243:16163":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"4:0:2014":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:25641:9037":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"5:1387:6581":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"12:1628:7027":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:20471:31961":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"6:4189:5093":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:8171:9566":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:8781:9592":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:7472:2265":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:13536:8279":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:646:10955":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:50067:2254":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"6:4585:10361":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:8241:19162":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:11490:9504":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:7266:24787":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:2539:2221":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"20:1368:3688":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:51465:10634":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:9864:9236":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"2:3389:9046":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"2:2682:223":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:11997:7837":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:10631:10645":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:5368:9482":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:51325:9304":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"20:3320:5119":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:53029:9351":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"5:7169:9034":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:12926:8099":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"16:6517:8591":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:4364:10355":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:10296:7547":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:4728:31865":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:3506:7054":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:3178:16253":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:8490:2260":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"16:2261:18216":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"6:7230:5157":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"5:3132:34289":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:20678:11029":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"20:3032:5092":{"crate_id":20,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"6:500:2928":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:8220:10639":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:21742:30338":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"18:0:2024":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:11370:9467":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:5553:7125":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:10696:2177":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:2736:2437":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"20:4870:3620":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"5:2065:9013":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:22234:9165":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"6:5592:5672":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:21787:10553":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"16:5596:8428":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"5:864:7041":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"20:2976:5087":{"crate_id":20,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:4591:10364":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"14:160:8890":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"6:7259:5160":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:638:9448":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:10676:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"20:4773:2851":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:13279:8215":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"5:3699:7033":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"12:1859:8921":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"6:526:2930":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:9013:10641":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:9317:7430":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:9671:7460":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"20:4107:5666":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"18:727:7275":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:6875:30004":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"6:5782:10503":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"18:96:22909":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:51457:10632":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"6:506:2929":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:11547:7753":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"20:5019:6166":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"5:4818:2197":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:1720:3706":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:13184:8165":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:2672:217":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:48708:9090":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:13366:8231":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:10546:19170":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:5676:2286":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:3978:11026":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:50776:9278":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"5:7252:7074":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"16:6668:8612":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"16:5737:8301":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:8752:2208":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:20880:9134":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"14:202:16215":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"16:2487:8331":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:12934:8102":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"14:31:8890":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:47503:1748":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"1:8735:9589":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"5:1404:8901":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"6:4525:5126":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:939:10959":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:52861:9345":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:47608:9212":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"20:3355:5122":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Chdr"],"kind":"struct"},"6:6402:3623":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"16:8014:8699":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:54655:9423":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"20:1531:3703":{"crate_id":20,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"20:4995:6164":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:5907:203":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"6:1713:3705":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"16:5235:8407":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"6:5702:5121":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:51025:9199":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:10822:19173":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:11232:10651":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"5:6979:9027":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:21130:11089":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"18:582:2496":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:10921:7606":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:47343:9191":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:1903:19211":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:8789:2258":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"6:6279:2851":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:50876:9280":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:5539:203":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:9515:7107":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:9083:2187":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"5:1091:33218":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:11497:9504":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:3151:16342":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:8871:7408":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:13047:8126":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"16:5878:18215":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:7047:16321":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"6:482:2925":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"9:505:18164":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"16:4519:8391":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:2684:108":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:21696:9147":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"16:7942:8805":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"16:2509:8332":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"5:2162:10541":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:1597:8923":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"6:4290:5104":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"16:7557:8743":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:10087:9107":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:8146:2208":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:10159:7534":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:8811:9484":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:49051:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"20:4180:5672":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"5:679:228":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:6252:8542":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"6:6321:6156":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"12:1065:34367":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:1021:7297":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:14:2125":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:50453:9258":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"6:4700:984":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:7088:149":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:4399:6673":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:5811:7126":{"crate_id":1,"path":["std","sync","mpmc","array","Channel"],"kind":"struct"},"20:1410:3692":{"crate_id":20,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:5546:7124":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:12980:8112":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"16:4327:8386":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:51533:16462":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:2991:10972":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"20:138:2614":{"crate_id":20,"path":["libc","unix","fpos_t"],"kind":"enum"},"6:5635:10443":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:20450:31966":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:12008:7839":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"6:6434:6160":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:6390:2295":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:1074:8911":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:2345:2163":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"12:1872:8923":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"1:11860:1464":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"5:1454:195":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"20:4101:5665":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"16:4413:8389":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"16:7329:8364":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:11849:1368":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"20:4077:5663":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:4106:5087":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:3279:2218":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"5:1443:8900":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:12148:7858":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"16:3188:8373":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:9601:7455":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:4563:16270":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"9:977:8991":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"6:4284:5103":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:3908:11020":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"6:7218:5155":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:47380:9047":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:50930:9282":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:12381:139":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:8911:34398":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:10207:7537":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"16:2993:8370":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"15:175:18196":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"9:709:2254":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:950:8906":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"16:6200:8538":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"16:5433:8409":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:505:7048":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:11436:7712":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:9026:6661":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"16:5184:18214":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:2827:16335":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:6082:7133":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"5:4722:201":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"16:6903:9606":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:484:7114":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"16:2749:8342":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"16:7267:8728":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"20:4904:6158":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:920:8917":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:20418:31908":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"0:73:1650":{"crate_id":0,"path":["num_cpus","get_physical"],"kind":"function"},"6:4716:5133":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"12:393:34368":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:47442:9205":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:52668:9334":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:11217:7673":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:12630:8015":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:11559:7755":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:12033:7842":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"6:4427:5115":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:5339:9480":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:9183:7415":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"5:5095:7033":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:7084:133":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:1517:10345":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:1684:3701":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:10182:7535":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:20639:11093":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:621:9447":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:13168:8162":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:1643:6526":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"5:7053:2150":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"9:956:18022":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:11184:9500":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"6:5508:5664":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:9422:7439":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"20:574:2938":{"crate_id":20,"path":["libc","unix","tms"],"kind":"struct"},"17:12046:7844":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"20:4847:3648":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:967:7296":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:8501:2261":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:11843:410":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"18:564:7242":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:11536:7750":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"16:4441:8390":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"16:7603:8751":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"16:2320:8324":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:734:141":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"16:6241:8541":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"20:4298:5699":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:1564:2258":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:13518:8273":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"20:5033:6167":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","termios2"],"kind":"struct"},"16:4817:8401":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"5:1329:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:9263:7421":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:2507:235":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:51018:9123":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:8843:11072":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:13478:8262":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:52813:9344":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"16:534:8305":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"6:568:2936":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:47546:9208":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"17:13024:8123":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"16:6496:19105":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:10926:7148":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:21820:11015":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:7592:9507":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:9446:7441":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"12:669:8899":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:8162:19160":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:20727:11088":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:11825:24459":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"6:6534:6166":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:9791:7477":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:641:9450":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"6:6963:2884":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"6:1506:3685":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:48649:30329":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:4227:9054":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:51725:9318":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:8898:2288":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"16:6654:8610":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"16:6330:8553":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"6:4327:5109":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:11482:2266":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"5:4234:7060":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:48921:2258":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:4662:11028":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"9:19:18089":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"6:62:2537":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:48058:9081":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"16:4357:8387":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"5:3902:7033":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:53685:9379":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:2592:127":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"17:13459:8257":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:11515:7746":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:53339:9372":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:50624:9270":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"16:6735:8617":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:10245:7543":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:891:8902":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:8080:2238":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"16:7847:8793":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"5:6503:7079":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:3157:2231":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:54293:9414":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"20:1514:3701":{"crate_id":20,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:9897:7492":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:1592:8922":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"7:32:18006":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:534:7115":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:10806:9515":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"17:11247:7677":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"16:6719:34387":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:878:8901":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:4754:781":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:4707:6512":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"16:2705:8340":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"5:6484:7067":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"16:6619:8606":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"6:5845:5698":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:7532:7141":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:47678:9220":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"12:1852:8920":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:10774:7310":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:11685:7157":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:10641:2156":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"20:1543:3705":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"6:6385:3620":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"16:5793:8307":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:11149:7658":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:39834:10328":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:11721:7779":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:10385:7560":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"5:6157:7054":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:52937:9347":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"18:652:7233":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:3956:11023":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"12:2069:8910":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"6:7265:10530":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"20:469:2924":{"crate_id":20,"path":["libc","unix","group"],"kind":"struct"},"1:9059:216":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:11199:7665":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"5:4064:2197":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"12:300:10323":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"16:6137:8530":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"6:5520:5666":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:13340:8222":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"16:4217:8383":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:9401:7437":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"16:4144:8382":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:51304:16208":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:2691:2488":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"5:2055:7048":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"18:644:7233":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:1474:1655":{"crate_id":2,"path":["core","mem"],"kind":"module"},"5:6963:6581":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"16:6109:8528":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"5:3611:2224":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:2306:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:49493:6657":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:9681:7354":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:4837:11053":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:9844:7486":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:50830:9108":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:13176:8163":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"16:7511:8741":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:9043:164":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:10688:9113":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:9401:7098":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"12:1085:8913":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:9909:7493":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"6:6519:6165":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"18:113:22910":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:8958:9602":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"16:7567:19110":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"9:0:2016":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:20719:11029":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:956:8908":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"11:0:2018":{"crate_id":11,"path":["adler"],"kind":"module"},"6:6582:6169":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:6463:2291":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:46796:16252":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:8981:7410":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"16:7980:19112":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:0:1360":{"crate_id":1,"path":["std"],"kind":"module"},"18:766:22920":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:57611:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:9102:9608":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:4820:10433":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:2778:8651":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"5:3245:7024":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"12:738:8902":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"16:5460:8418":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"6:587:2939":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:49514:6659":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"9:188:18069":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"17:11014:7631":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"6:5551:5669":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:21299:31912":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"20:1436:3695":{"crate_id":20,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"5:2375:10542":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"6:7276:10534":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"20:3348:5121":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Chdr"],"kind":"struct"},"17:12307:7886":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:9244:144":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:11465:10653":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"16:5494:19099":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:10894:7605":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:20452:31963":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"20:527:2931":{"crate_id":20,"path":["libc","unix","hostent"],"kind":"struct"},"17:13393:8240":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:962:8909":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"18:736:22919":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:2579:8335":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:10666:2157":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"6:5723:10486":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:12060:7845":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:12278:7883":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:9577:7454":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:6313:9490":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"17:10420:7564":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"6:1580:3692":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:3197:2234":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"5:3568:7033":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:10444:7145":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"12:810:8917":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"16:5388:8352":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:6533:2297":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:3369:1873":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:49171:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:10476:19279":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:10434:7565":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:10014:9105":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"20:4781:3619":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:51652:192":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"7:79:18013":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"6:4639:10387":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"20:5494:6513":{"crate_id":20,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:2337:179":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"1:9968:9458":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"17:8510:7400":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:5053:188":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"20:4943:6162":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:48048:7096":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:4299:6671":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"18:481:7231":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:51644:208":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"5:1228:8911":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:20473:31965":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:12695:8050":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:13436:8256":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:11019:10638":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"1:11809:24789":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:47319:9189":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"9:896:18020":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:2867:207":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"17:10670:7588":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:48600:11012":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:9894:2210":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:8475:19147":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:9712:7469":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"16:2727:8341":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:5745:2294":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"6:1538:3688":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:562:7295":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"5:1959:2224":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:2578:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:3922:11022":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"6:4826:10436":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:54371:9415":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:6332:6157":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"14:0:2020":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:11868:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"17:11087:7648":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:49751:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"2:57572:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:12022:7841":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:10490:7572":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"6:573:2937":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:3989:9049":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"6:4778:5137":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:2343:186":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"14:215:8895":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:47282:9185":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"6:4569:10359":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:2857:16339":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:5354:9481":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"5:36:7029":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"5:2142:34245":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:11951:7827":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:1065:8910":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"6:4234:5097":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:860:8916":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:2252:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"6:5453:5640":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:7253:5159":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:52490:9326":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"5:1071:34277":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"20:5064:6169":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:53497:9375":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:50532:9263":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"5:7000:6581":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"5:2876:10538":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:47276:9047":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:58912:9441":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"2:53261:9356":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"5:3119:8922":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"6:4267:5101":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:13134:8154":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"5:5814:2197":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:8108:2180":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:9700:7465":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:8912:9596":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"20:3443:5132":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:11089:16199":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:48946:180":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:3894:11019":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"6:1674:3700":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:9279:16289":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"16:5761:8449":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:2504:132":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:6865:2278":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:13382:8235":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:588:10949":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"6:4615:10377":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:11391:9468":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:2232:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:21704:9148":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:9020:6659":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:47363:16276":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"2:22366:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:13354:8228":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:52715:9335":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"20:4209:5676":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"20:3166:5105":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:12134:7856":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"16:7825:8792":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:4788:10414":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:4397:11045":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"6:7236:10526":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:49011:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"6:5709:10475":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:6354:2289":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:13557:8282":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:0:2023":{"crate_id":17,"path":["object"],"kind":"module"},"2:52512:9327":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:21395:11087":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:8415:2255":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:20405:2496":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:9885:7491":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:2495:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"17:10752:7593":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"5:2873:6628":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:2810:16333":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:47473:30295":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:6466:2292":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"12:1840:7054":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"20:3482:5136":{"crate_id":20,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:12816:8071":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:10506:7574":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:20852:11085":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:4095:11040":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"16:4849:8402":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"20:3197:5109":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"20:3119:5099":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:4356:10350":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:50605:9268":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:4537:5127":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:51687:9313":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"16:5122:8405":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:52983:9349":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"6:4125:5089":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"16:7435:8739":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:2458:11029":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"16:7044:34389":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:22267:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"12:2080:8911":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:3665:9467":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"16:6528:8592":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"20:3489:5137":{"crate_id":20,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"16:7093:8678":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:21794:9160":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:47333:9190":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:21758:30336":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:7641:10952":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:1986:182":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:9007:111":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:9937:9103":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:9160:9099":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"1:3451:1871":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"12:725:8901":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"16:5614:8432":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:8239:9564":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"18:660:7256":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:2476:1872":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:9274:7422":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"12:1681:143":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:10298:9589":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"20:3019:5091":{"crate_id":20,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:1511:3686":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"5:961:7033":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:48685:9469":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:8393:19167":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:11841:7796":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:11708:7776":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:2343:2162":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:9475:7446":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"6:4755:10409":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:5564:5655":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:4210:1882":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:4654:5670":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:9627:7456":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:10686:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:11330:9466":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:7934:9518":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"5:5391:7067":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"16:7909:8801":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:11850:1446":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:46957:199":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:54792:9432":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:242:7288":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:9501:7429":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"9:800:10334":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"6:4310:5107":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:20878:11090":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:22831:9036":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:10706:24460":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:53385:9373":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:4218:204":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:11846:1029":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"20:3160:5104":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"5:4297:7060":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:50848:9109":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"5:3086:2258":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:49211:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:3161:231":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"18:599:34406":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"20:3363:5123":{"crate_id":20,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"16:7388:8737":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:52631:9332":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:11761:7785":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:6548:10512":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:7793:2156":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:54769:9431":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"5:3488:2258":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:1824:9458":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"6:4277:5102":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"11:44:8926":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"2:57624:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"20:3071:5095":{"crate_id":20,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:2680:2487":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:5661:32000":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"2:2154:579":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:51695:9315":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:7148:2442":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"6:4561:5130":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:5694:5122":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:47799:2207":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"18:515:7230":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:48566:9087":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"20:4824:2718":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:10721:7592":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:10655:9112":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"5:6003:11123":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:8732:31967":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"16:3599:8377":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:46897:197":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:50579:9209":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:6287:3619":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"5:7006:6581":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"6:6985:6510":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:50522:9262":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"6:6564:6168":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:47089:9183":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"2:47626:9214":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:11546:16195":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:8814:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"17:11330:7702":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:11307:7153":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:49500:6656":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:11300:7690":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"}},"external_crates":{"20":{"name":"libc","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}