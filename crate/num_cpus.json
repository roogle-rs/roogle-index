{"root":"0:0:1965","crate_version":"1.16.0","includes_private":false,"index":{"2:12572:26828":{"id":"2:12572:26828","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12021:457","str::splitn":"2:12569:26826","self::pattern":"2:12199:17204"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43768:9952","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:9939","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12204:9939","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12219:17202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12599:31898":{"id":"2:12599:31898","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12566:31892":{"id":"2:12566:31892","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12199:17204","str::split":"2:12554:2107","prim@char":"1:12021:457","str::split_terminator":"2:12563:31891"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43714:10111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:9939","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12204:9939","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12219:17202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12510:31886":{"id":"2:12510:31886","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12508:31885"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12619:31904":{"id":"2:12619:31904","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12021:457","self::pattern":"2:12199:17204"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:9939","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12204:9939","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12219:17202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12533:30156":{"id":"2:12533:30156","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12532:30162"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43929:10118","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12613:31902":{"id":"2:12613:31902","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12021:457","self::pattern":"2:12199:17204"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:9939","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12204:9939","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12219:17202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12628:27969":{"id":"2:12628:27969","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12632:31906":{"id":"2:12632:31906","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4582:31906"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43963:10027","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12504":{"id":"2:12504","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12505:879","2:12506:2188","2:12507:31884","2:12508:31885","2:12510:31886","2:12513:27960","2:12514:31887","2:12515:349","2:12516:348","2:12517:1826","2:12519:26789","2:12521:26790","2:12523:26791","2:12525:31888","2:12526:31889","2:12527:26813","2:12528:26814","2:12529:9967","2:12530:10127","2:12531:6776","2:12532:30162","2:12533:30156","2:12534:2104","2:12535:31890","2:12536:30157","2:12537:26832","2:12540:26833","2:12543:26834","2:12546:2172","2:12550:6785","2:12554:2107","2:12557:26822","2:12560:26824","2:12563:31891","2:12566:31892","2:12569:26826","2:12572:26828","2:12575:26830","2:12578:26831","2:12581:2331","2:12584:31893","2:12587:31894","2:12590:31895","2:12593:2111","2:12595:31896","2:12597:31897","2:12599:31898","2:12600:31899","2:12601:31900","2:12604:31901","2:12607:2153","2:12610:26835","2:12613:31902","2:12616:31903","2:12619:31904","2:12622:1958","2:12624:27964","2:12625:27965","2:12626:27967","2:12627:27968","2:12628:27969","2:12629:31905","2:12631:11905","2:12632:31906"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5519":{"id":"5:5519","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5520:32564","5:5521:6733","5:5524:32565","5:5527:32566","5:5535:32567","5:5536:32568","5:5537:2449","5:5538:28022","5:5539:28023"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12563:31891":{"id":"2:12563:31891","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12199:17204","str::split":"2:12554:2107","prim@char":"1:12021:457","`DoubleEndedIterator`":"2:7581:128","str::rsplit_terminator":"2:12566:31892"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43696:10110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:9939","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12625:27965":{"id":"2:12625:27965","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39633:27959","Self::is_ascii":"2:12624:27964"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41684:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39633:27959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12537:26832":{"id":"2:12537:26832","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12021:457","self::pattern":"2:12199:17204"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:9939","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12531:6776":{"id":"2:12531:6776","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43632:2423","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12601:31900":{"id":"2:12601:31900","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12021:457","self::pattern":"2:12199:17204"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:9939","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12204:9939","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12224:17201","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1965":{"id":"0:0:1965","crate_id":0,"name":"num_cpus","span":{"filename":"src/lib.rs","begin":[1,0],"end":[485,1]},"visibility":"public","docs":"A crate with utilities to determine the number of CPUs available on the\ncurrent system.\n\nSometimes the CPU will exaggerate the number of CPUs it contains, because it can use\n[processor tricks] to deliver increased performance when there are more threads. This \ncrate provides methods to get both the logical and physical numbers of cores.\n\nThis information can be used as a guide to how many tasks can be run in parallel.\nThere are many properties of the system architecture that will affect parallelism,\nfor example memory access speeds (for all the caches and RAM) and the physical\narchitecture of the processor, so the number of CPUs should be used as a rough guide\nonly.\n\n\n## Examples\n\nFetch the number of logical CPUs.\n\n```\nlet cpus = num_cpus::get();\n```\n\nSee [`rayon::Threadpool`] for an example of where the number of CPUs could be\nused when setting up parallel jobs (Where the threadpool example uses a fixed\nnumber 8, it could use the number of CPUs).\n\n[processor tricks]: https://en.wikipedia.org/wiki/Simultaneous_multithreading\n[`rayon::ThreadPool`]: https://docs.rs/rayon/1.*/rayon/struct.ThreadPool.html","links":{},"attrs":["#![deny(missing_docs)]","#![allow(non_snake_case)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:72:1826","0:73:1844"],"is_stripped":false}}},"2:12528:26814":{"id":"2:12528:26814","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12527:26813"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12554:2107":{"id":"2:12554:2107","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12199:17204","`DoubleEndedIterator`":"2:7581:128","prim@char":"1:12021:457","str::split_whitespace":"2:12532:30162","str::rsplit":"2:12560:26824"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43646:2424","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:9939","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12595:31896":{"id":"2:12595:31896","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12508:31885":{"id":"2:12508:31885","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12581:2331":{"id":"2:12581:2331","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12199:17204","`DoubleEndedIterator`":"2:7581:128","prim@char":"1:12021:457","str::rmatches":"2:12584:31893"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43850:10114","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:9939","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12624:27964":{"id":"2:12624:27964","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5524:32565":{"id":"5:5524:32565","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7490:255"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:9939","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12519:26789":{"id":"2:12519:26789","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41686:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41684:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10289:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10289:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12530:10127":{"id":"2:12530:10127","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12021:457"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43622:10108","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12584:31893":{"id":"2:12584:31893","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12199:17204","`DoubleEndedIterator`":"2:7581:128","prim@char":"1:12021:457","str::matches":"2:12581:2331"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43868:10115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:9939","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12204:9939","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12219:17202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12546:2172":{"id":"2:12546:2172","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41686:202","prim@char":"1:12021:457","self::pattern":"2:12199:17204"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41684:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:9939","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12629:31905":{"id":"2:12629:31905","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4584:31905"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43945:10028","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12525:31888":{"id":"2:12525:31888","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12027:1543","str::slice_mut_unchecked":"2:12526:31889","crate::ops::Index":"2:3085:11928"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5521:6733":{"id":"5:5521:6733","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7490:255"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:9939","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5527:32566":{"id":"5:5527:32566","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7490:255"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12536:30157":{"id":"2:12536:30157","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43938:9966","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12543:26834":{"id":"2:12543:26834","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12021:457","self::pattern":"2:12199:17204"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:9939","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12204:9939","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12219:17202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5539:28023":{"id":"5:5539:28023","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12628:27969"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12587:31894":{"id":"2:12587:31894","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12199:17204","`DoubleEndedIterator`":"2:7581:128","prim@char":"1:12021:457","str::rmatch_indices":"2:12590:31895"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43796:10112","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:9939","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12535:31890":{"id":"2:12535:31890","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43910:10116","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73:1844":{"id":"0:73:1844","crate_id":0,"name":"get_physical","span":{"filename":"src/lib.rs","begin":[108,0],"end":[110,1]},"visibility":"public","docs":"Returns the number of physical cores of the current system.\n\nThis will always return at least `1`.\n\n# Note\n\nPhysical count is supported only on Linux, mac OS and Windows platforms.\nOn other platforms, or if the physical count fails on supported platforms,\nthis function returns the same as [`get()`], which is the number of logical\nCPUS.\n\n# Examples\n\n```\nlet logical_cpus = num_cpus::get();\nlet physical_cpus = num_cpus::get_physical();\nif logical_cpus > physical_cpus {\n    println!(\"We have simultaneous multithreading with about {:.2} \\\n              logical cores to 1 physical core.\", \n              (logical_cpus as f64) / (physical_cpus as f64));\n} else if logical_cpus == physical_cpus {\n    println!(\"Either we don't have simultaneous multithreading, or our \\\n              system doesn't support getting the number of physical CPUs.\");\n} else {\n    println!(\"We have less logical CPUs than physical CPUs, maybe we only have access to \\\n              some of the CPUs on our system.\");\n}\n```\n\n[`get()`]: fn.get.html","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12514:31887":{"id":"2:12514:31887","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12534:2104":{"id":"2:12534:2104","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43900:2420","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12517:1826":{"id":"2:12517:1826","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41686:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41684:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10289:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10289:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12607:2153":{"id":"2:12607:2153","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12021:457","self::pattern":"2:12199:17204"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41684:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:9939","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5536:32568":{"id":"5:5536:32568","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2645","`String`":"5:7490:255"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2645","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12513:27960":{"id":"2:12513:27960","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11759:17205"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12626:27967":{"id":"2:12626:27967","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12557:26822":{"id":"2:12557:26822","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12021:457","self::pattern":"2:12199:17204"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12015:9946","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:9939","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12529:9967":{"id":"2:12529:9967","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12021:457"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43616:9959","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12600:31899":{"id":"2:12600:31899","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12610:26835":{"id":"2:12610:26835","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12021:457","self::pattern":"2:12199:17204"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41684:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:9939","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12204:9939","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12219:17202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12550:6785":{"id":"2:12550:6785","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41686:202","prim@char":"1:12021:457","self::pattern":"2:12199:17204"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41684:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:9939","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12204:9939","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12219:17202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12590:31895":{"id":"2:12590:31895","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12199:17204","`DoubleEndedIterator`":"2:7581:128","prim@char":"1:12021:457","str::match_indices":"2:12587:31894"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43814:10113","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:9939","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12204:9939","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12219:17202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12631:11905":{"id":"2:12631:11905","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4585:11905"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43954:9889","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12578:26831":{"id":"2:12578:26831","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41684:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:9939","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12204:9939","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12219:17202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:72:1826":{"id":"0:72:1826","crate_id":0,"name":"get","span":{"filename":"src/lib.rs","begin":[73,0],"end":[75,1]},"visibility":"public","docs":"Returns the number of available CPUs of the current system.\n\nThis function will get the number of logical cores. Sometimes this is different from the number\nof physical cores (See [Simultaneous multithreading on Wikipedia][smt]).\n\nThis will always return at least `1`.\n\n# Examples\n\n```\nlet cpus = num_cpus::get();\nif cpus > 1 {\n    println!(\"We are on a multicore system with {} CPUs\", cpus);\n} else {\n    println!(\"We are on a single core system\");\n}\n```\n\n# Note\n\nThis will check [sched affinity] on Linux, showing a lower number of CPUs if the current\nthread does not have access to all the computer's CPUs.\n\nThis will also check [cgroups], frequently used in containers to constrain CPU usage.\n\n[smt]: https://en.wikipedia.org/wiki/Simultaneous_multithreading\n[sched affinity]: http://www.gnu.org/software/libc/manual/html_node/CPU-Affinity.html\n[cgroups]: https://www.kernel.org/doc/Documentation/cgroup-v1/cgroups.txt","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12526:31889":{"id":"2:12526:31889","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12027:1543","crate::ops::IndexMut":"2:3089:11929","str::slice_unchecked":"2:12525:31888"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12506:2188":{"id":"2:12506:2188","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12540:26833":{"id":"2:12540:26833","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12021:457","self::pattern":"2:12199:17204"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:9939","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12616:31903":{"id":"2:12616:31903","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12021:457","self::pattern":"2:12199:17204"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:9939","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5535:32567":{"id":"5:5535:32567","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7490:255"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12521:26790":{"id":"2:12521:26790","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10289:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10289:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12505:879":{"id":"2:12505:879","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12021:457"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12560:26824":{"id":"2:12560:26824","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12199:17204","`DoubleEndedIterator`":"2:7581:128","prim@char":"1:12021:457","str::split":"2:12554:2107"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43664:9949","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:9939","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12204:9939","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12219:17202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12569:26826":{"id":"2:12569:26826","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12021:457","self::pattern":"2:12199:17204","str::rsplitn":"2:12572:26828"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43750:9951","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:9939","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5537:2449":{"id":"5:5537:2449","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7490:255"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12515:349":{"id":"2:12515:349","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12516:348","`u8`":"1:12038:1649"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5538:28022":{"id":"5:5538:28022","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12627:27968"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12527:26813":{"id":"2:12527:26813","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12528:26814"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12593:2111":{"id":"2:12593:2111","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5520:32564":{"id":"5:5520:32564","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2645","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2645","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12516:348":{"id":"2:12516:348","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12038:1649"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12532:30162":{"id":"2:12532:30162","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12533:30156"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43920:10117","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12523:26791":{"id":"2:12523:26791","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10289:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10289:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12597:31897":{"id":"2:12597:31897","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12622:1958":{"id":"2:12622:1958","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12160:134","`FromStr`":"2:12159:2476"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41829:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12159:2476","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12159:2476","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12507:31884":{"id":"2:12507:31884","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12627:27968":{"id":"2:12627:27968","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12575:26830":{"id":"2:12575:26830","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41684:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:9939","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12604:31901":{"id":"2:12604:31901","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12021:457","self::pattern":"2:12199:17204"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:9939","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"6:4455:5183":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"6:1650:3908":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:4372:10302":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:13162:8601":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"16:2380:9046":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:2951:17337":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"16:7621:20314":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"5:2961:6837":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:40305:2386":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"17:11586:8303":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"5:897:2472":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"5:687:117":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:10126:8130":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"11:2461:11209":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:12576:8493":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"6:5085:11338":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:12074:8381":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:7719:11911":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:256:7957":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:42716:9494":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:11226:8270":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"5:7437:29915":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"20:55:2746":{"crate_id":20,"path":["libc","unix","DIR"],"kind":"enum"},"20:3389:5336":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:30356:6740":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"20:5455:5365":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"11:860:9634":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:12531:8483":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:8376:12019":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"20:557:3144":{"crate_id":20,"path":["libc","unix","linger"],"kind":"struct"},"20:4077:5873":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:12111:8387":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"16:2339:9039":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"13:110:33132":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:2939:238":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"2:42741:70":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"16:3315:9094":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:3158:29705":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"11:1562:9645":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"20:2982:5298":{"crate_id":20,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"20:4910:6369":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:47819:10251":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:39266:10013":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:13632:8774":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:8794:20366":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"20:1531:3912":{"crate_id":20,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:10068:10288":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"6:7679:11471":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:40061:29895":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:10012:8096":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:7631:10276":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"16:3065:7987":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:22251:9982":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:10313:111":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"17:14499:9002":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"16:8181:9090":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"20:4193:5884":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:42275:96":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:8848:20368":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:30948:2705":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:43590:10104":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:13202:8606":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:42686:70":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"18:609:7918":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"5:1376:98":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"16:8294:135":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:44373:11573":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"11:423:33127":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"6:5015:5342":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"10:44:9655":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"20:1479:3907":{"crate_id":20,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:8228:11969":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"20:4042:5850":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:7651:11465":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"6:4977:11311":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"16:7503:9083":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"16:6279:9249":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:44393:11578":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:10023:8097":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"16:3915:9101":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:45640:10153":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"16:6171:218":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:1481:1850":{"crate_id":2,"path":["core","mem"],"kind":"module"},"20:4138:5879":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:6781:3832":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"8:0:2226":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:4480:12000":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:42457:6865":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:11244:8304":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:3085:11928":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:3246:17340":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"6:1913:3970":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:1760:10287":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"11:2473:11211":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:46185:10179":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:41663:9935":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"6:1734:3917":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"16:3888:9100":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"20:1635:3970":{"crate_id":20,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:40903:2452":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"5:4428:7744":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"16:5384:20303":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"16:2810:9064":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:1750:17359":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:11048:8247":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"20:2995:5299":{"crate_id":20,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"18:681:7932":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:8283:10397":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"16:5574:9070":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:22773:198":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:11473:8050":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"16:2618:9056":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"20:3147:5312":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"6:6700:6366":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:41760:6789":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"16:6268:33151":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"16:5866:9161":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:11815:8324":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"17:3565:7979":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:1935:9758":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"18:491:7901":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"16:5830:9154":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:13949:8836":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:4375:5300":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"11:1541:9644":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"16:7651:9462":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"16:7284:6851":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:8659:20350":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"5:6468:7737":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:8841:2472":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:12911:8560":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:22319:29914":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"5:1674:7720":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:6972:24476":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:12033:805":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:8553:2474":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:11124:8256":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"16:5419:8083":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"6:569:3145":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:12136:8389":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"11:1036:9637":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:9090:246":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:21466:12043":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"16:6386:9258":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:40453:9911":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"16:7613:9461":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"11:2165:8162":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"5:3671:7720":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:4300:10301":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:13778:8799":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"6:6711:6367":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"16:6818:9329":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:1821:10290":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:13981:8845":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"16:7360:33152":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:47865:10252":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:4148:11995":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"16:6545:9276":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:10772:10455":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:10227:8142":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:22971:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"16:2305:19443":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"1:10759:2381":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"20:5467:5367":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:41802:6852":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:14001:8852":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:11235:8271":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:4895:12008":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:2379:213":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:13024:8573":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:42156:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"5:3180:9647":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"16:2472:9050":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"18:614:33165":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:10530:2442":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:13007:7800":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"5:5328:7720":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:261:7958":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:45814:10160":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"5:4004:7737":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:5111:11355":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"17:9372:8084":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:3826:10298":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:39219:17172":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"17:13826:8805":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:3724:10297":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"16:4585:9109":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:12830:8525":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:22145:9980":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"20:3226:5322":{"crate_id":20,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:1075:7965":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"20:3425:5340":{"crate_id":20,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:9328:2423":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:39321:224":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:7258:2451":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:46115:10177":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:42314:2494":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:11344:10328":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:6169:5887":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:40034:9889":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"20:3461:5344":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:1063:9637":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"6:4902:5881":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:40897:9923":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:9039:24812":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"6:1697:3913":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:43433:10092":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:10097:8127":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:44385:11576":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:47959:10255":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:4516:5312":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:45937:10165":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"20:3111:5308":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"6:1570:3901":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:12685:8508":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"5:6915:276":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:11964:9964":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"20:1368:3897":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:10980:8096":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:6813:6370":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:7371:11452":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:30444:29901":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:43525:10100":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"5:5376:17190":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"6:62:2746":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"5:1275:9637":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"20:483:3135":{"crate_id":20,"path":["libc","unix","timeval"],"kind":"struct"},"6:574:3146":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"20:527:3140":{"crate_id":20,"path":["libc","unix","hostent"],"kind":"struct"},"16:3600:9096":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:13890:8825":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:9631:6862":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"11:703:9625":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:11729:17411":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:6286:232":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:22806:199":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:25919:279":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:22938:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:12876:9975":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:9580:238":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"6:4584:5321":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"16:7128:10433":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:2947:17336":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"16:5661:9139":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"6:6764:3829":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:4947:11290":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"16:8115:9522":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"11:0:2229":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:13100:11916":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:41621:10299":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:9998:8073":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:9459:136":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:8394:2467":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"6:4401:5302":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"5:2692:11485":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:21195:12047":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"17:12846:8530":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:2510:2392":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:10084:8126":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"5:3214:9646":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"20:1355:3895":{"crate_id":20,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:8002:17317":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"16:4527:9107":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:849:9642":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"20:3320:5329":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"5:5372:17189":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"20:5461:5366":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"20:477:3134":{"crate_id":20,"path":["libc","unix","utimbuf"],"kind":"struct"},"5:5634:7752":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"16:5982:9177":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"20:3065:5304":{"crate_id":20,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:3500:2083":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:951:9635":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:11710:8277":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"5:7453:9749":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:4912:860":{"crate_id":2,"path":["core","iter"],"kind":"module"},"6:6943:6378":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:43963:10027":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"15:394:19408":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"1:11594:25079":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"2:9643:6867":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:13816:8804":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:21328:12048":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:39633:27959":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:5614:232":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:3301:17170":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"18:699:7935":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"20:1543:3914":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"11:2058:9365":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:42996:10088":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"6:4676:5326":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"6:6658:3060":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"20:5417:3093":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"6:1710:3915":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:6633:245":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:2916:17332":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"6:4755:5335":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:39407:2354":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:2178:7972":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:9137:7951":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"20:4887:3832":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:3417:2085":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:9455:33161":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"11:427:33128":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"5:2968:31855":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"5:4196:2407":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:46085:10176":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"16:0:2233":{"crate_id":16,"path":["gimli"],"kind":"module"},"6:6913:6376":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"16:3049:19446":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"20:5019:6376":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"16:7474:9444":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:2559:270":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"18:564:7911":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"16:4462:9105":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:9003:20373":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"14:202:17218":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:9531:33157":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"18:624:33163":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"16:6569:9077":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:7995:2475":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:10529:9946":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"5:1120:32891":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:9752:8098":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:12031:697":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:11272:8273":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"20:3215:5321":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"16:2428:9048":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:12225:8411":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:45836:10161":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:13487:8677":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:12037:800":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:47365:10246":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"20:3451:5343":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:2848:2693":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:32165:10010":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:43696:10110":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:10606:9948":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:44146:10131":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"11:1687:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"9:486:19291":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:9650:8096":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"6:4440:5305":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"6:6889:6374":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:7639:5369":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:47159:10214":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:30550:29908":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:40524:9916":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"6:1558:3900":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:21021:30311":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:4039:11983":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"13:226:11202":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"20:4925:6371":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"16:5322:9126":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:3492:2389":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:9242:7954":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:30316:6738":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"6:7668:11470":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:6248:5909":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:8669:11913":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:14478:8999":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"6:7633:5368":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:46283:10182":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"16:7568:9086":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:9094:83":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:8819:10418":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"14:0:2231":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"6:4647:5324":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:6346:186":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"20:4797:3018":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:43796:10112":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:14434:8984":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:10570:7829":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:40674:9918":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"11:992:9365":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:40275:7776":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:13274:8277":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"6:5052:11333":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:8223:10393":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:9635:6864":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"16:7884:20316":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"16:5743:9145":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:40129:10028":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:9119:2398":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:40424:10050":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:11886:8337":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:13188:8603":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:48093:10265":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"6:4893:5880":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:2884:9379":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"6:7604:5366":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:9286:31055":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:12432:118":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"20:3086:5183":{"crate_id":20,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:40392:9900":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"20:568:3146":{"crate_id":20,"path":["libc","unix","itimerval"],"kind":"struct"},"1:1743:664":{"crate_id":1,"path":["std","env"],"kind":"module"},"17:10468:8169":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:41829:238":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:21251:12052":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"2:45915:10164":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"6:5982:5884":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"11:1876:9648":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:12888:8551":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:1674:3910":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"6:6898:6375":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"16:7554:9085":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"16:6485:9072":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:12022:1665":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:12015:9946":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"16:7523:9456":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:10278:8145":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:4624:11070":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"6:4434:5304":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:7992:10345":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:10147:10441":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"6:5859:5872":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:13922:8832":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"6:4914:11274":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:13723:8787":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:22905:194":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:7676:7829":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"20:3334:5330":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"20:4272:5908":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"20:3238:5323":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:11191:7980":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:9138:10435":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:867:9627":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:44640:181":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"6:7702:6722":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:11201:8261":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"2:21564:12040":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"5:276:2645":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:43462:10096":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:13973:8844":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:13298:8624":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"6:4998:11326":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"5:4365:7744":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"6:4603:11238":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:10447:8162":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:43664:9949":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"6:5009:5297":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:10279:2392":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:2845:2641":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"20:1490:3908":{"crate_id":20,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:14221:8935":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:8779:9939":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:40312:10039":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"16:3232:9036":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:1644:640":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"1:2419:2082":{"crate_id":1,"path":["std","io"],"kind":"module"},"5:4034:7720":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:41455:9932":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"20:1522:3911":{"crate_id":20,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:46039:10169":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:4628:11074":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:1538:6789":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"20:3119:5309":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:11526:10298":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"6:475:3133":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"20:4919:6370":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:7365:6720":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:12465:8472":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"20:3104:5307":{"crate_id":20,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"20:4847:3857":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"16:4613:9110":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:12024:1153":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:7581:128":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:4480:5308":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:8975:10426":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"16:2450:9049":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:11086:8253":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"19:0:1133":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:8277:11998":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:9574:33155":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"11:1842:2472":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:9617:33162":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"16:6361:9255":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"11:1145:9641":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:13071:8580":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:44098:10129":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:2798:257":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:2173:641":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:10720:9951":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:6973:17321":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:41684:205":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"6:1691:3912":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:47757:10250":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:47968:10256":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"6:4523:5313":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:6819:6371":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"20:4185:5883":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:44389:11577":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:12876:8549":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:44377:11574":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:9070:8082":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"20:3019:5301":{"crate_id":20,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"20:138:2823":{"crate_id":20,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:44224:17217":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"6:4428:5303":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:11991:8366":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"11:122:7708":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:10527:2446":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"2:10568:9947":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:6419:2499":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"20:1504:3909":{"crate_id":20,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"20:5033:6377":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","termios2"],"kind":"struct"},"2:7088:17313":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:40162:17271":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"16:6456:9264":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:48078:10264":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"20:3092:5306":{"crate_id":20,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"16:5712:9140":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:46231:10180":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:21590:12049":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:40242:1947":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"17:12945:8563":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"16:6901:9079":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:12026:1511":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"18:113:24330":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:39297:222":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"16:6352:9254":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:9886:8108":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"16:5760:20305":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:40534:10054":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:3919:11975":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:40442:10051":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:46482:10188":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:11025:7831":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:8321:2927":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"16:2766:9062":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:43750:9951":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"20:3276:5325":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:3273:2442":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:4953:12015":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:49979:12056":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:3275:2443":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:8825:20367":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:11535:8299":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:12267:8426":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:8281:9538":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:7922:2437":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:41415:171":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"5:6817:7764":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:42978:2468":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:4056:107":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"16:4053:9102":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"20:1444:3905":{"crate_id":20,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"20:489:3136":{"crate_id":20,"path":["libc","unix","timespec"],"kind":"struct"},"2:3183:223":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"16:7694:9087":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:2195:2363":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:21207:30016":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"16:3461:9095":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:9426:6882":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"17:12698:8509":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:9848:157":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"5:1013:7720":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:42436:6863":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"6:4610:11240":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"16:8195:9531":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"5:2051:9729":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:14269:8936":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:12484:8477":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:47988:10258":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:40341:2421":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"16:2526:9052":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"16:5588:9073":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"18:736:24339":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:12043:8377":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:46261:10181":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:9277:7955":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"6:4776:5337":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:4044:9891":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"6:1576:3902":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:21023:30314":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"20:134:2822":{"crate_id":20,"path":["libc","unix","FILE"],"kind":"enum"},"2:8039:30397":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:22707:200":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:9888:9942":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:4812:426":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:2850:112":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"18:574:7902":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:12473:8474":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:9177:29305":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"17:11448:20375":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:21004:30309":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:3261:145":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:9471:7827":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:4294:9894":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:11133:10417":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:14090:8876":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"16:7828:9475":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:4800:5340":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:40228:10037":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:11465:10296":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"6:1664:3909":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:40285:10038":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"18:515:7899":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:9005:10429":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:40410:10047":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"6:4814:5341":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"11:666:2472":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:10903:8237":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:7846:2385":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"16:7342:33150":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"6:4556:5318":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:6079:5331":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:47695:10249":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:582:7964":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:7839:2381":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:32151:10009":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"18:0:2235":{"crate_id":18,"path":["memchr"],"kind":"module"},"6:4824:11244":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:11490:8297":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:8765:20365":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:48025:10261":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:12790:8521":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"6:501:3137":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:11910:8351":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:14118:8883":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:2150:20431":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"6:507:3138":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"6:4616:5322":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"16:6879:9334":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:42443:6862":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:42704:116":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:2289:110":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"6:1528:3897":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:11971:8365":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"6:4884:11271":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:4810:11984":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:1962:209":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:12750:8516":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"4:0:2225":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:41897:207":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:32140:10008":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"1:5384:10309":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:3234:2446":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"6:4535:5315":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:46307:10183":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"20:1377:3898":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:3422:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"5:5791:263":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:1184:7967":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:8002:2438":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:939:9632":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:9972:8118":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:9017:10431":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:10916:8238":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"6:6114:11423":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:42988:10087":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:5071:10307":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"20:2976:5297":{"crate_id":20,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:6455:2505":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:6532:2502":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"16:2722:9060":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"16:7269:33153":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"11:101:11203":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:8181:2421":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"16:536:9025":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"6:4506:5311":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"5:7286:6789":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:1558:2407":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"6:7657:11466":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:11151:8258":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:13215:8607":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"16:4497:9106":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"16:5696:20304":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:3969:11977":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:14346:8961":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:10945:10312":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"16:6600:20309":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"18:599:33166":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:4363:7774":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:12204:9939":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"20:3355:5332":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Chdr"],"kind":"struct"},"17:14068:8871":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"18:644:7902":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"16:8205:20317":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:1874:10291":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"20:3006:5300":{"crate_id":20,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"20:1472:3906":{"crate_id":20,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:10437:2472":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:10685:8196":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:13676:8779":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"16:5727:9143":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:2550:78":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"20:4995:6374":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"5:2037:2437":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"11:2394:7754":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"17:12172:8398":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:10370:8152":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"6:4955:11295":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"5:1444:6789":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"14:7:9616":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:11980:9965":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:46505:10189":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:10561:8178":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"2:10641:9949":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"16:4949:9120":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"16:7436:9181":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:43945:10028":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:11904:9960":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"16:2670:9058":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:1764:11488":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"6:119:2822":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:4:1116":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"16:7318:9402":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"20:4943:6372":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:621:10278":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:5557:2871":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"6:6136:11431":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"6:1604:3905":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:2012:7968":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:13868:8819":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:40091:10025":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:2579:2434":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"16:5363:9127":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:14033:8860":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"20:4101:5875":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:13567:8739":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"6:4922:11279":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"20:574:3147":{"crate_id":20,"path":["libc","unix","tms"],"kind":"struct"},"5:3206:9648":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:859:6789":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:43604:10107":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"16:6415:9261":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:40475:10052":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"11:1869:9647":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"18:507:7902":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:14100:8879":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"16:5403:8082":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:11159:2141":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:22342:9990":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"16:8134:9525":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:11137:8257":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:2342:132":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"17:2209:7975":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:13010:8570":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:10366:8151":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"16:7582:9458":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"3:234:238":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:10524:2444":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"17:8594:20352":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"16:6531:9274":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"11:822:9629":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:10292:8096":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"6:4578:5320":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:922:9629":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:2630:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"6:4908:5885":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:11573:8301":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:10823:24929":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"17:14469:8997":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:11719:20378":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:4692:11999":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"11:357:7710":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"11:1051:19372":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:42039:92":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"5:7223:7317":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"20:4209:5886":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:6332:9069":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"5:824:7726":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:43646:2424":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:11316:8279":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:1910:710":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"9:393:19293":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:9959:8117":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:23070:195":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:12224:17201":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:1545:7754":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"17:12983:8568":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"18:582:2705":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:22:738":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:2900:17329":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"11:1855:7754":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"16:2788:9063":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:13966:8843":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:10730:10450":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:6269:9913":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:4871:2454":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"17:8713:20364":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:40136:17270":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:723:154":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:9100:162":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:40040:10020":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:7869:137":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"20:1416:3902":{"crate_id":20,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:11358:20499":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"16:2881:9067":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:12996:113":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:44369:11572":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"5:7262:7732":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:9086:8083":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:11367:8284":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:3267:17246":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:12934:8561":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:12778:8520":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"6:495:3136":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:11306:8277":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"16:6017:20306":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:45974:10167":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:12658:8503":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"20:4904:6368":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:7123:26556":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:11351:8282":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"6:4473:5307":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:21458:2392":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"16:2284:19417":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:11329:10327":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:12280:8430":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:11582:10464":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:11745:9957":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"6:4710:5329":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:2373:2378":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:44584:219":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"5:5138:2493":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"6:4566:5319":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:13422:8626":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"9:507:9709":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"11:324:11207":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:12184:8401":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"5:3596:9642":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"5:5976:2493":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"6:4878:11270":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:645:11907":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"16:5088:9124":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:4986:9121":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:11223:162":{"crate_id":1,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"1:6059:7811":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"18:707:7937":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"11:829:11915":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:14282:8942":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:40354:10042":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"16:6425:9262":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"16:4719:9112":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"6:4666:5325":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"9:450:19292":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:640:10281":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"20:1431:3903":{"crate_id":20,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:5955:11377":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:14308:8951":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"16:6376:20308":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:14378:8976":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:1651:6735":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:39439:10017":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"16:2321:9037":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:12046:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:41961:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"6:6222:5908":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:22839:196":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"6:4989:11320":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:44067:10125":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"5:3185:31834":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:9921:8111":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:13174:8602":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:7539:144":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:3089:11929":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:46945:10211":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:7704:11910":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:10478:8170":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:8982:24479":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:4373:6873":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:40433:9906":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:13802:8803":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"18:766:24340":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:10749:11591":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:5814:2504":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"16:3655:7992":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:5976:232":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"5:4350:277":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"6:123:2823":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"18:590:7912":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"7:31:19278":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:2853:2695":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"17:13554:8732":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"16:7090:9364":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"16:6960:9341":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"5:3332:7754":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"15:0:2232":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:11186:2398":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"6:1507:11228":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:11951:8355":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:10936:7580":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"18:538:7909":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:2267:101":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:6872:6795":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:3983:11979":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"6:4854:11260":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:11547:8300":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:14448:8991":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:7318:2488":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:2906:7808":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:11279:7834":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:42450:6864":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"6:7622:11461":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:13876:8822":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"11:1862:9646":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:3955:11976":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:8204:2424":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"16:7492:9452":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:2896:17330":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:3035:2426":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:21592:9979":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"6:4738:5333":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:3196:2445":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:2862:12035":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:6151:7815":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:21398:2392":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"20:4824:2927":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:542:3141":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"5:7232:6789":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:41438:9930":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"16:5816:9153":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:5117:215":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"1:12035:803":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:44052:10120":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:44669:9654":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"6:6100:11421":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"20:3363:5333":{"crate_id":20,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:32104:11213":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:42078:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:41735:174":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"16:3032:9091":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"0:0:1965":{"crate_id":0,"path":["num_cpus"],"kind":"module"},"2:10070:7789":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:9641:6866":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:3666:6789":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:8793:210":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:7655:10334":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:9281:30394":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"5:2463:11482":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"5:7323:6789":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:1567:9649":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:9099:90":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:7367:29257":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:21905:9977":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"20:614:3167":{"crate_id":20,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"16:7513:9455":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"6:4932:11285":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"18:96:24329":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:2872:9375":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"17:14163:8893":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"20:563:3145":{"crate_id":20,"path":["libc","unix","sigval"],"kind":"struct"},"2:12802:165":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"5:6827:7766":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"2:2682:9759":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"2:45660:10154":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:557:10277":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"11:1525:19373":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:43920:10117":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:14042:8861":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:504:7734":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:12711:8511":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:40195:105":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"5:7302:9745":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:12824:30696":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"11:1850:7737":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"20:1398:3900":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:654:3167":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"5:4076:9642":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:9607:8095":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:9660:33154":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"15:306:19398":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"16:6204:9215":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:1406:156":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:43900:2420":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"6:1546:3899":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:4118:25245":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:12789:148":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:11042:7833":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"5:6101:2407":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:10430:8157":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"6:5829:5850":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"5:1290:9636":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:6885:7820":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2:44566:231":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:8953:20371":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:3389:2407":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"6:6107:11422":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"20:1514:3910":{"crate_id":20,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:11280:9956":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:43938:9966":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"6:6804:6369":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:4698:5328":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:12252:8420":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:8148:2387":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"6:7556:6377":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:43473:10097":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"16:5634:9130":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:2198:2364":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"6:5941:5865":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:12598:8494":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:10494:8172":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:14522:9006":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:40462:9912":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:41888:6789":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"16:5049:9123":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:357:10274":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"5:5945:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:6585:2506":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"11:2487:11214":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:13228:8608":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"5:7490:255":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:2345:2367":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:39446:10018":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"11:693:6789":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:10754:11593":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:42941:10078":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:45684:10155":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:11617:8304":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:47617:10248":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:5628:10313":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:4626:11072":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"18:719:7941":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:13113:8588":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:44576:239":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:2921:17333":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:40121:9889":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"16:7677:222":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"5:7294:222":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:434:7962":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:9780:8099":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:11074:8252":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"20:3348:5331":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Chdr"],"kind":"struct"},"2:15:2334":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:14316:8954":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:11872:8336":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:4031:11982":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:1903:11958":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"6:4595:11233":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"20:5046:6378":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:6128:11428":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:10672:8193":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"16:8154:9526":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"6:1639:3907":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:12513:8482":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:1541:7737":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"5:1516:222":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"11:2260:9636":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"2:22334:9989":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"20:469:3133":{"crate_id":20,"path":["libc","unix","group"],"kind":"struct"},"6:533:3140":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"5:7331:6789":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"16:7067:9362":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"6:4449:2094":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:11377:11597":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:9963:10066":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"17:10750:8203":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"16:6844:9330":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:12219:17202":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"16:5017:9122":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:2878:17328":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:533:7803":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"11:2334:9642":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"2:46739:10208":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:41585:29920":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"16:7597:33147":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:14355:8963":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:2795:2640":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:11296:10323":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"11:2423:19368":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"2:43544:10102":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"5:261:7720":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:7610:5367":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"5:1494:9625":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:3161:29694":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"5:7252:7737":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"16:7544:9457":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:14401:8977":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:11393:135":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"5:6514:7720":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:39460:10019":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"16:6929:9338":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:14173:8898":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:10186:8136":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"2:22359:29906":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"16:4806:9115":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:9350:7959":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"5:2143:9730":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:6599:2507":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"16:6467:9265":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:11845:8328":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"1:7741:10341":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:40881:9922":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:8857:6789":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"5:6587:6789":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:10616:8183":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"6:6086:11410":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:12038:1649":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"1:4787:7809":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:13546:8729":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"5:1484:9643":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"7:78:19285":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"0:73:1844":{"crate_id":0,"path":["num_cpus","get_physical"],"kind":"function"},"16:7792:20315":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:13792:8802":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:42759:135":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:2909:9380":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:3004:17171":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"2:12851:216":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:3318:2431":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:6800:12037":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"18:521:24341":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:3273:17245":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"11:2286:9637":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"2:47903:10253":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:4474:6875":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:10087:10440":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:8317:10401":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:0:1535":{"crate_id":1,"path":["std"],"kind":"module"},"17:10698:8198":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:8964:10423":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"5:207:7718":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:9155:10436":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"16:5963:9170":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:21460:12041":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:43200:9943":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:42000:85":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:14056:8868":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:2655:2436":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:7586:7825":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:12034:802":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"6:6682:3018":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:7645:5370":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:22396:29898":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"6:563:3144":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"20:4781:3828":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:2511:2084":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"20:5064:6379":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:5960:7816":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"5:7466:9751":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"5:7272:31830":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"20:3443:5342":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:5152:11369":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:21559:2392":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:40688:9919":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:13710:8782":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:12098:8385":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"16:5612:9075":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:12997:8569":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:13045:152":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:3435:2388":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"6:4847:11258":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:8978:20372":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:44365:11571":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"6:5974:5883":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:2511:17275":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:14536:9009":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:41922:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:11000:8244":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:9060:11583":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"6:4388:5301":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"16:4774:9114":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:11147:10418":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"5:2972:31854":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"16:6721:20310":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"6:1682:3911":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:21414:12039":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"16:5121:9125":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"11:2303:9652":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"1:8787:10416":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"20:3166:5315":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:32158:6873":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"20:5494:6722":{"crate_id":20,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:10239:12026":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"17:12086:8382":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:5040:10307":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:13914:8830":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"20:4298:5909":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:12737:8514":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:4032:9890":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"11:841:9632":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"6:4789:5339":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:43910:10116":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:40874:9921":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:12019:408":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1:9095:247":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:42781:76":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:10461:9642":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"20:3482:5346":{"crate_id":20,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:11639:7980":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:2799:256":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"16:6189:9213":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:30386:29894":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"16:4344:9103":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:40888:2086":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"20:3197:5319":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"20:3380:5335":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:2270:102":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:21480:9979":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"20:4773:3060":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:30350:6739":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"6:5130:5344":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"15:288:19397":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"6:5117:11358":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"20:521:3139":{"crate_id":20,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:5123:11361":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"2:4290:233":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:14134:8886":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:12373:8436":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"18:652:7902":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"5:7240:9744":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:43181:10089":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:41880:9642":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"20:3489:5347":{"crate_id":20,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:6280:7782":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"18:660:7925":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:2641:135":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"6:6868:6373":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:7598:5365":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:21813:12054":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:5690:9905":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"5:4166:2407":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"16:6041:20307":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"20:4817:6367":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:4833:31512":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"6:4488:5309":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:6263:11439":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:10004:7786":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"6:1496:3894":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"6:4529:5314":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:12024:8372":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:11992:11912":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:43616:9959":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"1:9012:10430":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:10102:7795":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:918:9626":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"16:4745:9113":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:10804:126":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"17:10520:8175":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:22425:11494":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:13244:8610":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:12422:8461":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"13:0:2224":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:32252:2696":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:44457:17450":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"5:6798:7752":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:40372:10044":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"5:2962:33018":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:2926:17334":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:2796:2688":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:22740:197":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"20:3286:5326":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"14:160:9616":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:21342:17349":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"6:596:3149":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:2904:17331":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:4860:11263":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:2960:17339":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"20:3059:5303":{"crate_id":20,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"6:6961:6379":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:8950:2498":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:2193:136":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"6:5033:5345":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:12123:8388":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:43954:9889":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"16:6742:9315":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:11215:8266":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:11661:8306":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:2553:163":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"1:10794:137":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:9840:153":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:13667:8775":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"16:5673:9074":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:2347:2368":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"5:1104:31856":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:46821:10209":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:12237:8414":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"16:3797:9098":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:9564:8094":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:40148:10030":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:8160:2390":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:12020:1036":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:482:7802":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"6:1596:3904":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:1681:1192":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:44401:11580":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:10214:8141":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:40912:7784":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"20:3160:5314":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:4364:5299":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:12452:8470":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"5:1475:9628":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"10:0:2228":{"crate_id":10,"path":["adler"],"kind":"module"},"17:10646:8188":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"16:7054:9359":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:10547:8177":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"6:5891:5875":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:10486:2424":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"5:3570:183":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:46975:10212":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:9266:10289":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:47941:10254":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:10383:8153":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:7745:10008":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:9629:127":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:7997:10346":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"1:12044:1705":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:2361:2372":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:8882:10422":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:11805:7840":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:9985:8120":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:8198:2423":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:21159:12045":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:4458:11999":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:44619:10146":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:9867:8106":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:2185:17350":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"1:12021:457":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:8191:2422":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"20:3180:5317":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"10:36:11216":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"17:12621:8499":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:12208:8403":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:13040:8575":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:7914:2435":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:20976:30168":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"2:30372:70":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"6:4841:11255":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:7690:179":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"5:4395:2407":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:13055:8579":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"20:1386:3899":{"crate_id":20,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:46451:10187":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:9896:20386":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:10456:8165":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"11:1127:9640":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:914:9625":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"20:3032:5302":{"crate_id":20,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:21209:17349":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"2:41872:2472":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"17:14514:9003":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:4689:12010":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:8272:11581":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:45752:10158":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:9466:2384":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"6:588:3148":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:4027:11981":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:1562:9648":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"5:7423:9746":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"6:5004:11329":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"16:2574:9054":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:21295:12053":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:11987:29265":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"5:7390:2361":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"5:7504:9752":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:13685:8780":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:14145:8890":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:3232:7976":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"18:727:7944":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:22267:11491":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:7829:2383":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:10832:24939":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:13611:8769":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"16:7462:9443":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"6:5867:5873":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:40510:7922":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:3256:266":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:41501:11561":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:39385:228":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:10661:8192":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"16:8167:9529":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:9488:33159":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"16:7708:9088":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:46329:10184":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:11788:8318":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"5:3173:2472":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:11442:7836":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:39341:227":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"5:3737:9729":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"6:5885:5874":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:7343:3093":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:12032:699":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"5:3219:31842":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:12671:8210":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:7886:126":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:2373:206":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"16:2359:9045":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:1534:2472":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"9:426:19294":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:11759:17205":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:6837:6372":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"16:4889:9118":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"5:4236:2472":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"6:1632:3906":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"5:0:320":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:12810:8524":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:10289:251":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:45854:10162":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:3474:2391":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"17:14126:8885":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:6183:10319":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:48014:10260":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"5:35:7716":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"5:678:262":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"5:2172:11477":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:11327:8280":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:48155:10267":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"20:4870:3829":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"20:0:884":{"crate_id":20,"path":["libc"],"kind":"module"},"1:1758:10286":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:10929:8240":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"20:3433:5341":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:43452:10095":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"5:3583:2472":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:2183:17349":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"17:11934:8352":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"20:4120:5877":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:2943:17335":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:14324:8955":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:836:2472":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"6:7692:11475":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:3046:2642":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:2363:2373":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:41769:6851":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:44278:9970":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:6275:11490":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"2:40664:2422":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"20:3414:5339":{"crate_id":20,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:39281:225":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:5370:10308":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"20:1550:3915":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:13989:8846":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"5:1259:9365":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"6:483:3134":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"20:5447:6721":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:9823:20384":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:6415:2086":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"20:3137:5311":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:2805:259":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:7543:166":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"14:221:9623":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"16:6893:9336":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:2563:269":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:42676:11562":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:1040:9365":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:489:3135":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:22283:9983":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:10036:8123":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:40494:9914":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"5:880:7728":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"6:4686:5327":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:40200:10036":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"11:483:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:3925:11974":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:43714:10111":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"20:1574:3917":{"crate_id":20,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:4651:17264":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"11:2368:7737":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"2:41744:2472":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:13693:8781":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:22198:9981":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:9933:8114":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"20:3408:5338":{"crate_id":20,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:13085:8582":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"5:7479:7750":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"2:41821:217":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:30089:11972":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"6:5910:5877":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:12027:1543":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:12041:1648":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"6:5897:5876":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:3236:2447":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:12437:8465":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:8969:113":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:9639:218":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:22027:2392":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"6:6059:11403":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:10771:8205":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:8911:12029":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:42236:89":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"5:629:9722":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"5:4849:229":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:4299:9895":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"20:4203:5885":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlattr"],"kind":"struct"},"5:3802:7754":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"17:13838:8808":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"6:5992:5886":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:41472:11970":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"16:4862:9117":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:12765:8519":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"20:5004:6375":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:10726:8201":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:2593:7790":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:43929:10118":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"6:5104:11352":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:9051:20351":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:47999:10259":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:9025:10433":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"16:8097:9520":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"5:6335:12130":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:8526:2471":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:45730:10157":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"11:731:9626":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:14110:8882":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"20:4174:5881":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlmsgerr"],"kind":"struct"},"17:13135:8599":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:2810:2689":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"5:7515:9753":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"20:4095:5874":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"20:1410:3901":{"crate_id":20,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:13101:8586":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"11:298:11204":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:5489:10312":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:10762:9954":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"14:215:9621":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:4418:7775":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:3053:139":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:11941:9963":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:5404:10310":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"11:2074:9636":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:400:7960":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:7998:11919":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:13148:8600":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:5621:7816":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"12:0:2230":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"6:1537:3898":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"20:3080:2094":{"crate_id":20,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:10265:8144":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:21808:12046":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"5:5861:7737":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"16:6696:9303":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:7506:17318":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"11:759:9627":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"16:8050:9516":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:7527:10467":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"6:1591:3903":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:5921:5878":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:11167:11580":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"6:6798:6368":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:3338:17173":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"6:5023:5343":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:8863:10314":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:8671:9938":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:7856:2382":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:4904:12009":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:43632:2423":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"11:2494:2360":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:6529:2501":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"16:2744:9061":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"18:690:7934":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:14013:8853":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:14296:8948":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:8343:10303":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"16:6226:9230":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"17:10340:8150":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"16:6968:20311":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:45992:10168":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:44081:10128":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"16:5435:9128":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"6:4968:11305":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"11:389:7712":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:11261:8272":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:22872:201":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:903:7754":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:44682:10152":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:40181:10035":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:10139:20403":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"20:5479:5369":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:44445:10143":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:5769:2497":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"5:7378:2360":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"6:0:884":{"crate_id":6,"path":["libc"],"kind":"module"},"1:11036:7832":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"16:4417:9104":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:8833:10419":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"6:5075:5347":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"11:817:9643":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"15:327:19402":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"6:6159:11437":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"16:3764:9097":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:22458:11973":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:5435:111":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:10197:8138":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:12062:8378":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:12543:8485":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:40101:10026":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:46137:10178":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:12039:1646":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"16:7862:9479":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:9102:7950":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"20:3154:5313":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:8686:20363":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:5742:2496":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:13286:8617":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"20:5439:6720":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:11742:8314":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"11:785:7737":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"5:2225:33092":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:12724:8512":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"16:6261:9246":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:11359:10330":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"6:1501:3895":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:6047:11399":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:12043:854":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"20:542:3142":{"crate_id":20,"path":["libc","unix","pollfd"],"kind":"struct"},"17:14024:8857":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:7634:2643":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"16:6499:9089":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:10949:8241":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"11:2467:11210":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:20963:2705":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:10534:8176":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:9883:11963":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:11247:9955":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"2:4447:2529":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:13851:8814":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"16:2864:9066":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:12003:24937":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:13906:8828":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:9085:187":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"16:2696:9059":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:1838:189":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:40382:10046":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"6:4939:1103":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:40930:9926":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"6:1703:3914":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:9599:142":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:2788:249":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:21583:2392":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:12293:8431":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:9581:2391":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:48063:10263":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:45955:10166":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:7650:10332":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:10316:8149":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:46709:10207":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:40401:9902":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"6:4628:5323":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"16:6792:9328":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:12154:8397":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"16:3830:9099":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"11:772:9628":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:588:11904":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"20:3308:5328":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"16:6156:9208":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"6:1514:11231":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:43850:10114":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:8849:10421":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:4729:11985":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"16:7534:9084":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"16:8239:9423":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:9633:6863":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:40363:10043":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"5:784:7723":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:10628:8186":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"2:2955:17338":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:6718:2927":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:3361:2452":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:23037:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:10087:7790":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:44657:10151":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:11295:8275":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:4220:10300":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"6:4830:11247":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:22432:10002":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"16:4835:9116":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"20:5473:5368":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:13897:8827":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"14:187:19385":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:8670:12023":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"16:7768:9076":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:1965:208":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"20:3471:5345":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"6:4870:11266":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"9:177:19359":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:637:10279":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"6:527:3139":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:4461:5306":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:21381:12044":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"16:6513:9266":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:3022:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:2202:2168":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"5:3144:99":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:11687:20377":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:5735:2495":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:45784:10159":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:43512:10099":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:45885:10163":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:11371:11596":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:20991:30168":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:8137:2453":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:8467:2469":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"16:6318:9251":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"16:7782:9467":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:7892:10294":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"2:44235:10133":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"20:4229:5887":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"16:7102:20312":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:10330:28941":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:11023:8245":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"3:0:482":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:44245:10137":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:14083:8875":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"6:580:3147":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"16:4557:9108":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:40049:10021":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:42732:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"5:1413:2472":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:2337:212":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:30920:207":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"6:6228:1885":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"20:590:3149":{"crate_id":20,"path":["libc","unix","protoent"],"kind":"struct"},"1:12045:1252":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:7037:29784":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:7725:11947":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"17:9912:8109":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:4427:6874":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"16:2907:9068":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:0:538":{"crate_id":2,"path":["core"],"kind":"module"},"2:5632:9903":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:11321:17198":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"2:22307:9988":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"6:7616:11460":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:21157:2392":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:46404:10186":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:8542:2473":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"20:3296:5327":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"5:2133:7734":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:14420:8982":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:8805:10417":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"20:3401:5337":{"crate_id":20,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:10059:8124":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:43373:10090":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"16:7722:9078":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:10420:8030":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"11:1010:9636":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:8895:12030":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:4079:17169":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:10422:10416":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:12028:1630":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"16:7041:9356":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:9701:8097":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"20:3127:5310":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"16:2548:9053":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:44258:10141":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"6:4724:5330":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:7630:2392":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"6:6927:11446":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"17:9945:8116":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"9:0:2227":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"5:6959:7767":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:4156:11996":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:11970:10470":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:9852:20385":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:9445:8092":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:10748:9953":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"11:2479:33122":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:10507:8174":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:10962:8242":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:12305:8434":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"9:52:19310":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"16:4641:9111":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:8217:10391":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:415:185":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:880:9628":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:10738:8202":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:893:7737":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"20:1436:3904":{"crate_id":20,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:12196:8402":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:11407:20374":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"14:31:9616":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:6135:7800":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"20:4131:5878":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:5928:5879":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"20:3209:5320":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:21006:30313":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"5:6666:7720":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"5:5997:17643":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:10978:10419":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"1:1556:9647":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"20:495:3137":{"crate_id":20,"path":["libc","unix","rlimit"],"kind":"struct"},"1:3721:10296":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:7897:10343":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"2:44173:9969":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:11062:8251":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:43499:10039":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:1819:10289":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"16:6944:33148":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"16:2596:9055":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:3194:2444":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:48040:10262":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"16:7736:9465":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"9:237:2468":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:3483:29156":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:43768:9952":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:14076:8874":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:7906:10344":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:10637:8187":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"2:3286:30477":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:504:7963":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:44381:11575":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"16:2644:9057":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:42949:10080":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:10465:7828":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"1:11601:10331":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:1550:9646":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:6238:7816":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:42966:157":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:4140:11994":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"16:6753:9316":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"16:5905:9164":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:40485:10053":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"6:4808:11242":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"11:1072:33126":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"18:755:7949":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:46353:10185":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:40077:10024":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:9762:33160":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:45706:10156":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:44030:17216":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:43534:10101":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"16:2504:9051":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"18:671:7931":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"16:5995:9027":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"0:72:1826":{"crate_id":0,"path":["num_cpus","get"],"kind":"function"},"17:11381:8287":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"20:501:3138":{"crate_id":20,"path":["libc","unix","rusage"],"kind":"struct"},"17:13739:8790":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:41644:9933":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:40155:10031":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"20:549:3143":{"crate_id":20,"path":["libc","unix","winsize"],"kind":"struct"},"2:9637:6865":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"16:2969:19445":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"6:4543:5316":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:22029:12042":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:10734:9952":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:48116:10266":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"20:3370:5334":{"crate_id":20,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:2615:2427":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:43442:10094":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"6:4496:5310":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:8484:2470":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"5:7406:106":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:3056:140":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:2888:12034":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"6:6691:11445":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"5:1304:9641":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:10603:8182":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"6:6741:3857":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:8895:20369":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"16:5798:9149":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"20:4165:5880":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlmsghdr"],"kind":"struct"},"1:928:11915":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:11505:10297":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:22446:10003":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"6:5140:11364":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"6:6666:3828":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"11:868:9635":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:10397:8154":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:21917:30172":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:43622:10108":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:10089:10439":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"16:5939:9021":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"16:7015:9355":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:12040:1647":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"6:4745:5334":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:8536:2472":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"5:1505:9626":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"6:5068:5346":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"11:344:33123":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"20:3187:5318":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:12645:8500":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:43554:10103":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"11:2238:9365":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"2:39180:17244":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:11173:20497":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"5:1466:9627":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:9711:33158":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"16:6687:9302":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:1054:9636":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:4148:9892":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:11389:8289":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:13758:8791":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:0:2234":{"crate_id":17,"path":["object"],"kind":"module"},"1:1072:9641":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"5:1140:31857":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:14460:8993":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:14335:8960":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:40922:9924":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:47009:10213":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"16:7660:9463":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:10784:2385":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"1:5297:127":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"20:4278:1885":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:43814:10113":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"5:3240:9649":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:2857:12033":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"7:0:1695":{"crate_id":7,"path":["unwind"],"kind":"module"},"6:1718:3916":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:5484:2407":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:11302:10463":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"16:6583:9278":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:11162:8259":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:2800:115":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:11337:20498":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"6:4764:5336":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:3050:138":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:13451:8646":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:12199:17204":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:2941:135":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"6:6071:5332":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:12042:1645":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"5:4988:2407":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:6934:11449":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"14:40:8352":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:2892:12036":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"5:3722:2437":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"16:6083:19416":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:8444:2468":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"20:1558:3916":{"crate_id":20,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"20:4974:6373":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:10679:9950":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"5:780:100":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:7388:6721":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:3531:7737":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"17:10575:8179":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"20:5485:5370":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:8927:12031":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"11:2085:9637":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:12970:8566":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"11:796:7754":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:5560:12024":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"16:149:7704":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"6:4351:5298":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"6:6012:11378":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:7834:2384":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:10440:8159":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"18:636:7924":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:5229:214":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"20:4069:5872":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"11:680:9642":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:10788:20473":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:10165:20404":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:8211:2420":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:12496:8479":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"5:1428:9642":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:8299:10399":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:3960:2407":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:11507:20376":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"16:5648:9134":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"6:555:3143":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"20:1350:3894":{"crate_id":20,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"11:1635:7714":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:9624:118":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"17:13575:8740":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"5:7574:7754":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"20:4806:6366":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:10960:24932":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"16:2933:19444":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:4179:9893":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:945:9634":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:47507:10247":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:3977:11978":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"16:6346:9253":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"11:2317:2472":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"16:6915:9080":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"6:548:3142":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"11:1846:6789":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:11098:8254":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:11281:8274":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"9:330:11217":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:12554:8486":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:12959:8565":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:4733:11988":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:12270:17210":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"16:2406:9047":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"5:2245:11481":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:42195:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:9172:7952":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:44397:11579":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"20:3071:5305":{"crate_id":20,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:2547:79":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"16:7391:20313":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"6:4783:5338":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:3659:11971":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:10112:8128":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:11204:11595":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"18:80:24328":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:12007:8370":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"16:8072:9517":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:11111:8255":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:9790:33156":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:5572:2407":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"5:2964:11478":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"16:4921:9119":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:9521:8093":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"6:6120:11426":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:4222:6872":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"11:2351:6789":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"2:7502:17319":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:10932:10341":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"1:4169:11997":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"11:1882:9649":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"5:7590:7758":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:6091:9907":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:8926:20370":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"5:1778:7754":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:4558:12005":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:5969:5882":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:12213:7937":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:8128:2451":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:44210:10132":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:41812:6850":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:9207:7953":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:46585:10190":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:5420:10311":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"14:165:19378":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"20:4107:5876":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:2556:143":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:22380:29905":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:1773:9755":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:10410:8155":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:7014:7821":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"16:6560:7707":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"1:4017:11980":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"16:6243:9236":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"6:5146:11366":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:40113:10027":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"6:5044:11331":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"11:1092:9639":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:7567:7823":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"20:1361:3896":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:1521:3896":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:23517:248":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:9390:136":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"1:4614:11979":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"20:1537:3913":{"crate_id":20,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:23004:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:4731:11987":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:13259:8614":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:44627:10148":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:8265:10299":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"20:3174:5316":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:14156:8891":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:1796:10288":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:32144:9423":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:44420:129":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:41752:9642":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:10814:2387":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:43424:10091":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:43868:10115":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:3441:7978":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:2867:9378":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:40332:10041":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"20:582:3148":{"crate_id":20,"path":["libc","unix","servent"],"kind":"struct"},"2:2937:9385":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:9187:11587":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:3155:28942":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:2842:2691":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:2931:9384":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:46899:10210":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"16:2832:9065":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:10588:8180":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"1:363:10275":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:43196:11570":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"18:531:7906":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"5:1525:9727":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:41608:10069":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:42117:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:12159:2476":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"20:536:3141":{"crate_id":20,"path":["libc","unix","iovec"],"kind":"struct"},"9:357:19307":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:10240:8116":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:8291:10391":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:40212:29915":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:6401:9071":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:10714:8200":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"6:4549:5317":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"5:6984:7770":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:12036:804":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:7552:2644":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"20:3257:5324":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"18:481:7900":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:11608:10331":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"20:4151:5865":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:11761:8317":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:42957:10081":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:39363:226":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"16:7006:9352":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:46663:10206":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"20:4180:5882":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:7516:7964":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:909:9643":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:47979:10257":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:12025:346":{"crate_id":1,"path":["std","array"],"kind":"primitive"}},"external_crates":{"20":{"name":"libc","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}