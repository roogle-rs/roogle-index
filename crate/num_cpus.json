{"root":"0:0:2524","crate_version":"1.16.0","includes_private":false,"index":{"2:13903:27686":{"id":"2:13903:27686","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42789:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42787:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11659:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11659:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13909:34039":{"id":"2:13909:34039","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12462:1765","str::slice_mut_unchecked":"2:13910:34040","crate::ops::Index":"2:40335:12550"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13924:27728":{"id":"2:13924:27728","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12456:490","self::pattern":"2:13578:17844"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13584:10218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13956:27722":{"id":"2:13956:27722","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12456:490","self::pattern":"2:13578:17844","str::rsplitn":"2:13959:27724"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44894:10234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13584:10218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13994:2715":{"id":"2:13994:2715","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12456:490","self::pattern":"2:13578:17844"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42787:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13584:10218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13927:27147":{"id":"2:13927:27147","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12456:490","self::pattern":"2:13578:17844"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13584:10218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5742:26886":{"id":"5:5742:26886","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:14015:26889"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73:2415":{"id":"0:73:2415","crate_id":0,"name":"get_physical","span":{"filename":"src/lib.rs","begin":[108,0],"end":[110,1]},"visibility":"public","docs":"Returns the number of physical cores of the current system.\n\nThis will always return at least `1`.\n\n# Note\n\nPhysical count is supported only on Linux, mac OS and Windows platforms.\nOn other platforms, or if the physical count fails on supported platforms,\nthis function returns the same as [`get()`], which is the number of logical\nCPUS.\n\n# Examples\n\n```\nlet logical_cpus = num_cpus::get();\nlet physical_cpus = num_cpus::get_physical();\nif logical_cpus > physical_cpus {\n    println!(\"We have simultaneous multithreading with about {:.2} \\\n              logical cores to 1 physical core.\", \n              (logical_cpus as f64) / (physical_cpus as f64));\n} else if logical_cpus == physical_cpus {\n    println!(\"Either we don't have simultaneous multithreading, or our \\\n              system doesn't support getting the number of physical CPUs.\");\n} else {\n    println!(\"We have less logical CPUs than physical CPUs, maybe we only have access to \\\n              some of the CPUs on our system.\");\n}\n```\n\n[`get()`]: fn.get.html","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13916:10250":{"id":"2:13916:10250","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12456:490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44760:10242","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13919:31538":{"id":"2:13919:31538","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13920:31540"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:45064:10426","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14013:26887":{"id":"2:14013:26887","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13923:31506":{"id":"2:13923:31506","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:45082:10249","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14021:12522":{"id":"2:14021:12522","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5150:12522"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:45098:10165","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14006:34055":{"id":"2:14006:34055","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12456:490","self::pattern":"2:13578:17844"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13584:10218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13584:10218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13599:17842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:72:2397":{"id":"0:72:2397","crate_id":0,"name":"get","span":{"filename":"src/lib.rs","begin":[73,0],"end":[75,1]},"visibility":"public","docs":"Returns the number of available CPUs of the current system.\n\nThis function will get the number of logical cores. Sometimes this is different from the number\nof physical cores (See [Simultaneous multithreading on Wikipedia][smt]).\n\nThis will always return at least `1`.\n\n# Examples\n\n```\nlet cpus = num_cpus::get();\nif cpus > 1 {\n    println!(\"We are on a multicore system with {} CPUs\", cpus);\n} else {\n    println!(\"We are on a single core system\");\n}\n```\n\n# Note\n\nThis will check [sched affinity] on Linux, showing a lower number of CPUs if the current\nthread does not have access to all the computer's CPUs.\n\nThis will also check [cgroups], frequently used in containers to constrain CPU usage.\n\n[smt]: https://en.wikipedia.org/wiki/Simultaneous_multithreading\n[sched affinity]: http://www.gnu.org/software/libc/manual/html_node/CPU-Affinity.html\n[cgroups]: https://www.kernel.org/doc/Documentation/cgroup-v1/cgroups.txt","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5722":{"id":"5:5722","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5723:34751","5:5724:7309","5:5727:34752","5:5730:34753","5:5738:34754","5:5739:34755","5:5740:3020","5:5741:26885","5:5742:26886"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13988:34051":{"id":"2:13988:34051","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12456:490","self::pattern":"2:13578:17844"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13584:10218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13584:10218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:13604:17841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13968:2896":{"id":"2:13968:2896","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:13578:17844","`DoubleEndedIterator`":"2:8476:133","prim@char":"1:12456:490","str::rmatches":"2:13971:34044"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44994:10423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13584:10218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13974:34045":{"id":"2:13974:34045","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:13578:17844","`DoubleEndedIterator`":"2:8476:133","prim@char":"1:12456:490","str::rmatch_indices":"2:13977:34046"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44940:10421","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13584:10218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14018:28914":{"id":"2:14018:28914","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1126:38007"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5724:7309":{"id":"5:5724:7309","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7802:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13584:10218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13953:34043":{"id":"2:13953:34043","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:13578:17844","str::split":"2:13941:2669","prim@char":"1:12456:490","str::split_terminator":"2:13950:34042"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44858:10420","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13584:10218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13584:10218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13599:17842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13950:34042":{"id":"2:13950:34042","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:13578:17844","str::split":"2:13941:2669","prim@char":"1:12456:490","`DoubleEndedIterator`":"2:8476:133","str::rsplit_terminator":"2:13953:34043"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44840:10419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13584:10218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14011:26883":{"id":"2:14011:26883","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13911:27711":{"id":"2:13911:27711","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13913:27715","str::split_at_mut":"2:13912:27712"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13894:34037":{"id":"2:13894:34037","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13892:34036"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13987:34050":{"id":"2:13987:34050","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13991:34052":{"id":"2:13991:34052","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12456:490","self::pattern":"2:13578:17844"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13584:10218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13921:2666":{"id":"2:13921:2666","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:45044:2990","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5727:34752":{"id":"5:5727:34752","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7802:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13584:10218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13890:2750":{"id":"2:13890:2750","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13920:31540":{"id":"2:13920:31540","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13919:31538"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:45073:10427","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14015:26889":{"id":"2:14015:26889","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13965:27727":{"id":"2:13965:27727","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42787:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13584:10218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13584:10218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13599:17842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13888":{"id":"2:13888","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13889:1024","2:13890:2750","2:13891:34035","2:13892:34036","2:13894:34037","2:13897:28949","2:13898:34038","2:13899:350","2:13900:2435","2:13901:2397","2:13903:27686","2:13905:27687","2:13907:27688","2:13909:34039","2:13910:34040","2:13911:27711","2:13912:27712","2:13913:27715","2:13914:27716","2:13916:10250","2:13917:10436","2:13918:7351","2:13919:31538","2:13920:31540","2:13921:2666","2:13922:34041","2:13923:31506","2:13924:27728","2:13927:27147","2:13930:27149","2:13933:2734","2:13937:7360","2:13941:2669","2:13944:27718","2:13947:27720","2:13950:34042","2:13953:34043","2:13956:27722","2:13959:27724","2:13962:27726","2:13965:27727","2:13968:2896","2:13971:34044","2:13974:34045","2:13977:34046","2:13980:2673","2:13982:34047","2:13984:34048","2:13986:34049","2:13987:34050","2:13988:34051","2:13991:34052","2:13994:2715","2:13997:27729","2:14000:34053","2:14003:34054","2:14006:34055","2:14009:2517","2:14011:26883","2:14012:28909","2:14013:26887","2:14014:26888","2:14015:26889","2:14016:28912","2:14017:28913","2:14018:28914","2:14019:34056","2:14021:12522","2:14022:34057"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13899:350":{"id":"2:13899:350","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13900:2435","`u8`":"1:12475:1895"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5739:34755":{"id":"5:5739:34755","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:297:3223","`String`":"5:7802:256"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:3223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13922:34041":{"id":"2:13922:34041","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:45054:10425","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14012:28909":{"id":"2:14012:28909","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40688:17922","Self::is_ascii":"2:14011:26883"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42787:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40688:17922","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13900:2435":{"id":"2:13900:2435","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12475:1895"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13986:34049":{"id":"2:13986:34049","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5738:34754":{"id":"5:5738:34754","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7802:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13891:34035":{"id":"2:13891:34035","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13947:27720":{"id":"2:13947:27720","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:13578:17844","`DoubleEndedIterator`":"2:8476:133","prim@char":"1:12456:490","str::split":"2:13941:2669"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44808:10232","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13584:10218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13584:10218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13599:17842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13959:27724":{"id":"2:13959:27724","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12456:490","str::splitn":"2:13956:27722","self::pattern":"2:13578:17844"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44912:10235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13584:10218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13584:10218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13599:17842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13933:2734":{"id":"2:13933:2734","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42789:202","prim@char":"1:12456:490","self::pattern":"2:13578:17844"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42787:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13584:10218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13997:27729":{"id":"2:13997:27729","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12456:490","self::pattern":"2:13578:17844"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42787:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13584:10218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13584:10218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13599:17842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14009:2517":{"id":"2:14009:2517","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:13539:148","`FromStr`":"2:13538:3046"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:43052:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:13538:3046","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:13538:3046","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13937:7360":{"id":"2:13937:7360","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42789:202","prim@char":"1:12456:490","self::pattern":"2:13578:17844"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42787:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13584:10218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13584:10218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13599:17842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5723:34751":{"id":"5:5723:34751","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:3223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:297:3223","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13897:28949":{"id":"2:13897:28949","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:13100:17845"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13910:34040":{"id":"2:13910:34040","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12462:1765","crate::ops::IndexMut":"2:3605:12551","str::slice_unchecked":"2:13909:34039"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13914:27716":{"id":"2:13914:27716","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13913:27715"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42787:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13901:2397":{"id":"2:13901:2397","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42789:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42787:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11659:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11659:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13907:27688":{"id":"2:13907:27688","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11659:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11659:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13930:27149":{"id":"2:13930:27149","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12456:490","self::pattern":"2:13578:17844"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13584:10218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13584:10218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13599:17842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14017:28913":{"id":"2:14017:28913","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1126:38007"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13977:34046":{"id":"2:13977:34046","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:13578:17844","`DoubleEndedIterator`":"2:8476:133","prim@char":"1:12456:490","str::match_indices":"2:13974:34045"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44958:10422","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13584:10218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13584:10218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13599:17842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14000:34053":{"id":"2:14000:34053","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12456:490","self::pattern":"2:13578:17844"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13584:10218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13584:10218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13599:17842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13941:2669":{"id":"2:13941:2669","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:13578:17844","`DoubleEndedIterator`":"2:8476:133","prim@char":"1:12456:490","str::split_whitespace":"2:13919:31538","str::rsplit":"2:13947:27720"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44790:2994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13584:10218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13898:34038":{"id":"2:13898:34038","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13913:27715":{"id":"2:13913:27715","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13914:27716"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42787:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5741:26885":{"id":"5:5741:26885","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:14014:26888"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13892:34036":{"id":"2:13892:34036","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13982:34047":{"id":"2:13982:34047","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13918:7351":{"id":"2:13918:7351","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44776:2993","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5740:3020":{"id":"5:5740:3020","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7802:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13980:2673":{"id":"2:13980:2673","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2524":{"id":"0:0:2524","crate_id":0,"name":"num_cpus","span":{"filename":"src/lib.rs","begin":[1,0],"end":[485,1]},"visibility":"public","docs":"A crate with utilities to determine the number of CPUs available on the\ncurrent system.\n\nSometimes the CPU will exaggerate the number of CPUs it contains, because it can use\n[processor tricks] to deliver increased performance when there are more threads. This \ncrate provides methods to get both the logical and physical numbers of cores.\n\nThis information can be used as a guide to how many tasks can be run in parallel.\nThere are many properties of the system architecture that will affect parallelism,\nfor example memory access speeds (for all the caches and RAM) and the physical\narchitecture of the processor, so the number of CPUs should be used as a rough guide\nonly.\n\n\n## Examples\n\nFetch the number of logical CPUs.\n\n```\nlet cpus = num_cpus::get();\n```\n\nSee [`rayon::Threadpool`] for an example of where the number of CPUs could be\nused when setting up parallel jobs (Where the threadpool example uses a fixed\nnumber 8, it could use the number of CPUs).\n\n[processor tricks]: https://en.wikipedia.org/wiki/Simultaneous_multithreading\n[`rayon::ThreadPool`]: https://docs.rs/rayon/1.*/rayon/struct.ThreadPool.html","links":{},"attrs":["#![deny(missing_docs)]","#![allow(non_snake_case)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:72:2397","0:73:2415"],"is_stripped":false}}},"2:13917:10436":{"id":"2:13917:10436","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12456:490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44766:10417","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13962:27726":{"id":"2:13962:27726","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42787:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13584:10218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13889:1024":{"id":"2:13889:1024","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12456:490"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13905:27687":{"id":"2:13905:27687","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11659:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11659:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13912:27712":{"id":"2:13912:27712","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13911:27711","str::split_at_mut_checked":"2:13914:27716"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13971:34044":{"id":"2:13971:34044","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:13578:17844","`DoubleEndedIterator`":"2:8476:133","prim@char":"1:12456:490","str::matches":"2:13968:2896"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:45012:10424","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13584:10218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13584:10218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13599:17842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13984:34048":{"id":"2:13984:34048","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14014:26888":{"id":"2:14014:26888","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14016:28912":{"id":"2:14016:28912","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1126:38007"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14019:34056":{"id":"2:14019:34056","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5149:34056"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:45089:10330","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14003:34054":{"id":"2:14003:34054","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12456:490","self::pattern":"2:13578:17844"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13584:10218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14022:34057":{"id":"2:14022:34057","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5147:34057"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:45107:10329","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13944:27718":{"id":"2:13944:27718","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12456:490","self::pattern":"2:13578:17844"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:13368:10229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13584:10218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5730:34753":{"id":"5:5730:34753","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7802:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"1:10958:11906":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"1:2496:2939":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"10:0:2791":{"crate_id":10,"path":["adler"],"kind":"module"},"1:5991:3066":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"6:4990:5896":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:41579:10189":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"16:8669:9664":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"6:8302:11783":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:14140:8567":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"20:3160:5893":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:10296:21508":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"5:5302:3064":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"6:5179:5912":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:14821:8703":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:14547:8646":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"5:212:9964":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:44366:11890":{"crate_id":2,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"1:8622:10646":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"20:3308:5907":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:14520:8641":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:13537:8400":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"6:4984:5895":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:11090:10781":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"1:3659:2958":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:42549:10207":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:9501:10797":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:5676:11653":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:45560:134":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"20:3111:5887":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:14832:8704":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:12676:10239":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"20:5479:5948":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:8438:176":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:8577:10751":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"5:6159:3064":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:12469:758":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"17:11788:8260":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"16:2840:9294":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"16:6998:9507":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:10967:164":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:13290:8149":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:881:12594":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"20:501:3718":{"crate_id":20,"path":["libc","unix","rusage"],"kind":"struct"},"1:10413:10805":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"6:4957:5891":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:8806:3039":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:6232:231":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"20:4138:6458":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:5036:11499":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:485:3716":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"5:3088:11796":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:7340:27121":{"crate_id":1,"path":["std","sys","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:2215:10027":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:9356:10792":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"15:0:2795":{"crate_id":15,"path":["addr2line"],"kind":"module"},"16:6337:9399":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:12941:8401":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"16:6098:9369":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"16:6731:9485":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:12920:8398":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"16:6042:9306":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:23119:12760":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"17:14438:8631":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:10784:8193":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"16:6808:9302":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:45073:10427":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"6:1539:4479":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"5:1595:9883":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:12625:8367":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"16:2772:9291":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"11:708:9865":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:16684:9217":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"20:4806:6945":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"16:7938:9692":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"20:3065:5883":{"crate_id":20,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:11568:26976":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"11:830:9883":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"6:8296:5949":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"5:7766:10016":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"6:4869:5882":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:5413:32264":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:8900:17971":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:6507:11664":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"16:4694:9337":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:40515:10321":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"16:2570:9282":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:12130:10235":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:984:9872":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:2013:12580":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"6:6449:6455":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:11812:10685":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"16:7168:9543":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:6210:2975":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:47133:10503":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:12095:8296":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:2227:8063":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"11:1893:9975":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"6:5622:11632":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"20:3257:5903":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:6526:6462":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:2754:2997":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"16:7462:9592":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"5:789:121":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:44173:10397":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"16:7358:9312":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"5:6285:2975":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"6:6381:6429":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:1507:11497":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:42806:184":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"11:1580:9885":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:687:12524":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"11:1140:9880":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:1643:4488":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:12673:8370":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:48023:10582":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"6:5224:5917":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"16:6822:21444":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"2:5220:17909":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:9211:7364":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:44181:10398":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:11421:8226":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:15077:8745":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"5:1636:9974":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:2086:208":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:925:9868":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"5:1370:9606":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:16198:9094":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"20:469:3713":{"crate_id":20,"path":["libc","unix","group"],"kind":"struct"},"2:23645:31481":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:10928:8209":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:12008:8130":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:8654:10759":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"17:13798:8491":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:32990:9664":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"6:5205:5915":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:3448:3014":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:16264:9111":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"6:8353:7301":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:8054:8332":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:13041:8414":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"17:13983:8525":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"6:5471:11599":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"5:5973:264":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"16:6658:9465":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"20:1398:4480":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"16:7159:9542":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"11:1005:9606":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:1652:9890":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:2554:2645":{"crate_id":1,"path":["std","io"],"kind":"module"},"5:929:12535":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"20:1537:4493":{"crate_id":20,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:8308:11784":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:43890:9733":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:41292:10333":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"6:5107:5904":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:11042:10761":{"crate_id":1,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"16:4241:9334":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:1108:9877":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:13610:8453":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:41351:10337":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:44587:10400":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:10570:25964":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"17:11733:21549":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"17:13451:8439":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"5:4208:9882":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"16:6953:9506":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:7971:17967":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:12260:21621":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"16:2820:9293":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"20:2982:5877":{"crate_id":20,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:40447:227":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"6:1684:4492":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:11299:32047":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"17:13266:21517":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:3313:26755":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:9425:198":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:11777:8258":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"11:102:11468":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:5635:10658":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"17:12234:8309":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"6:6666:11710":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"0:0:2524":{"crate_id":0,"path":["num_cpus"],"kind":"module"},"2:42715:10376":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:11073:25896":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"20:5019:6955":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:14560:8647":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:3045:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"5:3851:3008":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:45082:10249":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"5:3309:33763":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:23331:12756":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"17:12711:8376":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"5:7900:10023":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:11975:10645":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"6:5265:11510":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:12057:10688":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:46998:10496":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"16:5060:9346":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:13157:8418":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"6:5635:11638":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"20:4229:6466":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:23739:2959":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"17:16761:9235":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"17:10630:8047":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:3548:2996":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:10387:33070":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:43439:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:14514:10267":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:4931:7452":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:15090:8746":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"5:5143:2975":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"16:7508:9600":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"6:5295:11526":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:3293:276":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"16:6462:21443":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"5:7621:10012":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"16:5255:9353":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"6:5450:11584":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:1932:10635":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:16701:9219":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"2:44615:10404":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"6:6544:6465":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:10696:8049":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:16132:9070":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:12335:8323":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"16:8014:9319":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:4730:10169":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:13055:8238":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"16:8233:21452":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"20:3209:5899":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:12983:21648":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:47118:10502":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:34661:17985":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"16:7044:9310":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:45107:10329":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:12471:918":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"6:6493:6444":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"16:7282:9569":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:12242:27020":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:13593:8031":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:6829:3073":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:884:201":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"16:6111:9374":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:16714:9225":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"6:5196:5914":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"20:5455:5944":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"5:1616:9866":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"16:5379:9357":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"20:1531:4492":{"crate_id":20,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:16555:9191":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"17:15641:8934":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:10549:8191":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:11792:10824":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"16:5742:8191":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"19:0:1323":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:3889:8090":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"16:7386:9578":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:22373:12677":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:14672:8662":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:3573:153":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:23075:12759":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"20:1479:4487":{"crate_id":20,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:45514:11894":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:9310:10785":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"14:187:20520":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"5:1605:9865":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:46894:10482":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:47150:10504":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"5:2348:34964":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"16:546:9255":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"18:96:25700":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"6:6462:6456":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:14652:8659":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:3075:237":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"2:2666:18003":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"17:11985:8276":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:11659:251":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:41641:10193":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"9:480:20426":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:42871:7429":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:7548:6954":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:45595:18104":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"11:1601:9886":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"5:3092:33350":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:45775:10457":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:22444:10270":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:15852:8980":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:43906:31516":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"2:45522:11896":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:15602:8925":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"20:138:3403":{"crate_id":20,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:11678:8247":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:8254:130":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:11925:10229":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:12028:8281":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"17:14114:8562":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:11646:2959":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:11878:8213":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:10695:2958":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:4341:12630":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"14:214:9861":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"6:5255:5920":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:1117:9881":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"9:53:20445":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:959:9865":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"16:4956:9344":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:6494:10662":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:990:9874":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:43476:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:13100:17845":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:15621:8926":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:3814:115":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"5:7790:10019":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"2:41391:10338":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"5:726:9966":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:44151:168":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:12457:1917":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:43052:237":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:13095:8415":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"6:5629:11635":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"17:13398:8436":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:7818:26956":{"crate_id":1,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"6:6917:11760":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"6:5301:11529":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"20:4095:6453":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:33552:9619":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"20:4120:6456":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"20:3166:5894":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"5:3866:9980":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:41800:10196":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"16:5757:9362":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:3051:174":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"16:6573:9443":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:11606:8213":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:11320:11910":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"2:3553:17803":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"17:13871:8508":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:14375:8620":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:2508:2945":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:12479:1871":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"17:15963:9013":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:13314:10247":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:679:10624":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:15475:8904":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:9361:10793":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:14393:8621":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:1927:2418":{"crate_id":2,"path":["core","mem"],"kind":"module"},"2:45353:10441":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:10861:150":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"16:2590:9283":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:40427:225":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:7099:10190":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"17:14460:8632":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"11:488:165":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"20:3104:5886":{"crate_id":20,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:23820:10302":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"1:11338:173":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"1:6711:2649":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:33111:117":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:3774:158":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:45584:10452":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"5:6759:33781":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"6:8249:5944":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:23246:12765":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:11134:26974":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:39097:17991":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:14220:8572":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"6:8008:7299":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:8036:10693":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:9217:10664":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"20:489:3716":{"crate_id":20,"path":["libc","unix","timespec"],"kind":"struct"},"2:22426:12673":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:3024:2959":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:386:10619":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:39042:17990":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:12056:8291":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"11:2349:9877":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"2:14203:10257":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"1:8558:2993":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"5:7263:33807":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:22285:3285":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:10998:151":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"17:12135:8299":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:9447:246":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:11786:10680":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:10167:21504":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"16:2415:20552":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"20:1558:4496":{"crate_id":20,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"16:7030:9516":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"18:651:7995":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:40352:224":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:14692:8663":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:3310:26756":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"11:835:9869":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:10778:8192":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"6:5441:11578":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:41986:10198":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"17:14947:8720":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"11:785:9868":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:13491:8441":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"20:3092:5885":{"crate_id":20,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:2480:2934":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:8758:3038":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:3446:3013":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:14573:8649":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:31139:12593":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"18:680:8026":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"18:718:8035":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:23522:10273":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"20:3059:5882":{"crate_id":20,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:42902:7427":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"11:2148:9877":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:15106:8748":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:23157:12761":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"6:1667:4490":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:14571:163":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:41776:2992":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:15531:8910":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"6:7391:4437":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:46759:10470":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:41570:10188":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:16323:9127":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:8373:3009":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:10754:132":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:11503:8233":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"1:4018:10645":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:2896:213":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:11805:8263":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:3799:31713":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:8289:3008":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:0:582":{"crate_id":2,"path":["core"],"kind":"module"},"17:11173:35057":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:11857:9882":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"16:8503:9756":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"5:6561:12767":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:4591:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"20:1355:4475":{"crate_id":20,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:1869:10631":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:10760:7441":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:954:9883":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:14335:8612":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"16:5224:9352":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:3307:31365":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:4614:17807":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:8529:3221":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:14243:10355":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"2:42977:10383":{"crate_id":2,"path":["core","range","iter","IterRangeFrom"],"kind":"struct"},"2:41175:10327":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:15557:8916":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:15679:8939":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:41592:10357":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:6401:10181":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:44717:10412":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:13322:21518":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:3129:126":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"18:659:8019":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:3025:17921":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"20:5417:3673":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:7192:21447":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:13970:8524":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"9:422:20429":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"6:6823:6466":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:11026:25904":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"16:4267:9335":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"6:1675:4491":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:9261:12663":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"20:3180:5896":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"11:2380:3043":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"1:439:196":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:11291:35056":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:506:8057":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:12407:10828":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:48190:10612":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:41185:10328":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:8588:12590":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:5493:1004":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:11386:21528":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"1:11058:10661":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"20:542:3722":{"crate_id":20,"path":["libc","unix","pollfd"],"kind":"struct"},"1:5809:3451":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:7806:26953":{"crate_id":1,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"20:4131:6457":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"16:7807:35046":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"20:527:3720":{"crate_id":20,"path":["libc","unix","hostent"],"kind":"struct"},"2:3769:267":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:11818:8264":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"6:6731:11732":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"1:9297:3069":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:34248:12668":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:14872:8708":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:9161:10779":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"5:889:9969":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:14084:8550":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"20:1543:4494":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"6:1489:4474":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:44808:10232":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:10793:8196":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"16:7212:9555":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:14019:8534":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"11:809:9975":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:43400:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:40504:10035":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:8541:2991":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:45241:10438":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:9586:10634":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"6:5151:5908":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:10487:21514":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"5:7802:256":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"18:515:7992":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:35180:9625":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:13082:8214":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"6:6631:5910":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"16:2660:9286":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:9686:10218":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"6:5462:11593":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"20:5461:5945":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:11653:8245":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"20:4069:6451":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"20:2976:5876":{"crate_id":20,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:5593:5926":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"5:3297:3043":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"11:881:9875":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:42000:2649":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:33976:17981":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:11163:8213":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:11851:8266":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:45704:11902":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"17:13958:8523":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:3403:3017":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"5:3268:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:4221:12615":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"11:0:2792":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"16:7578:10795":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"18:507:7995":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:22828:12679":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"17:10394:21511":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:44749:10416":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:41651:10359":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:5362:215":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"1:3916:10644":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:1647:9889":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"11:1884:7364":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"20:4107:6455":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:10705:27008":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"17:13119:8416":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"1:8228:2949":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:12483:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"18:531:7999":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:15036:8740":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"6:545:3723":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:5488:11604":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"5:2585:11800":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"20:1472:4486":{"crate_id":20,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:881:3043":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:16008:9024":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:47877:10574":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"16:2530:9280":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:11882:2994":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"11:2228:8284":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"9:390:20428":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:6542:231":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"16:6904:9502":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"20:3006:5879":{"crate_id":20,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"20:536:3721":{"crate_id":20,"path":["libc","unix","iovec"],"kind":"struct"},"1:2331:2931":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"16:3987:8098":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"1:11368:11911":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"16:2880:9296":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"6:5057:5901":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:948:9975":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:23831:10303":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"11:299:11470":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"20:1550:4495":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"16:8165:9311":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:6715:3071":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:43215:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"20:3451:5922":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:11017:2954":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"6:4792:5877":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:4579:10167":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"16:2467:9272":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"16:5198:9351":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:2652:694":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:682:10626":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"11:2533:11475":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:4171:12612":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:15010:8738":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:22550:12674":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:11146:27017":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"18:623:35060":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"20:4943:6951":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:8218:2952":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"20:590:3729":{"crate_id":20,"path":["libc","unix","protoent"],"kind":"struct"},"6:1514:4476":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:41162:10326":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"16:3834:9330":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:46940:10485":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:41508:10176":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:3570:152":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:13814:122":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"6:564:3726":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:14933:8718":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:47232:10508":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:1984:10636":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:15586:8922":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:14997:8737":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"6:1696:4494":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"6:5165:5909":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:40389:223":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"16:8066:21451":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:43289:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"20:3187:5897":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:5114:12642":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"17:15753:8960":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"16:7959:9695":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"0:72:2397":{"crate_id":0,"path":["num_cpus","get"],"kind":"function"},"1:11285:11901":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"6:5088:5903":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"16:6696:9474":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"5:1386:9877":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:33079:3217":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:10246:21506":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"5:5836:17873":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:45712:175":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:23886:10308":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"17:13205:8422":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:3140:149":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"5:4133:9884":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:10516:21515":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"20:3137:5890":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:46911:10483":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:42880:12529":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:1898:7566":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"1:9328:25887":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:13635:8454":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"6:7448:6947":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:26749:281":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"6:4947:5890":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:45534:11899":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:47935:10576":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:47583:10537":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"6:6623:5911":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:43611:7440":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:22552:10270":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:2890:206":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"5:1487:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"6:8290:5948":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:6599:11686":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:43878:11889":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:41627:8016":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:23601:10280":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"6:5658:11644":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"1:6070:3078":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:12035:8284":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"11:1900:9887":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"5:3694:193":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:44894:10234":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:8390:17973":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"11:1907:9888":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:12776:8381":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:12191:8304":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"2:47803:10572":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:48113:10594":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:15785:8966":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:2854:212":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"8:0:2789":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:15905:8995":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:9465:173":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:2668:18004":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"17:11831:8238":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:13538:3046":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:43178:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:12459:1348":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:38987:17989":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"5:7825:10021":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"6:5282:11521":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:11034:25910":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:630:12521":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:8015:2959":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:48049:10584":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:3605:12551":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:12359:8325":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"6:4964:5892":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:7308:3640":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:11065:8211":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:1099:9876":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:47211:10507":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:11926:8272":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"20:2995:5878":{"crate_id":20,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"14:165:20513":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"5:6180:18294":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:13145:8417":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"6:465:3713":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"20:1410:4481":{"crate_id":20,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:8102:12570":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"17:14807:8701":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"16:3308:9269":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"5:3931:9975":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:34834:17986":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:13330:10248":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:11617:8214":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:45734:218":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"6:5230:5918":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:3300:260":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"6:6716:11730":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"16:6302:9396":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:11798:10684":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:4119:12608":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:13361:8433":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:41147:31502":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"6:8255:5945":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:13592:8450":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"16:4766:9338":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:15812:8970":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:34315:12670":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:10768:7444":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:15714:8949":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:12468:779":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:2206:18013":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:8503:3024":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"16:7350:9576":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:42919:10381":{"crate_id":2,"path":["core","range","iter","IterRange"],"kind":"struct"},"17:11475:21530":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"16:3587:9328":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"2:47421:10531":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"20:4272:6487":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"20:3489:5926":{"crate_id":20,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:479:3715":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:13515:21519":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:14773:8698":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"5:7090:17873":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:12116:10234":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:42009:10200":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:1551:4480":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:8265:10702":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"20:4042:6429":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:10975:168":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"20:1350:4474":{"crate_id":20,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:908:8053":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"17:14099:8556":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"18:0:2798":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:44790:2994":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:23660:31491":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:11720:8252":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"2:23718:12607":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:14750:8689":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:22341:32675":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"16:4152:9332":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:11015:10224":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:6790:11752":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:43326:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:12699:8375":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:5741:10661":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"16:6588:9446":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"1:1635:9887":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:16613:8501":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"2:10206:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"11:1888:9884":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:43966:7450":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"20:5467:5946":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"20:1368:4477":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:12869:8439":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:575:12512":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"17:10564:8044":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"20:3286:5905":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:894:9882":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:12475:1895":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:11448:8227":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:3539:3023":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:11954:10644":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"16:6173:9378":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"11:2301:9606":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"1:3496:3000":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"11:396:35004":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:768:165":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"20:3154:5892":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:12550:8364":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"9:355:20442":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:23336:12754":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"2:45012:10424":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:15931:9005":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"20:3276:5904":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"20:4185:6462":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:10097:21501":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"2:12144:10236":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:10392:31844":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:16728:9228":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"16:8267:9714":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:46873:10481":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:23787:10299":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"16:7075:21446":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:8894:12541":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:47509:10535":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"17:13757:8487":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:14507:8638":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"14:160:9855":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:22850:10269":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:3517:17811":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"17:10332:21509":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"3:234:237":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:8143:3022":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"6:1690:4493":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:11515:8234":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"10:36:11482":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"16:5348:9356":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:3696:222":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:599:10622":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"6:5477:11602":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:973:12534":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"20:3226:5901":{"crate_id":20,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:1220:8060":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:10979:10798":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"2:41204:10165":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"6:6534:6463":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:6902:6488":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"16:3014:20580":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:16084:9069":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:12952:8402":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"16:8565:9764":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"5:1785:33781":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"6:538:3722":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"16:8528:9759":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"6:553:3724":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:15:2899":{"crate_id":2,"path":["core","write"],"kind":"macro"},"16:5113:9348":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:8634:12633":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:5884:10663":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"5:7124:17875":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"5:1123:33781":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"13:110:35021":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:11358:21527":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:44912:10235":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"15:288:20532":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"16:6064:9308":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:40335:12550":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"16:0:2796":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:33011:10313":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"1:10939:10815":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"2:3305:3269":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:3854:8074":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"6:7431:4412":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:3458:9621":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"16:7542:9605":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:2406:8067":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"5:1230:33353":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"18:563:8004":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:15540:8914":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:9369:10795":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:32997:10312":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:4569:10649":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"5:7288:33801":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"5:7571:10010":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:967:9869":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"20:4995:6953":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"16:896:9264":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"1:8368:10706":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"1:8884:3042":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:4939:12619":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:7463:6949":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"10:44:9897":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"16:5449:9359":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:33022:257":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:10442:21513":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:4233:12617":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"11:2495:20503":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"18:521:25711":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"11:2551:35019":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"20:4870:4409":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:33021:250":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"6:4805:5878":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:4902:12634":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:938:9884":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:41602:10358":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"11:2440:9884":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"2:41320:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:12460:349":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"17:16656:9210":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"1:12480:993":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:47051:10499":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:16822:8518":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"5:4163:33781":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"9:500:9951":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:23209:18003":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"1:6886:3080":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"17:14072:8547":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:16775:9239":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"6:4937:5889":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:6900:3081":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"20:614:3747":{"crate_id":20,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:15064:8744":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"16:6188:9380":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"16:7521:9603":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"14:7:9855":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"20:3320:5908":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:44675:10408":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:13084:10240":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:47488:10534":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:507:27006":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"5:1627:221":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"20:557:3724":{"crate_id":20,"path":["libc","unix","linger"],"kind":"struct"},"2:13254:10243":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:14312:8608":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"18:538:8002":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:5671:10660":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"16:6640:9451":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"5:5426:17825":{"crate_id":5,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"6:5570:11613":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:5040:7454":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:4211:12614":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:42527:181":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:8571:2990":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:14483:8637":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:42581:12591":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:16019:9025":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:12439:25912":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"16:903:8052":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"11:873:9874":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:11465:8230":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"17:15689:8940":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"5:2266:9982":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:42831:7364":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"6:6770:11744":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"11:1158:9881":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:43092:3043":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:41212:10330":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:11706:8250":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:6605:197":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:7854:17918":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"16:6389:9405":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:4902:5885":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"6:6652:11708":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"11:842:12534":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:16507:8487":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"2:23181:2959":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"6:6758:11742":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"2:4186:7364":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"5:1539:9882":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:45510:11893":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"20:495:3717":{"crate_id":20,"path":["libc","unix","rlimit"],"kind":"struct"},"1:10392:10633":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"2:33109:3274":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:3780:17889":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"5:6713:9884":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:14308:31642":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:4163:12611":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"6:4997:5897":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:44605:10403":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"14:220:9863":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:5105:12641":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"11:2121:9606":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:44840:10419":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:11527:8237":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:13028:8413":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"17:14152:8570":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:12473:930":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"20:3355:5911":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Chdr"],"kind":"struct"},"6:7539:6953":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:41325:10336":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:1727:4497":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:46844:10479":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:2083:209":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:4816:5879":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:44379:11891":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:41373:2506":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"20:4781:4408":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"16:6440:21442":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:13427:8437":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"6:5127:5906":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:46774:10471":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:11253:10779":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:23897:10309":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"2:45195:10429":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:12826:8384":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"6:6777:11745":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"1:12472:924":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:47338:10528":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:12816:8075":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:16520:9161":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"16:8636:21454":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:5998:3067":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:11757:21550":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:8648:10751":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"6:5482:5876":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:45848:10462":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:11443:32050":{"crate_id":2,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"6:6672:11713":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:6659:11709":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"20:4925:6950":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:7604:6958":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"20:4904:6947":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:16283:9116":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:11309:8216":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:10782:3013":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"1:3405:3018":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:16362:9136":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:43632:7442":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"6:6443:6454":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:12066:8292":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:15777:8964":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"6:497:3718":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"20:1436:4484":{"crate_id":20,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:12454:434":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1:8512:2954":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"5:3707:3043":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"5:39:12552":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"5:7884:9975":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:6287:10179":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:10201:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:10977:35050":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"16:5709:21439":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:13604:17841":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"5:1214:34834":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:22981:2959":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"9:236:3039":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:7577:11767":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:45174:17856":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:22823:2959":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"17:11016:8210":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"6:1632:4487":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"16:6408:9412":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"16:4844:9340":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"16:8598:9768":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:5392:452":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"17:16311:9125":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:12851:8393":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:3569:2975":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"20:4773:3640":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:45526:11897":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"16:2506:9279":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:44625:10405":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"16:7495:9596":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:4825:11374":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"1:2793:3007":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:12018:8279":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"17:14327:8610":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"5:1586:9868":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:2020:810":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"6:6638:11697":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:11124:35051":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:10766:7443":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:13781:8488":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:40467:2921":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:45054:10425":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"16:8179:9704":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"6:5641:11641":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:16494:8473":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"9:0:2790":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:10479:12660":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"1:8673:10761":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:15946:9009":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:12392:8328":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:12455:1204":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:13014:8411":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"17:15981:9017":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"18:726:8038":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:33020:248":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:15496:8909":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"14:202:17858":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"6:5381:6464":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:12537:8362":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:7911:10689":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"20:4101:6454":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:6407:27014":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"5:2173:9981":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"17:11457:8229":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"16:7416:9581":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"6:6708:11727":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"20:3086:5762":{"crate_id":20,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"6:7350:6945":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:6832:3074":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:11152:27005":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:4702:12635":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:12478:1889":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:44766:10417":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:15919:9002":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"20:4174:6460":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlmsgerr"],"kind":"struct"},"16:2950:9299":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:13838:8502":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:15896:8994":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:0:2797":{"crate_id":17,"path":["object"],"kind":"module"},"1:5195:12649":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:12225:8308":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"2:34382:17983":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:16187:9089":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"11:1564:20508":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:7402:27010":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"5:7114:17874":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"5:4499:33811":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"5:3096:33352":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:4053:9884":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:43108:7364":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:42787:205":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"20:3482:5925":{"crate_id":20,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:663:10623":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"16:6421:9257":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"16:7259:9568":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:12466:760":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"11:1725:167":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"16:2990:9301":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:43625:7441":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:48075:10586":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:3759:17993":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"6:5366:6459":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"16:3110:9324":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"6:4875:5883":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:9349:10791":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:14284:8601":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:22322:32667":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:44163:3039":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:45825:10461":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:2718:3005":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:22424:2959":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"11:2545:11477":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"16:7990:9697":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:9150:210":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:2209:2934":{"crate_id":2,"path":["core","ptr","metadata","metadata"],"kind":"function"},"1:9315:118":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"6:1625:4486":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:12043:26486":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"6:6437:6453":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:12605:8213":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:13933:8518":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:16332:9131":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:45419:10253":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"16:7372:9313":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"5:4562:2975":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"18:80:25699":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:13169:8419":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"1:4149:12610":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:12031:10825":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:3564:3218":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:12428:12528":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:16297:9118":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"16:8585:9765":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"6:1703:4495":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"5:3343:33762":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"6:473:3714":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:11222:8214":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:46827:10478":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:23195:12764":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"17:16786:9241":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"16:6368:9251":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:9483:2965":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:48151:10596":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"20:3197:5898":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:15351:8812":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"20:5485:5949":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:13652:17850":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:22432:12676":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:22353:32677":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"6:5349:11542":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"16:7223:9556":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:16750:9234":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"2:42911:10219":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:14640:8658":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:10031:21500":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:13070:8213":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"5:3800:33781":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:13471:8075":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"20:5033:6956":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","termios2"],"kind":"struct"},"2:40255:17887":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:583:8058":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:996:9875":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"16:6843:9495":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:8082:12526":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:16668:9212":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"6:5562:11611":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:48060:10585":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:16632:9205":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"2:44707:10411":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"11:1105:9879":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"16:6713:9475":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"6:5249:11508":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:5428:11568":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:15121:8752":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:10843:8198":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:8900:3044":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:12897:8396":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:9756:25960":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"17:10534:8190":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:15836:8978":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"6:7332:3598":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:6957:244":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:1907:10633":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:2378:21577":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:10803:2993":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:24349:247":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:11691:8248":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"6:8014:11770":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"20:3425:5919":{"crate_id":20,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"16:6876:9499":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"6:559:3725":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:15050:8741":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"6:1530:4478":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:3295:120":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"16:6159:9375":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:7855:17919":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"16:3695:9329":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:6391:10267":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:46859:10480":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"20:5494:7301":{"crate_id":20,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:15739:8957":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:8203:3059":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"18:698:8029":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"16:8000:9318":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"5:2368:11799":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"5:4999:228":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:11843:11919":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"16:3126:20582":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"5:7541:7364":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:22862:32665":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"5:6931:33781":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:4349:12631":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"11:1880:3043":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"16:6144:21440":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:41106:10322":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"11:328:11473":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:23875:10307":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"17:13570:21520":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:9174:10780":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:3620:2955":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:41611:10191":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:4997:10652":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:11169:32052":{"crate_id":2,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"2:7920:31776":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"16:2435:20579":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"2:34449:17982":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:23289:2959":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"1:8117:10700":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:3378:12669":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:8363:10705":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"5:7215:278":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"16:4120:9331":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:1491:167":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"16:5417:9358":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:8584:189":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"16:8151:9321":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:14586:8650":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:2326:150":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"6:7586:6957":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"5:1577:9867":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:2766:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"5:1889:9975":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"20:1377:4478":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:3851:131":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:43117:207":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:11952:8273":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"5:7549:10009":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:42959:10382":{"crate_id":2,"path":["core","range","iter","IterRangeInclusive"],"kind":"struct"},"17:16171:9085":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:11891:25962":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:8911:3045":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"5:4298:2975":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"18:548:164":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"16:7058:9518":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:15864:8986":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:43141:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:41457:2991":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:12643:10238":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"1:3042:10641":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:23207:31919":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"5:985:12536":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"20:1386:4479":{"crate_id":20,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"5:5576:17829":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:41526:10352":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:12249:8313":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"5:2295:11795":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:5019:5899":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:10532:7461":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"2:45289:10440":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:15769:8962":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:2245:132":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"1:9751:2951":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"17:10823:8054":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"16:2796:9292":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:3181:10032":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"16:8028:9698":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"6:4881:5884":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"16:6866:21445":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"6:5494:11606":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"17:15989:9019":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:43100:9882":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"6:491:3717":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:45089:10330":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:5451:3025":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"11:1064:20507":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"5:4330:2975":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:23469:10272":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:15829:8977":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:5020:12618":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"6:8330:11789":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"17:14708:8668":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"6:5051:11506":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:43928:7449":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"4:0:2788":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:44636:10406":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:46926:10484":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:1930:10634":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:47359:10529":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:912:9867":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:14416:8624":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"20:3032:5881":{"crate_id":20,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:9773:130":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"1:8240:151":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:47758:10571":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"18:613:35062":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:12976:8404":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:14031:8537":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"5:4575:33811":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:48034:10583":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:44536:10399":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:16832:8523":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"2:11964:10230":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"16:2724:9289":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:44126:10388":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:15439:8875":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"5:7707:2928":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:47019:10497":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:41993:10199":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:8938:33069":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"20:3174:5895":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:43861:7449":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"17:12962:21647":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:322:8053":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"20:3296:5906":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"11:2366:9893":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"5:7605:7364":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:3535:127":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"16:4929:9343":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:12216:8307":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"17:3720:8073":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"20:3401:5916":{"crate_id":20,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:8206:2951":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:8427:157":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:2816:3266":{"crate_id":2,"path":["core","clone","InitializingSlice"],"kind":"struct"},"20:3348:5910":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Chdr"],"kind":"struct"},"14:40:8488":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:44662:10345":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:45716:230":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:12044:8287":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"20:134:3402":{"crate_id":20,"path":["libc","unix","FILE"],"kind":"enum"},"16:7949:9316":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:5420:11563":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:3352:3016":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"11:2566:2927":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"16:8626:9770":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:6910:10183":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:1623:7364":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:45518:11895":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"11:1914:9889":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:31807:3285":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"1:904:7364":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:12462:1765":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:2498:2940":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:6439:10670":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"6:6765:11743":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"2:13584:10218":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:31401:3267":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"18:608:8011":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:4848:232":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:12467:763":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:7500:30432":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:2521:2947":{"crate_id":1,"path":["std","fs","exists"],"kind":"function"},"2:45799:10460":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"1:9144:10778":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:10963:11908":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"2:45388:10446":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"18:491:7994":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:16341:9133":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:11630:8244":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"6:1657:4489":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"5:7722:10005":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"16:8209:9309":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:2648:2647":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:8476:133":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:42042:10203":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"6:1597:4485":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:16218:9097":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"5:4484:279":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:4941:12621":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"6:5682:11656":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:47956:10577":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:45542:11901":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:42840:7428":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:40688:17922":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"5:3304:9888":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:31433:31494":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"17:10141:21503":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:8211:2948":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:40367:221":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"17:11971:8275":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:2112:7311":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"5:7613:221":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"16:5085:9347":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:14886:8711":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"16:2966:9300":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:15431:8874":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"6:5186:5913":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:8273:10703":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"6:4829:5880":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:23260:18003":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"1:7956:27018":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:47249:10509":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:45788:31981":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"17:15573:8917":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"16:8483:9755":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:15160:8759":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"6:4890:2656":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"20:1490:4488":{"crate_id":20,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:11281:8215":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:45506:11892":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"0:73:2415":{"crate_id":0,"path":["num_cpus","get_physical"],"kind":"function"},"1:5655:10659":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:22371:2959":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:45809:191":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:40497:10320":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:10368:21510":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:6970:9305":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:7749:7370":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"18:589:8005":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:13349:8432":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"5:3330:9889":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:16812:9245":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"6:5069:5902":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:4914:5886":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:10756:7439":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"6:5139:5907":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:43851:11880":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"5:7561:9884":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"16:6123:9307":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:42815:3043":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1:963:9866":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:1589:4484":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:14001:8533":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:9452:3076":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"5:7649:7364":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"20:582:3728":{"crate_id":20,"path":["libc","unix","servent"],"kind":"struct"},"1:9276:12665":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"6:5648:5923":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"20:3334:5909":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:46712:10463":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:47080:10500":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:12992:8406":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:7844:26954":{"crate_id":1,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"1:2328:2930":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:41363:2993":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"1:3668:30947":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:1641:9888":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"6:8031:7300":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:4983:9345":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"20:4847:4437":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:11075:35055":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:12470:936":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"20:521:3719":{"crate_id":20,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"16:7305:9570":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:10758:7440":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:12524:8361":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"20:5064:6958":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:14127:8566":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:42767:10213":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"16:2704:9288":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"6:8267:11778":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"6:5405:11558":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:16036:9032":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"5:1524:3043":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"11:2466:9975":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"6:5603:11618":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:23776:10298":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"18:635:8018":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"20:568:3726":{"crate_id":20,"path":["libc","unix","itimerval"],"kind":"struct"},"2:41549:10182":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"16:8612:9323":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:45064:10426":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:3408:17810":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"6:5341:11541":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"6:5520:11610":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"17:11553:8239":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"6:570:3727":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:47309:10527":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:11579:8242":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:12886:8395":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:9442:245":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"20:4919:6949":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:14405:8623":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"6:8284:5947":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"16:6749:9262":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:3400:17808":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"17:2437:8070":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"6:6882:2454":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:11566:8240":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:8629:11903":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:12075:10233":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:16159:9082":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"6:1711:4496":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"20:4209:6465":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:9536:10216":{"crate_id":2,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"1:4333:12629":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"20:3147:5891":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:9246:12664":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"16:2900:9297":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:12306:8318":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"1:534:12507":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:41219:17915":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"6:5357:11543":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"2:12037:10232":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"11:2137:9876":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"20:0:1029":{"crate_id":20,"path":["libc"],"kind":"module"},"17:16209:9095":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:15731:8954":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:4633:17891":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"17:10938:35052":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:41558:10356":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:2105:693":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"1:11050:10700":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"6:6723:11731":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"17:12749:8379":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:47681:10570":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"16:6914:9503":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"5:6840:7364":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:34516:17984":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"20:1444:4485":{"crate_id":20,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:43252:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"9:176:20494":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:8260:10639":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"2:2208:18014":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"2:3388:9620":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:23809:10301":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"6:1500:11494":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"16:6680:9471":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"6:5025:5900":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:12648:8368":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:8894:3043":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:14491:118":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:33080:3275":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:3048:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:13890:8513":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:12122:8298":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:380:10617":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:13854:8506":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"6:7469:6950":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:15418:8867":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:4857:10171":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"5:7751:18051":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:6837:9494":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:9195:3043":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"20:4974:6952":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:44940:10421":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"5:3086:33357":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:11722:3039":{"crate_id":1,"path":["std","sys","thread_local","native","eager","State"],"kind":"enum"},"17:13921:8517":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:8829:3040":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:8394:17972":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:12280:8314":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"16:8711:9777":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:47036:10498":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"20:3019:5880":{"crate_id":20,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:9402:11905":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:10822:8332":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"1:5128:12643":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:43920:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"16:7401:35040":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:8732:10762":{"crate_id":1,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"16:4184:9333":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"6:5375:6460":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:4827:11376":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"17:12906:8397":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:13385:8434":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"7:32:20414":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:15997:9020":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"16:6942:9505":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:2769:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"16:6239:9384":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"11:2420:7364":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"1:8201:2950":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:3350:3015":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"11:671:3043":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:47554:10536":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"17:10218:21505":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"20:4165:6459":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlmsghdr"],"kind":"struct"},"18:598:35061":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:2142:1393":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:47182:10506":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:33004:7452":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"2:4489:2975":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:37056:9626":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"18:581:3285":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"6:8199:6956":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:23853:10305":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"17:12787:8382":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:11837:11918":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"16:7765:9643":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:14043:8538":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:12409:21622":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:2282:200":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:43032:223":{"crate_id":2,"path":["core","range","RangeFrom"],"kind":"struct"},"1:4495:10648":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:7105:11808":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"20:1361:4476":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:3054:156":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:46955:10486":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:13291:10246":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"5:2816:11803":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:5009:3103":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"6:5241:5919":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:7830:26955":{"crate_id":1,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"6:4976:5894":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:12461:1731":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"5:1250:34832":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"18:573:7995":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:42609:11879":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:12931:8400":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:9430:3070":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"18:765:25710":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"16:6984:9322":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"16:3048:20581":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"20:5046:6957":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:1569:4482":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:12687:8374":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:14917:8717":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:8741:12653":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:47376:10530":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:10764:217":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:43011:225":{"crate_id":2,"path":["core","range","RangeInclusive"],"kind":"struct"},"5:7591:33756":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:46742:10467":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:10749:122":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:23537:11809":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:14220:10260":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"20:3363:5912":{"crate_id":20,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:23416:10271":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:11958:8274":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:23553:10274":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"5:2162:9980":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:13578:17844":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:31422:7449":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"17:13818:8501":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"6:1584:4483":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:13368:10229":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"16:6502:20551":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:3057:271":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"1:2732:18079":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"5:780:263":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"18:754:8043":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"20:3071:5884":{"crate_id":20,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:41488:10350":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:4921:11806":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:472:8055":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"6:7518:6952":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"16:2550:9281":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:40291:17812":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"6:5217:5916":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:10776:3015":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"20:3471:5924":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:47977:10578":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:14299:8606":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"2:42727:10646":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:7110:11807":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:1871:10632":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:8096:12527":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:4404:9336":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:6216:10662":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:13006:8409":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:47264:10510":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:41517:10178":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:12082:8294":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"16:7907:9683":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:6315:26972":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:9438:2975":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"2:13599:17842":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:5316:10656":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:5144:9349":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"15:327:20537":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"5:7815:10020":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:15148:8755":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:15024:8739":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"5:7738:10013":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"16:7731:7428":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:46969:10487":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"5:3720:9882":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:12108:8297":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:8031:10691":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:22324:32673":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"5:7532:9978":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"16:155:9248":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:47848:10573":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:8494:3022":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"6:7368:3507":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"5:7641:7364":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:11914:10643":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"6:532:3721":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"11:740:9866":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:42881:12657":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:47471:10533":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"6:7316:4408":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:12476:1877":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"11:430:35012":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"16:8105:9702":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:11005:10804":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"6:5412:1275":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:11306:32048":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"6:4921:5887":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:8016:10621":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:3403:17809":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"20:3408:5917":{"crate_id":20,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:11026:35053":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:44383:10226":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"5:282:33781":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:48003:10580":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"18:113:25701":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"11:854:9872":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:9573:10217":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"5:1002:3043":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"5:3456:9975":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:4311:30435":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"11:1920:9890":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"6:5586:5925":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:13945:8521":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:12158:10237":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"20:3127:5889":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:4225:12616":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:41401:10344":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"1:3602:2648":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:1085:9606":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:14346:8615":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:14626:12537":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:23707:10294":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:22983:12675":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"16:2860:9295":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"20:3433:5920":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:44697:10410":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:7901:8059":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:10779:3017":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"5:1555:7364":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:11401:8223":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"18:481:7993":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:667:8059":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:4978:17899":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"16:6205:21441":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:23625:31497":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:44142:10391":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:41136:10323":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:45530:11898":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"20:1574:4497":{"crate_id":20,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:6700:11724":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"11:434:35013":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:5305:8082":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"20:3080:2656":{"crate_id":20,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:14963:8724":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"20:3389:5915":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"16:5172:9350":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:1619:3043":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:45538:11900":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"20:3414:5918":{"crate_id":20,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:10713:155":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"5:5527:33781":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:10762:7442":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:3687:2646":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"17:15410:8864":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:16026:9027":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"6:8343:11793":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:45767:10455":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"9:445:20427":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:41540:10355":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:48014:10581":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"20:4910:6948":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:5387:11547":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:0:1029":{"crate_id":6,"path":["libc"],"kind":"module"},"2:44760:10242":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"5:2256:12507":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:14269:8597":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:2920:9298":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"6:5311:11532":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:13733:8473":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:14796:8699":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:11432:21529":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:12423:25994":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:16241:9110":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"6:7454:6948":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:6480:6458":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"16:2620:9284":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:16179:9088":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:8699:10650":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:45709:162":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"5:4370:3043":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:5548:132":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"20:5447:7300":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:15136:8400":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:14845:8706":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:12293:8316":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:13068:18065":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:48128:10595":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:4699:10168":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:40407:226":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"16:5282:9354":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:15939:9008":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"18:706:8031":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"16:7969:9696":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:13554:8447":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"17:5131:8080":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"6:5551:5924":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"6:5541:5922":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:6521:6461":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:45224:10437":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:8891:161":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"20:1522:4491":{"crate_id":20,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"11:1049:9877":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:41448:10347":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"5:7696:2927":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:11539:8238":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"16:6781:9488":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:12050:10688":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:4680:12634":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"20:3443:5921":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:22339:32679":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:13547:8446":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"6:1563:4481":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:10411:10806":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"20:4180:6461":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:8058:9700":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:3851:12592":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"6:6419:6452":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:10968:2948":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"1:9744:150":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"20:1431:4483":{"crate_id":20,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:523:3720":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"16:7838:21450":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:1339:8062":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:44688:10409":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:23694:10293":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"11:1085:35003":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:44736:10413":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:10418:21512":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"11:123:11469":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:9203:10783":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:12736:8378":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:14358:8617":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:16595:8491":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"1:5812:12658":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"6:1494:4475":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:23576:10279":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:12723:8377":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:12482:1456":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"6:6748:11735":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"17:14975:8726":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"11:2539:11476":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:11833:3043":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"5:6127:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"6:7414:4409":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:12570:8365":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"14:31:9855":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:14335:216":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"6:6813:11758":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:31407:7315":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:45378:10442":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:10662:10778":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:13209:149":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"20:3461:5923":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:7487:6951":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"16:6269:9389":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:4414:10647":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"6:6876:6487":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:41299:10334":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"2:14360:10262":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"16:4810:9339":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"13:0:2787":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:15665:8938":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:15549:8915":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"16:6028:9303":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"20:3119:5888":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:43618:7439":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"20:3380:5914":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"20:4298:6488":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:11319:35054":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:4943:12622":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"16:7016:9514":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:5285:10656":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:885:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"18:670:8025":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"6:6473:6457":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:6564:11665":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"20:1504:4489":{"crate_id":20,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:47101:10501":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"16:7980:9317":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"5:3364:9890":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:2029:2975":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"17:15953:9010":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:9234:10784":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:14612:8654":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"5:0:323":{"crate_id":5,"path":["alloc"],"kind":"module"},"16:8096:9701":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:42823:9882":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:1626:9884":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"16:7337:9574":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:15876:8987":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:16642:9206":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"17:15315:8781":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"16:7424:21448":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:2403:10031":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"16:8121:221":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:40339:10316":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"20:4817:6946":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:8319:11788":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:12371:8326":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"5:5572:17828":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:42987:221":{"crate_id":2,"path":["core","range","Range"],"kind":"struct"},"1:12463:1855":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:1630:9975":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:38932:17988":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:14859:8707":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:12149:8300":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"16:5649:9360":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:15701:8943":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:5870:231":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:48098:10593":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:11232:21530":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:13909:8514":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:12474:911":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"6:6691:11718":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"16:2450:9270":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:46806:10473":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"16:6625:9449":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"20:5473:5947":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"16:8723:149":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"16:8043:35042":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:41428:10345":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"5:3338:9887":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"5:6043:9884":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:6025:3068":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:43945:149":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"20:563:3725":{"crate_id":20,"path":["libc","unix","sigval"],"kind":"struct"},"2:41196:10329":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:13719:8472":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"5:4529:2975":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:4852:10170":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:8640:10757":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"16:6794:9489":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"17:11902:8271":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:42024:10363":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"6:7986:3673":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"6:5507:11609":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"2:42015:3023":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:6740:11734":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"2:31780:207":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"11:798:9884":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"6:6411:6451":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:2335:2730":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:41421:2953":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"2:22295:32671":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"16:7883:9416":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:12481:1957":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"6:7341:11766":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"16:8320:21453":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"16:2684:9287":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:12860:8394":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:42565:10209":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"18:735:25709":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"5:3085:7413":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:15655:8937":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:12347:8324":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:35007:17987":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:10115:21502":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:12714:17837":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"2:3341:3273":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2:32944:11479":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"16:2748:9290":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:13181:8420":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"18:689:8028":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:7919:9684":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:9187:10781":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"20:1514:4490":{"crate_id":20,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:12204:8305":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"2:2859:146":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"6:4929:5888":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:11277:2703":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:3786:17888":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:47906:10575":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:8677:3507":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:4113:12609":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:4829:11378":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"6:5007:5898":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:46791:10472":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:43363:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"20:4824:3507":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:1521:4477":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:14599:8652":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"6:5395:11552":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:12798:21646":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:42693:31487":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:9457:3077":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"2:8447:3222":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"18:643:7995":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:14533:8334":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:44958:10422":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"3:0:524":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"17:15760:8961":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:12319:8321":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"11:364:35006":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:15887:8991":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:16145:9076":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"20:4278:2454":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:39676:17992":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"16:8223:9706":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"11:685:9882":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:11826:10687":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:10663:8048":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:13306:8430":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:11592:8174":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"5:297:3223":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:10274:21507":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:15844:8979":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:14055:8539":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"20:483:3715":{"crate_id":20,"path":["libc","unix","timeval"],"kind":"struct"},"1:8551:2992":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"20:4887:4412":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:3335:3271":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:45316:10252":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:44858:10420":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:46727:10466":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"20:5439:7299":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:3677:2956":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:3941:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:10285:10373":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"1:8521:2957":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:23303:12755":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"1:11266:10780":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"15:306:20533":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:15973:9016":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:45836:9895":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:23842:10304":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"1:3077:149":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"15:394:20543":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"1:7433:26920":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"6:5117:5905":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:10988:2952":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"6:586:3729":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:4362:12632":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:44134:10390":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:3503:8071":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"14:0:2794":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:23587:31468":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"20:477:3714":{"crate_id":20,"path":["libc","unix","utimbuf"],"kind":"struct"},"11:1023:9876":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:5621:10657":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:5877:10662":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:7185:12671":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:9321:10788":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:31369:7314":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:47165:10505":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:45367:17857":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"16:4902:9342":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"11:351:35009":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:11412:10823":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"16:3441:9327":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"17:11114:8212":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"6:5670:11651":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:2802:3265":{"crate_id":2,"path":["core","clone","CloneToUninit"],"kind":"trait"},"7:79:20421":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:9382:25901":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:4567:10166":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"16:2486:9278":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:12840:8389":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"6:4842:5881":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:11303:2965":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"16:6890:9304":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:42034:10201":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:12074:27003":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"6:8261:5946":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:16385:9140":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"16:2640:9285":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"20:3215:5900":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:4899:12644":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"16:6084:9364":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:33764:9616":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"6:578:3728":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:10694:237":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"17:13692:8464":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:41479:10349":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"6:4970:5893":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:5334:11540":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"20:3370:5913":{"crate_id":20,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"20:4797:3598":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:4815:12613":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:16739:9233":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"16:7471:9595":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:22540:2959":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:43513:3065":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:4:1288":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:32986:10311":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:14627:8657":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:41307:10335":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"11:2323:9876":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"16:3141:8085":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:41470:10348":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"6:7563:6955":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:0:1757":{"crate_id":1,"path":["std"],"kind":"module"},"2:41336:18051":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:15286:8761":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:23609:10281":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"16:6256:9388":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:12163:8301":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"6:5319:11536":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:14534:10268":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"5:6580:12768":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"16:7716:35047":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:45044:2990":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"17:11864:8267":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:45210:10434":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:47604:10538":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:3061:270":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"16:7554:21449":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:11998:8277":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:13222:21516":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"16:8546:9761":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:8281:3006":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"6:4896:5762":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"16:8298:9718":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:1854:719":{"crate_id":1,"path":["std","env"],"kind":"module"},"17:14738:8687":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"16:8137:9320":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:45098:10165":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:3576:154":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:2482:2935":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"20:549:3723":{"crate_id":20,"path":["libc","unix","winsize"],"kind":"struct"},"11:2400:9882":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"1:5478:214":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:4780:12640":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"16:5727:8190":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"5:6527:18302":{"crate_id":5,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"17:12762:8380":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"11:772:9867":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"6:517:3719":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:13662:8460":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:12002:10231":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:16798:9244":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"16:5318:9355":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"20:4193:6463":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:6738:35043":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:10553:116":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"2:23864:10306":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"5:7778:10018":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:3913:10643":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"7:0:1947":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:41786:10195":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"13:229:11467":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"6:6680:11715":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:45726:238":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:44596:10401":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:23687:11812":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"5:7581:10011":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"17:12176:8302":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"5:2148:3008":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"16:5689:9361":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:41100:10165":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:45401:10450":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"11:698:7364":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"6:5288:11524":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:3373:12667":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"20:574:3727":{"crate_id":20,"path":["libc","unix","tms"],"kind":"struct"},"2:4778:7451":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"1:11478:9948":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"2:47994:10579":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"20:3238:5902":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:41498:145":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"12:0:2793":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:12456:490":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:2792:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"6:5325:11537":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:42749:10210":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"20:4151:6444":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"20:5004:6954":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"16:7789:35045":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:317:8052":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"16:6608:217":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:22307:32671":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"16:4873:9341":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:7748:25986":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"16:6852:9496":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:16377:9137":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:23798:10300":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"5:1415:9881":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:12477:1883":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"20:1635:4550":{"crate_id":20,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:10597:8046":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:4987:7453":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"6:8273:11779":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:10729:8050":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:13193:8421":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"2:22:842":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"9:328:11483":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"6:6611:11690":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:41258:10332":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"17:12583:8366":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:8844:3041":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:14902:8713":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"20:1416:4482":{"crate_id":20,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:6751:3079":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:11010:12584":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:44776:2993":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:16399:9143":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"20:55:3326":{"crate_id":20,"path":["libc","unix","DIR"],"kind":"enum"},"1:8564:2994":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"6:7361:6946":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:5687:116":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:8583:10753":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"20:4203:6464":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlattr"],"kind":"struct"},"6:5271:11513":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"20:4077:6452":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:47450:10532":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:44994:10423":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"11:2559:11480":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"6:5533:5921":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:4177:12613":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"6:5044:11504":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"11:1674:35017":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"5:1401:9876":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"}},"external_crates":{"20":{"name":"libc","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":31}