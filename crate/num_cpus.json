{"root":"0:0:1708","crate_version":"1.13.1","includes_private":false,"index":{"2:12867:7584":{"id":"2:12867:7584","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12862:7589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6087:2159":{"id":"5:6087:2159","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8341:201"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6085:58366":{"id":"5:6085:58366","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8341:201"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:4689:7623":{"id":"2:4689:7623","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4690:7138","2:4691:56096","2:4692:7141"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13327:57728":{"id":"2:13327:57728","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:15741:1960"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:49467:8000","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13323:53048":{"id":"2:13323:53048","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3646:7715":{"id":"2:3646:7715","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3648:52431"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13250:1832":{"id":"2:13250:1832","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"str::rsplit":"1:15747:1965","`DoubleEndedIterator`":"2:8328:116","self::pattern":"2:12837:7585","str::split_whitespace":"1:15747:1965","prim@char":"1:15741:1960"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49150:2136","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:7586","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6065":{"id":"5:6065","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5885:1311","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6066:58363","5:6067:2138","5:6070:58364","5:6073:58365","5:6085:58366","5:6086:58367","5:6087:2159","5:6088:53044","5:6089:53045"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5821:8174":{"id":"5:5821:8174","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5823:167","5:5824:1884"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3286:7663":{"id":"2:3286:7663","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3288:871"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6767:7264":{"id":"1:6767:7264","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6768:51601"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6088:53044":{"id":"5:6088:53044","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:15747:1965"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6070:58364":{"id":"5:6070:58364","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8341:201"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:7586","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3483:7407":{"id":"2:3483:7407","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3485:167","2:3486:731"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2387","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13303:1875":{"id":"2:13303:1875","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:12837:7585","prim@char":"1:15741:1960"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47192:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:7586","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2877:170":{"id":"2:2877:170","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2879:976","2:2880:804","2:2881:770","2:2882:693","2:2883:676"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2387","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2831:169","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3014:7670":{"id":"2:3014:7670","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:3013:7270","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8284:147":{"id":"2:8284:147","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8285:7138","2:8286:7139","2:8287:746"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13949:137":{"id":"2:13949:137","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13950:262","2:13951:501","2:13952:265","2:13953:1058"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13233:53942":{"id":"2:13233:53942","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"2:12837:7585","prim@char":"1:15741:1960"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:7586","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13253:33229":{"id":"2:13253:33229","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"2:12837:7585","prim@char":"1:15741:1960"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:12629:7953","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:7586","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13212:1611":{"id":"2:13212:1611","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:15758:1974"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8763:7682":{"id":"2:8763:7682","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8482:153","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13297:57722":{"id":"2:13297:57722","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"2:12837:7585","prim@char":"1:15741:1960"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:7586","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:7586","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"2:12867:7584","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13217:53906":{"id":"2:13217:53906","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10737:199","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10737:199","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:3294:7667":{"id":"2:3294:7667","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3296:1082"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6861:7263":{"id":"1:6861:7263","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6862:53614"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13291:57718":{"id":"2:13291:57718","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2867:163":{"id":"2:2867:163","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2868:398","2:2869:7125","2:2870:1855","2:2871:7126"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2836:120","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2877:170","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:9225:7316":{"id":"1:9225:7316","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9226:53404","1:9227:53405","1:9228:1880","1:9229:53406","1:9230:8027","1:9231:40633","1:9232:53403"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10447:7270","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:9140:7441":{"id":"2:9140:7441","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6066:58363":{"id":"5:6066:58363","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:2392","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8079:8178","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:2392","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8079:8178","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5697:7291":{"id":"1:5697:7291","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5698:53768"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10447:7270","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:4596:2103":{"id":"1:4596:2103","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4597:2043","1:4598:51364","1:4600:51365","1:4601:8433","1:4602:51366","1:4603:51367","1:4604:51368","1:4613:7122"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3681:7684":{"id":"2:3681:7684","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2387","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:8247:7789":{"id":"2:8247:7789","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8249:6662"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13246:7133":{"id":"2:13246:7133","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:47192:162","prim@char":"1:15741:1960","self::pattern":"2:12837:7585"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47192:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:7586","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:7586","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12862:7589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13280:57715":{"id":"2:13280:57715","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"str::matches":"1:15747:1965","`DoubleEndedIterator`":"2:8328:116","self::pattern":"2:12837:7585","prim@char":"1:15741:1960"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:49372:7994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:7586","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:7586","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12862:7589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3299:7687":{"id":"2:3299:7687","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3300:167","2:3301:931"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13312:57725":{"id":"2:13312:57725","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:12837:7585","prim@char":"1:15741:1960"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:7586","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3189:103":{"id":"2:3189:103","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2801:101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8767:7792":{"id":"2:8767:7792","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"2:7808:7793","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10069:2103":{"id":"2:10069:2103","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10070:1498","2:10071:56408","2:10073:51368"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8760:2197":{"id":"2:8760:2197","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8482:153","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13262:57712":{"id":"2:13262:57712","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"str::split":"1:15747:1965","self::pattern":"2:12837:7585","prim@char":"1:15741:1960","str::split_terminator":"1:15747:1965"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49218:7987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:7586","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:7586","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12862:7589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3341:7702":{"id":"2:3341:7702","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3343:341"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4899:7301":{"id":"1:4899:7301","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4900:2190","1:4901:55350"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12847:7586":{"id":"2:12847:7586","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12849:7588","2:12850:56358","2:12851:56359","2:12852:56360","2:12853:56362","2:12854:56361","2:12855:56363"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9139:7442":{"id":"2:9139:7442","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3350:7706":{"id":"2:3350:7706","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3352:1208"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3220:2388":{"id":"2:3220:2388","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5649:7288":{"id":"1:5649:7288","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5650:6777","1:5651:51220","1:5652:7049","1:5653:55387","1:5654:6753","1:5655:6754","1:5656:55388","1:5657:1275","1:5658:55389","1:5659:55390","1:5660:55391","1:5661:55392","1:5662:55393","1:5663:55394","1:5664:55395","1:5665:55396"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13271:57713":{"id":"2:13271:57713","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47192:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:7586","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13256:53936":{"id":"2:13256:53936","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"`DoubleEndedIterator`":"2:8328:116","self::pattern":"2:12837:7585","prim@char":"1:15741:1960","str::split":"1:15747:1965"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49168:7956","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:7586","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:7586","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12862:7589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3268:7656":{"id":"2:3268:7656","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3270:167","2:3271:1081"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3906:68":{"id":"2:3906:68","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3907:1398"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"1:5683:7289":{"id":"1:5683:7289","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5684:53026","1:5685:53027","1:5686:53028","1:5687:53029"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3428:127":{"id":"2:3428:127","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3430:361"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3431:128","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3635:209":{"id":"2:3635:209","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3636:167","2:3637:7715","2:3638:666","2:3639:353"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"2:3640:133","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3635:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3640:133":{"id":"2:3640:133","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3642:667"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3635:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13289:1836":{"id":"2:13289:1836","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6698:7260":{"id":"1:6698:7260","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6699:53121"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10447:7270","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6067:2138":{"id":"5:6067:2138","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8341:201"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:7586","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3321:7692":{"id":"2:3321:7692","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3323:167","2:3324:1204"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4614:2101":{"id":"1:4614:2101","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4615:55708","1:4616:2541","1:4617:55709","1:4618:55710"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8482:153":{"id":"2:8482:153","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8483:7138","2:8484:900","2:8485:7140","2:8488:7141","2:8489:478","2:8491:7142","2:8494:7143","2:8495:1892","2:8496:7144","2:8497:7124","2:8499:7145","2:8501:7146","2:8502:7147","2:8504:819","2:8507:7148","2:8514:1614","2:8516:1830","2:8519:7149","2:8520:7150","2:8521:7151","2:8523:7152","2:8525:7153","2:8528:1279","2:8529:7080","2:8530:7154","2:8534:7155","2:8537:7156","2:8538:7157","2:8539:7158","2:8541:7122","2:8542:2396","2:8544:7159","2:8547:7160","2:8549:7161","2:8559:7162","2:8574:7163","2:8576:7164","2:8580:7165","2:8589:1840","2:8592:7166","2:8594:7167","2:8597:261","2:8604:278","2:8611:1894","2:8618:7168","2:8627:7169","2:8637:993","2:8644:7170","2:8651:7125","2:8652:1855","2:8653:7171","2:8665:7172","2:8672:7173","2:8684:7174","2:8691:7175","2:8692:7176","2:8697:7177","2:8700:7178","2:8703:7179","2:8704:7180","2:8706:6662","2:8708:398","2:8711:7181","2:8714:976","2:8717:7182","2:8720:585","2:8723:7183","2:8726:885","2:8728:804","2:8730:770","2:8732:693","2:8734:676","2:8736:7184","2:8737:7185","2:8745:7186"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3316:7378":{"id":"2:3316:7378","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3318:167","2:3319:340"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:22650:7319":{"id":"2:22650:7319","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22640:7270","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13326:7326":{"id":"2:13326:7326","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:15741:1960"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:49458:7327","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3554:8068":{"id":"2:3554:8068","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3556:56595","2:3557:56596","2:3558:53942"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2387","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:10130:7225":{"id":"2:10130:7225","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10131:640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13219:53907":{"id":"2:13219:53907","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10737:199","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10737:199","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:3290:7665":{"id":"2:3290:7665","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3292:540"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:22844:7811":{"id":"2:22844:7811","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"2:23493:7804","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22835:7270","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10128:7224":{"id":"2:10128:7224","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10129:640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3184:2387":{"id":"2:3184:2387","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13215:53905":{"id":"2:13215:53905","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47192:162"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47192:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10737:199","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10737:199","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13202:7134":{"id":"2:13202:7134","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10126:115":{"id":"2:10126:115","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10127:640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6089:53045":{"id":"5:6089:53045","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:15747:1965"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:93:1571":{"id":"0:93:1571","crate_id":0,"name":"get","span":{"filename":"src/lib.rs","begin":[73,0],"end":[75,1]},"visibility":"public","docs":"Returns the number of available CPUs of the current system.\n\nThis function will get the number of logical cores. Sometimes this is different from the number\nof physical cores (See [Simultaneous multithreading on Wikipedia][smt]).\n\nThis will always return at least `1`.\n\n# Examples\n\n```\nlet cpus = num_cpus::get();\nif cpus > 1 {\n    println!(\"We are on a multicore system with {} CPUs\", cpus);\n} else {\n    println!(\"We are on a single core system\");\n}\n```\n\n# Note\n\nThis will check [sched affinity] on Linux, showing a lower number of CPUs if the current\nthread does not have access to all the computer's CPUs.\n\nThis will also check [cgroups], frequently used in containers to constrain CPU usage.\n\n[smt]: https://en.wikipedia.org/wiki/Simultaneous_multithreading\n[sched affinity]: http://www.gnu.org/software/libc/manual/html_node/CPU-Affinity.html\n[cgroups]: https://www.kernel.org/doc/Documentation/cgroup-v1/cgroups.txt","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:8328:116":{"id":"2:8328:116","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8329:7128","2:8330:7129","2:8331:7130","2:8332:7131","2:8336:7132","2:8339:7133"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8482:153","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13321:53046":{"id":"2:13321:53046","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2801:101":{"id":"2:2801:101","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2802:392","2:2803:394"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13265:53938":{"id":"2:13265:53938","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"self::pattern":"2:12837:7585","prim@char":"1:15741:1960","str::rsplitn":"1:15747:1965"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49254:7959","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:7586","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13320:8169":{"id":"2:13320:8169","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5635:7286":{"id":"1:5635:7286","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5636:7049","1:5637:53421","1:5638:53422"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2776:94":{"id":"2:2776:94","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2778:2029"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2387","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3411:2139":{"id":"2:3411:2139","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3412:526"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3398:112","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10136:175":{"id":"2:10136:175","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10137:640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5693:7290":{"id":"1:5693:7290","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5694:51220"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3092:212":{"id":"2:3092:212","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3094:123","2:3095:1384"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10132:7226":{"id":"2:10132:7226","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10133:640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13203:57705":{"id":"2:13203:57705","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3487:7635":{"id":"2:3487:7635","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3489:732"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2387","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"2:3483:7407","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6695:7262":{"id":"1:6695:7262","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6696:53081","1:6697:53082"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10447:7270","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:2836:120":{"id":"2:2836:120","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2831:169","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3274:7659":{"id":"2:3274:7659","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3275:167","2:3276:891"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13242:1894":{"id":"2:13242:1894","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"self::pattern":"2:12837:7585","`None`":"2:47192:162","prim@char":"1:15741:1960"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47192:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:7586","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3327:7695":{"id":"2:3327:7695","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3329:167","2:3330:1207"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8280:132":{"id":"2:8280:132","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8282:664"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:0:1708":{"id":"0:0:1708","crate_id":0,"name":"num_cpus","span":{"filename":"src/lib.rs","begin":[1,0],"end":[459,1]},"visibility":"public","docs":"A crate with utilities to determine the number of CPUs available on the\ncurrent system.\n\nSometimes the CPU will exaggerate the number of CPUs it contains, because it can use\n[processor tricks] to deliver increased performance when there are more threads. This \ncrate provides methods to get both the logical and physical numbers of cores.\n\nThis information can be used as a guide to how many tasks can be run in parallel.\nThere are many properties of the system architecture that will affect parallelism,\nfor example memory access speeds (for all the caches and RAM) and the physical\narchitecture of the processor, so the number of CPUs should be used as a rough guide\nonly.\n\n\n## Examples\n\nFetch the number of logical CPUs.\n\n```\nlet cpus = num_cpus::get();\n```\n\nSee [`rayon::Threadpool`] for an example of where the number of CPUs could be\nused when setting up parallel jobs (Where the threadpool example uses a fixed\nnumber 8, it could use the number of CPUs).\n\n[processor tricks]: https://en.wikipedia.org/wiki/Simultaneous_multithreading\n[`rayon::ThreadPool`]: https://docs.rs/rayon/1.*/rayon/struct.ThreadPool.html","links":{},"attrs":["#![deny(missing_docs)]","#![allow(non_snake_case)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:93:1571","0:94:1589"]}},"2:3278:7448":{"id":"2:3278:7448","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3280:251"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13309:57724":{"id":"2:13309:57724","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:12837:7585","prim@char":"1:15741:1960"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:7586","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:7586","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12862:7589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10343:142":{"id":"2:10343:142","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10344:632","2:10345:2043","2:10346:53620","2:10347:53621","2:10348:53622","2:10349:53623","2:10350:53624","2:10351:53625","2:10352:53626","2:10353:53627","2:10354:53628","2:10355:53629","2:10356:53630","2:10357:53631","2:10358:53632","2:10359:1498"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:772:207":{"id":"5:772:207","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:773:7188","5:774:1900","5:775:7189"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13224:53927":{"id":"2:13224:53927","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:15747:1965"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:7808:7793":{"id":"2:7808:7793","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7809:56471","2:7810:56472","2:7811:56469","2:7812:56467","2:7813:56473","2:7814:56470","2:7815:56468"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2801:101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2877:170","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13274:57714":{"id":"2:13274:57714","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47192:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:7586","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:7586","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12862:7589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3422:2389":{"id":"2:3422:2389","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3423:559"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13210:57708":{"id":"2:13210:57708","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:3085:131":{"id":"2:3085:131","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3087:661"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23493:7804":{"id":"2:23493:7804","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:23494:7810"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23489:7270","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3189:103","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6771:7267":{"id":"1:6771:7267","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6772:55562"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3333:7698":{"id":"2:3333:7698","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3335:336"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3465:7713":{"id":"2:3465:7713","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3467:222","2:3468:192","2:3469:57140"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13222:57709":{"id":"2:13222:57709","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:15747:1965","str::slice_unchecked":"1:15747:1965","crate::ops::IndexMut":"2:3487:7635"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13318:1698":{"id":"2:13318:1698","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12776:2198","`FromStr`":"2:12776:2198"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47319:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12776:2198","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12776:2198","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2565:123":{"id":"1:2565:123","crate_id":1,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2566:51234","1:2568:1947","1:2569:55475","1:2570:55476"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10119:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10126:115","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:5817:8172":{"id":"5:5817:8172","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5819:167","5:5820:415"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2387","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3425:126":{"id":"2:3425:126","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3427:360"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3428:127","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:2779:7751":{"id":"2:2779:7751","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2781:51212"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2387","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2776:94","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3306:7376":{"id":"2:3306:7376","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3308:167","2:3309:335"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13286:57717":{"id":"2:13286:57717","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12837:7585","str::match_indices":"1:15747:1965","`DoubleEndedIterator`":"2:8328:116","prim@char":"1:15741:1960"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49318:7991","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:7586","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:7586","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12862:7589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13293:57719":{"id":"2:13293:57719","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3157:111":{"id":"2:3157:111","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3158:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13227:7123":{"id":"2:13227:7123","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49136:2134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5627:7285":{"id":"1:5627:7285","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5628:51558","1:5629:51560","1:5630:51559","1:5631:51561"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:14021:7352":{"id":"2:14021:7352","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14022:51624","2:14023:51625","2:14024:51626","2:14025:51627","2:14026:51628","2:14027:51629","2:14028:7122"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12776:2198":{"id":"2:12776:2198","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12777:122","2:12778:55517"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:94:1589":{"id":"0:94:1589","crate_id":0,"name":"get_physical","span":{"filename":"src/lib.rs","begin":[108,0],"end":[110,1]},"visibility":"public","docs":"Returns the number of physical cores of the current system.\n\nThis will always return at least `1`.\n\n# Note\n\nPhysical count is supported only on Linux, mac OS and Windows platforms.\nOn other platforms, or if the physical count fails on supported platforms,\nthis function returns the same as [`get()`], which is the number of logical\nCPUS.\n\n# Examples\n\n```\nlet logical_cpus = num_cpus::get();\nlet physical_cpus = num_cpus::get_physical();\nif logical_cpus > physical_cpus {\n    println!(\"We have simultaneous multithreading with about {:.2} \\\n              logical cores to 1 physical core.\", \n              (logical_cpus as f64) / (physical_cpus as f64));\n} else if logical_cpus == physical_cpus {\n    println!(\"Either we don't have simultaneous multithreading, or our \\\n              system doesn't support getting the number of physical CPUs.\");\n} else {\n    println!(\"We have less logical CPUs than physical CPUs, maybe we only have access to \\\n              some of the CPUs on our system.\");\n}\n```\n\n[`get()`]: fn.get.html","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:3088:213":{"id":"2:3088:213","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3090:123","2:3091:1385"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3398:112":{"id":"2:3398:112","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3399:206","2:3400:524"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10134:7227":{"id":"2:10134:7227","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10135:640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6465:7321":{"id":"1:6465:7321","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6466:53784","1:6467:53785"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3262:7653":{"id":"2:3262:7653","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3264:167","2:3265:539"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10138:7228":{"id":"2:10138:7228","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10139:640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13259:57711":{"id":"2:13259:57711","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"prim@char":"1:15741:1960","self::pattern":"2:12837:7585","`DoubleEndedIterator`":"2:8328:116","str::split":"1:15747:1965","str::rsplit_terminator":"1:15747:1965"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49200:7986","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:7586","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13228:33372":{"id":"2:13228:33372","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:15747:1965"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:49424:7996","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:7686:7425":{"id":"1:7686:7425","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7687:55705"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13296:57721":{"id":"2:13296:57721","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13226:7614":{"id":"2:13226:7614","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:15741:1960"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49126:7982","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2831:169":{"id":"2:2831:169","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2833:585","2:2834:885"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2387","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13221:7361":{"id":"2:13221:7361","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:15747:1965","crate::ops::Index":"2:3483:7407","str::slice_mut_unchecked":"1:15747:1965"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13322:53047":{"id":"2:13322:53047","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4539:1810":{"id":"1:4539:1810","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4540:2081","1:4541:7116","1:4543:7117","1:4544:7118","1:4545:1885","1:4546:7119","1:4547:7120","1:4549:7121","1:4550:7122","1:4551:7123","1:4552:7124","1:4554:7080"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3282:7449":{"id":"2:3282:7449","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3284:1327"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13200":{"id":"2:13200","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12297:1311","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13201:771","2:13202:7134","2:13203:57705","2:13204:57706","2:13206:57707","2:13209:53002","2:13210:57708","2:13211:288","2:13212:1611","2:13213:1571","2:13215:53905","2:13217:53906","2:13219:53907","2:13221:7361","2:13222:57709","2:13223:53926","2:13224:53927","2:13225:8017","2:13226:7614","2:13227:7123","2:13228:33372","2:13229:33362","2:13230:1829","2:13231:57710","2:13232:33357","2:13233:53942","2:13236:53943","2:13239:53944","2:13242:1894","2:13246:7133","2:13250:1832","2:13253:33229","2:13256:53936","2:13259:57711","2:13262:57712","2:13265:53938","2:13268:53940","2:13271:57713","2:13274:57714","2:13277:2040","2:13280:57715","2:13283:57716","2:13286:57717","2:13289:1836","2:13291:57718","2:13293:57719","2:13295:57720","2:13296:57721","2:13297:57722","2:13300:57723","2:13303:1875","2:13306:53945","2:13309:57724","2:13312:57725","2:13315:57726","2:13318:1698","2:13320:8169","2:13321:53046","2:13322:53047","2:13323:53048","2:13324:57727","2:13326:7326","2:13327:57728"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:5705:7292":{"id":"1:5705:7292","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5706:7049"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13565:146":{"id":"2:13565:146","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13566:167","2:13567:146","2:13568:745"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3082:145":{"id":"2:3082:145","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3084:1924"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13204:57706":{"id":"2:13204:57706","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13324:57727":{"id":"2:13324:57727","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:15741:1960"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:49449:7999","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3188:202":{"id":"2:3188:202","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13239:53944":{"id":"2:13239:53944","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:15741:1960","self::pattern":"2:12837:7585"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:7586","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:7586","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12862:7589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10333:138":{"id":"2:10333:138","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10334:695","2:10336:53450"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4621:1808":{"id":"1:4621:1808","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4622:7112","1:4623:7113","1:4624:7114","1:4626:2131","1:4627:7115","1:4629:1832","1:4630:1829"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"1:4539:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10140:7229":{"id":"2:10140:7229","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10141:640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6593:7288":{"id":"1:6593:7288","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6594:53719","1:6595:6968","1:6596:6969","1:6597:6971","1:6598:6970","1:6599:6972","1:6600:6973","1:6601:6975","1:6602:6726","1:6603:6978","1:6604:6979","1:6605:6980","1:6606:6981","1:6607:6982","1:6608:6983","1:6609:6976","1:6610:6977"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6769:7266":{"id":"1:6769:7266","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6770:53474"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3623:8069":{"id":"2:3623:8069","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2387","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"2:3554:8068","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13229:33362":{"id":"2:13229:33362","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:15747:1965"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:49433:7997","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13223:53926":{"id":"2:13223:53926","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:15747:1965"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3079:74":{"id":"2:3079:74","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3081:7127"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2387","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13211:288":{"id":"2:13211:288","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"1:15758:1974","str::as_mut_ptr":"1:15747:1965"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13213:1571":{"id":"2:13213:1571","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47192:162"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47192:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10737:199","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10737:199","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13315:57726":{"id":"2:13315:57726","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:12837:7585","prim@char":"1:15741:1960"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:7586","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:7586","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12862:7589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10119:106":{"id":"2:10119:106","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10120:640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13300:57723":{"id":"2:13300:57723","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:12837:7585","prim@char":"1:15741:1960"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:7586","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13268:53940":{"id":"2:13268:53940","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"self::pattern":"2:12837:7585","prim@char":"1:15741:1960","str::splitn":"1:15747:1965"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49272:7960","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:7586","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:7586","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12862:7589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3179:196":{"id":"2:3179:196","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3252:7379":{"id":"2:3252:7379","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3254:167","2:3255:1326"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3191:205":{"id":"2:3191:205","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3345:7686":{"id":"2:3345:7686","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3347:1205"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12862:7589":{"id":"2:12862:7589","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:12864:7128","2:12865:55881","2:12866:55882"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"2:12856:7588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10737:199":{"id":"2:10737:199","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:10739:167","2:10740:1571","2:10741:53905","2:10742:53906","2:10743:53907","2:10744:731","2:10745:732"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2387","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:10728:7270","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:12284:8162":{"id":"2:12284:8162","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12285:7138","2:12286:57122"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8243:7790":{"id":"2:8243:7790","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8245:7180"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8353:2390":{"id":"2:8353:2390","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8354:771","2:8355:7134"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8482:153","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13277:2040":{"id":"2:13277:2040","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"`DoubleEndedIterator`":"2:8328:116","prim@char":"1:15741:1960","self::pattern":"2:12837:7585","str::matches":"1:15747:1965"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49354:7993","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:7586","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13231:57710":{"id":"2:13231:57710","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:49414:7995","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12856:7588":{"id":"2:12856:7588","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:12858:7607","2:12859:900","2:12860:56935","2:12861:56936"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3311:7377":{"id":"2:3311:7377","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3313:167","2:3314:337"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13209:53002":{"id":"2:13209:53002","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12308:8126"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13232:33357":{"id":"2:13232:33357","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:49442:7998","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10378:7375":{"id":"2:10378:7375","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10379:142","2:10380:34594","2:10381:51684"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3076:75":{"id":"2:3076:75","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3078:289"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2387","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:5561:7293":{"id":"1:5561:7293","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5562:8961","1:5563:53002"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10447:7270","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3718:7685":{"id":"2:3718:7685","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6073:58365":{"id":"5:6073:58365","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8341:201"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3187:203":{"id":"2:3187:203","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3431:128":{"id":"2:3431:128","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3433:167","2:3434:362"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13295:57720":{"id":"2:13295:57720","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13306:53945":{"id":"2:13306:53945","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:15741:1960","self::pattern":"2:12837:7585"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47192:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:7586","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:7586","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12862:7589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6393:208":{"id":"5:6393:208","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6394:7190"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5643:7287":{"id":"1:5643:7287","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5644:7049","1:5645:51257"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3247:7447":{"id":"2:3247:7447","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3249:167","2:3250:250"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8293:2391":{"id":"2:8293:2391","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8295:7135","2:8297:7136","2:8298:7137"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3337:7700":{"id":"2:3337:7700","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3339:338"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13230:1829":{"id":"2:13230:1829","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:49404:2137","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:1075:7324":{"id":"1:1075:7324","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1076:7188","1:1077:8169","1:1078:53044","1:1079:53045","1:1080:53046","1:1081:53047","1:1082:53048"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6367:7299":{"id":"1:6367:7299","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6368:53591","1:6369:2698","1:6370:53592","1:6371:53593","1:6372:53594","1:6373:53595"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10447:7270","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:22799:17330":{"id":"2:22799:17330","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:22800:55793","2:22801:57134","2:22802:57135"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22792:7270","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13201:771":{"id":"2:13201:771","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:15741:1960"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13225:8017":{"id":"2:13225:8017","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:15741:1960"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49120:7981","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6345:7260":{"id":"1:6345:7260","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6346:6753","1:6347:6754","1:6348:53120","1:6349:55622","1:6351:55626","1:6353:55623","1:6354:55624","1:6356:55625"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10447:7270","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6086:58367":{"id":"5:6086:58367","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:421:2392","`String`":"5:8341:201"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:2392","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8079:8178","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13550:134":{"id":"2:13550:134","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13551:167","2:13552:992"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13236:53943":{"id":"2:13236:53943","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:15741:1960","self::pattern":"2:12837:7585"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:7586","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5555:7295":{"id":"1:5555:7295","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5556:53078","1:5557:8264"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10447:7270","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13206:57707":{"id":"2:13206:57707","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:15747:1965"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3257:7651":{"id":"2:3257:7651","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3259:167","2:3260:870"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13283:57716":{"id":"2:13283:57716","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12837:7585","prim@char":"1:15741:1960","`DoubleEndedIterator`":"2:8328:116","str::rmatch_indices":"1:15747:1965"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49300:7990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:7586","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"1:8020:7480":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"1:7228:172":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"16:6136:8684":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:11199:44290":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"16:4641:43239":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"5:1461:7400":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:4940:7930":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"5:4683:9203":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"20:499:2818":{"crate_id":20,"path":["libc","unix","timeval"],"kind":"struct"},"16:2912:8817":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:3640:133":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:3252:7379":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"6:6864:5050":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:10052:44339":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:49218:7987":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:15764:1980":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"6:1622:3587":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"6:531:2819":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:6607:6982":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"17:11794:45199":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:2456:9842":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:9769:59741":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"5:8088:7139":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"6:6239:6062":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:46150:7926":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"12:2005:2190":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:13746:50331":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:46165:97":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:8376:7338":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:11947:48967":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"20:4935:6053":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:46677:1811":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:11177:7520":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:13098:49769":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:2692:560":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:12578:7989":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:46458:7770":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:10801:44468":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:10149:44281":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"18:744:59770":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"16:7295:8663":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"6:157:2505":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"17:13799:50370":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:8284:147":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:11228:7961":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:12408:49162":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:13370:49938":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"9:469:42245":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:3076:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:22644:7317":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"5:4427:2190":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"12:1855:141":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:11030:123":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:9440:44275":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"20:511:2820":{"crate_id":20,"path":["libc","unix","rlimit"],"kind":"struct"},"16:6176:8691":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"20:1432:3585":{"crate_id":20,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:7337:171":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"6:4459:5028":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:10656:44482":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:11232:7529":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:5241:5548":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:1700:3593":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:11080:7433":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"1:14977:7364":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"5:0:262":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:9296:44255":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"9:1075:8397":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:13356:49937":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:3953:191":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"2:47250:7139":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"1:4512:2123":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:10134:7227":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:12040:49075":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:4267:7501":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"5:375:8248":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"20:1488:3589":{"crate_id":20,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:50812:7834":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"6:4066:5000":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"6:6155:6056":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"12:2025:7370":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"18:650:9015":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:12554:2077":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:9961:44283":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"5:8286:8075":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:7216:8716":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:2779:7751":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:5274:5566":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"16:4506:43179":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"6:5228:5562":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"16:4671:43244":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"16:5672:8554":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:13772:50367":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"20:3048:4985":{"crate_id":20,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:48213:129":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"6:1708:3594":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:50139:7278":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"20:5514:6406":{"crate_id":20,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"5:3284:92":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:4945:7931":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:10266:8887":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:12010:48975":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"20:1384:3580":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:50922:7847":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:15220:51329":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:2855:165":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:8849:8904":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"6:5978:41946":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:51211:7848":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:10827:8948":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:13180:49818":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:11082:8910":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:9139:7442":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:51589:56024":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"12:160:8464":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:45987:33905":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"6:543:2821":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"20:1566:3598":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:7815:7479":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"5:1669:180":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"16:5472:8545":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"5:2184:9200":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:6404:7775":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:6839:7268":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"20:1574:3599":{"crate_id":20,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:15707:55557":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:11186:44289":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:7820:51716":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"2:49372:7994":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"16:3800:42698":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:10826:2148":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:45808:7891":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"20:584:2829":{"crate_id":20,"path":["libc","unix","itimerval"],"kind":"struct"},"20:4154:5562":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:13054:49766":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:10492:7463":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:2183:7372":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:49916:7450":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"18:667:9020":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"5:4199:7368":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:3233:2084":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:15491:9258":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:48733:8167":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:10543:44495":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:10069:2103":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"20:4201:5566":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"16:5960:8570":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"12:1762:9196":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:15157:7524":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:3320:8879":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"16:7205:8715":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"20:5080:6062":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:2831:169":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:8861:2233":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:14394:114":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"9:41:8379":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"1:11221:7560":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"6:578:2824":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:52990:7833":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:13296:49870":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:23493:7804":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:10420:8917":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"16:5855:8565":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"9:686:8328":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"12:774:7139":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"20:3213:5002":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"11:0:1938":{"crate_id":11,"path":["adler"],"kind":"module"},"17:9849:59756":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:2867:163":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"20:4209:5567":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:46110:7999":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"15:230:8482":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:1446:7389":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:48989:7968":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:53244:22882":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"16:7467:8647":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:13258:49865":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"6:4023:4994":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"6:6870:41740":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:14834:7348":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"6:1723:3596":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:9839:8932":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"18:610:9016":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"6:4410:5563":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:22375:7208":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:10317:8920":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"16:5433:8541":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:22443:56241":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:2166:7369":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"12:181:8468":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:4060:4999":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"16:3018:8819":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"16:7226:8717":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"20:630:2850":{"crate_id":20,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"6:1729:3597":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:7573:7419":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"6:6887:5052":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"20:552:2824":{"crate_id":20,"path":["libc","unix","iovec"],"kind":"struct"},"2:6525:56356":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"17:12456:49165":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"20:4833:6050":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"9:1056:8389":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:10334:9251":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"16:6518:8700":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:10599:44498":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:10403:8928":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"5:1647:7392":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:10558:13201":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"6:1533:41125":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:1415:2190":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:2801:101":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1:5860:7561":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:4307:2155":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"20:3487:5028":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:14:2043":{"crate_id":2,"path":["core","write"],"kind":"macro"},"1:1651:7402":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:9592:124":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"2:46448:7769":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:3617:2146":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"5:3380:7373":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"6:5420:41916":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:4431:5025":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"16:6731:8853":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"6:6899:41741":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:3646:7715":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"6:5292:5569":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:11050:7309":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"1:9516:9245":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"2:8044:57245":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:14346:51332":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"20:590:2830":{"crate_id":20,"path":["libc","unix","tms"],"kind":"struct"},"6:569:2823":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"12:968:7397":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:11387:2186":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"16:7378:8650":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"5:3022:7188":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"6:519:2817":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"6:5414:41915":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:48326:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"5:3320:7371":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"12:892:8452":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"1:7683:2554":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"16:5927:8568":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"6:4112:41707":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"20:1547:3595":{"crate_id":20,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:14795:2109":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:12629:7953":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"20:5473:5048":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"9:603:42350":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:7559:7418":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"17:13429:50297":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"20:485:2816":{"crate_id":20,"path":["libc","unix","group"],"kind":"struct"},"6:6852:5048":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"16:5996:8687":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:10934:2161":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:3337:7700":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:23885:40301":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"11:46:58872":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"20:3424:5021":{"crate_id":20,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:47665:80":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:15766:1982":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"17:10095:8987":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:13446:50298":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:12685:49242":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"5:5871:9210":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"20:3170:4996":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:46300:7773":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:10211:44350":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:2155:2190":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"20:3120:4990":{"crate_id":20,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"20:579:2828":{"crate_id":20,"path":["libc","unix","sigval"],"kind":"struct"},"20:517:2821":{"crate_id":20,"path":["libc","unix","rusage"],"kind":"struct"},"1:14401:2098":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"5:5821:8174":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"16:6577:8702":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:11001:44554":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:1642:7401":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"5:1000:2190":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:9509:51723":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"2:48541:56319":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"16:3264:8825":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:10132:7226":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:11962:44504":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:2204:7641":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"5:3732:156":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:51234:7851":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:52091:7832":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:9062:53126":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"17:13240:49824":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:32050:7086":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"6:1676:3591":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:4621:1808":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:2188:7373":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"20:1538:3594":{"crate_id":20,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:11726:45077":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"9:722:8331":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"16:6554:8701":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:46063:8000":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:8177:7480":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"2:49674:7599":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:14558:7296":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"17:10887:44470":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"6:4215:5011":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:53191:22879":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"6:4183:5008":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:3085:131":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:14686:9255":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"5:6936:8170":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"5:7797:9212":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"19:0:973":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:46071:8146":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"1:1190:12190":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"1:14037:2154":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:47379:7139":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"6:6091:6052":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:13306:49932":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"6:1630:3588":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"5:1080:9198":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:12712:49244":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:4157:8956":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:3108:124":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:4646:7710":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:11458:44692":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:11358:8950":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"16:3195:8822":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"5:5299:186":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"6:5987:6049":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:21:652":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"17:9886:44281":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:47363:2190":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:8293:2391":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:12537:49171":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:13963:50412":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:10447:7270":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:9210:44272":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"16:5975:8686":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:4306:5022":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:12343:49157":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:11007:2136":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:12594:7992":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"18:136:50773":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:51046:56032":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"6:0:776":{"crate_id":6,"path":["libc"],"kind":"module"},"1:11336:2176":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:510:44262":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:13733:50330":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:4576:2123":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"17:13205:49821":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"12:2315:58877":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"12:1159:8460":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"0:94:1589":{"crate_id":0,"path":["num_cpus","get_physical"],"kind":"function"},"16:6238:8648":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:48207:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"17:12659:49240":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:47293:7201":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:3110:2078":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"5:1923:7369":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"1:894:7456":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:9574:8911":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:9659:59755":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:9943:59757":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:12247:49151":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:49746:7603":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"20:1377:3579":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"16:7406:8649":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:4:958":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:820:9248":{"crate_id":1,"path":["std","thread","local","os","Key"],"kind":"struct"},"1:12217:9842":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"17:10140:8932":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"20:3379:5016":{"crate_id":20,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:13933:50410":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:9264:42648":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:11378:8949":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:14769:7422":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"5:2314:8293":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:5406:7524":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:46318:7758":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:10788:44469":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:11269:2610":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"6:6005:2610":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:6923:42032":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"12:2323:58878":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"16:3241:8824":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:10926:44578":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"5:1637:7391":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"15:248:8483":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"5:2202:8252":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:15745:1963":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"17:10377:8922":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:9801:7939":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:2397:13195":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"16:2733:8532":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"5:8317:8263":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"16:6636:8662":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"6:5998:6050":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:6106:6054":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:10309:9249":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:13547:50313":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"16:6491:8699":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:24959:7911":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:9065:44269":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:3321:7692":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:1507:7395":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"5:3823:9198":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:9743:9248":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"2:22835:7270":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:783:9248":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"18:866:9012":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:7420:8666":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"1:14814:51259":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"17:12699:49243":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"5:772:207":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:8280:132":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:12442:49164":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:12308:8126":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:11711:7975":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"2:51773:7845":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:51820:7849":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:696:7452":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"16:5505:8547":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"6:563:2822":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:48222:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"6:511:2816":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"6:1736:3598":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:45749:7733":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"17:9600:59748":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"17:3743:8944":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:10458:44396":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:7550:7145":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"16:4350:43148":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:51180:7844":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:5312:41909":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:46248:9220":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"20:4111:5557":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:45642:183":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:15765:1981":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"20:3430:5022":{"crate_id":20,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:50050:176":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"6:6214:41947":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:47319:191":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"18:857:9011":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:4605:55516":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:3299:7687":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:8243:7790":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:51613:56011":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:8948:2226":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"16:2754:8574":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"16:7971:123":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:45756:7734":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"20:150:2505":{"crate_id":20,"path":["libc","unix","FILE"],"kind":"enum"},"1:8362:188":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:12582:49174":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:13062:49768":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:3116:1885":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:8328:116":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"12:2303:58880":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"5:1549:91":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:10253:8884":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:6691:8705":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:8902:44265":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:11519:44909":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"11:54:8450":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"17:9719:44278":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:49759:40596":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"6:670:2850":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:2162:7368":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:10435:44395":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:7477:8667":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:14708:9257":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:46050:8152":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:52880:7850":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:10081:8930":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:46124:8149":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:10635:44467":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:49200:7986":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:46117:8148":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"17:10128:8990":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:11121:7956":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:49424:7996":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"9:749:8332":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"1:2171:7370":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:5071:7241":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:48969:7966":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:11118:44286":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:23729:40285":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"2:51432:7816":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"20:5491:5051":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:10122:106":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"17:11572:44977":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"16:7195:8714":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:3681:7684":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:51361:7828":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:46479:2133":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"18:782:59760":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"16:6101:8641":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"12:930:7394":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:13520:50308":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:4557:2099":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"5:3359:8250":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:46695:2162":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:12327:49156":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"6:4387:41717":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:11486:2192":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"6:1596:3584":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"12:377:8467":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:22420:56239":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:1501:7394":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"16:6807:8707":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:47539:85":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:47791:89":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"16:7333:8664":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"12:853:7390":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"6:6100:6053":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:49711:7600":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:12521:49170":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:2723:7275":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:10673:44501":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:1428:7388":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:3191:205":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:11200:7959":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:47623:86":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:10304:8921":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"16:6110:8683":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:15753:1969":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"5:6746:2123":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"5:3756:7388":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:50086:8019":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:3311:7377":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:4347:41712":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:3635:209":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:8954:8953":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:32114:55996":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"6:1584:3583":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:5627:7285":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:3333:7698":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:11844:9226":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"2:48737:8166":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:4317:5023":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:48310:7223":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"1:15757:1973":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:9896:59740":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:12837:7585":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"5:3354:7370":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:3664:7718":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:53221:22881":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"12:0:1939":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"1:5766:7556":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"6:3997:4991":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"16:2991:8829":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"20:1426:3584":{"crate_id":20,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:12741:49251":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"6:1665:3590":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"20:1447:3586":{"crate_id":20,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"20:3336:5012":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:5561:7293":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:13394:50268":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"5:3472:7369":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"20:1495:3590":{"crate_id":20,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"20:3441:5023":{"crate_id":20,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:10128:7224":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:2776:94":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:27770:7796":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:12028:49019":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"16:7549:8654":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"6:3881:4982":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:10160:44354":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"16:7571:8642":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:47963:7226":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:13565:146":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:1302:139":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"5:4226:9198":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"6:4425:5568":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:46388:7777":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"16:5790:8563":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:13810:50371":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:49647:7598":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"9:996:8395":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"6:3945:4986":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:50109:154":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"20:1553:3596":{"crate_id":20,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"5:3954:9198":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:7804:8655":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"16:7843:8723":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:46370:7763":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:3249:2089":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:5007:7936":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:49568:7593":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:24317:7483":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"17:9034:44268":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:2484:44384":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:2004:2123":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"17:13506:50306":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:14411:51527":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:11944:7139":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:57121:56019":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"2:10343:142":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:12064:2230":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:22792:7270":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"6:4395:41718":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"16:3549:42652":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"20:5485:5050":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"20:4813:2701":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:4040:4996":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:49929:8086":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"17:9476:44276":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:8626:2232":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:11100:8912":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"6:4494:5029":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:46715:35975":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"20:5503:5053":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:2582:53135":{"crate_id":1,"path":["std","error","from","StringError"],"kind":"struct"},"2:49862:8008":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"20:3163:4995":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:1530:7398":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:607:44263":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:11242:7962":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:14927:7355":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:3286:7663":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"5:2294:8309":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:11873:51252":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"0:0:1708":{"crate_id":0,"path":["num_cpus"],"kind":"module"},"1:14377:125":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"17:13898:50402":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:50973:7835":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"6:4052:4998":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:48240:104":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"16:7279:8865":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:15136:7517":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"5:8111:8257":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"5:8103:7368":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"6:4193:5009":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:9653:9247":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"1:11265:7261":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"20:1460:3588":{"crate_id":20,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:13172:49776":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"6:5269:5565":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:49882:8012":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:11172:7519":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:5284:7517":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"20:5457:6403":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:4936:7240":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"20:154:2506":{"crate_id":20,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:13598:50319":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:7987:2161":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:52277:7838":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:10844:8932":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:10468:8978":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"16:4614:43237":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"6:610:2829":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:10250:56652":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"17:13620:50326":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"5:8335:57701":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"2:49870:8009":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"20:2992:4980":{"crate_id":20,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:1760:3600":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:51066:7812":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:24215:8039":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:15746:1964":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:22422:56242":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:4614:2101":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:13331:49935":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:12507:49169":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:53283:22883":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:1149:12186":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:47388:164":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"6:1717:3595":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:48189:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"20:5465:6404":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"20:5479:5049":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:51027:7827":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"20:4167:5548":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:10448:7453":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:10994:2133":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:14782:7423":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:5167:5556":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"5:5857:9207":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"1:10816:7437":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"12:556:139":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:10584:8955":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:11480:2190":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:53068:7818":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:12142:49143":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:13924:50409":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:46427:7767":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:11993:48972":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"20:4903:3515":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:3014:7670":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:55872:221":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:1311:8994":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"16:7250:8719":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:46131:8150":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:12555:7988":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:7863:9230":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"5:2761:8296":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"5:1602:7139":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:13067:40595":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"2:47413:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:53107:22873":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:2140:1029":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"18:766:59763":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"16:3365:8573":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:2213:7642":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"12:812:7393":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:13720:7419":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"16:7738:8721":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"5:1475:7402":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:5486:6405":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"12:2045:7373":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"1:3529:2144":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"20:1393:3581":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"6:4470:41720":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"5:7753:219":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:49530:7587":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"16:5595:8552":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"6:5407:41914":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"6:537:2820":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"6:4046:4997":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"16:4386:43159":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:14021:7352":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:46170:8074":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:55859:221":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:11166:7518":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"6:6893:5053":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:11026:44284":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:14554:13208":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"5:8436:8228":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:12913:7592":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"9:776:8376":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"17:13574:50316":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:6068:3515":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:3440:1809":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:49894:117":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:10489:8979":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:45728:7280":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"20:4797:3511":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:23809:7874":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"6:4255:5016":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"20:71:2429":{"crate_id":20,"path":["libc","unix","DIR"],"kind":"enum"},"16:3172:8821":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:9088:44270":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"6:624:2831":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"18:694:9021":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:13780:50368":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:49041:7971":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:11983:7341":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"16:2794:8575":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:51283:7836":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"5:912:8254":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:53096:22872":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:10962:44557":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"20:3312:5010":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"9:157:8346":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"1:4270:7502":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:10917:2190":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"15:0:1941":{"crate_id":15,"path":["addr2line"],"kind":"module"},"16:5766:8562":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"15:269:8487":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:38505:7277":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"20:573:2827":{"crate_id":20,"path":["libc","unix","linger"],"kind":"struct"},"6:4241:5013":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:46670:35970":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:9280:42647":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"16:5753:8561":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:4899:7301":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"1:10722:114":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:7738:7756":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:50764:7854":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"6:1547:3579":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"9:234:8354":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"7:38:42120":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"16:4762:43260":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"6:1602:3585":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:11291:7265":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"16:7928:7733":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:10331:8932":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:13348:49936":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:11044:7304":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"6:4272:5018":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"5:4627:9203":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:4539:1810":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:55885:221":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:2537:8297":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"16:5421:8540":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:7151:53111":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:23966:8060":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:1518:7396":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:11999:7342":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:12373:49160":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:1886:1594":{"crate_id":2,"path":["core","mem"],"kind":"module"},"6:88:2429":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"17:2314:8923":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:11928:2190":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"6:4013:4993":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"16:6357:8696":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:10683:2079":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:9261:7586":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:9162:8907":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:3906:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:45573:180":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"6:1908:3653":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"20:3386:5017":{"crate_id":20,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"20:3405:5019":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"9:27:8378":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"17:12783:49315":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:6695:7262":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"20:4225:5569":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"5:4499:8274":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"20:5497:5052":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:8369:7337":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:10966:2136":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"6:4145:5006":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:13282:49868":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:2362:581":{"crate_id":1,"path":["std","env"],"kind":"module"},"6:5347:41910":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:1524:7397":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:12262:49152":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:6345:7260":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:13904:9254":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"17:299:59745":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"16:4535:43183":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"16:7264:8661":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:11738:45186":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"20:2998:4981":{"crate_id":20,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"8:0:1935":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:47242:7388":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:10737:199":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:45763:7239":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"1:7182:53111":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"20:4314:5592":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"16:3218:8823":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:15760:1976":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"12:2039:7372":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"6:4377:41716":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"5:7239:9198":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:49028:7970":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:4173:2100":{"crate_id":1,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"17:12771:44292":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:2765:7276":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:47581:79":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:605:2828":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"6:4401:41719":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:12856:7588":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:1152:12188":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"16:5456:8542":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:10448:8895":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"16:7158:8711":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"5:3032:57336":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:11129:51272":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"17:12182:49146":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:24521:8045":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"20:565:2826":{"crate_id":20,"path":["libc","unix","winsize"],"kind":"struct"},"17:12610:49189":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"20:1402:3582":{"crate_id":20,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"6:5159:5555":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"16:7042:8864":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"6:1527:3578":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:11847:45215":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:13477:50303":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:23658:8036":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:5889:7565":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:11822:45201":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"20:1530:3593":{"crate_id":20,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:11109:51266":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"16:5330:42647":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"5:1446:7401":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"20:1590:3600":{"crate_id":20,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"20:3127:4991":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"20:3350:5013":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:15747:1965":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:53142:22876":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"6:6614:2776":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"9:1020:8396":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"5:1184:57368":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"16:4448:43171":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:13852:7625":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"16:7823:8657":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:11086:7955":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:5282:5567":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:9649:44277":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:11159:44288":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"20:1371:3578":{"crate_id":20,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:51557:56006":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:0:471":{"crate_id":2,"path":["core"],"kind":"module"},"12:1180:8461":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:47497:78":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:9332:8974":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:13637:50328":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:48942:7963":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"6:5953:3511":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:50095:8020":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:47225:7138":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:13365:13206":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"5:1591:7388":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"20:4093:5556":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"20:4123:5559":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:5017:7239":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"6:6636:6403":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:53029:7853":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:11020:7303":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"5:8223:2070":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"6:3972:4866":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"18:739:59783":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"20:5435:2776":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:13221:49822":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"6:6085:6051":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:15712:12191":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"18:644:9018":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:3262:7653":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"16:6744:8854":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:3088:213":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"6:5185:5557":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"18:829:9009":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:12480:49167":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:9141:7466":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:15752:1968":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:12632:49238":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"6:1658:3589":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:5062:7937":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:681:44264":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"6:4511:41722":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"6:6935:6406":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"16:7856:8724":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:3268:7656":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:9225:7316":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:15211:31459":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"16:3145:8830":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:10611:44499":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"5:7615:8233":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"13:120:42523":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:11434:44691":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:49126:7982":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"16:6252:8694":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:8268:7480":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"16:3118:8831":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:23768:56329":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:6367:7299":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"6:4325:41710":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"5:6239:8232":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:1482:7369":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"1:3563:2140":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:4341:41711":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"18:620:59775":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:24555:8046":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"12:761:7388":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:8760:2197":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:6227:7533":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:9349:55592":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"12:747:2190":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:12208:49148":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"20:3190:4999":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:6465:7321":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"20:3242:5005":{"crate_id":20,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"16:4230:43078":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"6:1563:3581":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"7:0:1449":{"crate_id":7,"path":["unwind"],"kind":"module"},"5:983:8255":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:11809:45200":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:10941:7388":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"20:543:2823":{"crate_id":20,"path":["libc","unix","hostent"],"kind":"struct"},"14:250:42576":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"5:8352:8179":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:47949:7225":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:3189:103":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:9551:8905":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"20:3302:5009":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:10126:115":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:12195:49147":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:1472:7368":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"16:3506:8827":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:11231:8908":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"20:3081:4987":{"crate_id":20,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:2512:8919":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"16:6768:8856":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:3483:7407":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:48533:56322":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:46356:56136":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:22844:7811":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:45557:182":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"6:4073:5001":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:11835:45214":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"20:3477:5027":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:9648:83":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"6:5969:2701":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:15758:1974":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"1:10678:2077":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"20:5020:6058":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"16:6021:8814":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"16:3392:8832":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:23931:40311":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"20:4959:6055":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"16:3429:8576":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:13583:7428":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"16:7514:8665":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:1157:12189":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:11750:45187":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"6:1690:3592":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:11895:51342":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"1:15742:1961":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:52817:7830":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"18:660:9019":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:13641:173":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:51851:7852":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"16:4922:43295":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:51330:7824":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:47749:82":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"6:3892:4983":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"20:3324:5011":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"9:927:42239":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"6:4300:5021":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:4827:7929":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"16:5295:42650":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:11015:44581":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"16:7119:8580":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:49015:7969":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:11147:44287":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:11328:44292":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:13831:7420":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"12:469:58883":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"16:5561:8550":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:8353:2390":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"16:6087:8643":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:15723:51331":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:5091:2273":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"20:5011:6057":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:53206:22880":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"5:8253:98":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:23901:40312":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:46489:7771":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:12069:2231":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:8527:2219":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:11539:44969":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:14364:51263":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:3316:7378":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:9648:9246":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"3:300:191":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:1554:3580":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"5:3024:57335":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:7545:7417":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"16:4790:43263":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:14571:7424":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:10136:175":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:23784:40273":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:10529:44398":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"5:7822:9218":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:48511:142":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"5:8303:8262":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"18:837:7588":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"16:5346:8644":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:10673:2076":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"16:7303:8720":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:10551:7403":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"2:3345:7686":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:3718:7685":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"20:4245:5570":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:13456:7412":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:46379:7764":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:7511:7415":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:46436:7768":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:15751:1967":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:3013:7270":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:23837:40291":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"16:3522:42651":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"20:4863:3540":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"5:8149:8187":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"16:6605:8660":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:2190:7637":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"16:6072:8530":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"5:3325:8249":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:9799:44280":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"20:4822:6049":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:3274:7659":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:11470:2189":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:7403:115":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"13:0:1933":{"crate_id":13,"path":["std_detect"],"kind":"module"},"5:6634:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:12867:7584":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:55807:221":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:11588:44978":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"16:7185:8713":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:8767:7792":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"16:5360:8537":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"16:5522:8548":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"6:4281:5019":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:11653:45017":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:6185:6058":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:13497:50305":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"6:525:2818":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:47371:7388":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"20:3273:5007":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"9:0:1936":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:1459:7390":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:3278:7448":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"14:47:42568":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"16:4304:43127":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"5:8176:7139":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"20:5062:6061":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:4689:7623":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"20:3035:4984":{"crate_id":20,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:11616:44980":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"16:6032:8579":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"16:5029:43327":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:23587:8035":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"6:5563:41934":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"6:4095:5003":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:10333:138":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:51694:7857":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:13532:50311":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:2431:7624":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"20:4058:5533":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:8951:2227":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:46468:7774":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:31875:8098":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:12385:49161":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"20:3498:5029":{"crate_id":20,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"12:1688:8475":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:5649:7288":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:13627:50327":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"6:3905:4984":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:13465:50302":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"16:2889:8835":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:9643:76":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"16:5717:8557":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:3247:7447":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"12:354:58873":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"16:3091:8878":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:50868:7855":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"14:194:42569":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:1497:7393":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:15740:1959":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:2852:166":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"20:4840:2610":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"18:729:59773":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:6331:7762":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:8727:53126":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"1:1075:7324":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"7:85:42127":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:23863:40310":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:9133:44271":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"16:6219:8693":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:2159:7139":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:48486:7406":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"5:909:93":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:46408:7779":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:24249:8040":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:14702:9256":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"20:598:2831":{"crate_id":20,"path":["libc","unix","servent"],"kind":"struct"},"2:22703:7810":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"16:4417:43165":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:15246:8491":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"20:4136:5560":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:51085:56003":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:15098:7516":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"6:4133:5005":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"16:3604:42653":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"20:3143:4993":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:2177:7371":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"6:599:2827":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:13862:8021":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"6:5469:5570":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"18:774:59760":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"6:4419:5564":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:11779:45196":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:50739:56021":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:5868:7562":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:11427:2188":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:12307:49155":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:3978:4989":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:11318:15504":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:53127:22875":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"18:849:9010":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:52484:7858":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:10041:44338":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:23394:7318":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"16:6620:8847":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"20:3135:4992":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:6999:8708":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:10224:44356":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"20:4789:2743":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:49890:8007":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"5:4612:220":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"20:4920:6051":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"16:5273:8578":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"6:4120:41708":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:10950:2098":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"5:7194:7368":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"14:216:42577":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"20:4926:6052":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:3041:8820":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:8081:9230":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"2:46328:7759":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"12:463:58882":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:48494:56334":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"5:3743:2190":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"16:5314:42648":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:46009:7922":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"18:152:50774":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"5:6654:2218":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:12234:49150":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:10383:7753":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:12275:49153":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"12:1667:8474":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:12221:49149":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:48951:7964":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:13272:49867":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:10259:53113":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"20:5035:6059":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"12:937:7395":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"16:7453:8646":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:49093:8077":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"20:558:2825":{"crate_id":20,"path":["libc","unix","pollfd"],"kind":"struct"},"2:49254:7959":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:3092:212":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"17:13685:50329":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"20:3364:5014":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Chdr"],"kind":"struct"},"2:46309:7776":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:11499:44908":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:11744:7976":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"5:421:2392":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:23938:8103":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"16:4852:43275":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:12114:7445":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:22650:7319":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:5400:41913":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:10746:2147":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:12051:49076":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"16:3772:42695":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:4008:44471":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:8929:44266":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:13676:34348":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"4:0:1934":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:11888:53129":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"2:48523:2186":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"20:606:2832":{"crate_id":20,"path":["libc","unix","protoent"],"kind":"struct"},"6:6200:6059":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"18:720:56328":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:12568:49173":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:2565:123":{"crate_id":1,"path":["std","error","Error"],"kind":"trait"},"1:11240:7518":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:38568:7632":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:49582:7596":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"16:2866:8816":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"6:591:2826":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:1488:7391":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:13913:187":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"16:7236:8718":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:11915:48965":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:12862:7589":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:12094:2109":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:49433:7997":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:6769:7266":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:46088:7327":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:49878:8011":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:48891:7958":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"5:8141:180":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:10541:7381":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"2:46183:8075":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:5990:7526":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"16:2816:8834":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:15741:1960":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:10941:2163":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"20:4147:5561":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:12015:7343":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:8298:8284":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"2:53087:22871":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:3398:112":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:15756:1972":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:2320:7444":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:10071:8993":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:13942:50411":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:3431:128":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:13550:134":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"5:8170:7139":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:49136:2134":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"16:2843:8815":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:50787:7842":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"18:636:59760":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:12118:49084":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"20:5049:6060":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","termios2"],"kind":"struct"},"2:11214:7960":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"20:1452:3587":{"crate_id":20,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"16:7024:8863":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:13865:50378":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:49458:7327":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"5:1430:7399":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:45665:185":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:2027:141":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:11009:7953":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"16:5632:8553":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:12054:2223":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:15761:1977":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"6:3957:4988":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:11665:45018":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"20:4196:5565":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:49442:7998":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:8482:153":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"16:6591:8703":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:2433:13206":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:47259:7200":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:10728:7270":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:1493:7392":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:4383:2152":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:3972:7725":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"17:13453:50301":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"16:6964:7200":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:3955:123":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"16:7342:8678":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:46258:13812":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"6:1540:41126":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"5:4290:7388":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:12095:49083":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:50042:34347":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"1:6767:7264":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:10117:8989":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:12671:49241":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"20:4181:5563":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlmsghdr"],"kind":"struct"},"6:3966:1819":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:3294:7667":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:24385:7484":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"16:7894:8681":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:10061:44355":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"12:1118:7400":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:15762:1978":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"16:6152:8645":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:10138:7228":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:11159:7957":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:8691:158":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"5:5772:9198":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:11045:44285":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:10571:44497":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:4164:5007":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:11850:7423":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:8060:2214":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:49858:8005":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"5:3023:57702":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"5:781:105":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:3341:7702":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:13384:51722":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:10584:2132":{"crate_id":1,"path":["std","error","Chain"],"kind":"struct"},"2:12847:7586":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:47234:2190":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"5:1224:8292":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:6124:6055":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:32062:56022":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"1:14043:2152":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:24351:8042":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"16:6464:8658":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"6:1744:3599":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:4033:4995":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:32056:7087":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"3:0:413":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"6:4127:41709":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:48979:7967":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:8578:2221":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:46025:7924":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:13119:49770":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"20:505:2819":{"crate_id":20,"path":["libc","unix","timespec"],"kind":"struct"},"2:49272:7960":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:10988:44555":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:11406:44683":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:5838:7559":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:4344:2156":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:11152:14801":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"14:231:8182":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:13949:137":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"6:5522:5591":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"20:3011:4982":{"crate_id":20,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:3179:196":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"5:8271:8261":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"20:3196:5000":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:3428:127":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:13318:49934":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"12:1200:8462":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"6:4005:4992":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:50127:7279":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:10975:44556":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"5:7093:9212":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"20:4294:1630":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"5:8079:8178":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:3079:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:49725:7601":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"16:6569:8849":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"18:677:138":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"16:7360:180":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:12155:49144":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:15754:1970":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:6593:7288":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"5:3028:57337":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:46338:7760":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"20:3505:5030":{"crate_id":20,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:1572:3582":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:52013:7825":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"5:1204:8291":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:3113:2081":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:10469:7461":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"16:7174:8712":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:3539:9228":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:4385:2153":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"14:11:42568":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"16:7761:8722":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:23845:40309":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:11981:44503":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"6:632:2832":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:9759:44279":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:9521:51728":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"2:2108:559":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"1:14943:7356":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:3652:7717":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"6:5548:5592":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:14341:51327":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:2458:13213":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:46347:7761":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:9600:7510":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"17:11678:45019":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:13746:56142":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"1:14872:7430":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"20:3396:5018":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:1438:7139":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:4273:7503":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:49866:8010":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"6:5371:5015":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"20:3176:4997":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:8763:7682":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"5:3878:8285":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:10984:2132":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:11077:7311":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"16:4890:43288":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:23751:7879":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"6:5436:58801":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"12:976:7398":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:12039:2222":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:13488:50304":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"6:4371:41715":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:23822:7875":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:48960:7965":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:12467:49166":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:2395:13194":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:6605:6980":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"18:704:59760":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"16:3488:8828":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"20:1559:3597":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:12645:49239":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:13402:50295":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"16:6269:8695":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:9476:9244":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:11014:2137":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"6:5197:5559":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"12:396:8466":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"20:3108:4989":{"crate_id":20,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:47311:174":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:4634:7709":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"20:3459:5025":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:9806:7940":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:13564:50315":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:10407:8918":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"5:1619:7389":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:47707:87":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"9:692:8330":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"12:949:7396":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"6:6028:3540":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"6:4293:5020":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"5:1628:7390":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"16:4823:43271":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"20:4941:6054":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:8813:7544":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"20:4085:5555":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:48252:123":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:11254:8906":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:15755:1971":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:6773:7778":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:11950:7339":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"16:4477:43175":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:12284:8162":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"6:4101:5004":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"12:1253:7402":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:22441:56237":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"18:790:9005":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"14:189:42568":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"6:1617:3586":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"12:784:7392":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"12:840:7389":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"16:6366:8480":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:5314:8143":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"6:5191:5558":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:49886:8006":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:12431:49163":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:10962:2102":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:49404:2137":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"6:6858:5049":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:14326:7271":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:3282:7449":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:10516:8980":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"20:1414:3583":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:10535:12187":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:51934:7837":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"16:2968:8818":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"18:712:7208":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:14971:7363":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:4658:99":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:9933:44282":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:3306:7376":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:5683:7289":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:13062:40594":{"crate_id":2,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"1:6771:7267":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:13758:7421":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"20:3467:5026":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"9:809:2186":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:10353:8924":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:9368:44273":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:3188:202":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"12:877:7369":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"2:24419:8043":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"17:9404:44274":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"20:1366:3577":{"crate_id":20,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"20:0:776":{"crate_id":20,"path":["libc"],"kind":"module"},"12:2013:7368":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:0:1943":{"crate_id":17,"path":["object"],"kind":"module"},"5:8133:7139":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:10179:44352":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"16:7870:8652":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"6:6644:6404":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:49414:7995":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:0:1302":{"crate_id":1,"path":["std"],"kind":"module"},"1:12547:124":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:8276:2186":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"1:10821:7438":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"6:4501:5030":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:11048:7954":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"16:7884:8653":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:22640:7270":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"16:4995:43318":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:10558:44496":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"20:4219:5568":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlattr"],"kind":"struct"},"18:896:9014":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"14:244:42570":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:10690:2080":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:55727:7800":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"2:49168:7956":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"20:3022:4983":{"crate_id":20,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:52126:7814":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:12756:49252":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:3422:2389":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:50718:56001":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:8534:2220":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"16:6644:8704":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"16:6780:8706":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:7525:7416":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"6:4364:41714":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"16:7146:8710":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:10730:7494":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:11410:2187":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:49874:8013":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:22403:56155":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:3197:7244":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:13912:50408":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:47970:7227":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:47192:162":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:47956:7224":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"13:232:58887":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:14040:2156":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:5705:7292":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"18:169:50775":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"5:6670:8204":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:10477:8977":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:22388:56155":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"17:10623:44500":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:3157:111":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"20:493:2817":{"crate_id":20,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:45509:7714":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"2:4791:7928":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:51409:7813":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:49467:8000":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:10938:44579":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"16:3338:8572":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:1633:7400":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"20:3102:4866":{"crate_id":20,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"6:6881:5051":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:9615:7511":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"19:117:59784":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"2:45981:7327":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"16:2945:8840":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:12059:2224":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:49300:7990":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:46094:8147":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"1:11936:7336":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:50941:56002":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:10520:12184":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"12:429:8465":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"16:7073:8709":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"16:6682:8659":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:5528:1630":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:10079:130":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:13842:50375":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"12:925:7391":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"16:6413:8479":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"16:4734:43257":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"20:4190:5564":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlmsgerr"],"kind":"struct"},"0:93:1571":{"crate_id":0,"path":["num_cpus","get"],"kind":"function"},"2:32015:7085":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:11001:2134":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"6:4439:5026":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:3411:2139":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:55846:221":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:5488:8546":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:24589:8047":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"20:4990:6056":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:53116:22874":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:15744:1962":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:52060:7829":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"6:3862:4980":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:14000:50453":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:53153:22877":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:7808:7793":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:3465:7713":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"16:547:8559":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:11932:48966":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:13978:50417":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"6:6910:41742":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"18:801:9006":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:900:7457":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:10028:44337":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:6176:6057":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:52627:7826":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:3327:7695":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"5:6457:7368":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"5:69:8227":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:4596:2103":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:11865:7424":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:11277:44254":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:11555:44970":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"5:1678:8289":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:4480:2162":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"14:56:44693":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:15748:1966":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"6:3868:4981":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:3184:2387":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:22846:7810":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:13219:7530":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"20:3231:5004":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:12598:49175":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"12:2018:7369":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"1:7686:7425":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:2115:7082":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:11246:7534":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"16:2773:8841":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:11970:7340":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"6:6221:6061":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:2543:8976":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"16:6424:8698":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"5:3866:2147":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:12725:49250":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:49120:7981":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"12:1100:7399":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"6:5945:2743":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:6014:8688":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:10236:8893":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"16:5941:175":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:12074:7348":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"6:5255:41899":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:12917:49711":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:49318:7991":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"5:8341:201":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"5:8236:2071":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:49050:7972":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:11877:51534":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"16:5707:8555":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"17:13582:50317":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:6107:7532":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"16:4955:43303":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:6603:6978":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:11074:7310":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"17:13590:50318":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:49108:7807":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"5:7593:8232":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"6:161:2506":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:12552:49172":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:10950:44580":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:11304:44291":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:46040:8151":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:50899:7843":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:5555:7295":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:23953:8061":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:11226:7563":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:15076:7312":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:10106:8988":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:46686:35972":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:49059:7973":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:10579:8300":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"1:11822:167":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:51004:7823":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"20:3417:5020":{"crate_id":20,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:22799:17330":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:1041:7323":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:51133:7856":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:46417:7766":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:9971:59744":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"6:5379:5014":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"20:3292:5008":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:11337:8975":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:3251:2090":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"20:3203:5001":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:1522:3577":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"18:0:1944":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:9729:59751":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:48502:7754":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:10279:8930":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:9005:44267":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:46287:2132":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"5:8094:8256":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"6:4331:5024":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"18:820:9008":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:3064:8877":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:3290:7665":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:50835:7822":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:3261:2095":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:49553:7590":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:5635:7286":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"16:4704:43252":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:3623:8069":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"5:2246:8294":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"20:4288:5591":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:10912:44569":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"5:3313:2190":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:13788:50369":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"6:4358:41713":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"5:8119:57406":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:46704:35973":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"6:4262:5017":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"20:4117:5558":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:3425:126":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:12287:49154":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"5:1827:9198":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"5:3935:7369":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"2:2836:120":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"6:4227:5012":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:53168:22878":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:46399:7765":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"6:4523:41724":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:45619:184":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:14351:2079":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"6:6812:6060":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:9245:8888":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:46200:8076":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"12:2309:55793":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:11497:2193":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"5:3346:7372":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:12556:9253":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"17:11604:44979":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:47455:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"6:584:2825":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"18:811:9007":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:13819:50374":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:3487:7635":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:11816:7420":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:5507:7863":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"20:1506:3591":{"crate_id":20,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"6:4083:5002":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:3350:7706":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"20:3449:5024":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:13600:56551":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"20:1651:3653":{"crate_id":20,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"20:3153:4994":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:49599:7597":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:5697:7291":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:13554:50314":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:13154:49774":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:294:59753":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:11696:45020":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"16:5231:43504":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"5:7355:7139":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:13986:50419":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"20:3075:4986":{"crate_id":20,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"16:6391:8697":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"20:4886:3512":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:12982:49713":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:6208:8692":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"6:5210:5560":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:55820:221":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:7786:8656":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:13760:50332":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"14:0:1940":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:9528:2134":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:1619:7399":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:3554:8068":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:50032:187":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"5:4583:9201":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"17:11970:44502":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"18:885:9013":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"16:6126:8689":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:37348:7208":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"6:3951:4987":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:24453:8044":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:46499:7673":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"16:0:1942":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:5643:7287":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:51457:7817":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:6698:7260":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:14864:51260":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:1018:7480":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:9140:7441":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"10:0:1937":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:3207:7631":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"5:8419:7369":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"2:45721:7719":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:3220:2388":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:15739:1958":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"16:5580:8551":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"6:4478:41721":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:45598:181":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"5:8364:8180":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"12:1235:8463":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"12:1651:8473":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:57142:56042":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"17:10814:8947":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:12946:49712":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:15763:1979":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"16:5736:8558":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:52738:7846":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:5281:7516":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:10738:2145":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:45481:7627":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"16:5815:8564":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:13041:49714":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:11640:45016":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:51384:7831":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:13192:49820":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"16:3287:8826":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:10502:44397":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"9:963:8394":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:11767:45195":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:9809:59750":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:14958:7357":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:49069:7974":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:13884:50384":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:5114:7242":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:4284:7139":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:47302:7196":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:11714:45076":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:3187:203":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"5:7426:9198":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"20:1520:3592":{"crate_id":20,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"6:4449:5027":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:1132:7281":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"16:5384:8538":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:10459:51346":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"12:1144:7401":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:10200:44351":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:13736:51715":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:6861:7263":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"6:5428:41917":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:3908:7440":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:24487:7426":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"17:10001:44336":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:9027:2229":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:49354:7993":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"5:1658:7393":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:4346:2157":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"5:1581:2190":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:3185:7630":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"6:5221:5561":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:3082:145":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"1:15235:8491":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"6:5459:41918":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:7628:7421":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"20:537:2822":{"crate_id":20,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"20:3182:4998":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:7915:7480":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"2:37324:164":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"6:616:2830":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"5:5520:2218":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:24283:8041":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"12:2331:2070":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:3235:2085":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"18:754:59767":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:10378:7375":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:11214:7303":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"16:3714:42662":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:3257:7651":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:51509:56023":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:14118:7463":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"17:12073:49077":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"16:6166:8690":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:23489:7270":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"6:5386:41912":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:5876:7564":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:13163:49775":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:4305:2154":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"6:5359:41911":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:8247:7789":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:7013:15503":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:45688:2064":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:32214:56075":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"16:5407:8539":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:9689:59743":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"20:3254:5006":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:10474:7478":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:7636:7671":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"5:6393:208":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:12795:49318":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"20:3371:5015":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Chdr"],"kind":"struct"},"2:45996:7921":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"20:3225:5003":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:12168:49145":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:9186:8952":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"6:4203:5010":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:48274:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"12:866:7368":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:10248:44264":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"9:900:42273":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:11047:7305":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"17:13386:50267":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:13540:50312":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"5:5817:8172":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:10704:125":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"20:3087:4988":{"crate_id":20,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:11835:7422":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"16:6718:8852":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"6:6051:3512":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:4517:41723":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"12:2032:7371":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:10575:13208":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:12518:7985":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"6:3918:4985":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:49449:7999":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:542:8581":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:10864:44472":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:15759:1975":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:55833:221":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:4871:7238":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"16:3939:42812":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:52943:7815":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"5:5399:2123":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:3990:4990":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:5693:7290":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"12:112:58881":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"20:3096:1819":{"crate_id":20,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:11482:44693":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:10119:106":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"16:7392:8651":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:49736:7602":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:13377:49950":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"12:2009:7139":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:1236:44353":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:8796:1811":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:11628:45015":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:2877:170":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:10130:7225":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:12494:49168":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"6:5130:5533":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:49150:2136":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:5533:757":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:13609:50320":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"16:6949:8860":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:12776:2198":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:46278:7772":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:10140:7229":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"}},"external_crates":{"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"20":{"name":"libc","html_root_url":null},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":15}