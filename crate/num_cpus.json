{"root":"0:0:2533","crate_version":"1.16.0","includes_private":false,"index":{"2:13848:2725":{"id":"2:13848:2725","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12492:490","self::pattern":"2:13437:17829"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:10036","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13771:10254":{"id":"2:13771:10254","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12492:490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44548:10235","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13742":{"id":"2:13742","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13743:1024","2:13744:2760","2:13745:33416","2:13746:33417","2:13748:33418","2:13751:27801","2:13752:33419","2:13753:350","2:13754:2444","2:13755:2406","2:13757:27906","2:13759:27907","2:13761:27908","2:13763:33420","2:13764:33421","2:13765:27930","2:13766:27931","2:13767:27934","2:13768:27935","2:13770:10068","2:13771:10254","2:13772:7361","2:13773:32410","2:13774:32414","2:13775:2676","2:13776:33422","2:13777:32415","2:13778:27947","2:13781:27948","2:13784:27949","2:13787:2744","2:13791:7370","2:13795:2679","2:13798:27937","2:13801:27939","2:13804:33423","2:13807:33424","2:13810:27941","2:13813:27943","2:13816:27945","2:13819:27946","2:13822:2906","2:13825:33425","2:13828:33426","2:13831:33427","2:13834:2683","2:13836:33428","2:13838:33429","2:13840:33430","2:13841:33431","2:13842:33432","2:13845:33433","2:13848:2725","2:13851:27950","2:13854:33434","2:13857:33435","2:13860:33436","2:13863:2526","2:13865:27840","2:13866:27841","2:13867:27843","2:13868:27844","2:13869:27845","2:13870:27847","2:13871:27848","2:13872:27849","2:13873:33437","2:13875:12509","2:13876:33438"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13872:27849":{"id":"2:13872:27849","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1151:37986"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13865:27840":{"id":"2:13865:27840","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13743:1024":{"id":"2:13743:1024","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12492:490"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13851:27950":{"id":"2:13851:27950","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12492:490","self::pattern":"2:13437:17829"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:10036","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:10036","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:17827","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5719:3030":{"id":"5:5719:3030","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7759:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13772:7361":{"id":"2:13772:7361","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44558:3003","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13804:33423":{"id":"2:13804:33423","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:13437:17829","str::split":"2:13795:2679","prim@char":"1:12492:490","`DoubleEndedIterator`":"2:8393:133","str::rsplit_terminator":"2:13807:33424"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44622:10237","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:10036","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13822:2906":{"id":"2:13822:2906","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:13437:17829","`DoubleEndedIterator`":"2:8393:133","prim@char":"1:12492:490","str::rmatches":"2:13825:33425"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44776:10241","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:10036","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13778:27947":{"id":"2:13778:27947","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12492:490","self::pattern":"2:13437:17829"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:10036","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13791:7370":{"id":"2:13791:7370","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42582:202","prim@char":"1:12492:490","self::pattern":"2:13437:17829"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:10036","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:10036","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:17827","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13834:2683":{"id":"2:13834:2683","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5701":{"id":"5:5701","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5702:34132","5:5703:7319","5:5706:34133","5:5709:34134","5:5717:34135","5:5718:34136","5:5719:3030","5:5720:29091","5:5721:29092"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13831:33427":{"id":"2:13831:33427","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:13437:17829","`DoubleEndedIterator`":"2:8393:133","prim@char":"1:12492:490","str::match_indices":"2:13828:33426"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44740:10240","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:10036","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:10036","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:17827","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5717:34135":{"id":"5:5717:34135","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7759:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:72:2406":{"id":"0:72:2406","crate_id":0,"name":"get","span":{"filename":"src/lib.rs","begin":[73,0],"end":[75,1]},"visibility":"public","docs":"Returns the number of available CPUs of the current system.\n\nThis function will get the number of logical cores. Sometimes this is different from the number\nof physical cores (See [Simultaneous multithreading on Wikipedia][smt]).\n\nThis will always return at least `1`.\n\n# Examples\n\n```\nlet cpus = num_cpus::get();\nif cpus > 1 {\n    println!(\"We are on a multicore system with {} CPUs\", cpus);\n} else {\n    println!(\"We are on a single core system\");\n}\n```\n\n# Note\n\nThis will check [sched affinity] on Linux, showing a lower number of CPUs if the current\nthread does not have access to all the computer's CPUs.\n\nThis will also check [cgroups], frequently used in containers to constrain CPU usage.\n\n[smt]: https://en.wikipedia.org/wiki/Simultaneous_multithreading\n[sched affinity]: http://www.gnu.org/software/libc/manual/html_node/CPU-Affinity.html\n[cgroups]: https://www.kernel.org/doc/Documentation/cgroup-v1/cgroups.txt","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13744:2760":{"id":"2:13744:2760","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13767:27934":{"id":"2:13767:27934","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13768:27935"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13770:10068":{"id":"2:13770:10068","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12492:490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44542:10060","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13776:33422":{"id":"2:13776:33422","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44836:10243","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13876:33438":{"id":"2:13876:33438","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5057:33438"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44889:10147","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13759:27907":{"id":"2:13759:27907","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13854:33434":{"id":"2:13854:33434","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12492:490","self::pattern":"2:13437:17829"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:10036","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:10036","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:17827","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13870:27847":{"id":"2:13870:27847","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1151:37986"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13868:27844":{"id":"2:13868:27844","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13860:33436":{"id":"2:13860:33436","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12492:490","self::pattern":"2:13437:17829"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:10036","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:10036","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:17827","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13816:27945":{"id":"2:13816:27945","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:10036","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13774:32414":{"id":"2:13774:32414","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13773:32410"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44855:10245","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13754:2444":{"id":"2:13754:2444","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12511:1896"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13761:27908":{"id":"2:13761:27908","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13781:27948":{"id":"2:13781:27948","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12492:490","self::pattern":"2:13437:17829"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:10036","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13863:2526":{"id":"2:13863:2526","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:13398:148","`FromStr`":"2:13397:3056"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42845:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:13397:3056","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:13397:3056","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13752:33419":{"id":"2:13752:33419","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13787:2744":{"id":"2:13787:2744","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42582:202","prim@char":"1:12492:490","self::pattern":"2:13437:17829"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:10036","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13840:33430":{"id":"2:13840:33430","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13871:27848":{"id":"2:13871:27848","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1151:37986"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5706:34133":{"id":"5:5706:34133","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7759:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:10036","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5721:29092":{"id":"5:5721:29092","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13869:27845"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13753:350":{"id":"2:13753:350","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13754:2444","`u8`":"1:12511:1896"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13819:27946":{"id":"2:13819:27946","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:10036","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:10036","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:17827","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2533":{"id":"0:0:2533","crate_id":0,"name":"num_cpus","span":{"filename":"src/lib.rs","begin":[1,0],"end":[485,1]},"visibility":"public","docs":"A crate with utilities to determine the number of CPUs available on the\ncurrent system.\n\nSometimes the CPU will exaggerate the number of CPUs it contains, because it can use\n[processor tricks] to deliver increased performance when there are more threads. This \ncrate provides methods to get both the logical and physical numbers of cores.\n\nThis information can be used as a guide to how many tasks can be run in parallel.\nThere are many properties of the system architecture that will affect parallelism,\nfor example memory access speeds (for all the caches and RAM) and the physical\narchitecture of the processor, so the number of CPUs should be used as a rough guide\nonly.\n\n\n## Examples\n\nFetch the number of logical CPUs.\n\n```\nlet cpus = num_cpus::get();\n```\n\nSee [`rayon::Threadpool`] for an example of where the number of CPUs could be\nused when setting up parallel jobs (Where the threadpool example uses a fixed\nnumber 8, it could use the number of CPUs).\n\n[processor tricks]: https://en.wikipedia.org/wiki/Simultaneous_multithreading\n[`rayon::ThreadPool`]: https://docs.rs/rayon/1.*/rayon/struct.ThreadPool.html","links":{},"attrs":["#![deny(missing_docs)]","#![allow(non_snake_case)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:72:2406","0:73:2424"],"is_stripped":false}}},"2:13757:27906":{"id":"2:13757:27906","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42582:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13763:33420":{"id":"2:13763:33420","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12498:1765","str::slice_mut_unchecked":"2:13764:33421","crate::ops::Index":"2:40131:12537"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13751:27801":{"id":"2:13751:27801","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12960:17830"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13773:32410":{"id":"2:13773:32410","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13774:32414"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44846:10244","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13875:12509":{"id":"2:13875:12509","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5060:12509"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44880:9983","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13798:27937":{"id":"2:13798:27937","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12492:490","self::pattern":"2:13437:17829"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:13227:10047","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:10036","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13755:2406":{"id":"2:13755:2406","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42582:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13845:33433":{"id":"2:13845:33433","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12492:490","self::pattern":"2:13437:17829"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:10036","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13813:27943":{"id":"2:13813:27943","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12492:490","str::splitn":"2:13810:27941","self::pattern":"2:13437:17829"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44694:10053","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:10036","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:10036","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:17827","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13825:33425":{"id":"2:13825:33425","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:13437:17829","`DoubleEndedIterator`":"2:8393:133","prim@char":"1:12492:490","str::matches":"2:13822:2906"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44794:10242","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:10036","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:10036","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:17827","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13748:33418":{"id":"2:13748:33418","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13746:33417"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13746:33417":{"id":"2:13746:33417","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13777:32415":{"id":"2:13777:32415","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44864:10067","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13842:33432":{"id":"2:13842:33432","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12492:490","self::pattern":"2:13437:17829"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:10036","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:10036","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:13463:17826","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5718:34136":{"id":"5:5718:34136","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:297:3233","`String`":"5:7759:256"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:3233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13807:33424":{"id":"2:13807:33424","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:13437:17829","str::split":"2:13795:2679","prim@char":"1:12492:490","str::split_terminator":"2:13804:33423"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44640:10238","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:10036","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:10036","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:17827","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13745:33416":{"id":"2:13745:33416","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13836:33428":{"id":"2:13836:33428","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13866:27841":{"id":"2:13866:27841","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40484:17907","Self::is_ascii":"2:13865:27840"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40484:17907","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13867:27843":{"id":"2:13867:27843","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13801:27939":{"id":"2:13801:27939","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:13437:17829","`DoubleEndedIterator`":"2:8393:133","prim@char":"1:12492:490","str::split":"2:13795:2679"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44590:10050","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:10036","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:10036","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:17827","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13768:27935":{"id":"2:13768:27935","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13767:27934"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13775:2676":{"id":"2:13775:2676","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44826:3000","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13873:33437":{"id":"2:13873:33437","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5059:33437"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44871:10148","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13795:2679":{"id":"2:13795:2679","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:13437:17829","`DoubleEndedIterator`":"2:8393:133","prim@char":"1:12492:490","str::split_whitespace":"2:13773:32410","str::rsplit":"2:13801:27939"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44572:3004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:10036","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13766:27931":{"id":"2:13766:27931","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13765:27930","str::split_at_mut_checked":"2:13768:27935"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13764:33421":{"id":"2:13764:33421","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12498:1765","crate::ops::IndexMut":"2:3621:12538","str::slice_unchecked":"2:13763:33420"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13765:27930":{"id":"2:13765:27930","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13767:27934","str::split_at_mut":"2:13766:27931"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13828:33426":{"id":"2:13828:33426","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:13437:17829","`DoubleEndedIterator`":"2:8393:133","prim@char":"1:12492:490","str::rmatch_indices":"2:13831:33427"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44722:10239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:10036","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5703:7319":{"id":"5:5703:7319","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7759:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:10036","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5720:29091":{"id":"5:5720:29091","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13868:27844"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5709:34134":{"id":"5:5709:34134","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7759:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13810:27941":{"id":"2:13810:27941","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12492:490","self::pattern":"2:13437:17829","str::rsplitn":"2:13813:27943"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44676:10052","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:10036","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13838:33429":{"id":"2:13838:33429","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5702:34132":{"id":"5:5702:34132","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:3233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:297:3233","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13857:33435":{"id":"2:13857:33435","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12492:490","self::pattern":"2:13437:17829"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:10036","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73:2424":{"id":"0:73:2424","crate_id":0,"name":"get_physical","span":{"filename":"src/lib.rs","begin":[108,0],"end":[110,1]},"visibility":"public","docs":"Returns the number of physical cores of the current system.\n\nThis will always return at least `1`.\n\n# Note\n\nPhysical count is supported only on Linux, mac OS and Windows platforms.\nOn other platforms, or if the physical count fails on supported platforms,\nthis function returns the same as [`get()`], which is the number of logical\nCPUS.\n\n# Examples\n\n```\nlet logical_cpus = num_cpus::get();\nlet physical_cpus = num_cpus::get_physical();\nif logical_cpus > physical_cpus {\n    println!(\"We have simultaneous multithreading with about {:.2} \\\n              logical cores to 1 physical core.\", \n              (logical_cpus as f64) / (physical_cpus as f64));\n} else if logical_cpus == physical_cpus {\n    println!(\"Either we don't have simultaneous multithreading, or our \\\n              system doesn't support getting the number of physical CPUs.\");\n} else {\n    println!(\"We have less logical CPUs than physical CPUs, maybe we only have access to \\\n              some of the CPUs on our system.\");\n}\n```\n\n[`get()`]: fn.get.html","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13784:27949":{"id":"2:13784:27949","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12492:490","self::pattern":"2:13437:17829"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:10036","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:10036","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:17827","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13841:33431":{"id":"2:13841:33431","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13869:27845":{"id":"2:13869:27845","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"2:22777:12660":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:23417:32080":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:4154:12595":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:44640:10238":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:15753:8779":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:45063:10258":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"6:5057:5911":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"11:2323:9695":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"17:15707:8767":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:41310:9996":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:11086:27264":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:45308:11744":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"6:570:3737":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:43759:7461":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"20:3363:5922":{"crate_id":20,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:11740:3053":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:9274:12650":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:44429:10224":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"20:55:3336":{"crate_id":20,"path":["libc","unix","DIR"],"kind":"enum"},"16:6981:9140":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:47921:10414":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"16:2746:9108":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:44176:10044":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"16:6254:9206":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"20:590:3739":{"crate_id":20,"path":["libc","unix","protoent"],"kind":"struct"},"11:859:9693":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:16645:9030":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"17:11901:8089":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"20:3071:5894":{"crate_id":20,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"6:6590:11535":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:3545:3033":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"16:3046:20565":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:3957:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:2805:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"6:1584:4493":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:44389:10219":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"5:3318:9707":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"6:5664:11501":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"20:4998:6964":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:582:7876":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:15539:8732":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:11342:11755":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"6:5165:5919":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:9474:173":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"17:11074:35036":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"20:1543:4504":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"20:1537:4503":{"crate_id":20,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:553:3734":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"5:4557:33326":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:2157:1393":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:1006:9693":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:2224:17999":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"6:1521:4487":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"16:8543:9579":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:9193:3053":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"16:5377:9175":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:5133:12628":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:16738:9053":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"1:12512:1878":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"20:4272:2463":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:13609:8271":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:11984:8094":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"6:1539:4489":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:8549:3002":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:9753:150":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"6:1500:11339":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:24147:247":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:11385:21512":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:11719:8070":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"11:718:9684":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"16:7256:9386":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:15585:8740":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"5:6137:3074":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:43306:3075":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:958:9793":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"17:12549:8182":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:40293:10138":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"16:7189:21431":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"5:6734:33301":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:3867:131":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"16:2548:9099":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:4216:12599":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:8243:151":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"17:14054:8357":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:6411:27359":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:15601:8743":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"9:318:11328":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"20:4128:6467":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:46952:10324":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:5304:7900":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"17:10096:21485":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"2:46806:10316":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"7:31:20398":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"5:923:12522":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:14472:12524":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"18:651:7813":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"20:5449:5954":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"20:3408:5927":{"crate_id":20,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"16:6779:9306":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:10792:3025":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"17:11514:8052":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:23379:32341":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"6:5224:5927":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:38838:17975":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:42374:12576":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:4820:12598":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"11:2414:9702":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"2:44956:17841":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:9215:10482":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"6:7524:6964":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:7445:6960":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:2341:2740":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"5:6263:2985":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:42542:10028":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:41008:10148":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"16:5725:8008":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:10677:7454":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:11970:8093":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:23634:10122":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"17:13204:8240":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:11325:2975":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"1:9451:245":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:7436:27380":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:8231:2959":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"20:495:3727":{"crate_id":20,"path":["libc","unix","rlimit"],"kind":"struct"},"10:0:2801":{"crate_id":10,"path":["adler"],"kind":"module"},"1:8898:3054":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:16716:9051":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"17:15572:8735":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:13458:17827":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:13150:10064":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:11390:11756":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:5553:132":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"5:4465:279":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:22246:12658":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:11018:10622":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"1:2488:2945":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"6:1657:4499":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:46903:10321":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"20:3433:5930":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:47108:10346":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:45486:175":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:44501:10230":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"11:832:9690":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"16:3832:9148":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:42674:12642":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:973:9684":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:12960:17830":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"16:5755:9180":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:12499:1855":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:6546:231":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:33772:17966":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:23579:10117":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"6:545:3733":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"16:7762:9461":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"18:80:25683":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"14:40:8306":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"20:3080:2666":{"crate_id":20,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"16:6300:9214":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:41301:9994":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:44992:10252":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"20:3414:5928":{"crate_id":20,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:42752:10200":{"crate_id":2,"path":["core","range","iter","IterRangeInclusive"],"kind":"struct"},"20:489:3726":{"crate_id":20,"path":["libc","unix","timespec"],"kind":"struct"},"17:15746:8778":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"13:0:2797":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:15350:8630":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"5:3076:11641":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:1936:10452":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:45500:238":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:12850:8211":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:11221:8032":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:15932:8826":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:12991:8224":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:14559:8465":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"5:1242:33263":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:12305:8136":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"15:327:20521":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:9510:10615":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:3682:2966":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"6:1551:4490":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"5:7544:9829":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"2:43956:3049":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:10116:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:10926:10042":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"18:538:7820":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:8118:221":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:40902:10140":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:16799:8336":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"2:46529:10288":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:4023:10463":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:7847:30253":{"crate_id":1,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"6:7515:6963":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:6858:2463":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"11:2115:9694":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:13189:10066":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:3357:3283":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"1:4182:12598":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:8366:10524":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"6:4816:5889":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"16:8230:21436":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:41579:10013":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:16691:9043":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"2:2127:7321":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:13227:10047":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:41095:10152":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"5:7060:17858":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:13920:8335":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:10795:3027":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"17:13094:8233":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"2:3474:9439":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:14089:10173":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"20:5479:5959":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:14098:8374":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"20:5441:7310":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:12604:8031":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"5:1569:9685":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:11944:10050":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:15417:8685":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:46643:10299":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:13470:7893":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:44826:3000":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"17:15845:8798":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:47676:10393":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"5:3292:9706":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:12735:8196":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"20:3443:5931":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"16:7279:9387":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:47883:10412":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"16:6806:9120":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"6:8231:5955":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:45300:11742":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"6:4957:5901":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"18:491:7812":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"5:7723:9834":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:11307:11746":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"16:7786:35024":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:15724:8772":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:12672:8188":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:11616:8032":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"11:1703:167":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:666:7877":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"20:1431:4493":{"crate_id":20,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:14042:8356":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:11629:8062":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:14206:10080":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:11925:8090":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:10629:7865":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"16:8295:9536":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"20:4098:6464":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"11:808:9701":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:3058:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"5:6555:12753":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"2:2044:2985":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"2:23262:10090":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:13360:8251":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:14083:8368":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:16211:8915":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:12930:18049":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"6:5301:11374":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"16:894:9082":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"6:5477:11447":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"16:2433:20563":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"17:13005:8227":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"20:4092:6463":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:15822:8795":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"6:5529:5932":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:13437:17829":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:8393:133":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:10423:10623":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"2:46935:10323":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"20:1416:4492":{"crate_id":20,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:11055:10579":{"crate_id":1,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"2:46710:10303":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:7857:17952":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:42633:7439":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"20:4898:6957":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"20:5488:7311":{"crate_id":20,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:3502:3010":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"20:4135:6468":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:45127:10259":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:15089:8564":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"16:7468:9413":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:14598:8470":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:46561:10290":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:11957:8092":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"18:581:3295":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"5:1362:9424":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:11400:8041":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"20:3482:5935":{"crate_id":20,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"19:0:1323":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:2909:213":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:16727:9052":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"20:3197:5908":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:13870:8326":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:13221:21500":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"6:6659:11560":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"20:3380:5924":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"16:3693:9147":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:46482:10281":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"5:1578:9686":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:12051:10054":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"20:3119:5898":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:8646:10569":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:15889:8812":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:10822:7872":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"5:7185:278":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:41779:10016":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"2:47764:10397":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:4831:11651":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"6:4875:5893":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"9:435:20411":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:6498:10480":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"20:5027:6966":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","termios2"],"kind":"struct"},"2:41404:10009":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"5:7554:34698":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:41385:10175":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:784:165":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"16:7946:9134":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:6702:11576":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"1:12067:10643":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:10667:7450":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:34044:12653":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:42320:181":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:11652:8063":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:40311:10139":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:1219:7878":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"6:6687:11572":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"5:7653:2937":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"18:521:25695":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:9209:7375":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"20:1444:4495":{"crate_id":20,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"5:5951:264":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:14772:8516":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"6:7962:3683":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:31231:32078":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"17:13081:8032":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"2:23531:2969":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"17:14506:8456":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:1922:7577":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"11:1542:20492":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:42486:32343":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"5:3256:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"20:542:3732":{"crate_id":20,"path":["libc","unix","pollfd"],"kind":"struct"},"2:23486:10111":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"20:1558:4506":{"crate_id":20,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:4834:11223":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"16:7334:9392":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"20:3111:5897":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"6:4976:5904":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"20:5473:5958":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:11360:173":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"2:42901:7375":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:47528:10389":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"16:8176:9522":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:4316:27235":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:11162:27358":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"5:7708:18034":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:10886:168":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"6:5441:11423":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"20:4864:4419":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"5:3074:34958":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"18:735:25693":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"20:3154:5902":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:23401:10099":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:12505:758":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"17:13661:8278":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"16:7369:9131":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:4692:7462":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"5:6813:7375":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"16:6335:9217":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:16001:8842":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"5:3080:34830":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:34111:12655":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:15956:8831":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"11:776:9702":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:44472:10227":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"18:113:25685":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:46597:10296":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:11982:10051":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:6715:2659":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:3921:10462":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:504:27356":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"16:8480:9573":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"0:72:2406":{"crate_id":0,"path":["num_cpus","get"],"kind":"function"},"14:0:2804":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"16:8666:9482":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"6:4902:5895":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"20:3425:5929":{"crate_id":20,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:5611:11480":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"16:2638:9103":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:10783:8011":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"16:7977:9135":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:36852:9444":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:2872:146":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:7006:11652":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:1631:7375":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:5746:10479":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:15438:8693":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"16:4118:9149":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:45304:11743":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"16:3985:7916":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"1:12498:1765":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:12825:8202":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:13040:8232":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"2:43418:7452":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:4613:9986":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"5:3680:193":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"0:0:2533":{"crate_id":0,"path":["num_cpus"],"kind":"module"},"2:22673:33108":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:4946:12606":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:12503:763":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:3502:7889":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"18:563:7822":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:14345:8433":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"5:7576:221":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:43082:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"11:763:9686":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"2:3153:149":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:11764:9700":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:40300:9853":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"5:7772:9838":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"16:3124:20566":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:1913:10451":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:22912:12745":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"1:12496:349":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"16:2448:9088":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:1643:9705":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:14749:8507":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"16:7027:9334":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"20:3180:5906":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:14932:8536":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:2298:200":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:16290:8943":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"6:7463:6961":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"6:5127:5916":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:4929:5898":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"5:2358:11644":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:9461:3086":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"16:5647:9178":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:22191:2969":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:3142:126":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"17:12358:8143":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"16:8582:9583":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"6:1597:4495":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:41116:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"6:4937:5899":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"16:5142:9167":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:40163:221":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"17:13797:8309":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:11502:8051":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"17:10515:21499":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:12027:8099":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"15:306:20517":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:12514:1890":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:12110:27382":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"17:11456:8047":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"1:8804:3049":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"18:613:35041":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:11526:8055":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:41281:10168":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"6:5117:5915":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:23510:12592":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:8556:3003":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"6:7292:4418":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"16:7220:9374":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"16:7041:9128":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:4230:12601":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:4785:12625":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:12582:8184":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"16:6864:21429":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"14:164:20497":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:3625:2965":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:8815:17956":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:5196:5924":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"18:659:7837":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"11:102:11313":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:14268:8415":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"18:726:7856":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:15829:8796":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:12043:8105":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:3856:12577":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:15674:8757":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:4493:9985":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"16:7987:9515":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:14459:8450":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:13536:8218":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:22950:12746":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"17:12982:21632":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:38783:17974":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:11280:8033":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:14671:8480":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:11552:8057":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"6:1589:4494":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:2120:693":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"1:10715:27374":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"2:45573:10278":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"17:13144:8235":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"11:292:11315":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"11:2099:9424":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:46789:10315":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"11:750:9685":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"6:6638:11554":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:12464:12515":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:43935:10209":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:0:582":{"crate_id":2,"path":["core"],"kind":"module"},"1:8501:3034":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:46871:10319":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:13553:8265":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"2:8314:157":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"20:477:3724":{"crate_id":20,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:42804:225":{"crate_id":2,"path":["core","range","RangeInclusive"],"kind":"struct"},"5:7524:9702":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:32795:10130":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"2:23345:10092":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:703:12511":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"16:6500:20535":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"11:2469:20487":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"1:10971:11751":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"1:10580:30266":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"2:43974:10216":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"20:1550:4505":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"16:6460:21427":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:33560:9434":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"17:10295:21492":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"20:3401:5926":{"crate_id":20,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:5503:11454":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"7:0:1948":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:16191:8912":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:11290:35033":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"11:1898:9708":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"16:6571:9261":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:11997:8095":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:7439:6959":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:9185:10599":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"20:3370:5923":{"crate_id":20,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:32876:3227":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"6:6398:6462":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:5130:7898":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"2:32906:3284":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"17:10217:21489":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:6891:3090":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"5:7534:9828":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:4500:10466":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"6:5652:11496":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:10673:7453":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"20:1574:4507":{"crate_id":20,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:5494:11451":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"16:7421:21432":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"20:4913:6959":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:3454:3024":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:2251:132":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"2:47241:10351":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:12318:8139":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"16:7055:9336":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:43738:149":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:4238:12602":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:45175:10268":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"11:0:2802":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:40185:223":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"6:6802:6476":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:12523:8179":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"20:3187:5907":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:3070:271":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:12930:8218":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:13027:8231":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"1:10402:10451":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"1:7914:10507":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:15694:8761":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:10273:21491":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:11147:27378":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"5:4511:2985":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:15556:8734":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"16:4150:9150":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:31199:3277":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"16:6237:9202":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:12034:8102":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"16:6623:9267":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:4547:17876":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"17:14820:8521":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"20:134:3412":{"crate_id":20,"path":["libc","unix","FILE"],"kind":"enum"},"2:45562:32569":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"20:3137:5900":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:47451:10388":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:14611:8472":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"20:4292:6498":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:26547:281":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:40943:32071":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:44889:10147":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:40243:227":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:44836:10243":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"4:0:2798":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:11351:32888":{"crate_id":2,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"17:13837:8320":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:14113:8380":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:3830:115":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"16:3439:9145":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"6:4964:5902":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"18:481:7811":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:10665:132":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:9466:3087":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"6:4990:5906":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:10798:3023":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"17:15880:8809":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:9456:246":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:2666:694":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"20:5058:6968":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:9295:3079":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:13450:8257":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"20:4811:6956":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:47960:10430":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"5:297:3233":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:42599:184":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:16164:8903":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"18:515:7810":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:15638:8752":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:16473:8291":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"2:10660:122":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"16:5740:8009":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:8569:3000":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:46725:10304":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:2560:2655":{"crate_id":1,"path":["std","io"],"kind":"module"},"6:8243:11623":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:41199:2515":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"17:11756:21534":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"2:46576:10291":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"6:7990:11615":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:14049:10075":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"18:0:2808":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:12203:8123":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"5:6902:33301":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:13569:21504":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:12513:1884":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"20:4226:6476":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:47793:10400":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:11318:35031":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:23656:10124":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"1:935:9686":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:34803:17972":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:384:10437":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"16:6729:9303":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:11830:8056":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"6:7337:6956":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:15837:8797":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"6:4829:5890":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:41802:10018":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:13889:8331":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:8519:2967":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"20:4206:6475":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:1563:4491":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:9326:27259":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:8739:12638":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:6755:3089":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:9492:2975":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:11001:2962":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"18:706:7849":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:8263:10457":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"6:8304:11634":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"16:4842:9158":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:40051:17872":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:10679:7455":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"20:1635:4560":{"crate_id":20,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:7741:17904":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:14311:8426":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"5:6688:9702":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"6:7539:6965":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"16:4182:9151":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:544:9073":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"6:6679:11569":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"2:45019:10256":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"5:7841:9793":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:46696:10302":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"6:6523:6475":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:15495:8727":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"20:568:3736":{"crate_id":20,"path":["libc","unix","itimerval"],"kind":"struct"},"17:10976:35032":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"11:481:165":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:3351:3281":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"5:3084:34829":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"5:1407:9699":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:13113:10061":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:22775:2969":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:44776:10241":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:8221:2962":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"16:8102:9520":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:13013:8229":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"1:1118:9695":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:47830:10403":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"6:4984:5905":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:12497:1731":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:8492:3032":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"13:229:11312":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:10662:7866":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:12722:8195":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"5:7512:9827":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:14417:163":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"6:6390:6461":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:2740:18063":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:11832:10047":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:42770:10201":{"crate_id":2,"path":["core","range","iter","IterRangeFrom"],"kind":"struct"},"2:44676:10052":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:43193:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:8204:2960":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"5:979:12523":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:3853:7892":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"18:623:35042":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:45541:10273":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:46512:10285":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:42712:10199":{"crate_id":2,"path":["core","range","iter","IterRange"],"kind":"struct"},"2:8276:17958":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"5:3919:9793":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:32742:11324":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:11357:21511":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:42893:9700":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:3692:2656":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"6:5482:5886":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:46739:10305":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:14532:8152":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"16:0:2806":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:2405:7885":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:11578:8060":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:13780:8306":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"20:3308:5917":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:13384:8252":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"6:6893:11605":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:9782:130":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"2:10302:32969":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:41291:145":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:15076:8563":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:13668:122":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"6:6441:6466":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:47705:10394":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:12259:21605":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"17:15035:8558":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"9:345:20426":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:11951:8091":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:1649:9706":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"5:1479:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:41793:2659":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:14651:8477":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:16534:9009":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"5:7504:7375":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"6:4869:5892":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"6:6852:6497":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"20:563:3735":{"crate_id":20,"path":["libc","unix","sigval"],"kind":"struct"},"1:10952:10633":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"2:43045:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"16:906:7871":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"5:6502:18286":{"crate_id":5,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"1:12475:27269":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"20:4200:6474":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlattr"],"kind":"struct"},"16:2484:9096":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:12859:8212":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"6:5007:5908":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"5:1547:7375":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"18:598:35040":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:473:3724":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"6:5186:5923":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:41217:2963":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"2:3621:12538":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:11288:10598":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"5:1628:9792":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"6:8316:11638":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:10245:21490":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:6116:2985":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:47279:10353":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"20:3059:5892":{"crate_id":20,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"20:3065:5893":{"crate_id":20,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:3416:17793":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"2:22974:2969":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"5:2246:12491":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:12518:1456":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:42560:10031":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:8292:3018":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"20:4800:6955":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:40992:10147":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"6:5557:11458":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:13305:8248":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"16:8708:9595":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"6:1667:4500":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"11:2440:9793":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"6:6670:11563":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"1:11990:10462":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:3311:120":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"6:5539:5934":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:964:9701":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:10307:32920":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"15:0:2805":{"crate_id":15,"path":["addr2line"],"kind":"module"},"16:2770:9109":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:16202:8913":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:41263:10166":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"14:219:9681":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:2903:206":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"6:7424:6957":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"20:3257:5913":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:14298:8424":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"6:465:3723":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"6:5311:11377":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:8575:10569":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:9760:2961":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"1:6030:3078":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"6:5019:5909":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:9400:11750":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:891:3053":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"6:6744:11588":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"16:7302:9388":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:45312:11745":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:14071:8365":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"6:5282:11366":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:4163:7375":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"6:5450:11429":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"6:6631:11553":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:45284:11738":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"6:1643:4498":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"6:479:3725":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:23612:10120":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"2:45622:10280":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:8085:12513":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:4124:12593":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:9347:10609":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"16:2918:9116":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:3452:3023":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:40981:10146":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:13321:21502":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:41342:10000":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:3592:154":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"11:2519:11322":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"6:538:3732":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:45006:10255":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"11:1027:9695":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"5:2804:11648":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"16:4954:9162":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"20:1398:4490":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"20:3471:5934":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:47868:10411":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:8280:17957":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"5:7612:7375":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"11:1866:9702":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:15898:8813":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:8361:10523":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:16077:8887":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"11:1878:9705":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:5351:452":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"10:44:9715":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"6:4881:5894":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:12334:8141":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:6003:3077":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:12017:8097":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"2:2815:3275":{"crate_id":2,"path":["core","clone","CloneToUninit"],"kind":"trait"},"2:34630:17971":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:5658:11498":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"20:5455:5955":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:14844:8524":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"16:2858:9113":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:10533:8008":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"6:5139:5917":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:4914:5896":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"3:234:237":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:2801:3017":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"5:1597:9683":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"16:6638:9269":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"1:10976:11753":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"5:7495:9796":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"20:2982:5887":{"crate_id":20,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:4762:9988":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:11208:32886":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"1:8018:2969":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:558:12507":{"crate_id":1,"path":["std","thread","thread_name_string","ThreadNameString"],"kind":"struct"},"20:3174:5905":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:3356:3025":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:43713:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:8276:10521":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"6:5471:11444":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:22193:12662":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:12536:8180":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:2377:21561":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:41121:10154":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:34245:17967":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:47618:10391":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"16:7505:9418":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:10030:21484":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:3038:17906":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:11776:8076":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"2:41372:10007":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"16:6186:9198":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:9359:10611":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:15314:8599":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:40932:10141":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"5:7782:9839":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:47129:10347":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:2514:2955":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:9244:12649":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:9308:10603":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"5:6021:9702":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:42342:10025":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"16:6606:217":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"6:4921:5897":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"6:8237:5956":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:15023:8557":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:14831:8522":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:38893:17976":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"5:720:9784":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"11:2275:9424":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"17:11464:8048":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"20:4791:3608":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:41179:10162":{"crate_id":2,"path":["core","ffi","va_list","VaList"],"kind":"struct"},"1:2504:2950":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:13173:10065":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:8909:3055":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"5:7664:2938":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:4528:17792":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"6:7326:6955":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"5:3837:3018":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"11:321:11318":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"20:3127:5899":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"16:3585:9146":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"1:9148:210":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"16:6841:9313":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:23667:10125":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"1:12507:918":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"16:6711:9293":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:12896:8214":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:3918:10461":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:13509:17835":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"18:670:7843":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:43927:10208":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:14283:8419":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:23096:12740":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"2:44418:10223":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:8806:161":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:5412:1004":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:40971:10145":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:16019:8845":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:12491:1204":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"6:5623:11486":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"6:5230:5928":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:14626:8475":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:23499:10112":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:31578:207":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:14546:8464":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"5:996:3053":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:9232:10602":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"6:6610:5920":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:11172:35029":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"20:4937:6961":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:13546:8264":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"2:32877:3285":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:3394:12654":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:15682:8758":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"6:5357:11388":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"17:16378:8961":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"6:4896:5772":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:3607:2658":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:11591:7992":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"16:8025:9516":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"6:1489:4484":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:12190:8122":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"16:7551:21433":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:16341:8954":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"6:8284:11629":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"5:3786:33301":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:5295:11371":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:44461:10226":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"6:1514:4486":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"16:6792:9307":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"1:2019:12565":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"20:3389:5925":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:12506:936":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:11015:8028":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"18:507:7813":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:9428:3080":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"2:8853:32968":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"20:1479:4497":{"crate_id":20,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:3409:3027":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:14181:216":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:10608:237":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"1:10421:10624":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"1:11030:2964":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"2:44542:10060":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:31205:7325":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:6960:244":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:3309:276":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"6:8326:7311":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:3589:153":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:10441:21497":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:1862:719":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:41835:10021":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"11:2354:3053":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"6:6695:11575":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"6:5241:5929":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"16:155:9066":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"6:6459:6468":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"5:1516:3053":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"16:2964:9118":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"6:5375:6470":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:2222:17998":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"5:2152:9798":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"16:7518:9421":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"6:8266:5958":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:7001:11653":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"5:2256:9800":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:42971:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:4644:9987":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:16633:9028":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"17:13180:8238":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"17:14000:8351":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:8756:3048":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"16:5111:9166":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:7806:33061":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:10728:7868":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:2527:2957":{"crate_id":1,"path":["std","fs","exists"],"kind":"function"},"20:4968:6962":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"20:5467:5957":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"16:4692:9155":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:11871:10048":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"6:7344:3517":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"11:1136:9699":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"16:2898:9115":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"7:78:20405":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:10878:164":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:16619:9024":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"17:11231:21514":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:12535:10056":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"2:43232:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:43425:7453":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:1127:9699":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"6:5395:11397":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:40135:10134":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:5200:12634":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:994:9690":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:22370:12659":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"14:31:9673":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:32819:250":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:13397:3056":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:22165:33118":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:16311:8949":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"20:1410:4491":{"crate_id":20,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:44622:10237":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:47353:10355":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"17:13348:8250":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:6237:231":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"6:7494:6962":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"20:483:3725":{"crate_id":20,"path":["libc","unix","timeval"],"kind":"struct"},"2:45478:11747":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"1:5875:231":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"5:5405:17810":{"crate_id":5,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"17:11447:8045":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"16:6678:9289":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"2:45490:230":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:44329:10217":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:11168:27366":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"5:3073:7424":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"6:6578:11531":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:1877:10449":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"20:3461:5933":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:15:2909":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:45369:18088":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:8510:2964":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:9319:10606":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:12493:1918":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:14219:8390":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:16262:8934":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:10981:2958":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"16:4927:9161":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"11:1885:9706":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"16:5447:9177":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:564:3736":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"16:7575:10613":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"20:1504:4499":{"crate_id":20,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"20:3104:5896":{"crate_id":20,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"16:8623:9588":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"5:4314:2985":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:10675:217":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"1:10296:10191":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"17:11025:35030":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:8842:3051":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"6:1625:4496":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:4758:232":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:5321:10474":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:7751:30969":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:44871:10148":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:47220:10350":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:46981:10325":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:9451:10034":{"crate_id":2,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"1:9159:10597":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"6:4842:5891":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:45549:10275":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:10114:21486":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"16:6967:9123":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"6:6452:6467":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:22988:12749":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"2:3419:17794":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"1:11103:10599":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"6:5428:11413":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:11080:32887":{"crate_id":2,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"16:7997:9136":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:8034:10509":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:8697:10468":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:42910:207":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"6:5265:11355":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:6995:10008":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"11:663:9700":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:3404:9438":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"16:6939:9323":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"16:7966:9514":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:12011:10463":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:2465:9090":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"18:573:7813":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:6836:3084":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"16:8011:9137":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"20:1368:4487":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"5:7759:256":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:11879:11765":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"6:7407:4422":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"5:5551:17813":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:2867:212":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:11047:27261":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"6:8294:11633":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:14691:8481":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:42695:7438":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:15762:8780":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:14154:32802":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"20:5461:5956":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"18:635:7836":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"20:3092:5895":{"crate_id":20,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:14126:8384":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:23590:10118":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"14:159:9673":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:44548:10235":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:41363:10006":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"11:2533:11325":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:16705:9046":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"1:437:196":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"11:851:9692":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"16:8609:9141":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:2829:3276":{"crate_id":2,"path":["core","clone","InitializingSlice"],"kind":"struct"},"1:4176:12597":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:948:9702":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"6:1675:4501":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:5366:6469":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"16:6419:9075":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"12:0:2803":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:22152:33119":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:15135:8218":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"16:2878:9114":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"20:3226:5911":{"crate_id":20,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"20:549:3733":{"crate_id":20,"path":["libc","unix","winsize"],"kind":"struct"},"16:6694:9292":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"5:1378:9695":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"6:1569:4492":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:11817:8082":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:505:7875":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:9201:10601":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:40263:2931":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"5:3706:9700":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:1627:3053":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"5:7604:7375":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:0:2807":{"crate_id":17,"path":["object"],"kind":"module"},"2:22163:33110":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"20:1355:4485":{"crate_id":20,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:3551:127":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:40223:225":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:16302:8945":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"11:1001:9694":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:39472:17977":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:15120:8570":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:11420:8044":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:12775:8199":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:41351:10174":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:12279:8132":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:14916:8535":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:10563:116":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"16:4900:9160":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:44159:11735":{"crate_id":2,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"17:15285:8579":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:16152:8900":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:13265:21501":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"6:6428:6465":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:42885:3053":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"15:394:20527":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"17:12624:8185":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:12815:7893":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:46614:10297":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"16:7492:9414":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"11:1118:9698":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:31605:3295":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"11:686:9683":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"6:5575:5936":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:12975:8222":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:40484:17907":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:45483:162":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"16:2702:9106":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:3194:9850":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"20:4989:6963":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"16:6406:9230":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:12606:17822":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"17:15732:8775":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:7342:30337":{"crate_id":1,"path":["std","sys","backtrace","print","DisplayBacktrace"],"kind":"struct"},"17:15778:8784":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"6:1696:4504":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"16:5707:21423":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:15982:8837":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:15857:8804":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"14:186:20504":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"11:1579:9704":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"5:1881:9793":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:1095:9424":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"16:6820:21428":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"2:43654:7460":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"20:582:3738":{"crate_id":20,"path":["libc","unix","servent"],"kind":"struct"},"6:5568:5935":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:3313:30971":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"5:7747:9837":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"2:2682:17989":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"17:13732:8291":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:3564:3006":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:9172:10598":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"18:531:7817":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:12065:10055":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:8209:2961":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:10489:12645":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"18:698:7847":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:4948:12607":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:13932:8336":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:34976:9443":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:42616:9700":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:8882:3052":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:44855:10245":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:12797:21630":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:2779:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:13426:8255":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"1:6905:3091":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"2:42845:237":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:43156:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:14380:10086":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"17:12233:8127":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:12944:10058":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"17:13591:8268":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"16:4764:9156":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:11602:27363":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"2:1951:2427":{"crate_id":2,"path":["core","mem"],"kind":"module"},"1:8284:3016":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:12786:8200":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:23568:10116":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"17:15924:8823":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"16:5316:9173":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:1879:10450":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:42934:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"16:6873:9317":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"20:1472:4496":{"crate_id":20,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:1655:9707":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:45358:10270":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:4950:7465":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:12885:8213":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"17:15770:8782":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:16276:8936":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:6609:197":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:8325:176":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:6719:3081":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:11909:10049":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"20:4148:6454":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:6645:11555":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:22264:10088":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:38728:17973":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"5:282:33301":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:10447:7472":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"17:10140:21487":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:33348:9437":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:16249:8929":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:14374:8438":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"20:536:3731":{"crate_id":20,"path":["libc","unix","iovec"],"kind":"struct"},"17:13514:21503":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:8809:12528":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:13969:8342":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"18:548:164":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"20:3215:5910":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"20:5013:6965":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:3802:17873":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"16:7835:21434":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:8257:130":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"20:3451:5932":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:5692:116":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"20:3209:5909":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:14337:118":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"14:201:17843":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:3586:152":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:11123:35035":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"6:6513:6473":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:6749:11589":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"2:909:201":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"1:4346:12615":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:41434:10011":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:12081:8112":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"11:357:34986":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"5:1222:34718":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:14806:8519":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"20:4775:4418":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"5:4981:228":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:12940:8219":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"6:5025:5910":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:45599:10279":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:47726:10395":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:5814:3461":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:8057:8150":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:3673:31341":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"20:4266:6497":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:12370:8144":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:7833:30255":{"crate_id":1,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"17:15009:8556":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"16:6887:9122":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:2726:3015":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"5:883:9787":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"20:4919:6960":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:8539:3001":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:15159:8577":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:12515:1872":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:2231:9845":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"6:1530:4488":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:15430:8692":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:16125:8888":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:10166:21488":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"16:7165:9361":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"16:5346:9174":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:5290:10474":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:15474:8722":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"6:6756:11590":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"2:10609:2968":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:5130:17894":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:34312:17969":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:9765:27371":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"17:16752:9057":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"1:11873:11764":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:16661:9035":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"6:5319:11381":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:10777:8010":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"11:423:34998":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:4944:12604":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:12698:8193":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:12278:27353":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:15660:8756":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:15869:8805":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:4685:12619":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:9259:12648":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"11:1558:9703":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:11828:10642":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:1501:167":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:10596:7864":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"6:5405:11403":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:2089:209":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:4888:17884":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"5:2138:3018":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:45508:218":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:47784:10399":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:8652:10577":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"1:12519:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:8446:3231":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:8586:12575":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:10842:8016":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:1338:7880":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"16:5687:9179":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:42358:10027":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:46850:10318":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:8675:3517":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"6:6472:6454":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"16:2682:9105":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:11215:32883":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"6:7308:3608":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"20:3238:5912":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:15147:8573":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:14946:8538":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:47804:10401":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:8371:3019":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"20:3086:5772":{"crate_id":20,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"11:813:9687":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:316:7870":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"11:2126:9695":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"20:2995:5888":{"crate_id":20,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:23053:17988":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"17:12107:8115":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:16172:8906":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:14415:8442":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"16:7728:7439":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:977:9687":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"20:3147:5901":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"18:765:25694":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"16:6203:21425":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:45162:10264":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:11011:151":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"6:6543:11510":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"16:6096:9187":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:12761:8198":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:12951:8220":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:12391:8146":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:3316:260":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"17:15939:8827":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:8562:3004":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"18:96:25684":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"16:4402:9154":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:7188:12656":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:40958:10144":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"11:2507:11320":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"5:7568:7375":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"6:7580:6968":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"16:8206:9127":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:13208:149":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:23479:11657":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"16:3012:20564":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:4118:12594":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:42673:12516":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:41395:10176":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"16:4239:9152":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:12868:8257":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:46768:10314":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:4904:12629":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"16:2794:9110":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"6:5550:11456":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:523:3730":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"16:6901:9320":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"20:4039:6439":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"20:4818:3517":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:10860:150":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"2:4481:9984":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"11:2394:7375":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"1:4830:11219":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"2:8334:3232":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:15530:8728":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:14404:8441":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"11:2340:9711":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"2:23315:10091":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:43008:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"5:5280:3074":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:16180:8907":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:13982:8343":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"16:6656:9283":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:15946:8828":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:9142:10596":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"11:787:9793":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:12490:434":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"17:15620:8744":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"16:2818:9111":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:7405:27369":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2:906:12579":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"17:16574:8309":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"17:11162:8031":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"9:380:20412":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:3712:222":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:12919:8216":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:47647:10392":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"20:4162:6469":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlmsghdr"],"kind":"struct"},"17:11804:8081":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:2722:9107":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:40896:9983":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:14018:8352":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"20:3286:5915":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"5:3852:9798":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"8:0:2799":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:1109:9694":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:16763:9059":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"17:15974:8835":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:16356:8955":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:12037:10053":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:44518:10231":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:12492:490":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"16:7539:9423":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:2782:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"20:3276:5914":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:46629:10298":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:10838:8150":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"1:11822:10498":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"15:288:20516":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"6:5334:11385":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"1:9595:10452":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"18:718:7853":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"6:1684:4502":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:13192:8239":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"17:13156:8236":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"16:6438:21426":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:43269:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:12502:760":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"16:7383:9396":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"5:4480:33326":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:12686:8192":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:12710:8194":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"11:1652:34982":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:11677:8065":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:22662:10087":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"6:8225:5954":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:14030:8355":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"20:0:1029":{"crate_id":20,"path":["libc"],"kind":"module"},"17:11850:8084":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:43119:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:8827:3050":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:1638:9793":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:46497:10284":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:3064:174":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"6:5585:11463":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"18:589:7823":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:13452:7849":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:8039:10511":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:23082:2969":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"6:6500:6471":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"20:501:3728":{"crate_id":20,"path":["libc","unix","rusage"],"kind":"struct"},"17:15063:8562":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:4168:12596":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"16:3139:7903":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:6443:10488":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:7904:7877":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:4841:7463":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"11:2540:2937":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:8730:10580":{"crate_id":1,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"2:45610:9713":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"16:2413:20536":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"16:8134:9138":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:22244:2969":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:14639:8476":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"20:557:3734":{"crate_id":20,"path":["libc","unix","linger"],"kind":"struct"},"1:11299:2713":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"16:6109:9192":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:13463:17826":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:5110:12626":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:22635:2969":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"2:47773:10398":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"5:1393:9694":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:2486:2944":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"6:5179:5922":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:6395:10085":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:44558:3003":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:47747:10396":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:10927:8027":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"16:6736:35027":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"6:5341:11386":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"2:3785:267":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"6:8175:6966":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"5:5506:33301":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"5:4354:3053":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:12215:8125":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"16:5083:9165":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"20:527:3730":{"crate_id":20,"path":["libc","unix","hostent"],"kind":"struct"},"17:16611:9023":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"1:11758:3049":{"crate_id":1,"path":["std","sys","thread_local","native","eager","State"],"kind":"enum"},"1:3083:149":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"5:879:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:11308:8034":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"16:5253:9171":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:12094:8114":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"20:4182:6472":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:31167:7324":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"6:5420:11408":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"6:8278:11628":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"11:649:3053":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"16:2618:9102":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:45316:11746":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:12408:21606":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:12248:8131":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"6:4970:5903":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"5:7735:9836":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:44531:10234":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"6:5288:11369":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"9:470:20410":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"16:6995:9325":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"20:3320:5918":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:14066:10078":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"2:4897:7464":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:3664:2968":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:22150:33113":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:12459:30967":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:6319:27354":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"6:5640:11489":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"20:5433:7309":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"20:3032:5891":{"crate_id":20,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"16:6121:9125":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:46664:10300":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:5119:12627":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"6:8007:7310":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:22252:12661":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"18:643:7813":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:23129:12739":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"1:8019:10439":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:23000:32535":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"2:41015:17900":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"5:7094:17860":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"17:13490:8259":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:41333:10173":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"5:4284:2985":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:922:9685":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:41250:3001":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:4226:12600":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:3081:237":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"6:5604:11477":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"6:5069:5912":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:4805:5888":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:11565:8058":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:8581:10571":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:44450:10163":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"16:5280:9172":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:3037:2969":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:11834:10502":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:34178:17968":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:13756:8305":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"18:680:7844":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"16:3306:9087":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:3569:17788":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"1:11862:10505":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:3424:17795":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"1:3358:3026":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:45583:191":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"16:6747:9080":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:44722:10239":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"16:6850:9314":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:12495:1348":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:16012:8843":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:11787:8078":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"6:5051:11351":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"11:1083:9697":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:12121:8116":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"6:5521:5931":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"16:7904:9501":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"16:8720:149":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"16:7916:9502":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:12175:8120":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"6:8272:5959":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:40148:224":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:12568:10057":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"20:521:3729":{"crate_id":20,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:1711:4506":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:47034:10328":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:646:12508":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:4907:12619":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"16:2528:9098":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"16:7804:35028":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"16:2948:9117":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"6:559:3735":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"5:7084:17859":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"20:3355:5921":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Chdr"],"kind":"struct"},"2:8089:3069":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:10695:7867":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"16:6026:9121":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:14707:8486":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"20:4066:6461":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"16:8633:21438":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:485:3726":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:12510:911":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:12162:8119":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:23209:10089":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:30937:12578":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"5:1117:33301":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:4997:5907":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:40131:12537":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"1:2092:208":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:41593:10014":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"16:901:7870":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"16:8040:35018":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"6:1507:11342":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:586:3739":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:12508:924":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"16:3887:7908":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:44481:10228":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"16:3108:9142":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"6:5271:11358":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:5205:5925":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:8632:12618":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:44590:10050":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"6:6360:6439":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:45292:11740":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:321:7871":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:7635:7381":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:4354:12616":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"5:1777:33301":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"6:578:3738":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"20:4904:6958":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:6040:9124":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:41224:10163":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:4338:12614":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"11:123:11314":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:7390:4419":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"20:1436:4494":{"crate_id":20,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:32908:117":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"6:5387:11392":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"18:608:7829":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:43966:10215":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"16:7156:9360":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:14901:8531":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:47845:10404":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"16:8317:21437":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"9:49:20429":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"16:8500:9574":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:46888:10320":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"6:5381:6474":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:5640:10476":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"17:15105:8566":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"16:8525:9577":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"6:5412:1275":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"5:1608:9684":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"6:497:3728":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:47898:10413":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"5:5814:17858":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"11:1892:9707":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:23039:12750":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:12292:8134":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:14519:8459":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"6:1632:4497":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"6:6727:11580":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"2:23623:10121":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"17:11431:21513":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"6:4792:5887":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:13634:8272":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"6:5630:5933":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:11071:10479":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"2:47374:10356":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"20:1522:4501":{"crate_id":20,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:491:3727":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:1938:10453":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"9:0:2800":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"20:4177:6471":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"6:5325:11382":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"5:4194:9700":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:12511:1896":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:8029:3032":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:22139:33116":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"1:5882:10480":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:44846:10244":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:41808:3033":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:8214:2958":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"16:8562:9582":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"16:2838:9112":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:11848:10503":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:4063:9702":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:43683:9551":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:42704:10037":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"6:6602:5921":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"16:4871:9159":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:22360:2969":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:47002:10326":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:47079:10345":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:11705:8068":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:5025:12603":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:3790:158":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:22121:3295":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:41817:10181":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:3067:156":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:3775:17978":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:13069:8031":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"5:3442:9793":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"5:7857:9841":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:42624:7375":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"20:4074:6462":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:16029:8850":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"20:138:3413":{"crate_id":20,"path":["libc","unix","fpos_t"],"kind":"enum"},"6:5249:11353":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"16:2658:9104":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:14572:8467":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:41132:18034":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:6366:9069":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:44694:10053":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"6:7984:7309":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:6878:6498":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:14974:8544":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"6:5512:11455":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"2:44491:10229":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:5370:3035":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"17:15805:8788":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"20:614:3757":{"crate_id":20,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:8627:11748":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:46681:10301":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:4405:2985":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"1:6075:3088":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"5:6105:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:10992:10616":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"2:9488:10035":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:23678:10126":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"2:3533:17796":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"5:5555:17814":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"6:0:1029":{"crate_id":6,"path":["libc"],"kind":"module"},"17:16138:8894":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:44172:11736":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"16:2988:9119":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"5:212:9782":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"16:6062:9126":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:43699:32083":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"6:5255:5930":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:10417:21496":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:11877:8031":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"11:1871:9793":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"6:1690:4503":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"11:983:9424":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"5:774:263":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:41000:9983":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"20:5411:3683":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:32820:257":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"16:8148:9139":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:10802:3003":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"16:6950:9324":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:10121:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"6:517:3729":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"16:5222:9170":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"11:1042:20491":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"11:2297:9694":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"2:31220:7460":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"6:5617:11483":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"2:47191:10349":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:23393:10098":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"6:1727:4507":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"11:2206:8102":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"17:13054:8056":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"2:43671:11734":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:11429:11760":{"crate_id":1,"path":["std","sys","exit_guard","PThread"],"kind":"struct"},"17:14737:8505":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"20:1350:4484":{"crate_id":20,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:4265:9153":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:47019:10327":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:10563:7862":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"0:73:2424":{"crate_id":0,"path":["num_cpus","get_physical"],"kind":"function"},"6:5107:5914":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:12504:779":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"16:6387:9223":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:904:9700":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:1000:9692":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:8268:10520":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"6:7562:6967":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:41272:10167":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"6:7284:3650":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:12569:8183":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:41054:10150":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:5889:10481":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:41159:3003":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"6:6486:11509":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:5151:5918":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"20:4171:6470":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlmsgerr"],"kind":"struct"},"2:42402:11724":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"5:7233:33335":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:9380:27260":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:2026:810":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"2:44977:10247":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"16:6586:9264":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"2:11789:3004":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:7740:17903":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"1:12086:10506":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"6:6792:11603":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:2225:2944":{"crate_id":2,"path":["core","ptr","metadata","metadata"],"kind":"function"},"1:591:12497":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:10627:155":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:15966:8834":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:7821:30256":{"crate_id":1,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"17:15912:8820":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:2334:2940":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"16:8063:21435":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:12516:993":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"10:36:11327":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"17:12839:8207":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:45141:17842":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:12346:8142":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:13118:8234":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"2:42664:7440":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:4574:10467":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:7072:21430":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:45280:11737":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"17:16678:9037":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"16:8162:9129":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:2419:9849":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:44794:10242":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"20:1514:4500":{"crate_id":20,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:16789:9063":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"2:47573:10390":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:8671:10579":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"16:6082:9182":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"5:1587:9701":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:10331:21493":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:45334:134":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:3719:7891":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"14:213:9679":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"16:4808:9157":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"5:4544:2985":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"2:3061:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:16592:8319":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"2:47324:10354":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"2:10921:12569":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"16:2588:9101":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"5:0:323":{"crate_id":5,"path":["alloc"],"kind":"module"},"6:5462:11438":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"20:5040:6967":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:10937:35034":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"5:1206:33265":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:12148:8118":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:7809:30254":{"crate_id":1,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"17:14871:8526":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:9313:118":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"20:1377:4488":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"13:110:35000":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:10671:7452":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:46544:10289":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:23601:10119":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"17:10367:21494":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:12961:21631":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:14962:8542":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:2762:3007":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"11:820:12521":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"20:1386:4489":{"crate_id":20,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"11:676:7375":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"6:6651:11558":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"20:4881:4422":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:47819:10402":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:41103:10153":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"16:8055:9518":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:5367:215":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:42825:223":{"crate_id":2,"path":["core","range","RangeFrom"],"kind":"struct"},"17:10486:21498":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"20:469:3723":{"crate_id":20,"path":["libc","unix","group"],"kind":"struct"},"2:41169:10156":{"crate_id":2,"path":["core","ffi","va_list","VaListImpl"],"kind":"struct"},"1:679:10441":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:14996:8555":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:6306:9999":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"11:427:34994":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:12509:930":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:23124:12741":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"1:5817:12643":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"16:8264:9532":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:41569:3002":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:15652:8755":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:12079:30185":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"2:23368:10097":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"18:689:7846":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"11:344:34990":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"5:7695:9831":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:14392:8439":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:41786:10017":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:11566:251":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"5:3326:9705":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:15990:8838":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:44408:10222":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:11063:10518":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"5:5125:2985":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"20:2976:5886":{"crate_id":20,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:2332:150":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:3389:12652":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:4919:3113":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:41319:10170":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:3319:27625":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"20:3296:5916":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:23437:32070":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:43919:10206":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:8620:10464":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"5:39:12539":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:44572:3004":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:15548:8733":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"5:2285:11640":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"20:3348:5920":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Chdr"],"kind":"struct"},"16:8093:9519":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:16230:8928":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:12748:8197":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:41088:10151":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:7959:27372":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"6:5044:11349":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:13397:8254":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"5:1531:9700":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:32802:7463":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"1:8638:10575":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"16:7880:9234":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:14151:8388":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:23645:10123":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"17:14885:8529":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"9:168:20478":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:11732:21533":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"6:1703:4505":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:5217:5926":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:16320:8951":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"6:6737:11587":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"9:490:9769":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:13289:7967":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:9601:10036":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:12905:8215":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:15409:8682":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"20:3006:5889":{"crate_id":20,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:13908:8332":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:11553:2969":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:14437:8449":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"16:4981:9163":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:12134:8117":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"5:3297:34702":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:45193:10071":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:11039:27255":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"3:0:524":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"20:574:3737":{"crate_id":20,"path":["libc","unix","tms"],"kind":"struct"},"2:42780:221":{"crate_id":2,"path":["core","range","Range"],"kind":"struct"},"6:4947:5900":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:5002:10470":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"11:389:34984":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"16:7935:9510":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:11064:8029":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:41827:10019":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"16:7413:9399":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:8501:189":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:16486:8305":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"6:6422:6464":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:4419:10465":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"6:5349:11387":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"16:6267:9207":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"6:6505:6472":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:10669:7451":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"20:4767:3650":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"11:1063:34993":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:32784:10129":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:44398:10221":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:9423:198":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:12093:10506":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:5318:33056":{"crate_id":2,"path":["core","ffi","va_list","sealed_trait","VaArgSafe"],"kind":"trait"},"5:3285:3053":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:698:10444":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:4505:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"5:3352:9708":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"6:7317:11611":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:22372:10088":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"16:7713:35026":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:32818:248":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"16:2504:9097":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"16:7355:9130":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"20:1531:4502":{"crate_id":20,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:4767:9989":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:3048:10459":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"20:4190:6473":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:11690:8066":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:44380:10218":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:12007:7948":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:3321:3279":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"5:3693:3053":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:11605:8031":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:23452:32066":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:44740:10240":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"5:2338:34820":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:2436:7888":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:47258:10352":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:11275:10597":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:6833:3083":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"20:1490:4498":{"crate_id":20,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:471:7873":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:16364:8958":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"16:7209:9373":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"16:7459:9410":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"20:4104:6465":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"16:8220:9524":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:2680:17988":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"2:23689:10127":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"1:4832:11221":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"5:1619:221":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:13168:8237":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"6:5088:5913":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"16:5196:9169":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:5660:10477":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:11950:10461":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"11:1862:7375":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:533:12491":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:44880:9983":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"5:6158:18278":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:23330:11654":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:14482:8455":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:45288:11739":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:8120:10518":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:22640:12664":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"17:14326:8428":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"5:3331:34703":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:1990:10454":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:12023:10052":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"20:3334:5919":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:12443:10646":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"11:2525:34989":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:43721:7460":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"5:6536:12752":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"18:754:7861":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:12055:8109":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:13718:8290":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"16:6157:9193":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"16:6835:9312":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:615:10440":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:2502:2949":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:10792:8014":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"16:5058:9164":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"11:1858:3053":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:10672:10596":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"16:5170:9168":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:22129:33116":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"17:13817:8319":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"5:2163:9799":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"6:532:3731":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"6:6416:6463":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:4:1288":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:378:10435":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"6:7430:6958":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:2568:9100":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:22868:12744":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"2:22175:33120":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"1:0:1757":{"crate_id":1,"path":["std"],"kind":"module"},"2:46920:10322":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:5676:10478":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:3815:32447":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:16775:9062":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"6:6769:11597":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:42580:205":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:11513:9766":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"17:11538:8056":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"6:7367:4447":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:41147:10155":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:8099:12514":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:5415:9176":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:15049:8559":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:43404:7451":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"16:6171:9196":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:32809:10131":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"20:4117:6466":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:1634:9702":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:6221:10480":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:14357:8435":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:969:9683":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:11113:8030":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:45090:10070":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"20:3166:5904":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:12647:8186":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:42608:3053":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:14858:8525":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:2337:2941":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:8105:12555":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"20:3160:5903":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:10548:8009":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:13944:8339":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:12224:8126":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"2:45296:11741":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:14795:8517":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:6193:9997":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"5:4149:33301":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:4367:12617":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:7503:27238":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:11447:10641":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"1:3575:2985":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"11:2374:9700":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"17:2226:7881":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:6806:10001":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"20:4841:4447":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:11474:21514":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"17:13957:8341":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:47146:10348":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"5:7584:9830":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:13443:10036":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:3580:3228":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:9367:10613":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:9436:2985":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"6:6617:11542":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"5:7679:9823":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:8892:3053":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:5996:3076":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:34457:17970":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:5483:214":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:46821:10317":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"20:3489:5936":{"crate_id":20,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:43944:168":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:41241:10165":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"6:4890:2666":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"5:783:121":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:12065:8110":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:3316:27621":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"11:2513:11321":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:32788:9482":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"9:226:3049":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:3796:17874":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"16:6142:21424":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"16:6911:9321":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:11927:27228":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:23002:17988":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"1:12517:1958":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"6:8249:11624":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:14334:8430":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:4707:12620":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"16:8595:9586":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:40087:17797":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"2:43411:7450":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"5:4119:9702":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"20:3019:5890":{"crate_id":20,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:6710:11577":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"6:7553:11612":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:45152:10260":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:13853:8324":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"9:412:20413":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:14585:8468":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"16:7347:9394":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"16:7956:9513":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:16499:8979":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"1:983:12521":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:22:842":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:44864:10067":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:3074:270":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:41420:7834":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"14:7:9673":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:16809:8341":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"17:14139:8385":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"5:7258:33339":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:40203:226":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:42520:10464":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"16:7398:35019":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:14360:10085":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1:5626:10475":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:10393:21495":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:43644:11725":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:3411:3028":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"6:6719:11579":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"1:695:10442":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:9354:10610":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"20:1361:4486":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:5036:11344":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:11863:8085":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:2654:2657":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:1494:4485":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"16:7013:9332":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:914:7375":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"6:5488:11449":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"5:2573:11645":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:42508:10194":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:1660:9708":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:13691:8282":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"6:8260:5957":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:41444:10177":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"}},"external_crates":{"20":{"name":"libc","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":32}