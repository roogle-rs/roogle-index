{"root":"0:0:1932","crate_version":"1.16.0","includes_private":false,"index":{"5:5520:32178":{"id":"5:5520:32178","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2612","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2612","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12608:25889":{"id":"2:12608:25889","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39604:24651","Self::is_ascii":"2:12607:24504"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41655:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39604:24651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12570:31508":{"id":"2:12570:31508","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12189:17170","`DoubleEndedIterator`":"2:7571:126","prim@char":"1:12009:453","str::rmatch_indices":"2:12573:31509"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43767:10080","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:9906","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12583:31513":{"id":"2:12583:31513","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5519":{"id":"5:5519","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5520:32178","5:5521:6700","5:5524:32179","5:5527:32180","5:5535:32181","5:5536:32182","5:5537:2416","5:5538:24503","5:5539:24502"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12567:31507":{"id":"2:12567:31507","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12189:17170","`DoubleEndedIterator`":"2:7571:126","prim@char":"1:12009:453","str::matches":"2:12564:2298"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43839:10083","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:9906","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12194:9906","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12209:17168","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12593:24744":{"id":"2:12593:24744","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12009:453","self::pattern":"2:12189:17170"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41655:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:9906","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12194:9906","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12209:17168","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12517:2071":{"id":"2:12517:2071","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43871:2387","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5539:24502":{"id":"5:5539:24502","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12611:24500"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5524:32179":{"id":"5:5524:32179","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7490:251"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:9906","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12513:10095":{"id":"2:12513:10095","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12009:453"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43593:10076","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12552:24735":{"id":"2:12552:24735","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12009:453","self::pattern":"2:12189:17170","str::rsplitn":"2:12555:24737"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43721:9918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:9906","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12509:31503":{"id":"2:12509:31503","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12015:1510","crate::ops::IndexMut":"2:3077:11897","str::slice_unchecked":"2:12508:31502"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12546:31505":{"id":"2:12546:31505","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12189:17170","str::split":"2:12537:2074","prim@char":"1:12009:453","`DoubleEndedIterator`":"2:7571:126","str::rsplit_terminator":"2:12549:31506"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43667:10078","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:9906","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12580:31511":{"id":"2:12580:31511","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12487":{"id":"2:12487","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12488:875","2:12489:2155","2:12490:31498","2:12491:31499","2:12493:31500","2:12496:24479","2:12497:31501","2:12498:345","2:12499:344","2:12500:1793","2:12502:24697","2:12504:24698","2:12506:24699","2:12508:31502","2:12509:31503","2:12510:24722","2:12511:24723","2:12512:9934","2:12513:10095","2:12514:6743","2:12515:29720","2:12516:29749","2:12517:2071","2:12518:31504","2:12519:29736","2:12520:24741","2:12523:24742","2:12526:24743","2:12529:2139","2:12533:6752","2:12537:2074","2:12540:24731","2:12543:24733","2:12546:31505","2:12549:31506","2:12552:24735","2:12555:24737","2:12558:24739","2:12561:24740","2:12564:2298","2:12567:31507","2:12570:31508","2:12573:31509","2:12576:2078","2:12578:31510","2:12580:31511","2:12582:31512","2:12583:31513","2:12584:31514","2:12587:31515","2:12590:2120","2:12593:24744","2:12596:31516","2:12599:31517","2:12602:31518","2:12605:1925","2:12607:24504","2:12608:25889","2:12609:24505","2:12610:24501","2:12611:24500","2:12612:31519","2:12614:11873","2:12615:31520"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12526:24743":{"id":"2:12526:24743","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12009:453","self::pattern":"2:12189:17170"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:9906","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12194:9906","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12209:17168","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12516:29749":{"id":"2:12516:29749","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12515:29720"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43900:10086","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12512:9934":{"id":"2:12512:9934","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12009:453"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43587:9926","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12514:6743":{"id":"2:12514:6743","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43603:2390","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12499:344":{"id":"2:12499:344","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12026:1616"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12504:24698":{"id":"2:12504:24698","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10279:247","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10279:247","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12497:31501":{"id":"2:12497:31501","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12529:2139":{"id":"2:12529:2139","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41657:199","prim@char":"1:12009:453","self::pattern":"2:12189:17170"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41655:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:9906","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12537:2074":{"id":"2:12537:2074","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12189:17170","`DoubleEndedIterator`":"2:7571:126","prim@char":"1:12009:453","str::split_whitespace":"2:12515:29720","str::rsplit":"2:12543:24733"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43617:2391","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:9906","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5527:32180":{"id":"5:5527:32180","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7490:251"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12491:31499":{"id":"2:12491:31499","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5538:24503":{"id":"5:5538:24503","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12610:24501"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12510:24722":{"id":"2:12510:24722","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12511:24723"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12590:2120":{"id":"2:12590:2120","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12009:453","self::pattern":"2:12189:17170"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41655:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:9906","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5535:32181":{"id":"5:5535:32181","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7490:251"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12511:24723":{"id":"2:12511:24723","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12510:24722"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12611:24500":{"id":"2:12611:24500","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12498:345":{"id":"2:12498:345","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12499:344","`u8`":"1:12026:1616"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12543:24733":{"id":"2:12543:24733","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12189:17170","`DoubleEndedIterator`":"2:7571:126","prim@char":"1:12009:453","str::split":"2:12537:2074"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43635:9916","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:9906","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12194:9906","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12209:17168","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12607:24504":{"id":"2:12607:24504","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12584:31514":{"id":"2:12584:31514","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12009:453","self::pattern":"2:12189:17170"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:9906","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12194:9906","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12214:17167","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12523:24742":{"id":"2:12523:24742","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12009:453","self::pattern":"2:12189:17170"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:9906","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12599:31517":{"id":"2:12599:31517","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12009:453","self::pattern":"2:12189:17170"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:9906","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12612:31519":{"id":"2:12612:31519","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4573:31519"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43916:9996","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5537:2416":{"id":"5:5537:2416","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7490:251"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12558:24739":{"id":"2:12558:24739","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41655:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:9906","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12506:24699":{"id":"2:12506:24699","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10279:247","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10279:247","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12508:31502":{"id":"2:12508:31502","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12015:1510","str::slice_mut_unchecked":"2:12509:31503","crate::ops::Index":"2:3073:11896"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1932":{"id":"0:0:1932","crate_id":0,"name":"num_cpus","span":{"filename":"src/lib.rs","begin":[1,0],"end":[485,1]},"visibility":"public","docs":"A crate with utilities to determine the number of CPUs available on the\ncurrent system.\n\nSometimes the CPU will exaggerate the number of CPUs it contains, because it can use\n[processor tricks] to deliver increased performance when there are more threads. This \ncrate provides methods to get both the logical and physical numbers of cores.\n\nThis information can be used as a guide to how many tasks can be run in parallel.\nThere are many properties of the system architecture that will affect parallelism,\nfor example memory access speeds (for all the caches and RAM) and the physical\narchitecture of the processor, so the number of CPUs should be used as a rough guide\nonly.\n\n\n## Examples\n\nFetch the number of logical CPUs.\n\n```\nlet cpus = num_cpus::get();\n```\n\nSee [`rayon::Threadpool`] for an example of where the number of CPUs could be\nused when setting up parallel jobs (Where the threadpool example uses a fixed\nnumber 8, it could use the number of CPUs).\n\n[processor tricks]: https://en.wikipedia.org/wiki/Simultaneous_multithreading\n[`rayon::ThreadPool`]: https://docs.rs/rayon/1.*/rayon/struct.ThreadPool.html","links":{},"attrs":["#![deny(missing_docs)]","#![allow(non_snake_case)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:72:1793","0:73:1811"],"is_stripped":false}}},"2:12610:24501":{"id":"2:12610:24501","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12488:875":{"id":"2:12488:875","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12009:453"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12490:31498":{"id":"2:12490:31498","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12573:31509":{"id":"2:12573:31509","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12189:17170","`DoubleEndedIterator`":"2:7571:126","prim@char":"1:12009:453","str::match_indices":"2:12570:31508"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43785:10081","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:9906","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12194:9906","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12209:17168","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12587:31515":{"id":"2:12587:31515","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12009:453","self::pattern":"2:12189:17170"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:9906","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12596:31516":{"id":"2:12596:31516","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12009:453","self::pattern":"2:12189:17170"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:9906","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12194:9906","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12209:17168","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:72:1793":{"id":"0:72:1793","crate_id":0,"name":"get","span":{"filename":"src/lib.rs","begin":[73,0],"end":[75,1]},"visibility":"public","docs":"Returns the number of available CPUs of the current system.\n\nThis function will get the number of logical cores. Sometimes this is different from the number\nof physical cores (See [Simultaneous multithreading on Wikipedia][smt]).\n\nThis will always return at least `1`.\n\n# Examples\n\n```\nlet cpus = num_cpus::get();\nif cpus > 1 {\n    println!(\"We are on a multicore system with {} CPUs\", cpus);\n} else {\n    println!(\"We are on a single core system\");\n}\n```\n\n# Note\n\nThis will check [sched affinity] on Linux, showing a lower number of CPUs if the current\nthread does not have access to all the computer's CPUs.\n\nThis will also check [cgroups], frequently used in containers to constrain CPU usage.\n\n[smt]: https://en.wikipedia.org/wiki/Simultaneous_multithreading\n[sched affinity]: http://www.gnu.org/software/libc/manual/html_node/CPU-Affinity.html\n[cgroups]: https://www.kernel.org/doc/Documentation/cgroup-v1/cgroups.txt","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12564:2298":{"id":"2:12564:2298","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12189:17170","`DoubleEndedIterator`":"2:7571:126","prim@char":"1:12009:453","str::rmatches":"2:12567:31507"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43821:10082","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:9906","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12576:2078":{"id":"2:12576:2078","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12520:24741":{"id":"2:12520:24741","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12009:453","self::pattern":"2:12189:17170"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:9906","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5521:6700":{"id":"5:5521:6700","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7490:251"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:9906","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12519:29736":{"id":"2:12519:29736","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43909:9933","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12614:11873":{"id":"2:12614:11873","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4574:11873"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43925:9856","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12549:31506":{"id":"2:12549:31506","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12189:17170","str::split":"2:12537:2074","prim@char":"1:12009:453","str::split_terminator":"2:12546:31505"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43685:10079","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:9906","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12194:9906","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12209:17168","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5536:32182":{"id":"5:5536:32182","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2612","`String`":"5:7490:251"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2612","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12518:31504":{"id":"2:12518:31504","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43881:10084","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12540:24731":{"id":"2:12540:24731","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12009:453","self::pattern":"2:12189:17170"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12005:9913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:9906","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12502:24697":{"id":"2:12502:24697","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41657:199"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41655:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10279:247","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10279:247","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12496:24479":{"id":"2:12496:24479","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11749:17171"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12500:1793":{"id":"2:12500:1793","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41657:199"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41655:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10279:247","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10279:247","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12493:31500":{"id":"2:12493:31500","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12491:31499"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12533:6752":{"id":"2:12533:6752","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41657:199","prim@char":"1:12009:453","self::pattern":"2:12189:17170"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41655:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:9906","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12194:9906","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12209:17168","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12602:31518":{"id":"2:12602:31518","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12009:453","self::pattern":"2:12189:17170"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:9906","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12194:9906","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12209:17168","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12582:31512":{"id":"2:12582:31512","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73:1811":{"id":"0:73:1811","crate_id":0,"name":"get_physical","span":{"filename":"src/lib.rs","begin":[108,0],"end":[110,1]},"visibility":"public","docs":"Returns the number of physical cores of the current system.\n\nThis will always return at least `1`.\n\n# Note\n\nPhysical count is supported only on Linux, mac OS and Windows platforms.\nOn other platforms, or if the physical count fails on supported platforms,\nthis function returns the same as [`get()`], which is the number of logical\nCPUS.\n\n# Examples\n\n```\nlet logical_cpus = num_cpus::get();\nlet physical_cpus = num_cpus::get_physical();\nif logical_cpus > physical_cpus {\n    println!(\"We have simultaneous multithreading with about {:.2} \\\n              logical cores to 1 physical core.\", \n              (logical_cpus as f64) / (physical_cpus as f64));\n} else if logical_cpus == physical_cpus {\n    println!(\"Either we don't have simultaneous multithreading, or our \\\n              system doesn't support getting the number of physical CPUs.\");\n} else {\n    println!(\"We have less logical CPUs than physical CPUs, maybe we only have access to \\\n              some of the CPUs on our system.\");\n}\n```\n\n[`get()`]: fn.get.html","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12578:31510":{"id":"2:12578:31510","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12605:1925":{"id":"2:12605:1925","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12150:132","`FromStr`":"2:12149:2443"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41800:234","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12149:2443","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12149:2443","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12555:24737":{"id":"2:12555:24737","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12009:453","str::splitn":"2:12552:24735","self::pattern":"2:12189:17170"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43739:9919","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:9906","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12194:9906","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12209:17168","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12515:29720":{"id":"2:12515:29720","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12516:29749"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43891:10085","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12609:24505":{"id":"2:12609:24505","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12489:2155":{"id":"2:12489:2155","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12561:24740":{"id":"2:12561:24740","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41655:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:9906","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12194:9906","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12209:17168","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12615:31520":{"id":"2:12615:31520","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4571:31520"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43934:9995","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"5:1259:9332":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"20:3071:5272":{"crate_id":20,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:41868:203":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:5948:7783":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:11284:10291":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:8169:2388":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"6:4647:5291":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:638:10247":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:44364:11546":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:11270:9923":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"18:660:7892":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:8713:20322":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:11453:10264":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"5:4849:225":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"16:2321:9004":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:9994:7753":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:3350:2419":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"20:1386:3866":{"crate_id":20,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"20:4974:6340":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:47930:10223":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:548:3109":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"20:1398:3867":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:13676:8746":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"6:5104:11320":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:43891:10085":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:12043:8344":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:6334:183":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"5:687:115":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:30327:6707":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:44216:10105":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"16:6545:9243":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:727:152":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:10366:8118":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:8952:10391":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"6:542:3108":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:44181:10100":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:2216:2330":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:43739:9919":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"6:4473:5274":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"16:6456:9231":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:40481:7889":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"20:1514:3877":{"crate_id":20,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"5:3240:9616":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:9574:33106":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"16:6600:20267":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"11:298:11172":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:42049:85":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"14:187:19343":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:11244:8271":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:39356:224":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:21791:12012":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:43167:11538":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"18:614:33108":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:123:2790":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:8794:20324":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"5:4428:7711":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"6:1703:3881":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:1561:6756":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"6:4800:5307":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:44590:10114":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"6:7633:5335":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:45926:10134":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"6:5891:5842":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:4578:5287":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:8978:20330":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:10519:9913":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"16:7694:9054":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"6:501:3104":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"18:96:24287":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:7111:29533":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:9372:8051":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"11:817:9610":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:11367:8251":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:8594:20310":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:9143:10404":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"2:42920:10048":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"16:6721:20268":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"5:1525:9694":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:13739:8757":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"20:5046:6345":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"20:542:3109":{"crate_id":20,"path":["libc","unix","pollfd"],"kind":"struct"},"1:5548:11990":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:1924:11926":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:1842:10259":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:9886:8075":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"6:4860:11231":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"20:3363:5300":{"crate_id":20,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"16:4921:9086":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"6:62:2713":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:12834:212":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"16:2864:9033":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:41783:6817":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:10631:9916":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:1546:3866":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"20:4797:2985":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:1537:3865":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:9998:8040":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"6:4566:5286":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"5:2172:11445":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:46010:10137":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"16:7677:218":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:8895:20327":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"16:7828:9442":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:21004:30357":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"6:4814:5308":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:12208:8370":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"20:3257:5291":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:4506:5278":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"6:6159:11405":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:4883:11974":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:43603:2390":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:10718:10418":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"17:10949:8208":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"11:1635:7681":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:22325:9957":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:5028:10275":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:2892:17290":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:9084:82":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"5:7331:6756":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:43433:10064":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"5:1505:9593":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:39268:218":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"6:5941:5832":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:558:10245":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:897:7704":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:853:9609":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:4677:11976":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"18:624:33110":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:21575:9946":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:11155:11548":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"2:43617:2391":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"1:5723:2462":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:261:7925":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"5:5328:7687":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"20:3414:5306":{"crate_id":20,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:14434:8951":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:14335:8927":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:10126:8097":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"1:1076:9608":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"6:7388:6688":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"6:6718:2894":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"11:423:33070":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:11473:8017":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"16:4719:9079":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:1826:186":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"16:6879:9301":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:44052:10096":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:14355:8930":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"6:4488:5276":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:6047:11367":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"20:4910:6336":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:2178:7939":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"20:536:3108":{"crate_id":20,"path":["libc","unix","iovec"],"kind":"struct"},"2:3244:262":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"5:7223:7284":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:11793:7807":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:3010:122":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"16:2744:9028":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:8845:6756":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:8837:10389":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"16:5049:9090":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:9912:8076":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:45785:10128":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"16:5982:9144":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"16:149:7671":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:10561:8145":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"6:5992:5853":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:8167:9496":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:12260:17176":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"20:3408:5305":{"crate_id":20,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"5:7286:6756":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"18:507:7869":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:12034:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:6443:2472":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:10924:7547":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"17:10197:8105":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"5:4236:2439":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:918:9592":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:21888:9944":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"11:772:9595":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"2:22921:188":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"6:6071:5299":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:21192:17308":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"2:46056:10144":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"16:2907:9035":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:4801:422":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"6:1507:11196":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"16:2428:9015":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"6:4922:11247":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:10771:8172":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:8659:11881":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:13778:8766":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"20:4180:5849":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:22012:12008":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"20:4925:6338":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:10782:135":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"17:12685:8475":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"18:0:2202":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:9107:2365":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:9254:10258":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:6274:228":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:3949:2374":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:40363:9867":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:13274:8244":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"5:4350:273":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"20:4095:5841":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:20974:30254":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"20:4120:5844":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"9:426:19252":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"6:6128:11396":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:40283:10007":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:11137:8224":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:11389:8256":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:43721:9918":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"16:5727:9110":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:22379:29994":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:14378:8943":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:44352:11543":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:30287:6705":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"14:31:9583":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"11:2260:9603":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"2:1923:9725":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:40874:2419":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:7616:11428":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:14068:8838":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"5:1674:7687":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:42285:2461":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"9:52:19268":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"20:3080:2061":{"crate_id":20,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:6079:5298":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"20:3482:5313":{"crate_id":20,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:12750:8483":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:2841:2662":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"17:14308:8918":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:10410:10384":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"6:4529:5281":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"20:3119:5276":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"20:3380:5302":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:12645:8467":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"6:4401:5269":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"6:5123:11329":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"2:41386:168":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"6:4932:11253":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:41843:2439":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"6:5867:5840":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"16:7568:9053":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:22317:9956":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:2277:108":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1:11290:10431":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:9945:8083":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:3274:30354":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:2012:7935":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:44598:10116":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:2618:121":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:3488:2050":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"6:4893:5847":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"20:55:2713":{"crate_id":20,"path":["libc","unix","DIR"],"kind":"enum"},"2:42010:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"14:0:2198":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"5:897:2439":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:926:9596":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:43444:10065":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:8915:11997":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"16:7792:20273":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:44416:10111":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"6:4710:5296":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:7664:7796":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:3378:2374":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:9276:31109":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"16:8115:9489":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:12030:1612":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"17:13546:8696":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"18:548:151":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:40107:17236":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:7992:17276":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:6798:6335":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:4211:6839":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:4033:9858":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"6:4556:5285":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"20:5479:5336":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"16:5995:8994":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:11074:8219":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:45963:10136":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:7985:10314":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:46916:10179":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"16:7582:9425":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:11347:10298":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:12621:8466":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:22690:197":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:9589:140":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"16:5634:9097":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"6:6927:11414":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"17:13451:8613":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:11448:20333":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:11332:10296":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:21140:2359":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:2939:17296":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:10738:9920":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:21006:30359":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"6:6868:6340":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:21381:2359":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"6:4449:2061":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:4068:17135":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"6:4584:5288":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:7002:7788":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:41723:9609":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:9390:134":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"16:6318:9218":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:10811:27152":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"1:12027:1613":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:12010:1632":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"6:5928:5846":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:6961:6346":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:11098:8221":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:932:11883":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"6:4440:5272":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:840:2439":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"20:1410:3868":{"crate_id":20,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:10092:7762":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"5:5945:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:10135:10409":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"20:3425:5307":{"crate_id":20,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:5217:210":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"16:2788:9030":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:40152:10003":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:4892:11975":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:42421:6831":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:21443:12007":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"18:707:7904":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:21311:12014":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:12209:17168":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"15:0:2199":{"crate_id":15,"path":["addr2line"],"kind":"module"},"16:2881:9034":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:9823:20342":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:40011:9988":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:40353:10014":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:10476:2391":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"1:3144:28244":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:9070:8049":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"16:4344:9070":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"16:5017:9089":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:1564:7704":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:40883:7751":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:9660:33098":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:43667:10078":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"6:1570:3868":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:13906:8795":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:4822:31442":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:2860:9342":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:11211:159":{"crate_id":1,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"2:9619:125":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"20:563:3112":{"crate_id":20,"path":["libc","unix","sigval"],"kind":"struct"},"16:2450:9016":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:5757:2464":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:2498:2359":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:5545:2838":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:11267:7801":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"6:7692:11443":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:12123:8355":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"9:507:9676":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:9878:9909":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:8938:2465":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:8541:2441":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:11174:2365":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"20:4817:6334":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:46870:10178":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"11:1687:154":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:12020:695":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:504:7930":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:9051:20309":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:11201:8228":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"16:5435:9095":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"6:4480:5275":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:3264:2410":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"5:2463:11450":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:11111:8222":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"6:4535:5282":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:13826:8772":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"16:4417:9071":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"6:4434:5271":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:41579:10037":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"18:582:2672":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"6:6691:11413":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"6:527:3106":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"20:5473:5335":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:1764:660":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:9570:234":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"6:5921:5845":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"5:1484:9610":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:10036:8090":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:13162:8568":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:3147:26698":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"5:1428:9609":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"16:6901:9046":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:13228:8575":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"6:1650:3875":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:44348:11542":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:9277:7922":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"6:4428:5270":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:4288:9862":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:5111:11323":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"2:46556:10158":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:45908:10133":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:32075:11181":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"1:5059:10275":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:13897:8794":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:11311:17164":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"17:10672:8160":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:21278:12019":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"16:3797:9065":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"11:666:2439":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:10792:124":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:9627:6832":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:13085:8549":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"16:3461:9062":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"5:5372:17155":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:12149:2443":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:14110:8849":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:1682:3878":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:43171:9910":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:11317:10295":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:47912:10222":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:2325:208":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:44206:10101":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:30357:30001":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"17:13259:8581":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"16:8072:9484":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:922:9593":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:40635:2389":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:43785:10081":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:41634:9902":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"18:515:7866":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:11547:8267":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"18:719:7908":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"4:0:2192":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"5:5634:7719":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:1779:10255":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"5:7504:9719":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:2876:12000":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"11:841:9599":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:589:11872":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"5:6817:7731":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"6:4496:5277":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:13868:8786":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:14324:8922":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"6:507:3105":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"6:4789:5306":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"6:7556:6344":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:14448:8958":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:12189:17170":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"17:12172:8365":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:42937:155":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:12007:8337":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"6:1528:3864":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"5:2037:2404":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"6:6222:5875":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:9455:33100":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"5:3173:2439":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:6813:6337":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:6934:11417":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:44144:9936":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"6:4755:5302":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:5829:5817":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:12711:8478":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"16:6156:9175":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:42428:6832":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:10318:24320":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"2:44628:10119":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:6587:2474":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"5:1140:32986":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:483:3101":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:43344:10058":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:10278:8112":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"13:226:11170":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"5:2961:6804":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:2330:130":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"6:4461:5273":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"5:7232:6756":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"20:3032:5269":{"crate_id":20,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:22822:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"6:5075:5314":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"20:4131:5845":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"5:1413:2439":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"20:3209:5287":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"5:1013:7687":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:10507:8141":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:32223:2663":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:11151:8225":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:23020:187":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:2173:17309":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"17:9790:33104":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"5:2245:11449":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"6:6012:11346":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:20987:30362":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:46300:10152":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:45677:10124":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:8125:2420":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:42647:11530":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:1590:9616":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"5:6984:7737":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:580:3114":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"14:215:9588":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:22408:11462":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:3041:137":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:40343:10012":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:30521:29989":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:40659:9886":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:11582:29636":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"9:393:19251":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:2880:12002":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:13567:8706":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"20:4229:5854":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:40048:9992":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:10059:8091":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"20:138:2790":{"crate_id":20,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:46453:10156":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:21463:9946":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:9780:8066":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:3044:138":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"5:3180:9614":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"16:7621:20272":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"5:6514:7687":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"5:3332:7721":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"17:13922:8799":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:10788:20431":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:11742:8281":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:11013:7798":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"6:4870:11234":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:10451:9609":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"20:1537:3880":{"crate_id":20,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"5:261:7687":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"3:0:478":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:40092:9856":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:943:9599":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:11586:8270":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:2788:113":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"16:6083:19374":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:46156:10147":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:10453:7795":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"16:4462:9072":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:3441:7945":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:30321:6706":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:44360:11545":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"20:4203:5852":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlattr"],"kind":"struct"},"2:40032:29998":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"6:6682:2985":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:11024:7799":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"20:5004:6342":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:13202:8573":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"20:3370:5301":{"crate_id":20,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:7041:9323":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:10077:7757":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"10:36:11184":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"16:4053:9069":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"18:636:7891":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"16:8195:9498":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"6:6114:11391":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:4446:11965":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"5:1104:32985":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:8899:11995":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:44611:178":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:21234:12018":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"2:32115:9390":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:10558:9914":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"20:4943:6339":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:7078:17272":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"5:7466:9718":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:7643:10302":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:30072:11938":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:43635:9916":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"5:6827:7733":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"16:7474:9411":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"5:7240:9711":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:32122:9977":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"2:42703:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"6:5085:11306":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:10301:109":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"6:7657:11434":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:3261:17211":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:8309:2894":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"6:6913:6343":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:5408:10279":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"6:6781:3799":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:4128:11960":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"6:5859:5839":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:7542:2611":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:6788:12003":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:10494:8139":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:23500:244":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"6:5146:11334":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"11:2351:6756":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"1:1429:154":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:9175:11555":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:13113:8555":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:6047:7778":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"20:3166:5282":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:2150:20389":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"16:2670:9025":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:41731:6756":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:2209:7942":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:7725:11915":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"17:12473:8441":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"18:521:24299":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"20:0:880":{"crate_id":20,"path":["libc"],"kind":"module"},"1:4136:11961":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"20:5447:6688":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:2380:9013":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:4614:11040":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:46634:10174":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:4841:11223":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"20:3137:5278":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:8364:11985":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"16:6929:9305":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:10227:11992":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"6:1639:3874":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:11971:8332":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"5:1466:9594":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"5:629:9689":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:14469:8964":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"20:4278:1852":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:5616:10281":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:1472:1817":{"crate_id":2,"path":["core","mem"],"kind":"module"},"6:1576:3869":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"9:237:2435":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:10962:8209":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:7692:11878":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"6:1521:3863":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:6086:11378":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:563:3111":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:7846:2352":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:3289:17136":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:4721:11954":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"5:7453:9716":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:5680:9872":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"16:7884:20274":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:483:7769":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:22429:9970":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:11226:8237":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:11845:8295":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:22342:30010":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:13890:8792":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:11337:20456":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:44038:10093":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"5:6798:7719":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:39378:2321":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:41932:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:8271:10365":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:4523:5280":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:8765:20323":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:10929:8207":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"20:5439:6687":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:9027:27151":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:43575:10075":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:45701:10125":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:40183:30019":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:6403:2053":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:8148:2357":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:11535:8266":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:3424:2355":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:25902:275":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:10534:8143":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:9625:6831":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:7718:10307":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"5:2962:32702":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"6:1718:3883":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:8432:2435":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:47666:10217":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:12658:8470":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"5:276:2612":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"11:759:9594":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:4416:6841":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:20946:2672":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"20:3286:5293":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"6:7679:11439":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"20:4806:6333":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:13286:8584":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:12252:8387":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:11490:8264":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:11761:8284":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"5:7378:2327":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"11:693:6756":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:11191:7947":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:949:9601":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"18:699:7902":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"20:3276:5292":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:21364:12010":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"16:6017:20264":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:40084:9995":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:9078:242":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:14460:8960":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"16:6696:9270":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"20:1444:3872":{"crate_id":20,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:2501:2051":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:40246:7743":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"16:6376:20266":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"18:690:7901":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:2223:2135":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"16:6401:9038":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:6573:2473":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"2:7027:29743":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:12671:8177":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:9614:116":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:7624:2610":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:2541:160":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"20:4185:5850":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:7533:163":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:11062:8218":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:5474:2374":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"17:10916:8205":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"5:2964:11446":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"13:0:2191":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:5372:10277":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:21547:12006":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"5:4988:2374":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:2582:7757":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:11407:20332":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"16:7006:9319":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:5044:11299":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:11735:9924":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"11:1051:19330":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:10279:247":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"6:4939:1069":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:13554:8699":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"20:3111:5275":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"16:7318:9369":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:12225:8378":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"20:1431:3870":{"crate_id":20,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:47939:10224":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:7834:2351":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:10468:8136":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:11958:10438":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"6:4884:11239":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:9571:2358":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:12024:800":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:2845:11999":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"20:3471:5312":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"16:8205:20275":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"11:785:7704":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"20:4107:5843":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:40845:9888":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:2895:7775":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"5:3214:9613":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:11272:8240":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"11:2479:33066":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"6:4549:5284":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:622:10246":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:7902:2402":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:22363:30017":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"18:599:33107":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"20:1361:3863":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:42949:2435":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:2928:234":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"2:20989:30360":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"6:7604:5333":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:10056:10257":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"17:8659:20308":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:13487:8644":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:49950:12022":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"17:12911:8527":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"6:4455:5150":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"5:0:316":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:7308:2455":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"20:3320:5296":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"16:7090:9331":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:2897:9347":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:12196:8369":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:11295:8242":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:41706:171":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:2544:141":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:44372:11548":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:4436:2496":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:41740:6818":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"1:11493:10265":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"20:3065:5271":{"crate_id":20,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:40166:104":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:14514:8970":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:3185:2412":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"16:8181:9057":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"16:5673:9041":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:10447:8129":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:11173:20455":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"16:8097:9487":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:46202:10148":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"20:1543:3881":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:7839:2348":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"5:4365:7711":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:14033:8827":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:47950:10225":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"11:1862:9613":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"6:4364:5266":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"16:7054:9326":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"5:1444:6756":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"20:3127:5277":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"16:5816:9120":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"20:4151:5832":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:7869:135":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"17:14522:8973":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:10637:8154":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"6:6100:11389":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:8294:133":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"11:1850:7704":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:9607:8062":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"6:6819:6338":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"11:1127:9607":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:7707:11879":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"6:5969:5849":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:6792:9295":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"15:306:19356":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"15:394:19366":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"17:9985:8087":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:44069:10097":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:4860:2421":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"2:22855:198":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"11:829:11883":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:40325:10010":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"16:8239:9390":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"16:7102:20270":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:11886:8304":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"5:4076:9609":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:11215:8233":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"6:119:2789":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"17:10397:8121":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:48064:10233":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"20:1472:3873":{"crate_id":20,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"16:5866:9128":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:4628:5290":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"9:357:19265":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"16:7768:9043":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"9:0:2194":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"11:122:7675":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:45886:10132":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:39604:24651":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"16:4986:9088":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"16:7651:9429":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"16:7284:6818":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"20:3389:5303":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:41971:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:2855:9345":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:8769:9906":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:40276:2353":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"17:11261:8239":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"17:12098:8352":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"20:5455:5332":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:48087:10234":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:10478:8137":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:10023:8064":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"20:1550:3882":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:13973:8811":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:8829:2439":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:10077:10407":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"2:44537:227":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:4640:17230":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"5:5861:7704":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:39312:223":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:10698:8165":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"20:2982:5265":{"crate_id":20,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:4021:9857":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"16:7613:9428":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:11639:7947":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:8963:10394":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"11:2461:11177":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:8926:20328":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:11306:8244":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:10616:8150":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1:8781:206":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:40433:9879":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:8455:2436":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:11086:8220":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:8472:2437":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:2366:2334":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"6:4388:5268":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:22441:11939":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:5477:10280":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:9126:10403":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"16:7360:33094":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"6:6889:6341":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:3223:2413":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"16:2472:9017":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:4719:11953":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:42657:69":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"20:4138:5846":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"11:2165:8129":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"17:11124:8223":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:2568:2401":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:21441:2359":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:7894:10312":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:12554:8453":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:9350:7926":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"20:4773:3027":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:4352:7741":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"6:4686:5294":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:21542:2359":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"17:10588:8147":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"6:4698:5295":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:416:182":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"5:5997:17601":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:0:534":{"crate_id":2,"path":["core"],"kind":"module"},"6:4595:11201":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:10265:8111":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"20:4781:3795":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:1585:9615":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:21142:12011":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:5423:109":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:2367:209":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:13632:8741":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:42407:6830":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"6:6169:5854":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:14156:8858":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"16:7544:9424":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:14269:8903":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:2394:2345":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:8793:10385":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"6:4878:11238":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:6943:6345":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"14:7:9583":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"11:2368:7704":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"17:400:7927":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:11507:20334":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"20:483:3102":{"crate_id":20,"path":["libc","unix","timeval"],"kind":"struct"},"1:3957:11943":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:11980:11880":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"20:4077:5840":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:42127:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"16:6467:9232":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:42967:10056":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"11:344:33067":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"2:45945:10135":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:39252:221":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:10214:8108":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:1840:10258":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:2499:17241":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:10370:8119":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:13055:8546":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"16:2644:9024":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:9003:20331":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"6:5033:5312":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:10724:9919":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:13966:8810":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:10240:8083":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:11894:9927":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:9633:6834":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"20:1531:3879":{"crate_id":20,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:475:3100":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:4283:9861":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"5:7262:7699":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:4901:856":{"crate_id":2,"path":["core","iter"],"kind":"module"},"16:5743:9112":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:2161:637":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"20:3443:5309":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:3410:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"16:7597:33092":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:11749:17171":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:10628:8153":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:12033:1219":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:1817:10257":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"9:450:19250":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:11573:8268":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:5562:2374":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"12:0:2197":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:2214:134":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"17:11934:8319":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:40372:9869":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:42928:10049":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:13298:8591":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:11430:7803":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:40446:10020":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"11:2238:9332":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"6:7668:11438":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:7529:142":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:11617:8271":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"6:1604:3872":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:47478:10215":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"5:3737:9696":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:12778:8487":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"5:5791:259":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"16:7554:9052":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"6:4808:11210":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:47959:10226":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:13667:8742":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"6:4764:5303":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:7355:27708":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:6259:9880":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:12032:1672":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:9005:10399":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"20:3092:5273":{"crate_id":20,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"16:7015:9322":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"20:1522:3878":{"crate_id":20,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"20:1350:3861":{"crate_id":20,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:14056:8835":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"7:78:19243":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:21325:17308":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"16:6332:9036":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:0:2201":{"crate_id":17,"path":["object"],"kind":"module"},"2:21900:30258":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:12007:404":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"6:596:3116":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:4360:10270":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"15:288:19355":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"6:4516:5279":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"20:4847:3824":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:2793:255":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"5:1778:7721":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"2:6081:9874":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"6:5052:11301":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:42414:6829":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:43152:10057":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:11975:27702":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:13693:8748":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:12267:8393":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"20:3461:5311":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:4641:9078":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:4045:106":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"16:6844:9297":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:12698:8476":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:8260:11549":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:30343:69":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"17:11381:8254":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:3150:26709":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"14:160:9583":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"20:3104:5274":{"crate_id":20,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:22723:194":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:7985:2442":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:4616:11042":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"5:5376:17156":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:40495:9883":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:4106:29536":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:14173:8865":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"5:1376:97":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:10820:27155":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:11121:10385":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:43685:10079":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:5105:211":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"1:11589:10299":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:40424:9878":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:2833:2608":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:41472:11529":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:6520:2469":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:46108:10146":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:1672:1159":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:1931:706":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"14:40:8319":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"16:6944:33091":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:5392:10278":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"18:113:24288":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"6:4947:11258":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:11991:27159":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:3814:10266":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:10060:7756":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"20:527:3107":{"crate_id":20,"path":["libc","unix","hostent"],"kind":"struct"},"2:43423:10063":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:871:9594":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:12934:8528":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:10742:11561":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"1:1781:10256":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:12790:8488":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:4612:11038":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:32129:6840":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"2:1738:17318":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:1075:7932":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:43916:9996":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:8305:10369":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"20:1355:3862":{"crate_id":20,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:47790:10219":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:47130:10182":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:22987:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:44249:9937":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"16:6171:214":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:10547:8144":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:534:7770":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"20:5461:5333":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"20:477:3101":{"crate_id":20,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:43881:10084":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"20:568:3113":{"crate_id":20,"path":["libc","unix","itimerval"],"kind":"struct"},"1:2368:2335":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"5:6587:6756":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:641:10249":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"20:3059:5270":{"crate_id":20,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:14076:8841":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"5:6959:7734":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:11719:17369":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:10410:8122":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:12154:8364":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:8279:10359":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:10420:7997":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:22010:2359":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:9271:30515":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:11316:8246":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"16:6485:9039":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:2830:2658":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:10427:2439":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:6517:2468":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:6123:7767":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:3463:2358":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:40119:9998":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:45755:10127":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:10980:8063":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:12014:1478":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"17:14478:8966":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"16:2504:9018":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:14316:8921":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:12415:116":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:3481:2356":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:11351:8249":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:5622:9870":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:46792:10177":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:13215:8574":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:12237:8381":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:8179:2389":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"6:588:3115":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:11365:11565":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:4288:10269":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:6963:17280":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:43395:10059":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"18:671:7898":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:4137:9859":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:9137:7918":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:8821:10387":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"20:3180:5284":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:7713:10254":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"16:6687:9269":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"16:4835:9083":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:10512:2411":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"6:6804:6336":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:12305:8401":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"6:533:3107":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:6139:7782":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:12086:8349":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"5:7390:2328":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:14499:8969":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:42687:9461":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:2258:101":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:9873:17245":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:48034:10231":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:40213:1914":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:3971:11945":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:43404:10060":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:22181:9948":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:12136:8356":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:2644:2403":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:13792:8769":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:11514:10266":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:44336:11539":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"11:2058:9332":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"6:7622:11429":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"20:1436:3871":{"crate_id":20,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"6:7702:6689":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"16:6560:7674":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"2:11970:9932":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:10737:11559":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:3943:11942":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:9867:8073":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:3255:17212":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:22954:189":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"16:6243:9203":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"11:2303:9619":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"17:434:7929":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"16:2574:9021":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"6:1664:3876":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:11359:11564":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"18:538:7876":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"6:6898:6342":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:8382:2434":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:10165:20362":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"2:48126:10235":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:10772:2352":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"6:4977:11279":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"14:221:9590":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"6:4738:5300":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:1761:9722":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:2935:17295":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"5:880:7695":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:43496:10068":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"18:481:7867":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"6:1514:11199":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:7462:9410":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:5285:125":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:4941:11981":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"6:1674:3877":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:22888:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"20:4193:5851":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:7708:9055":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:8514:2438":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"6:4830:11215":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:9629:214":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"11:1072:33075":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:3913:11940":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:4144:11962":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:40312:2388":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"6:1734:3884":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"16:7128:10401":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"11:1842:2439":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:2384:2340":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:12021:801":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:11192:11563":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:12015:1510":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:44547:235":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"20:4165:5847":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlmsghdr"],"kind":"struct"},"5:7437:30019":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:40100:9996":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"16:2359:9012":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"16:6968:20269":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"6:4676:5293":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"20:501:3105":{"crate_id":20,"path":["libc","unix","rusage"],"kind":"struct"},"17:13838:8775":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:8186:2390":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:9488:33105":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"16:5712:9107":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"6:5885:5841":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"18:681:7899":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:10802:2354":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:7504:7931":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"5:35:7683":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"20:3296:5294":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:10456:8132":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"20:3334:5297":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:6265:11458":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"11:1846:6756":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:12970:8533":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:13758:8758":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"20:3215:5288":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"16:2766:9029":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:12807:31077":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"7:0:1662":{"crate_id":7,"path":["unwind"],"kind":"module"},"20:3451:5310":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:8825:20325":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"6:1691:3879":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:13174:8569":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:4027:11949":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"20:4887:3799":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:46324:10153":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:8199:2387":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:41792:213":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"6:5023:5310":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:9048:11551":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:9972:8085":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"6:6764:3796":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"11:1525:19331":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:11147:2108":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"20:2995:5266":{"crate_id":20,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:3262:2409":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:44555:215":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:9531:33101":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"18:531:7873":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"11:357:7677":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"16:2526:9019":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:9752:8065":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"16:4806:9082":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"5:6666:7687":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"8:0:2193":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"11:2394:7721":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"1:913:9610":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"6:1632:3873":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"11:860:9601":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"5:2143:9697":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"16:6915:9047":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"16:5363:9094":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:9088:159":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:8993:10397":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:12859:9942":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"20:3187:5285":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:12022:798":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:43515:10070":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:256:7924":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:14221:8902":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"18:727:7911":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:9838:155":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:10920:10310":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"11:1882:9616":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"16:2339:9006":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"0:72:1793":{"crate_id":0,"path":["num_cpus","get"],"kind":"function"},"2:2784:2655":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"5:3144:98":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"16:6753:9283":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:41556:29997":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:7745:9976":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"17:14024:8824":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"5:7574:7721":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:12203:7904":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:1557:2439":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"16:6893:9303":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:1752:11456":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"7:31:19236":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:47728:10218":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"16:7736:9432":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:6873:7787":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:7515:10435":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"16:4862:9084":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"20:1574:3884":{"crate_id":20,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:20959:30254":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:9951:10034":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"20:3086:5150":{"crate_id":20,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:3038:136":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:9242:7921":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"20:5485:5337":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:12513:8449":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"11:1092:9606":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"16:3049:19404":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:6226:7783":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:44391:127":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"1:4775:7776":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"20:4174:5848":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlmsgerr"],"kind":"struct"},"2:43587:9926":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"1:4546:11971":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"18:80:24286":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"20:1558:3883":{"crate_id":20,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:10430:8124":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"2:40852:9889":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:21190:30079":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"2:45631:10122":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:41655:201":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:44653:10120":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:41800:234":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:12876:8516":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:505:7701":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:8192:2391":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:41443:11936":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:48049:10232":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:4854:11228":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:1058:9603":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:1986:204":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:8216:11935":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"5:7302:9712":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:40395:10018":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:45807:10129":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:22:734":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"16:2618:9023":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"20:3147:5279":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"11:1855:7721":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:41893:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:4407:7742":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:3654:6756":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"16:5696:20262":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:2629:133":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"6:4610:11208":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"16:2722:9027":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"6:6059:11371":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:14118:8850":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"11:2494:2327":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"16:5830:9121":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"11:2467:11178":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:13028:150":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:46946:10180":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"6:7639:5336":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:43900:10086":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:41615:9900":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"18:609:7885":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:7990:2405":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:10575:8146":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"6:7610:5334":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:6407:2466":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"6:7598:5332":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:11237:9922":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:13710:8749":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:13816:8771":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:1067:9604":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"20:3489:5314":{"crate_id":20,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:41773:6819":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"11:389:7679":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:10933:10280":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"1:907:7721":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:43925:9856":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:11023:8212":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"11:731:9593":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"10:0:2195":{"crate_id":10,"path":["adler"],"kind":"module"},"20:3160:5281":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:1710:3882":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:10646:8155":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:10669:9917":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:8848:20326":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:39237:9981":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"6:4902:5848":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"14:165:19336":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:41426:9899":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"6:6228:1852":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:41715:2439":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"20:469:3100":{"crate_id":20,"path":["libc","unix","group"],"kind":"struct"},"2:10710:9918":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"16:6818:9296":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"18:644:7869":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:1635:636":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"20:3019:5268":{"crate_id":20,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"16:7342:33097":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"20:3308:5295":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:12111:8354":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:1591:3870":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"19:0:1100":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:6583:9245":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"5:1494:9592":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"11:2085:9604":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:12830:8492":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"16:7436:9148":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:44368:11547":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"16:4745:9080":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:4208:10268":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"18:652:7869":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:42166:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:22234:9949":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:39334:222":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"6:4783:5305":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:4666:5292":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:46680:10175":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:3907:11941":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"20:5467:5334":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:43470:10007":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:21397:12005":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"17:14282:8909":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"16:3764:9064":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:9013:10401":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"16:6352:9221":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"11:483:152":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"16:7862:9446":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"20:3154:5280":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:40334:10011":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"16:6742:9282":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"20:134:2789":{"crate_id":20,"path":["libc","unix","FILE"],"kind":"enum"},"17:12437:8432":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"20:1377:3865":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:13802:8770":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:2361:202":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"16:8281:9505":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"16:6415:9228":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"5:2968:32485":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:10139:20361":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"6:574:3113":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:10685:8163":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:40303:10009":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"16:6041:20265":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:1895:10260":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"16:5403:8049":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"16:6261:9213":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:5730:2463":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:14134:8853":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:6621:241":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"6:7651:11433":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:3073:11896":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:11931:9930":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:8253:10267":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"16:4585:9076":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"20:3226:5289":{"crate_id":20,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:2850:12001":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:2838:110":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"16:3915:9068":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"20:3174:5283":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:10012:8063":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:39292:220":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:9328:2390":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:2925:9352":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:8957:111":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"6:1501:3862":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:10603:8149":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:12029:1615":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"16:6346:9220":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"17:9521:8060":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:22290:9955":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"16:3888:9067":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"20:5019:6343":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:13101:8553":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:2219:2331":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:4157:11963":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:43767:10080":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"16:2696:9026":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:40171:10004":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"16:7269:33096":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"6:5004:11297":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"16:2406:9014":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:7555:7790":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:13611:8736":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"6:5974:5850":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"20:1368:3864":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:10097:8094":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:1568:7721":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"17:12846:8497":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"9:177:19317":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:3023:2393":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"6:5955:11345":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:3249:143":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:6862:6762":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"20:3006:5267":{"crate_id":20,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:12194:9906":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"16:3600:9063":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:11030:7800":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"20:4824:2894":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"20:4995:6341":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:42088:92":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:42912:10046":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:13989:8813":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:8807:10386":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"5:3185:32994":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:7492:17278":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"6:6700:6333":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"16:3830:9066":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:6204:9182":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:2948:17298":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:43934:9995":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:10750:8170":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:13723:8754":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"11:822:9596":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"6:5068:5313":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:2551:265":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:48011:10230":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"6:4968:11273":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:1184:7934":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"6:4776:5304":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"16:5574:9037":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"5:4196:2374":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:4279:229":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"6:7371:11420":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:13981:8812":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:13949:8803":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:8883:11996":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"16:4527:9074":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:955:9602":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:9617:33099":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"11:0:2196":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"16:6226:9197":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:10596:9915":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:4908:5852":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:10752:9921":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:2538:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:45856:10131":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:2836:2660":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"1:12012:1120":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"5:1120:31461":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:44195:17183":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"3:234:234":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:1642:6702":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"20:4101:5842":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:30891:203":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:12945:8530":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"16:7782:9434":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:12543:8452":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:2931:17294":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"5:1475:9595":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:8524:2439":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:42712:69":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:40859:2053":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"20:5417:3060":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:6425:9229":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:10747:2348":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"2:40404:9873":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"20:4042:5817":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:9830:151":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"5:6468:7704":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:12062:8345":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:4:1083":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:11235:8238":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:12280:8397":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:9701:8064":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:12016:1597":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"17:13148:8567":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:2783:2607":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:47874:10221":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:9000:10398":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:12025:796":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:14001:8819":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"16:4497:9073":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:2914:17293":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"20:1635:3937":{"crate_id":20,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"16:2305:19401":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"17:13244:8577":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"16:6569:9044":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:2888:17288":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:14536:8976":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:10292:8063":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"16:3655:7959":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"16:7722:9045":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:2866:17287":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:10316:8116":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"20:3355:5299":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Chdr"],"kind":"struct"},"5:3219:32991":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"16:2284:19375":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:13575:8707":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:12028:1614":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"5:6101:2374":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:47970:10227":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"20:3433:5308":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"16:6268:33095":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:3234:17299":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:42675:114":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:43561:10072":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:13135:8566":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"16:2548:9020":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:12024:8339":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:12983:8535":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:4168:9860":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:2992:17137":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"16:6960:9308":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:11393:133":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:42752:75":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:21796:12020":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"6:6837:6339":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:6270:7749":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"2:8661:9905":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"5:6335:12096":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"6:5982:5851":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"11:992:9332":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"20:4904:6335":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"16:5322:9093":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:42959:10055":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:46422:10155":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:9416:6849":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"16:7492:9419":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"11:1562:9612":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:2255:100":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:2535:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:44428:17408":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:5602:228":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:30415:30002":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"17:12496:8446":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:9896:20344":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"0:73:1811":{"crate_id":0,"path":["num_cpus","get_physical"],"kind":"function"},"1:4019:11948":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"11:427:33071":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"20:4298:5876":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"5:4395:2374":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:9650:8063":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:11596:10299":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:12019:693":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"6:4989:11288":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:40645:9885":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:15:2301":{"crate_id":2,"path":["core","write"],"kind":"macro"},"6:4724:5297":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"16:3032:9058":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"16:2596:9022":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"5:2051:9696":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:11570:10432":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"5:7272:32992":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"5:4166:2374":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"20:582:3115":{"crate_id":20,"path":["libc","unix","servent"],"kind":"struct"},"17:10661:8159":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:4005:11946":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:40868:9890":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"20:3197:5286":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"20:489:3103":{"crate_id":20,"path":["libc","unix","timespec"],"kind":"struct"},"6:5910:5844":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:13685:8747":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:7638:10300":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"16:8134:9492":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"13:110:33076":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"5:6915:272":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"5:824:7693":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:46375:10154":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:8116:2418":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:21573:12015":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:8870:10390":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"16:5384:20261":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:12785:162":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:3034:2609":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:13024:8540":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:3225:2414":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:42246:95":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"16:5905:9131":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:7571:126":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:2798:2656":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"9:330:11185":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"16:7523:9423":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:40456:10021":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:12008:1002":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"16:3065:7954":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:2909:17292":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:40893:9891":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:7856:2349":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"6:5152:11337":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:10760:10423":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:39417:9986":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"0:0:1932":{"crate_id":0,"path":["num_cpus"],"kind":"module"},"2:4362:6840":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:7618:2359":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"5:1304:9608":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:6960:27182":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:6171:10287":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:3326:17139":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:9089:89":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:9959:8084":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"5:1516:218":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:2776:245":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"16:4774:9081":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:22756:195":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"16:5121:9092":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"5:4004:7704":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:11281:8241":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"16:7503:9050":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:10515:2413":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"16:6279:9216":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:11910:8318":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:1549:2374":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:46086:10145":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:5802:2471":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:40901:9893":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"5:5138:2460":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:9447:134":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"17:13010:8537":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"20:574:3114":{"crate_id":20,"path":["libc","unix","tms"],"kind":"struct"},"2:22302:30020":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:646:11875":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:12293:8398":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"16:5798:9116":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:7910:2404":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:12598:8461":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"5:7423:9713":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"16:536:8992":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:10269:2359":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"5:7490:251":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:10084:8093":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"18:590:7879":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:43413:10062":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"5:3206:9615":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:9933:8081":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"5:7252:7704":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"16:6189:9180":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"16:2810:9031":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:40381:10015":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"16:8050:9483":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:4602:11945":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:45723:10126":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:8205:10359":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"5:1290:9603":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"6:5117:11326":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"1:5358:10276":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"20:590:3116":{"crate_id":20,"path":["libc","unix","protoent"],"kind":"struct"},"1:1579:9614":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"6:5897:5843":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"11:1036:9604":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:11951:8322":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"5:678:258":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:9621:6829":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"5:784:7690":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:3307:2398":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"18:574:7869":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:8287:10367":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"5:4034:7687":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"15:327:19360":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:9165:27988":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"16:6361:9222":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:1983:205":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:11719:20336":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"11:2074:9603":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"16:7067:9329":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:40126:9999":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:2786:253":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:41409:9897":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"11:1541:9611":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:9921:8078":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"16:5939:8988":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:10966:10387":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"16:7660:9430":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"14:202:17184":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:44356:11544":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:47996:10229":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:12009:453":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"18:766:24298":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:7741:10310":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"6:555:3110":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:43505:10069":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"5:1275:9604":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:42730:133":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:13422:8593":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:863:6756":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:4717:11951":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:12005:9913":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:11710:8244":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:12724:8479":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"6:4745:5301":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:6386:9225":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:3965:11944":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"20:549:3110":{"crate_id":20,"path":["libc","unix","winsize"],"kind":"struct"},"20:4069:5839":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:14126:8852":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:5609:7783":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"20:5033:6344":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","termios2"],"kind":"struct"},"17:9102:7917":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:40505:10022":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:11954:9931":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:47985:10228":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:47836:10220":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:11872:8303":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"5:3570:180":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:12737:8481":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:10558:7796":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"6:6741:3824":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:8136:2354":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:8265:11964":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:13071:8547":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"11:2334:9609":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"2:32136:9978":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:21178:12013":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"1:9459:7794":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:3647:11937":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"5:2692:11453":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:10903:8204":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:11000:8211":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:9711:33103":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:9172:7919":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:12990:7767":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:47336:10214":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:2884:17289":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"6:4914:11242":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"16:5588:9040":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"16:5648:9101":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:11815:8291":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"17:14083:8842":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:47588:10216":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:11358:20457":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:9073:184":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:46476:10157":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"16:5963:9137":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:2547:266":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:10383:8120":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:46278:10151":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:14401:8944":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:12765:8486":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:8211:10361":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:39431:9987":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:10112:8095":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:2670:9726":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"1:2604:2394":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"5:207:7685":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:4468:11966":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:9564:8061":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:4463:6842":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:40256:10006":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"11:1876:9615":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:40465:9881":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:1573:9613":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:13040:8542":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:14090:8843":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"6:5130:5311":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"11:324:11175":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"16:6499:9056":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:40020:9989":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"5:3583:2439":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:10738:8169":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:8660:11989":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:40413:10019":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:10186:8103":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"17:10227:8109":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:7496:17277":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:0:1502":{"crate_id":1,"path":["std"],"kind":"module"},"18:564:7878":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:9207:7920":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:10075:10408":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:12026:1616":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"6:6263:11407":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:12997:8536":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:12465:8439":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:8953:20329":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:3519:7704":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"17:13851:8781":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:582:7931":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"6:0:880":{"crate_id":6,"path":["libc"],"kind":"module"},"1:10518:2409":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"16:7513:9422":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"16:4613:9077":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"20:557:3111":{"crate_id":20,"path":["libc","unix","linger"],"kind":"struct"},"1:7829:2350":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:884:9595":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:12214:17167":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:10726:8168":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:4798:11950":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"11:1145:9608":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"6:654:3134":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:46232:10149":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:3709:10264":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"5:3802:7721":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:7248:2418":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:43525:10071":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:2943:17297":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:6658:3027":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"6:489:3102":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"16:5760:20263":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:22128:9947":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"16:5661:9106":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:4680:11965":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:45655:10123":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:14100:8846":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:10340:8117":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:11162:8226":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"5:7515:9720":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:9631:6833":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"6:7365:6687":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:12452:8437":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"18:736:24297":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:7534:9051":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"6:1496:3861":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:45825:10130":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:22415:9969":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"16:2933:19402":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"6:6120:11394":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:46710:10176":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"5:7479:7717":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"2:40133:17237":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:43483:10067":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"16:4557:9075":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:40072:9994":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:32111:9976":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"20:4870:3796":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:43871:2387":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"5:2133:7701":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:13188:8570":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:8686:20321":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:5964:228":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"6:4375:5267":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:13914:8797":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:2930:133":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"20:2976:5264":{"crate_id":20,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"16:7391:20271":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"16:6513:9233":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:41851:9609":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:3232:7943":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:22250:11459":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:2409:2049":{"crate_id":1,"path":["std","io"],"kind":"module"},"17:11048:8214":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:2904:17291":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:39190:17138":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"17:12959:8532":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:44023:10088":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:43821:10082":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"20:3401:5304":{"crate_id":20,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:11991:8333":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"16:4889:9085":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:39410:9985":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"20:3348:5298":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Chdr"],"kind":"struct"},"6:6107:11390":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"16:2832:9032":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:8775:10384":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:12576:8460":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"5:2972:32484":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"20:4209:5853":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:3183:2411":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:7680:176":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:22789:196":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"6:6666:3795":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"16:8154:9493":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"6:1558:3867":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:42207:88":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"20:5064:6346":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:11661:8273":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:10520:8142":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"20:495:3104":{"crate_id":20,"path":["libc","unix","rlimit"],"kind":"struct"},"2:44344:11541":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"11:2473:11179":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:14013:8820":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:12810:8491":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"11:796:7721":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"17:9445:8059":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"6:4351:5265":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:3171:219":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"6:1596:3871":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:12184:8368":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:3077:11897":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:12023:799":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"18:491:7868":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:495:3103":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"20:4272:5875":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:41592:10267":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:2919:9351":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:12422:8428":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:8851:10282":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:44001:17182":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:2872:9346":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"20:4919:6337":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:7574:7792":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"11:1010:9603":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:12373:8403":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:8331:10271":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:9623:6830":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:43909:9933":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:8530:2440":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"11:1869:9614":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:9083:243":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"16:0:2200":{"crate_id":16,"path":["gimli"],"kind":"module"},"20:521:3106":{"crate_id":20,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:4543:5283":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:3472:29708":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"11:2286:9604":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"20:1490:3875":{"crate_id":20,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:12031:850":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:14296:8915":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:13083:11884":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"6:6136:11399":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"5:5976:2460":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"6:5015:5309":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"5:3722:2404":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:9762:33102":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:7619:10244":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:10440:8126":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"2:44640:9621":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"6:4847:11226":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:14042:8828":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:11327:8247":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"9:486:19249":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"6:7645:5337":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:40062:9993":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"11:2317:2439":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"17:12484:8444":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:2382:2339":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:44117:10099":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"6:4824:11212":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:45611:10121":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"5:2225:32995":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"5:7406:105":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"6:4603:11206":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:1913:3937":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:12013:342":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:8029:30513":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:22266:9950":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:11788:8285":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:14420:8949":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"6:569:3112":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:46254:10150":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"16:3315:9061":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2:2171:17308":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"2:23053:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"11:101:11171":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:4616:5289":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:13876:8789":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:44229:10109":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:43839:10083":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"16:6531:9241":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"6:7343:3060":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"6:6711:6334":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:12772:146":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"10:44:9622":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"17:9086:8050":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"5:7590:7725":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"6:1697:3880":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:4015:11947":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:9852:20343":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"5:7294:218":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"20:1479:3874":{"crate_id":20,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:9454:2351":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"2:44340:11540":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"20:1504:3876":{"crate_id":20,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:8970:26928":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"6:5140:11332":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"11:2487:11182":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:11135:10386":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:12074:8348":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:364:10243":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:3565:7946":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"11:2423:19326":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"5:3596:9609":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:2787:252":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"16:5612:9042":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:7980:10313":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"5:7323:6756":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"11:703:9592":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:30919:2672":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"20:3238:5290":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:11687:20335":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"20:1416:3869":{"crate_id":20,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:3406:2052":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:14163:8860":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:41859:6756":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:14346:8928":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:14145:8857":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:358:10242":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:1044:9332":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:4998:11294":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"6:5009:5264":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"18:755:7916":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:12979:111":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"20:5494:6689":{"crate_id":20,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"20:614:3134":{"crate_id":20,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"11:868:9602":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:40199:10005":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:21449:12009":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:7886:124":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"5:3671:7687":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:3232:9003":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:10948:27163":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"5:780:99":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:21566:2359":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:46980:10181":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"11:680:9609":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:12531:8450":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"6:4955:11263":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"6:6248:5876":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:39151:17210":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:3712:10265":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"16:5088:9091":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:12888:8518":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:7988:11887":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:40005:9856":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:43593:10076":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:10714:8167":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"16:4949:9087":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"16:5419:8050":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"16:2969:19403":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"}},"external_crates":{"20":{"name":"libc","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}