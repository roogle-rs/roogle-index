{"root":"0:0:1809","crate_version":"1.15.0","includes_private":false,"index":{"2:12037:25159":{"id":"2:12037:25159","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12036:25158"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12024:314":{"id":"2:12024:314","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12025:1714","`u8`":"1:11934:1504"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12034:33585":{"id":"2:12034:33585","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11923:1402","str::slice_mut_unchecked":"2:12035:33586","crate::ops::Index":"2:2980:11283"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12075:33589":{"id":"2:12075:33589","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11715:16558","str::split":"2:12063:1947","prim@char":"1:11917:418","str::split_terminator":"2:12072:33588"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43390:9504","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:9203","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:9203","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11735:16556","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12078:25171":{"id":"2:12078:25171","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11715:16558","str::rsplitn":"2:12081:25173"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43426:9215","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:9203","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12090:2173":{"id":"2:12090:2173","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11715:16558","`DoubleEndedIterator`":"2:7243:121","prim@char":"1:11917:418","str::matches":"2:12090:2173"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43526:9507","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:9203","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12108:33597":{"id":"2:12108:33597","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12104:33595":{"id":"2:12104:33595","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12069:25169":{"id":"2:12069:25169","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11715:16558","`DoubleEndedIterator`":"2:7243:121","prim@char":"1:11917:418","str::split":"2:12063:1947"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43340:9213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:9203","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:9203","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11735:16556","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12019:33583":{"id":"2:12019:33583","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12017:33582"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12106:33596":{"id":"2:12106:33596","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12013":{"id":"2:12013","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12014:815","2:12015:2028","2:12016:33581","2:12017:33582","2:12019:33583","2:12022:25091","2:12023:33584","2:12024:314","2:12025:1714","2:12026:1674","2:12028:25133","2:12030:25134","2:12032:25135","2:12034:33585","2:12035:33586","2:12036:25158","2:12037:25159","2:12038:9231","2:12039:9520","2:12040:6616","2:12041:30961","2:12042:30979","2:12043:1944","2:12044:33587","2:12045:30995","2:12046:25175","2:12049:25176","2:12052:25177","2:12055:2012","2:12059:6625","2:12063:1947","2:12066:25167","2:12069:25169","2:12072:33588","2:12075:33589","2:12078:25171","2:12081:25173","2:12084:33590","2:12087:33591","2:12090:2173","2:12093:33592","2:12096:33593","2:12099:33594","2:12102:1951","2:12104:33595","2:12106:33596","2:12108:33597","2:12109:33598","2:12110:33599","2:12113:33600","2:12116:1993","2:12119:25178","2:12122:33601","2:12125:33602","2:12128:33603","2:12131:1801","2:12133:25031","2:12134:25032","2:12135:25034","2:12136:25035","2:12137:25036","2:12138:33604","2:12140:11261","2:12141:33605"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12036:25158":{"id":"2:12036:25158","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12037:25159"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12131:1801":{"id":"2:12131:1801","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11676:127","`FromStr`":"2:11675:2315"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41497:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:11675:2315","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11675:2315","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12059:6625":{"id":"2:12059:6625","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41355:179","prim@char":"1:11917:418","self::pattern":"2:11715:16558"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41353:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:9203","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:9203","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11735:16556","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12119:25178":{"id":"2:12119:25178","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11715:16558"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41353:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:9203","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:9203","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11735:16556","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73:1692":{"id":"0:73:1692","crate_id":0,"name":"get_physical","span":{"filename":"src/lib.rs","begin":[108,0],"end":[110,1]},"visibility":"public","docs":"Returns the number of physical cores of the current system.\n\nThis will always return at least `1`.\n\n# Note\n\nPhysical count is supported only on Linux, mac OS and Windows platforms.\nOn other platforms, or if the physical count fails on supported platforms,\nthis function returns the same as [`get()`], which is the number of logical\nCPUS.\n\n# Examples\n\n```\nlet logical_cpus = num_cpus::get();\nlet physical_cpus = num_cpus::get_physical();\nif logical_cpus > physical_cpus {\n    println!(\"We have simultaneous multithreading with about {:.2} \\\n              logical cores to 1 physical core.\", \n              (logical_cpus as f64) / (physical_cpus as f64));\n} else if logical_cpus == physical_cpus {\n    println!(\"Either we don't have simultaneous multithreading, or our \\\n              system doesn't support getting the number of physical CPUs.\");\n} else {\n    println!(\"We have less logical CPUs than physical CPUs, maybe we only have access to \\\n              some of the CPUs on our system.\");\n}\n```\n\n[`get()`]: fn.get.html","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12133:25031":{"id":"2:12133:25031","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12093:33592":{"id":"2:12093:33592","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11715:16558","`DoubleEndedIterator`":"2:7243:121","prim@char":"1:11917:418","str::matches":"2:12090:2173"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43544:9508","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:9203","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:9203","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11735:16556","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12102:1951":{"id":"2:12102:1951","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12110:33599":{"id":"2:12110:33599","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11715:16558"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:9203","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:9203","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11740:16555","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12022:25091":{"id":"2:12022:25091","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11282:16559"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12026:1674":{"id":"2:12026:1674","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41355:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41353:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12039:9520":{"id":"2:12039:9520","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11917:418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43298:9501","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12014:815":{"id":"2:12014:815","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11917:418"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12116:1993":{"id":"2:12116:1993","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11715:16558"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41353:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:9203","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5440:34258":{"id":"5:5440:34258","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7280:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12136:25035":{"id":"2:12136:25035","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12066:25167":{"id":"2:12066:25167","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11715:16558"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11538:9210","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:9203","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12028:25133":{"id":"2:12028:25133","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41355:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41353:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12072:33588":{"id":"2:12072:33588","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11715:16558","str::split":"2:12063:1947","prim@char":"1:11917:418","`DoubleEndedIterator`":"2:7243:121","str::rsplit_terminator":"2:12075:33589"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43372:9503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:9203","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12015:2028":{"id":"2:12015:2028","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12099:33594":{"id":"2:12099:33594","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11715:16558","`DoubleEndedIterator`":"2:7243:121","prim@char":"1:11917:418","str::match_indices":"2:12096:33593"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43490:9506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:9203","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:9203","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11735:16556","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12125:33602":{"id":"2:12125:33602","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11715:16558"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:9203","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12045:30995":{"id":"2:12045:30995","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43614:9230","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12141:33605":{"id":"2:12141:33605","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4536:33605"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43639:9421","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12122:33601":{"id":"2:12122:33601","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11715:16558"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:9203","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:9203","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11735:16556","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12030:25134":{"id":"2:12030:25134","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12096:33593":{"id":"2:12096:33593","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11715:16558","`DoubleEndedIterator`":"2:7243:121","prim@char":"1:11917:418","str::rmatch_indices":"2:12099:33594"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43472:9505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:9203","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12137:25036":{"id":"2:12137:25036","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12087:33591":{"id":"2:12087:33591","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41353:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:9203","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:9203","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11735:16556","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5429:34256":{"id":"5:5429:34256","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7280:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:9203","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12135:25034":{"id":"2:12135:25034","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12134:25032":{"id":"2:12134:25032","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39511:25044","Self::is_ascii":"2:12133:25031"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41353:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39511:25044","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5425:34255":{"id":"5:5425:34255","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:273:2492","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7013:9117","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:273:2492","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7013:9117","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1809":{"id":"0:0:1809","crate_id":0,"name":"num_cpus","span":{"filename":"src/lib.rs","begin":[1,0],"end":[459,1]},"visibility":"public","docs":"A crate with utilities to determine the number of CPUs available on the\ncurrent system.\n\nSometimes the CPU will exaggerate the number of CPUs it contains, because it can use\n[processor tricks] to deliver increased performance when there are more threads. This \ncrate provides methods to get both the logical and physical numbers of cores.\n\nThis information can be used as a guide to how many tasks can be run in parallel.\nThere are many properties of the system architecture that will affect parallelism,\nfor example memory access speeds (for all the caches and RAM) and the physical\narchitecture of the processor, so the number of CPUs should be used as a rough guide\nonly.\n\n\n## Examples\n\nFetch the number of logical CPUs.\n\n```\nlet cpus = num_cpus::get();\n```\n\nSee [`rayon::Threadpool`] for an example of where the number of CPUs could be\nused when setting up parallel jobs (Where the threadpool example uses a fixed\nnumber 8, it could use the number of CPUs).\n\n[processor tricks]: https://en.wikipedia.org/wiki/Simultaneous_multithreading\n[`rayon::ThreadPool`]: https://docs.rs/rayon/1.*/rayon/struct.ThreadPool.html","links":{},"attrs":["#![deny(missing_docs)]","#![allow(non_snake_case)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:72:1674","0:73:1692"],"is_stripped":false}}},"2:12128:33603":{"id":"2:12128:33603","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11715:16558"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:9203","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:9203","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11735:16556","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12041:30961":{"id":"2:12041:30961","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12042:30979"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43596:9510","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5424":{"id":"5:5424","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5425:34255","5:5426:6573","5:5429:34256","5:5432:34257","5:5440:34258","5:5441:34259","5:5442:2288","5:5443:26296","5:5444:26297"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12055:2012":{"id":"2:12055:2012","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41355:179","prim@char":"1:11917:418","self::pattern":"2:11715:16558"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41353:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:9203","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12025:1714":{"id":"2:12025:1714","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11934:1504"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12035:33586":{"id":"2:12035:33586","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11923:1402","crate::ops::IndexMut":"2:2984:11284","str::slice_unchecked":"2:12034:33585"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5442:2288":{"id":"5:5442:2288","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7280:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5444:26297":{"id":"5:5444:26297","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12137:25036"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12063:1947":{"id":"2:12063:1947","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11715:16558","`DoubleEndedIterator`":"2:7243:121","prim@char":"1:11917:418","str::split_whitespace":"2:12041:30961","str::rsplit":"2:12069:25169"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43322:2263","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:9203","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5426:6573":{"id":"5:5426:6573","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7280:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:9203","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12113:33600":{"id":"2:12113:33600","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11715:16558"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:9203","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12032:25135":{"id":"2:12032:25135","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12040:6616":{"id":"2:12040:6616","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43308:2262","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12081:25173":{"id":"2:12081:25173","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11917:418","str::splitn":"2:12078:25171","self::pattern":"2:11715:16558"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43444:9216","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:9203","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:9203","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11735:16556","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5443:26296":{"id":"5:5443:26296","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12136:25035"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:72:1674":{"id":"0:72:1674","crate_id":0,"name":"get","span":{"filename":"src/lib.rs","begin":[73,0],"end":[75,1]},"visibility":"public","docs":"Returns the number of available CPUs of the current system.\n\nThis function will get the number of logical cores. Sometimes this is different from the number\nof physical cores (See [Simultaneous multithreading on Wikipedia][smt]).\n\nThis will always return at least `1`.\n\n# Examples\n\n```\nlet cpus = num_cpus::get();\nif cpus > 1 {\n    println!(\"We are on a multicore system with {} CPUs\", cpus);\n} else {\n    println!(\"We are on a single core system\");\n}\n```\n\n# Note\n\nThis will check [sched affinity] on Linux, showing a lower number of CPUs if the current\nthread does not have access to all the computer's CPUs.\n\nThis will also check [cgroups], frequently used in containers to constrain CPU usage.\n\n[smt]: https://en.wikipedia.org/wiki/Simultaneous_multithreading\n[sched affinity]: http://www.gnu.org/software/libc/manual/html_node/CPU-Affinity.html\n[cgroups]: https://www.kernel.org/doc/Documentation/cgroup-v1/cgroups.txt","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12017:33582":{"id":"2:12017:33582","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12023:33584":{"id":"2:12023:33584","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12138:33604":{"id":"2:12138:33604","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4538:33604"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43621:9422","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12016:33581":{"id":"2:12016:33581","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12038:9231":{"id":"2:12038:9231","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11917:418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43292:9223","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12044:33587":{"id":"2:12044:33587","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43586:9509","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12049:25176":{"id":"2:12049:25176","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11715:16558"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:9203","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5441:34259":{"id":"5:5441:34259","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:273:2492","`String`":"5:7280:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:273:2492","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7013:9117","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12042:30979":{"id":"2:12042:30979","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12041:30961"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43605:9511","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12052:25177":{"id":"2:12052:25177","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11715:16558"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:9203","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:9203","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11735:16556","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12084:33590":{"id":"2:12084:33590","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41353:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:9203","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12046:25175":{"id":"2:12046:25175","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11715:16558"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:9203","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12043:1944":{"id":"2:12043:1944","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43576:2259","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12109:33598":{"id":"2:12109:33598","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5432:34257":{"id":"5:5432:34257","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7280:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12140:11261":{"id":"2:12140:11261","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4539:11261"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43630:9155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"1:1583:9039":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:12553:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:10580:7660":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"5:1115:34534":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:4615:5166":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:40667:7189":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"20:3433:5181":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:7537:7230":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:47735:9656":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:10133:9212":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:11941:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:13233:8219":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:4972:5185":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:40236:9437":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:13324:8239":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:22534:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"5:1254:8759":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:7726:9275":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:39324:9285":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"2:43743:9518":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:39296:9283":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"16:3815:8493":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:46411:9601":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:4597:10446":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"20:3389:5176":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:7827:2226":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"18:766:23480":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"5:5838:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"6:5993:10780":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"16:4624:8505":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:10343:9813":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"6:506:2979":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"16:5693:8534":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"5:1135:34549":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:1746:10859":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"20:3414:5179":{"crate_id":20,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"16:3640:7411":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:3266:7399":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:43472:9505":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"11:1611:7119":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"16:8090:8916":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:40122:1790":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"20:1410:3742":{"crate_id":20,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"6:1519:3737":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:5044:9702":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:45557:9556":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"5:3214:33567":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:44291:9539":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:8823:7375":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:22600:9272":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:3191:2283":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:43639:9421":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"3:229:210":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:1568:7143":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"6:5043:10728":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:21728:9245":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"20:5004:6215":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:9734:7550":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:7164:16671":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:12461:7978":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"16:3063:7407":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"16:7103:9830":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:40035:9425":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"14:202:16572":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:42857:9482":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"6:7557:10836":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:20879:11399":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:44354:9545":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"16:3225:8487":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:9959:7575":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:8846:31966":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:9152:6699":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"16:535:8419":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"5:682:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"5:5233:7126":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:40629:9184":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:917:9035":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:21126:9243":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"16:6361:8652":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:44312:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:8678:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:9964:2311":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"16:8214:8817":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"16:7437:8837":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:4704:11339":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"16:3782:8492":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"20:4042:5690":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"16:7697:8471":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:47827:9660":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"16:7411:8575":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"20:3147:5152":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:11924:7883":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:5787:2343":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:43390:9504":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:45711:9562":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:9973:7576":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:1062:9028":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"16:4757:8508":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"16:4327:8497":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:2850:16690":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"5:1470:9020":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:5383:2249":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"2:44073:10949":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:40367:9177":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:9380:19638":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"5:3235:9041":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"5:0:286":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:2620:2275":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:20814:11404":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:6893:27220":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:635:9672":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:11532:7791":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"5:4347:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:9057:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:1982:185":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"20:1444:3746":{"crate_id":20,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"16:4904:8513":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:40297:9444":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"20:5479:5209":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:13499:8285":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:10807:9220":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"17:11282:7742":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"6:4894:10671":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:11928:644":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:10761:19628":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:4587:11331":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:12224:7939":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:11490:24668":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:10731:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"9:0:2068":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:9478:7524":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:7488:7385":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:9322:35179":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"16:6442:8659":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"18:531:7327":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:6588:6636":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:10660:7669":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:9365:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:11628:7820":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:11675:2315":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"6:4427:5149":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:7683:8481":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:11888:11267":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:4127:11347":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:21837:9252":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"16:5346:8521":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:8922:2337":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:49633:11410":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:6644:9715":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"17:10989:7400":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:13639:8342":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:47429:9643":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"6:6035:10799":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:45979:9576":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:39331:6710":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"11:798:9021":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:3231:2285":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:10851:9739":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"6:6849:6218":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:9596:7537":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:8366:2306":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:2160:16701":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"5:4425:7150":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:12563:7997":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:41339:9199":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:46257:9583":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:12634:8007":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:7556:7232":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"16:7244:35171":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"6:1708:3756":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:11920:1053":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"6:4495:5158":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:4649:5169":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"18:582:2550":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"11:836:9026":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:7699:9736":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"17:9108:35177":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:1820:9150":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:6617:6207":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:11497:10965":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:8525:2313":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:46025:9578":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"20:3226:5162":{"crate_id":20,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:3373:16589":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"1:5462:9708":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"20:3425:5180":{"crate_id":20,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:11487:9228":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:45332:9547":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"20:3461:5184":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:46177:9582":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"6:4809:10642":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:43934:9534":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:39920:9414":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:47640:9649":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"11:1822:6630":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"20:3111:5148":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:7635:31945":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:13316:8238":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"6:1732:3758":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:7599:2233":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:44256:195":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:11060:7669":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:12072:7902":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"20:5473:5208":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:12959:8159":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"16:2378:8439":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:2505:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:21014:9243":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"6:4916:10687":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:13367:8251":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"11:630:2311":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"5:5527:7158":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:12592:8000":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:2353:189":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:6032:7219":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"6:4400:5146":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:4199:9695":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:11915:371":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:9145:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"17:13506:8287":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:3406:1925":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"13:110:35152":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"6:4663:5170":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:9886:7562":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:1594:9041":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:9154:6700":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:10823:7468":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:20752:11402":{"crate_id":2,"path":["core","core_simd","cast","SimdCastPtr"],"kind":"trait"},"2:43118:9487":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"6:4832:5720":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:4045:16523":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:40042:16631":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:8244:10951":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:13376:8254":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:2683:220":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:11891:7875":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"20:3320:5169":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:44248:211":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"18:690:7355":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:3749:8491":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"20:3065:5144":{"crate_id":20,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"5:2963:34540":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:10056:9210":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"6:4948:5137":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:11921:312":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:9156:6701":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:30194:6578":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:2517:238":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"6:5774:5713":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:9340:7512":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:5079:10739":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:10527:19736":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"16:8109:8919":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"16:6236:8638":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"11:644:9034":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:7971:2277":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:13763:8376":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:40016:16630":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"6:4340:5142":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"18:707:7358":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:46076:9579":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:11832:7867":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:12331:7958":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:2514:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:42457:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"18:755:7370":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:11090:7704":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:9986:7577":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"6:6170:10810":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:7966:9743":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:13477:8280":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:8252:11376":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:2705:2537":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:43201:9493":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:562:7385":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"16:8129:8920":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:2580:2266":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"11:1826:7143":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"16:2502:8444":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:47660:9651":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:30826:2550":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:8283:19617":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:5525:11377":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"17:13812:8391":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"16:2616:8449":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"20:1635:3811":{"crate_id":20,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"5:3175:9039":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:43757:9521":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:10855:9095":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"6:4488:5157":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:2984:11284":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:10095:9211":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"11:760:7160":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"5:204:7124":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"20:3215:5161":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:4542:10614":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:43444:9216":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:43630:9155":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:12536:7993":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:10104:7593":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:13159:8198":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"20:3451:5183":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:10167:11379":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:43596:9510":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:12372:7963":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"16:7652:198":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:11717:7247":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:25857:9145":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:32022:9276":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:41790:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:9534:7533":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"20:1531:3753":{"crate_id":20,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:6867:6219":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"16:2524:8445":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:43049:9483":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:11715:16558":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"16:7519:8851":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:4325:7181":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"16:6544:8470":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:11372:7762":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:4665:11351":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"20:495:2978":{"crate_id":20,"path":["libc","unix","rlimit"],"kind":"struct"},"2:1732:16712":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"5:5754:7143":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:2348:2208":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:11923:1402":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:247:7379":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"15:198:18656":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"6:7585:10842":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"18:538:7330":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:6431:8658":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:45857:9572":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:2737:2539":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"6:1695:3754":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"5:35:7122":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:9617:7539":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"20:1490:3749":{"crate_id":20,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:11282:16559":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:7600:9669":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"5:2128:7140":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"20:1522:3752":{"crate_id":20,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:40255:9440":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"6:5978:5172":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:9628:7540":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"6:7545:5209":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:4335:6710":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"16:2470:8443":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"5:5062:2332":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:41950:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"16:6558:8672":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"6:5798:5715":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:43621:9422":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"6:5862:10747":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:7688:11266":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"6:4954:5182":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:6392:1926":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:11933:742":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"16:6201:8622":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"19:0:1035":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:7042:8756":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:8765:186":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"11:1517:9036":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:43605:9511":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:9670:7546":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:39178:199":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"6:5881:5723":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:45809:9571":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:13651:8345":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"11:1048:35151":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"20:3334:5170":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"20:3238:5163":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:11193:7718":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"5:7092:9135":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:13659:8348":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:2690:2484":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"5:7294:9142":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:9265:7510":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:40214:2260":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:2511:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"20:4209:5726":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:5531:9167":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:6980:2327":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:731:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"5:273:2492":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"16:2862:8459":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:39971:9419":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:11299:7745":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:13053:8176":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"16:3030:8484":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"20:1479:3748":{"crate_id":20,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"15:180:18655":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"20:4165:5720":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlmsghdr"],"kind":"struct"},"1:5393:9706":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:46154:9581":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:41268:31013":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:10923:7692":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:8111:2292":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"20:4272:5748":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"20:3119:5149":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:2767:8769":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"17:9228:35173":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:12259:7950":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:2832:8779":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:12419:7970":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:43292:9223":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:9068:35176":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:39914:9155":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"9:52:18575":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"14:187:18649":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"20:3104:5147":{"crate_id":20,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"5:2138:9120":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:1572:7160":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"17:10257:7627":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"16:8047:8911":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"11:1103:9032":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:922:9017":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:4022:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:3996:11332":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"5:1408:2311":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:43544:9508":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:9091:2239":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:4263:9161":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:11935:1501":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:8249:11350":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:7243:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:40080:9430":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"5:7213:9136":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"16:6293:8644":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"16:5104:8519":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:2481:1924":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:4567:5163":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:13469:8279":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:10897:7691":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:12622:7669":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:30234:6580":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:12433:7972":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:11721:7826":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"11:723:9019":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:12126:7910":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"20:4974:6213":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:4367:5143":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"6:1574:3743":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"15:0:2073":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:9545:7491":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"16:2642:8450":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:11109:7707":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"6:5986:5171":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:4018:11335":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"20:3019:5141":{"crate_id":20,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:4861:10655":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:42119:6699":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:7722:9739":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:42417:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"20:5485:5210":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:13211:8213":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:11191:9720":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:6108:7205":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"20:4847:3698":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"16:2830:8458":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:5408:9707":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"16:4818:8510":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:618:9671":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"16:5944:8564":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"16:7029:8753":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"6:6021:10794":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"18:564:7332":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"16:7293:8796":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:11391:7767":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:43266:9497":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:8253:11375":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:11355:7760":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:40677:9188":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:8867:11383":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:12608:11270":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:21347:11407":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:10013:2263":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"18:599:35185":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:1630:3747":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:5817:5717":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:2241:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:2347:182":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:41162:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:12360:192":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:2892:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:9839:7558":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"6:5954:10769":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:3181:32099":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:2890:210":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"2:6677:16673":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"5:4941:2249":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"20:3092:5146":{"crate_id":20,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:9721:7549":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:3934:2249":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"1:8813:2311":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:21976:9267":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:10721:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"17:9866:7560":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:41489:193":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:13821:8393":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:3233:2286":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:13865:8400":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"5:2687:10856":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:21124:11400":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"6:4517:5160":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:2804:8774":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"5:7062:33564":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"20:1361:3737":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:1629:587":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:44069:10948":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:10068:7590":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"14:40:7742":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"6:4823:10647":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:5949:206":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"16:6400:8656":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:3142:7398":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:1924:11314":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:42664:9480":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"6:1662:3750":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:13399:8262":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:11478:9858":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:8132:2231":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:9577:7536":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"5:1008:7126":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"16:4510:8501":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"11:1012:9029":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:11401:9692":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:10670:7671":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"5:3719:2276":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"6:4605:5165":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:3151:234":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"5:5281:16544":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"16:2357:8438":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:10657:9845":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:2691:2536":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"20:4797:2859":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:41556:6630":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:10615:7664":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"17:11969:7889":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:5933:7217":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:10334:7509":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:6704:6208":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:13678:8354":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"5:7076:6630":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"16:5847:8555":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:3152:29991":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:21:683":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"17:12923:8130":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"6:5899:5726":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"5:3734:9119":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:10080:7591":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"6:4303:5139":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"14:221:9015":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:21342:11397":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:8997:9830":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:3078:11285":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:2364:2213":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"5:1669:7126":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"18:80:23468":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"8:0:2067":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"18:96:23469":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"13:226:10578":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"16:7335:35169":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:42642:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:10649:7667":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"6:6840:10820":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:47575:9646":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:44341:9043":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1:10876:24707":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"20:4887:3673":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:13625:8336":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"11:695:9018":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:22402:9271":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:47651:9650":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:11427:9224":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"6:5804:5716":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:541:2982":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:13041:8171":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"6:4878:1005":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"6:1672:3751":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:930:9021":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"11:311:10583":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:10316:7632":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:20606:32828":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:11883:30642":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"20:1472:3747":{"crate_id":20,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"16:6061:18674":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:41219:11322":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"6:6043:10802":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:12138:7911":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"20:563:2986":{"crate_id":20,"path":["libc","unix","sigval"],"kind":"struct"},"16:6575:19563":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"9:325:10593":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:10735:7679":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:9149:28779":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"2:43298:9501":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:4780:10631":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:10691:19737":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:2150:588":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"7:0:1548":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:9748:7509":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"16:5920:8415":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:45757:9569":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"16:4037:8496":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:10681:7672":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"16:6943:19565":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:13433:8270":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"16:6876:8472":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:11120:9719":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"2:42435:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:1785:9681":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:9312:7511":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"20:4870:3670":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:4991:10709":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"16:7259:6688":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:911:7160":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:7201:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:6687:3673":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:41497:210":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:41830:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:47712:9655":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"5:2956:6677":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:1561:2311":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:42380:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"11:1858:9041":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"15:219:18660":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"5:3209:9038":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"6:5007:5186":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:3703:9692":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"9:481:18556":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"6:123:2664":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:8759:9813":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:386:7381":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:11930:744":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"18:727:7365":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:39317:8817":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"16:154:7109":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:6575:2346":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:2748:2543":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"1:3155:24898":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:10168:9213":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"20:3355:5172":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Chdr"],"kind":"struct"},"1:361:9668":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:11922:1372":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:45402:9550":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:4279:9696":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:8256:19604":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"20:614:3008":{"crate_id":20,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"20:3006:5140":{"crate_id":20,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:43188:9492":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:11319:7755":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"18:113:23470":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"20:4151:5705":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:40205:9435":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:22501:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:11272:10963":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:2508:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:2931:2489":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"16:6474:8482":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"5:875:7134":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:39338:9286":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:13240:8221":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:8548:19625":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:22270:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"6:4435:5150":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:4186:6709":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"20:5455:5205":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"16:4872:8512":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"11:749:7143":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"5:6600:7158":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"6:4763:10620":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"6:1494:3735":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:8200:11321":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"1:10491:7236":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"5:2967:34542":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:9988:9034":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"6:4462:5153":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"20:2982:5138":{"crate_id":20,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"20:4910:6209":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"20:4120:5717":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"5:7022:6630":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:9612:7195":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:1636:6575":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"6:6135:1733":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:46681:9606":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:4555:5162":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"16:5643:8533":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"18:736:23479":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:11069:19632":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"16:6022:19561":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:8490:19623":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:10465:7645":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:2752:11386":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"5:6619:7171":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"6:500:2978":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:46123:9580":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"20:1416:3743":{"crate_id":20,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:2980:11283":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"1:8315:9698":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:5716:2335":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"10:0:2069":{"crate_id":10,"path":["adler"],"kind":"module"},"1:8170:2262":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:47491:9644":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"16:2337:8432":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:42408:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"6:4907:10681":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:9917:7570":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"5:2032:2276":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:43210:9494":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"6:4523:5161":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"20:3080:1934":{"crate_id":20,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:13082:8184":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:2925:2487":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:11446:7775":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"6:5828:5718":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:587:2989":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:43372:9503":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:8521:19624":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:6920:2290":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"16:6351:19562":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:2162:16702":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"16:5779:8543":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"14:7:9008":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:43728:9513":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:10029:27190":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"2:41248:10931":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"6:573:2987":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"16:7366:19567":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"6:4817:10646":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:4599:10448":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:43921:9530":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"5:2220:34647":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"5:2240:10852":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"18:574:7323":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"5:7121:6630":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"16:5402:7497":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:11268:9221":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"6:7277:10823":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"18:609:7339":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:45456:9552":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:8360:19619":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"6:1505:10604":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:4445:5151":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:9683:7547":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:8931:7380":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:22237:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:9350:35174":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:0:2075":{"crate_id":17,"path":["object"],"kind":"module"},"20:2995:5139":{"crate_id":20,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:959:9027":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"5:1511:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"6:5919:10748":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"16:7803:8869":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:4586:5164":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:43340:9213":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:11239:9725":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:12178:7915":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"5:1099:34551":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"7:32:18543":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"5:775:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"16:5630:8528":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:21813:9247":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:6935:7228":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"20:4138:5719":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:5589:9169":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:9138:7507":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"20:4203:5725":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlattr"],"kind":"struct"},"2:20919:11406":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"6:4482:5156":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:3481:2230":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"16:7743:8469":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"5:1299:9033":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:22435:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:4006:11333":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"6:6819:6216":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:6804:6215":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:5792:5714":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:11083:2239":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"16:6854:8728":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:6124:7223":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:11720:9203":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"6:4747:10618":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"5:7377:7165":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"20:4174:5721":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlmsgerr"],"kind":"struct"},"2:31982:10589":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:20739:11401":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:32018:9275":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"20:4095:5714":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:11785:7855":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:9298:9206":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"17:12902:8122":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"6:482:2975":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"18:491:7322":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:4144:9159":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:40446:9182":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:8883:11382":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:20770:11398":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"1:585:11260":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"6:4684:5174":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:4400:8498":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:11197:9857":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:4010:11334":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"11:97:10579":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:4783:11336":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:8508:2311":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"16:6890:8473":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:42392:8888":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"18:660:7346":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"6:5876:5722":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:676:11264":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"1:7867:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:11434:7772":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:40358:9447":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"5:7305:9143":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"20:0:820":{"crate_id":20,"path":["libc"],"kind":"module"},"16:6981:8746":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"11:2049:9028":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:20574:32707":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"16:8256:8932":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"20:5467:5207":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:1755:9147":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"18:671:7352":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"16:2298:18675":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"6:7539:5208":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"16:5616:8524":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:530:7208":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:42654:2307":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"6:1535:3739":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"5:3168:2311":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"20:55:2587":{"crate_id":20,"path":["libc","unix","DIR"],"kind":"enum"},"2:11786:16564":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"5:2959:10849":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:10491:7647":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:6771:16665":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"5:3580:2311":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"11:2180:10587":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"6:7551:5210":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:12006:7893":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:4706:11340":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:11813:7862":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:3463:2232":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"17:10052:7588":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"6:4943:10705":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:13453:8276":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:9032:10953":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"16:4969:8515":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:11932:746":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"16:3047:18703":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"14:31:9008":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"20:1431:3744":{"crate_id":20,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:11993:7890":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"5:5948:2249":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:1433:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"5:4193:2249":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"6:4694:5175":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:3317:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:43220:9495":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:9072:9719":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:901:7143":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:41202:9196":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"6:4468:5154":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:11064:10950":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"16:4845:8511":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:20778:31752":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"1:11918:1520":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"18:521:23481":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:21781:9246":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:30798:183":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"16:6132:8600":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"20:1514:3751":{"crate_id":20,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:3378:2249":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"17:10705:7674":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:2215:2205":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"6:1637:3748":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"11:2201:2201":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:21441:9241":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:47697:9654":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"16:2967:18702":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:5357:9704":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"5:6270:7143":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:2787:11389":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:12098:7906":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"16:8142:8923":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:10270:7628":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"20:3363:5173":{"crate_id":20,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:47367:9642":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"18:515:7320":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:643:11263":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"5:1423:9034":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:9895:7565":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"5:7243:9139":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:9275:35180":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"11:1538:9037":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"18:590:7333":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:3233:16525":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"20:1543:3755":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"16:2786:8456":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:46001:9577":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:10402:7637":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:11503:9229":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"5:6468:7126":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"20:1368:3738":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:8289:9798":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:7850:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"17:11902:7876":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"6:7528:10832":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"11:2168:10585":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:6609:217":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:47686:9653":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:40315:9445":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:10626:7665":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:22336:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:2783:11387":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:40335:9176":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"14:165:18642":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:5579:206":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:43822:9524":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"5:1479:9035":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:8841:31947":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:8947:9823":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:875:9019":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:1666:1091":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"10:36:10592":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"16:5305:8520":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"10:44:9044":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"16:8170:8925":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:0:496":{"crate_id":2,"path":["core"],"kind":"module"},"20:582:2989":{"crate_id":20,"path":["libc","unix","servent"],"kind":"struct"},"17:13443:8273":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:8673:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:9120:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"6:547:2983":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"11:403:35146":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:12085:7904":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:355:9667":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:3962:11331":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"5:1520:9116":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:43138:9489":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"5:1461:9019":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:21864:9253":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"11:2186:35144":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"16:6671:8697":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:11653:7824":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:11937:1503":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"6:4379:5145":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:40397:9179":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:11337:7243":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"6:6647:3698":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"0:73:1692":{"crate_id":0,"path":["num_cpus","get_physical"],"kind":"function"},"16:7557:8852":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:10303:7631":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"20:5019:6216":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"16:5655:8467":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:40685:9190":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:867:6630":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:20589:32827":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"16:3872:8494":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"6:5014:5187":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:6774:6213":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:8821:9818":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"20:1550:3756":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"16:6904:8732":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:30428:31012":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"17:13219:8216":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:3934:11328":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"20:4229:5727":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:47788:9659":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:4601:10450":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"16:6336:8648":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:2695:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1:7706:11303":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"20:3348:5171":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Chdr"],"kind":"struct"},"1:4868:11360":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:20604:32825":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:13516:8292":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:11163:7714":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"17:8718:7372":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:40407:9448":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:13292:8230":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:9164:6704":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"20:549:2984":{"crate_id":20,"path":["libc","unix","winsize"],"kind":"struct"},"17:10589:7661":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"5:258:7126":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:11942:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:11174:7241":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"5:6629:7173":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"2:40658:2291":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"20:501:2979":{"crate_id":20,"path":["libc","unix","rusage"],"kind":"struct"},"6:4549:10616":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:7563:10837":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:3270:2281":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:40652:9186":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"16:3300:8488":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:413:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"16:2694:8452":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"16:6179:8607":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"0:72:1674":{"crate_id":0,"path":["num_cpus","get"],"kind":"function"},"16:7016:8750":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:4148:11349":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"18:481:7321":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"16:2808:8457":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"20:4925:6211":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:13249:8222":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:4926:11367":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:8805:9816":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:10711:2226":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"16:5032:8517":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:39993:9421":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:41413:2311":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1:8456:2309":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:7875:9741":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:47671:9652":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"20:4781:3669":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"6:7598:10846":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:39957:9418":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"6:5848:5705":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:6155:5749":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:4394:5024":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:1846:9684":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:12516:7205":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"16:5677:19558":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"16:2742:8454":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:8835:9709":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:10864:9708":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"1:10699:9850":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"16:4932:8514":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:10681:10959":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"17:10015:7582":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"14:0:2072":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:13194:8208":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:10275:9217":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:1919:19669":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:9188:35172":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"5:7196:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:10516:7649":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"5:7227:31025":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:13777:8378":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:9796:7555":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"5:3180:33566":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:8977:9826":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:20889:16701":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"2:23047:9144":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:11484:7779":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:30003:11324":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:2928:2488":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:13411:8265":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"20:3086:5024":{"crate_id":20,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"20:4131:5718":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"5:6786:7177":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:43614:9230":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:10092:7592":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:4760:7215":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:8989:9828":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"6:4715:5177":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:8632:19605":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"20:574:2988":{"crate_id":20,"path":["libc","unix","tms"],"kind":"struct"},"16:6535:7112":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"2:21098:11393":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"17:10478:7646":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:2212:2204":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:41327:9197":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:11740:16555":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:7499:9861":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"6:4786:10634":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"6:526:2980":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:2468:2233":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"5:4362:7150":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:44061:10946":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"6:4455:5152":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"20:489:2977":{"crate_id":20,"path":["libc","unix","timespec"],"kind":"struct"},"2:20994:11394":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"6:6833:10817":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:3272:2282":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:45664:9561":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:7214:2491":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:5013:9702":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:12770:8016":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:44045:10942":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:8829:6630":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:44096:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:47631:9648":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:46335:9599":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:8971:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"2:2846:16689":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:46571:9603":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:30250:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"17:11520:7788":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"6:6597:10816":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"6:4373:5144":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:12496:7990":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"20:3443:5182":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:40306:9170":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:2910:2265":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:13015:8165":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:13803:8387":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"16:4568:8503":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"5:7042:7143":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:9408:16639":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:7891:2276":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:5709:2334":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"6:4677:5173":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:11266:10962":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"6:4769:10623":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:487:7384":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:43954:9234":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"11:332:7115":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"6:1594:3745":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"20:4919:6210":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:10967:7695":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:2762:8772":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:10416:7641":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:44299:9541":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:10686:2222":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"2:40009:9422":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:12282:7951":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"5:1439:6630":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:44117:9536":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"5:4031:7126":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"11:986:9028":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:3700:9691":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:6319:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:20851:11405":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"6:7608:6562":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"20:3166:5155":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:46617:9604":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"20:5494:6562":{"crate_id":20,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:44053:10944":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:6865:7227":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2:4254:207":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:10255:27187":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:9110:9832":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:44057:10945":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:7624:9731":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:5522:2712":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:6211:7217":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:8254:9202":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:40155:7183":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:4764:388":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"20:1350:3735":{"crate_id":20,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"20:3482:5186":{"crate_id":20,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:9098:7506":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"16:5708:8537":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:7837:2223":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"20:3197:5159":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:1048:8759":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:46381:9600":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:2521:237":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"20:3380:5175":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:13356:8247":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"20:542:2983":{"crate_id":20,"path":["libc","unix","pollfd"],"kind":"struct"},"1:7043:28761":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:1543:2249":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:1915:9151":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:12059:7901":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:41404:6629":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"16:5724:8539":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:9946:7574":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"6:488:2976":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"6:6719:6210":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:532:2981":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:7815:2225":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"16:3446:8489":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"6:7249:2934":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:11941:1131":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:40075:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:9557:7509":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"20:3489:5187":{"crate_id":20,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:2779:8773":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"9:421:18559":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:11252:16758":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:41353:181":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"16:3585:8490":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:40165:9432":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:39303:9284":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:11037:19631":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"6:119:2663":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:2745:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"17:12550:7996":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:20546:2550":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:5050:10731":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:13265:8226":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:5090:191":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"5:2957:34539":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:11940:1558":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"6:5067:10734":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"20:4185:5723":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:41710:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:40326:9175":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"5:7269:7156":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"2:42126:6701":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"16:6218:8628":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"5:4163:2249":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:40028:9424":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:9627:7200":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"16:7635:8857":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:12385:9239":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"16:6793:8723":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:2821:16686":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:9424:7519":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:4474:5155":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"6:7516:5207":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:1466:1697":{"crate_id":2,"path":["core","mem"],"kind":"module"},"1:947:9024":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:3805:9693":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"6:4962:5183":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"16:8156:8483":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"6:4739:5180":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"18:624:35183":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:13698:8357":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:43849:9233":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:2602:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"6:7510:5206":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"11:844:9027":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:40348:9446":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"20:3286:5166":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:10894:9816":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"1:4531:11357":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:21569:2233":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"20:4806:6206":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"20:3059:5143":{"crate_id":20,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:8153:2260":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"20:1386:3740":{"crate_id":20,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:10676:10957":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"17:10452:7644":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:9696:7529":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:41548:9034":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:40227:9436":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"20:3276:5165":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:1689:3753":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"20:1377:3739":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:8420:19621":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"16:7543:8479":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:11258:7741":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:9409:19639":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"1:11866:9864":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"6:1910:3811":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:11800:7860":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"17:9907:7569":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:3156:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"16:6520:8670":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"16:6506:8668":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:9826:7557":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:2544:2273":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"20:3160:5154":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"16:2448:8442":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"18:652:7323":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:9512:7530":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:3083:2293":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"2:42876:9208":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:5073:10736":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:8858:7376":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"9:445:18557":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:12403:7969":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:1768:609":{"crate_id":1,"path":["std","env"],"kind":"module"},"11:817:9024":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:13419:8268":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:11522:9728":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"7:79:18550":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:9469:7522":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"5:819:7132":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"16:7626:8856":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:43322:2263":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"11:968:8759":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:3348:2291":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"5:7180:2202":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"16:4596:8504":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"18:0:2076":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:8753:7373":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"5:3139:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:10960:7238":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:47750:9657":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:11044:9815":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"20:3180:5157":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:9498:7529":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"9:352:18572":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"16:6460:8465":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"11:119:7113":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:11931:745":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:9595:7194":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:8899:11384":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:2694:225":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:8389:19620":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:6432:2344":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"16:2720:8453":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"6:1568:3742":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:45955:9575":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:3141:16692":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:11234:7727":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"20:3032:5142":{"crate_id":20,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:11339:7756":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:21872:9254":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:9443:7521":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"5:5277:16543":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:9523:7531":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:13426:8269":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"11:285:10580":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:2263:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"5:4392:2249":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:8788:7374":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"5:3327:7160":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"17:11502:7787":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:10545:7400":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:11556:7793":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"20:2976:5137":{"crate_id":20,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:11011:7697":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:9162:6703":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:13033:8170":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"5:6389:6630":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"16:7478:8476":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:13145:8197":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:9028:7505":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:2826:8778":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"20:4107:5716":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"11:0:2070":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:3424:2229":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:11934:1504":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:11136:7708":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:41990:2333":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:42633:9474":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:44238:205":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:40383:7343":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"16:5741:19559":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"6:1701:3755":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"16:6662:8696":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:8293:2768":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:39076:16527":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"2:12311:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:1565:6630":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:2757:11388":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:20932:2233":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:8076:2227":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"2:21000:11396":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"5:3201:9040":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"5:7360:7160":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:45587:9557":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:43774:9522":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"6:7271:6560":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:12522:7992":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:2855:7214":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"6:6725:6211":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:6561:2345":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"6:4853:10650":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:20948:11392":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"16:7065:8758":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"16:4702:8506":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:43576:2259":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:45609:9558":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:13101:8185":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:12046:7899":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:22303:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"5:5858:2332":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:9213:9683":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:8416:2307":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"16:2404:8440":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:12388:7965":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:6396:2338":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"20:134:2663":{"crate_id":20,"path":["libc","unix","FILE"],"kind":"enum"},"1:3193:2284":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:8954:24199":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:45424:9551":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"18:719:7362":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:14:2176":{"crate_id":2,"path":["core","write"],"kind":"macro"},"20:4943:6212":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:420:7383":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:8310:19618":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:7594:11273":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:2391:1922":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:40643:1926":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"5:3668:7126":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:2773:16680":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:3196:16524":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:4409:2375":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"16:2668:8451":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"5:1285:9028":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:44329:9544":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:6066:10808":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:40636:9185":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:8514:2312":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:554:9670":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:41429:6630":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"16:2426:8441":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:45526:9555":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:39123:9279":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:7285:30644":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"6:5766:5712":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:9011:24682":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"20:4180:5722":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:9127:9833":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"6:6564:2901":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:6164:8605":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:12894:8119":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:8189:9788":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:4:1018":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:9822:7556":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"20:5447:6561":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:8953:7498":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"20:3137:5151":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:12646:8014":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:44049:10943":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:20780:16701":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"2:21849:31022":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:6780:11390":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:7205:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"16:7498:8850":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:40274:9166":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:2210:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:2376:2219":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:2350:2209":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:5990:9171":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"16:5976:8421":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:2316:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"9:388:18558":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:13181:8202":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:3904:11326":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:11585:7804":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"20:4101:5715":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"5:7013:9117":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:8439:2308":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:22567:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"17:10598:7695":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:12358:7960":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"20:4077:5713":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:2795:16681":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:13488:8284":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:39154:198":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:9413:9207":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"20:5064:6219":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:9062:218":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"11:805:11269":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:41438:6688":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"1:2219:2008":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"17:10000:7578":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"5:4001:7143":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"20:3408:5178":{"crate_id":20,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:9150:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"6:1680:3752":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:4983:10707":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:6795:6214":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:47037:9639":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:41540:2311":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"17:13689:8355":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"16:6307:8462":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"5:6717:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"6:4928:10696":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"16:2931:18701":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:9933:7572":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:12576:7998":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:39037:16606":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"16:5797:8547":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"16:7509:8477":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:6355:9715":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"20:1574:3758":{"crate_id":20,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"20:4193:5724":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"5:3567:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:45903:9573":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:10261:9216":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:40418:2261":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"16:6696:19564":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"5:7168:2201":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:43586:9509":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:40432:9181":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:41870:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:13066:8181":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:10445:2283":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"1:4135:11348":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"16:6327:8647":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:11770:7851":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"20:4904:6208":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:43308:2262":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"5:7052:7138":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:2811:16684":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"9:234:2307":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:4753:5181":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:43109:9485":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:43911:9526":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"6:4728:5179":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:41471:6689":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:10840:7688":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"16:2764:8455":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:43230:9496":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:1821:9682":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"20:1558:3757":{"crate_id":20,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:8104:2290":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"16:2905:8461":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:10977:7240":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:12318:7956":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:242:7378":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:4436:6712":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"16:8072:8914":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:9148:35175":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:9403:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"17:12510:7991":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"6:6710:6209":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:21988:11325":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"6:5057:5184":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:11422:9693":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:3315:2270":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:7645:7236":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:45312:9546":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:41565:183":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:30322:31009":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"17:12345:7959":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:975:7386":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:12799:8036":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"6:6743:6212":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:3162:16608":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:2933:7396":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:9415:7234":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"20:590:2990":{"crate_id":20,"path":["libc","unix","protoent"],"kind":"struct"},"2:2838:16687":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"16:7488:8849":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"5:892:2311":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:3647:6630":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"5:1371:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"11:399:35145":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"6:7294:6561":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:7694:9679":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"2:39511:25044":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"11:2060:9029":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"16:5594:8468":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:10289:9218":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"6:1648:3749":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"16:8269:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:10079:9836":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"6:0:820":{"crate_id":6,"path":["libc"],"kind":"module"},"6:4637:5168":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"9:502:9098":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"18:614:35184":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:888:9020":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:6505:2340":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:21675:9244":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"16:7757:8861":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:21571:11395":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:43280:9500":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:12915:8129":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"11:1027:18636":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:11360:9691":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:21117:2233":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"20:3154:5153":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:1544:3740":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"6:4419:5148":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:9218:7509":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:13121:8193":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:47765:9658":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"20:5439:6560":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:11938:1500":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:1080:9033":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:8984:9827":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:11929:747":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"6:6027:10797":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"11:1831:7160":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:13667:8349":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:41291:9463":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:20992:2233":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:13721:8370":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:8359:9203":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"5:1773:7160":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"20:1355:3736":{"crate_id":20,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:6606:6206":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:4877:11361":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:13332:8240":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"20:4069:5712":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:595:2990":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:45627:9559":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:10798:19629":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:45356:9548":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"20:1398:3741":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"16:5367:18673":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:10857:19630":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:2842:16688":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:10428:7642":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"0:0:1809":{"crate_id":0,"path":["num_cpus"],"kind":"module"},"18:681:7353":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:10885:7690":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"16:7711:8859":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:10971:7239":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"6:6007:10791":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:13461:8277":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:1499:3736":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:10354:7634":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"6:6624:2768":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"13:0:2065":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:7591:2314":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:12835:8067":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:42617:9471":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:3488:1923":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"6:6670:3670":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"16:2879:8460":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:9178:7508":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"5:4233:2311":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:3385:9154":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"1:8854:9819":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"6:6129:5748":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:11220:7726":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:8909:2262":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:2921:2486":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:2816:16685":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:4703:5176":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:2897:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:11538:9210":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:9806:2233":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:4351:9697":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:42352:10932":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"20:3308:5168":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:41910:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:7619:9729":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:10026:7583":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:844:2311":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"5:1500:9018":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"16:7529:8478":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:10569:7656":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:39138:200":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:42672:9481":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"11:365:7117":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:30264:31029":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"16:6390:8655":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:13024:8169":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:8195:19606":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"6:568:2986":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"5:2167:10848":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"11:1818:2311":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"20:4824:2768":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"20:3471:5185":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"16:4540:8502":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"20:5461:5206":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"6:7504:5205":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:11459:7777":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:12607:8004":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:12483:7989":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"20:557:2985":{"crate_id":20,"path":["libc","unix","linger"],"kind":"struct"},"20:536:2982":{"crate_id":20,"path":["libc","unix","iovec"],"kind":"struct"},"1:1844:9683":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"6:7574:10841":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"16:6728:8710":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"20:1436:3745":{"crate_id":20,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"6:4722:5178":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:9488:7527":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"5:779:7129":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:9853:7559":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:12298:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:9410:2225":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:3472:30266":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"20:483:2976":{"crate_id":20,"path":["libc","unix","timeval"],"kind":"struct"},"20:469:2974":{"crate_id":20,"path":["libc","unix","group"],"kind":"struct"},"2:42625:9473":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:6508:2341":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"20:5046:6218":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:11464:9227":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"16:6376:8464":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:4258:9160":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"6:6588:2859":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:0:2074":{"crate_id":16,"path":["gimli"],"kind":"module"},"16:6868:8730":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:40245:9438":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"16:6488:8660":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:2693:226":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:4605:16624":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"5:2458:10853":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:41590:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:42133:6702":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"6:554:2984":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"5:6137:11484":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"6:6076:5727":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:4412:5147":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"20:3296:5167":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"16:7859:19570":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:3638:11323":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:7673:11265":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:8683:7371":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"20:3401:5177":{"crate_id":20,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:11641:7821":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:45933:9574":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:47179:9640":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"6:4841:5721":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:3513:7143":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"6:5835:5719":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:5736:5690":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:1787:7388":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:46647:9605":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:12505:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"6:1602:3746":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:21955:10864":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:12236:7941":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:39242:203":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"20:3127:5150":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:39220:201":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:1071:9029":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:4437:11351":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:9816:222":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"5:7280:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:1985:184":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:13385:8255":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"5:2046:9119":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"18:699:7356":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:13257:8224":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"16:5998:19560":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"16:5557:8463":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:4662:11362":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"16:6935:8735":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"6:5966:10773":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:11936:1502":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"11:1121:9033":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:10451:2281":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"11:2130:18631":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"2:2469:16635":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:11879:7873":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"11:1838:9038":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:13344:8246":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:7820:2222":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:11254:9727":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:44041:10941":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:21962:9266":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:12113:7909":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:1978:7395":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:12194:7920":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:4380:7182":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"20:3209:5160":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"6:4388:1934":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:12980:8164":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"20:568:2987":{"crate_id":20,"path":["libc","unix","itimerval"],"kind":"struct"},"6:1526:3738":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"16:5386:7496":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"16:3899:8495":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:8498:2310":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:39941:31034":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"16:7449:8838":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"16:55:8901":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"2:40001:9155":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:1034:7387":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:3998:9156":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:10505:7648":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:43128:9488":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"16:6819:8724":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:10238:9707":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:32109:2544":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"6:4937:10702":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:2311:188":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:10125:7595":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:11729:7358":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:5377:9705":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:13612:8330":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"5:5874:16990":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:1589:9040":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:9453:19640":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"5:6316:7126":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:8791:9815":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"5:7113:6630":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"20:477:2975":{"crate_id":20,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:41304:9694":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"6:4327:5141":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:13135:8196":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"16:6919:35166":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:480:7207":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"14:215:9013":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"6:4534:10609":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:13791:8385":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:10751:28776":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"6:1556:3741":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:8348:11371":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"16:5418:8522":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:20587:32823":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:8255:9794":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:21797:10861":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:11422:7771":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:11600:7810":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:43706:16570":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"20:521:2980":{"crate_id":20,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:953:9026":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:2791:16682":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:22468:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:10741:2228":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"11:657:6630":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"16:7317:35168":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"6:4625:5167":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:11471:7778":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:9158:6702":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:21910:31019":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"16:7077:19566":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:2700:228":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"14:160:9008":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:11410:7768":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"11:1068:9031":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"18:636:7345":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"20:3370:5174":{"crate_id":20,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:42112:6700":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:7961:9742":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"16:6146:194":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:10747:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"16:8025:8910":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:45486:9553":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:8936:9820":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"11:2033:8759":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:8183:2259":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"6:579:2988":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"5:7030:9134":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:11615:7816":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:1577:9038":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"12:0:2071":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:9373:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:47613:9647":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:46831:9607":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"4:0:2066":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:44065:10947":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"20:3187:5158":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:6156:9714":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"16:8180:19571":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:11899:26950":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:13857:8397":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:13879:8403":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"16:5071:8518":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:41630:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:1895:9685":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"6:7462:6217":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"20:1504:3750":{"crate_id":20,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:638:9674":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:10377:7635":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:40283:9441":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:42362:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"16:7837:8873":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"5:5684:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:8271:9796":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:12019:7600":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"20:4817:6207":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:3168:16607":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:40265:9164":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:5889:5724":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:12333:33097":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"18:644:7323":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:10386:7235":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"11:2194:10590":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:11032:9814":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"16:4789:8509":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"6:653:3008":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"5:7084:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"6:1512:10607":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:10247:9215":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"6:4886:10666":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"2:47537:9645":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:11924:1486":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"17:12307:7955":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:6321:8646":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"6:6014:10793":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:5742:2336":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:4389:6711":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:47289:9641":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:4799:10639":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:11861:7872":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:8941:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:9529:7191":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"16:4480:8500":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:44129:16797":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:8195:9790":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:21926:31028":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:45787:9570":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:41421:9034":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:8573:19626":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"16:4728:8507":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:857:9034":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"20:4298:5749":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:4785:31156":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"20:5033:6217":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","termios2"],"kind":"struct"},"17:8598:19627":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:41185:9194":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:43426:9215":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:20559:32707":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"6:494:2977":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"20:138:2664":{"crate_id":20,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:1947:7392":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:21889:31038":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:4811:798":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:12158:7914":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:11844:7869":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:45378:9549":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:21093:2233":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"20:4278:1733":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:5024:10714":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:13564:8329":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:1589:3744":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:43526:9507":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:43175:9433":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:40092:31025":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:4119:11346":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:39264:2195":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:8667:7497":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:7598:16669":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:13744:8371":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"16:2572:8447":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:41670:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:9653:7543":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:2855:16691":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"5:4845:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"5:6761:7174":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"16:7596:19568":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:40108:9431":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:39981:9420":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:10206:9214":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:45646:9560":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:2588:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"17:9772:7554":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"6:4871:10661":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:43886:9525":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"18:507:7323":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:45508:9554":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:0:1394":{"crate_id":1,"path":["std"],"kind":"module"},"11:667:9017":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:11939:792":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:10721:7676":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:40061:9429":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:4097:28764":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:43490:9506":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:1783:9680":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"16:2546:8446":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:501:7140":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:8176:2263":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"16:2594:8448":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:41480:6687":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"16:6254:8641":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"6:62:2587":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"1:5202:190":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"16:6767:8722":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:1931:655":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"5:3799:7160":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"11:1845:9039":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"5:7256:9141":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:10712:19738":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:10774:9219":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"2:7321:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:22369:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"5:3593:9034":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:7266:2490":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:11224:9724":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:7883:2274":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"16:6717:8709":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"20:3071:5145":{"crate_id":20,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"6:474:2974":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"6:4314:5140":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:10743:7681":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:7810:2224":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"16:6990:8749":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:2743:2541":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"17:8979:35181":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"16:2319:8430":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:10440:7643":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:8263:9788":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"16:5811:8548":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:9876:7448":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:9566:7510":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:8651:7496":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"16:5886:8558":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"5:626:9111":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:11821:7864":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:12293:7953":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:10010:9682":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"1:3158:24899":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:11101:10961":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:11735:16556":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"5:1489:9017":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:8777:9814":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"20:527:2981":{"crate_id":20,"path":["libc","unix","hostent"],"kind":"struct"},"5:1270:9029":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"16:5963:8571":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:30228:6579":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:11946:7884":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:13842:8396":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:11917:418":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:10635:7666":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:9067:219":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"16:7572:35167":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"11:2174:10586":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"16:7669:8480":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"11:1852:9040":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:2799:16683":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:8237:9694":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:3956:11330":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:5270:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:4459:11352":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"9:174:18623":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"16:7467:8846":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:6259:206":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:5343:9703":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:2366:2214":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:4702:11337":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"16:6243:35170":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:10039:7586":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:8120:2228":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:10283:7630":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:11573:7801":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:4113:9158":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"20:3174:5156":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:5593:7218":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:7168:16670":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"20:4773:2901":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"5:4073:9034":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:9110:2232":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:44077:10950":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"6:4847:5725":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:11056:1981":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:6724:30958":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:12033:7898":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:21453:32711":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:10555:7651":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"2:2244:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:40185:9433":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:41750:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"20:5417:2934":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"6:562:2985":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:46493:9602":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:43149:9490":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"6:4290:5138":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"6:1716:3757":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:13309:8237":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:3898:11327":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"5:673:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"6:6572:3669":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:2558:7195":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"11:736:9020":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:10936:7694":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:11544:7792":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:936:11269":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:10448:2285":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"20:1537:3754":{"crate_id":20,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:7522:10831":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:9038:35178":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:43900:16571":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:8443:19622":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:8163:2261":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"17:9641:7541":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"20:3257:5164":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:39929:9415":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:43100:9484":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:5586:7217":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:39198:202":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:3948:11329":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"16:7588:8855":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"20:4995:6214":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:4793:10636":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:11916:940":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"3:0:442":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"11:1501:18637":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:2962:16526":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"16:5000:8516":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"6:4505:5159":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:9109:210":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"2:5471:2249":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"17:13169:8199":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:11529:9728":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:2740:2485":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:9160:194":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"1:11927:642":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"11:793:9035":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:9906:9460":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"16:4445:8499":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:4010:9157":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:10142:19711":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:926:9018":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"16:7767:19569":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:12449:7976":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"16:5571:8466":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:42872:10940":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"}},"external_crates":{"20":{"name":"libc","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}