{"root":"0:0:1864","crate_version":"1.16.0","includes_private":false,"index":{"2:12302:27125":{"id":"2:12302:27125","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41765:181"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41763:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10083:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10083:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12296:28320":{"id":"2:12296:28320","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11549:16662"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12410:24787":{"id":"2:12410:24787","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12378:31382":{"id":"2:12378:31382","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12399:31389":{"id":"2:12399:31389","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12046:428","self::pattern":"2:11989:16661"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:9285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12297:31371":{"id":"2:12297:31371","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12317:2004":{"id":"2:12317:2004","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43979:2318","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12349:31376":{"id":"2:12349:31376","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11989:16661","str::split":"2:12337:2007","prim@char":"1:12046:428","str::split_terminator":"2:12346:31375"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43793:9585","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:9285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11994:9285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12009:16659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5511:6632":{"id":"5:5511:6632","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:9285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12358:31377":{"id":"2:12358:31377","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41763:183","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:9285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12288:835":{"id":"2:12288:835","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12046:428"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12361:31378":{"id":"2:12361:31378","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41763:183","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:9285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11994:9285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12009:16659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12376:2011":{"id":"2:12376:2011","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12311:27150":{"id":"2:12311:27150","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:12310:27149"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12402:31390":{"id":"2:12402:31390","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12046:428","self::pattern":"2:11989:16661"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:9285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11994:9285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12009:16659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12405:1857":{"id":"2:12405:1857","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11950:127","`FromStr`":"2:11949:2374"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41908:212","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:11949:2374","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11949:2374","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12287":{"id":"2:12287","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12288:835","2:12289:2088","2:12290:31368","2:12291:31369","2:12293:31370","2:12296:28320","2:12297:31371","2:12298:320","2:12299:319","2:12300:1725","2:12302:27125","2:12304:27126","2:12306:27127","2:12308:31372","2:12309:31373","2:12310:27149","2:12311:27150","2:12312:9313","2:12313:9601","2:12314:6675","2:12315:29664","2:12316:29681","2:12317:2004","2:12318:31374","2:12319:29683","2:12320:27166","2:12323:26778","2:12326:26780","2:12329:2072","2:12333:6684","2:12337:2007","2:12340:27158","2:12343:27160","2:12346:31375","2:12349:31376","2:12352:27162","2:12355:27164","2:12358:31377","2:12361:31378","2:12364:2232","2:12367:31379","2:12370:31380","2:12373:31381","2:12376:2011","2:12378:31382","2:12380:31383","2:12382:31384","2:12383:31385","2:12384:31386","2:12387:31387","2:12390:2053","2:12393:27167","2:12396:31388","2:12399:31389","2:12402:31390","2:12405:1857","2:12407:24782","2:12408:28276","2:12409:24786","2:12410:24787","2:12411:24788","2:12412:31391","2:12414:11363","2:12415:31392"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12411:24788":{"id":"2:12411:24788","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12408:28276":{"id":"2:12408:28276","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39797:28283","Self::is_ascii":"2:12407:24782"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41763:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39797:28283","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73:1743":{"id":"0:73:1743","crate_id":0,"name":"get_physical","span":{"filename":"src/lib.rs","begin":[108,0],"end":[110,1]},"visibility":"public","docs":"Returns the number of physical cores of the current system.\n\nThis will always return at least `1`.\n\n# Note\n\nPhysical count is supported only on Linux, mac OS and Windows platforms.\nOn other platforms, or if the physical count fails on supported platforms,\nthis function returns the same as [`get()`], which is the number of logical\nCPUS.\n\n# Examples\n\n```\nlet logical_cpus = num_cpus::get();\nlet physical_cpus = num_cpus::get_physical();\nif logical_cpus > physical_cpus {\n    println!(\"We have simultaneous multithreading with about {:.2} \\\n              logical cores to 1 physical core.\", \n              (logical_cpus as f64) / (physical_cpus as f64));\n} else if logical_cpus == physical_cpus {\n    println!(\"Either we don't have simultaneous multithreading, or our \\\n              system doesn't support getting the number of physical CPUs.\");\n} else {\n    println!(\"We have less logical CPUs than physical CPUs, maybe we only have access to \\\n              some of the CPUs on our system.\");\n}\n```\n\n[`get()`]: fn.get.html","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12364:2232":{"id":"2:12364:2232","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11989:16661","`DoubleEndedIterator`":"2:7438:121","prim@char":"1:12046:428","str::rmatches":"2:12367:31379"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43929:9588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:9285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12383:31385":{"id":"2:12383:31385","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12373:31381":{"id":"2:12373:31381","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11989:16661","`DoubleEndedIterator`":"2:7438:121","prim@char":"1:12046:428","str::match_indices":"2:12370:31380"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43893:9587","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:9285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11994:9285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12009:16659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12314:6675":{"id":"2:12314:6675","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43711:2321","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12320:27166":{"id":"2:12320:27166","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12046:428","self::pattern":"2:11989:16661"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:9285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12380:31383":{"id":"2:12380:31383","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5527:2347":{"id":"5:5527:2347","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12323:26778":{"id":"2:12323:26778","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12046:428","self::pattern":"2:11989:16661"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:9285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12382:31384":{"id":"2:12382:31384","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12329:2072":{"id":"2:12329:2072","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41765:181","prim@char":"1:12046:428","self::pattern":"2:11989:16661"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41763:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:9285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12340:27158":{"id":"2:12340:27158","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12046:428","self::pattern":"2:11989:16661"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11805:9292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:9285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12333:6684":{"id":"2:12333:6684","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41765:181","prim@char":"1:12046:428","self::pattern":"2:11989:16661"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41763:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:9285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11994:9285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12009:16659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12355:27164":{"id":"2:12355:27164","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12046:428","str::splitn":"2:12352:27162","self::pattern":"2:11989:16661"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43847:9298","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:9285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11994:9285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12009:16659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12309:31373":{"id":"2:12309:31373","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12052:1447","crate::ops::IndexMut":"2:3066:11387","str::slice_unchecked":"2:12308:31372"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5509":{"id":"5:5509","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5510:32048","5:5511:6632","5:5514:32049","5:5517:32050","5:5525:32051","5:5526:32052","5:5527:2347","5:5528:24784","5:5529:24785"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12289:2088":{"id":"2:12289:2088","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12343:27160":{"id":"2:12343:27160","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11989:16661","`DoubleEndedIterator`":"2:7438:121","prim@char":"1:12046:428","str::split":"2:12337:2007"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43743:9295","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:9285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11994:9285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12009:16659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5528:24784":{"id":"5:5528:24784","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12410:24787"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12298:320":{"id":"2:12298:320","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12299:319","`u8`":"1:12063:1550"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5529:24785":{"id":"5:5529:24785","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12411:24788"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12308:31372":{"id":"2:12308:31372","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12052:1447","str::slice_mut_unchecked":"2:12309:31373","crate::ops::Index":"2:3062:11386"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12312:9313":{"id":"2:12312:9313","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12046:428"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43695:9305","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12318:31374":{"id":"2:12318:31374","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43989:9590","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12310:27149":{"id":"2:12310:27149","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_mut":"2:12311:27150"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12293:31370":{"id":"2:12293:31370","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:12291:31369"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12337:2007":{"id":"2:12337:2007","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11989:16661","`DoubleEndedIterator`":"2:7438:121","prim@char":"1:12046:428","str::split_whitespace":"2:12315:29664","str::rsplit":"2:12343:27160"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43725:2322","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:9285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12304:27126":{"id":"2:12304:27126","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10083:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10083:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12300:1725":{"id":"2:12300:1725","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41765:181"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41763:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10083:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10083:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12370:31380":{"id":"2:12370:31380","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11989:16661","`DoubleEndedIterator`":"2:7438:121","prim@char":"1:12046:428","str::rmatch_indices":"2:12373:31381"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43875:9586","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:9285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12409:24786":{"id":"2:12409:24786","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12414:11363":{"id":"2:12414:11363","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4542:11363"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44033:9236","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12306:27127":{"id":"2:12306:27127","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10083:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10083:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5517:32050":{"id":"5:5517:32050","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12313:9601":{"id":"2:12313:9601","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12046:428"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43701:9582","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12393:27167":{"id":"2:12393:27167","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12046:428","self::pattern":"2:11989:16661"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41763:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:9285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11994:9285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12009:16659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12367:31379":{"id":"2:12367:31379","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11989:16661","`DoubleEndedIterator`":"2:7438:121","prim@char":"1:12046:428","str::matches":"2:12364:2232"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43947:9589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:9285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11994:9285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12009:16659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12346:31375":{"id":"2:12346:31375","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11989:16661","str::split":"2:12337:2007","prim@char":"1:12046:428","`DoubleEndedIterator`":"2:7438:121","str::rsplit_terminator":"2:12349:31376"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43775:9584","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:9285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12390:2053":{"id":"2:12390:2053","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12046:428","self::pattern":"2:11989:16661"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41763:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:9285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1864":{"id":"0:0:1864","crate_id":0,"name":"num_cpus","span":{"filename":"src/lib.rs","begin":[1,0],"end":[485,1]},"visibility":"public","docs":"A crate with utilities to determine the number of CPUs available on the\ncurrent system.\n\nSometimes the CPU will exaggerate the number of CPUs it contains, because it can use\n[processor tricks] to deliver increased performance when there are more threads. This \ncrate provides methods to get both the logical and physical numbers of cores.\n\nThis information can be used as a guide to how many tasks can be run in parallel.\nThere are many properties of the system architecture that will affect parallelism,\nfor example memory access speeds (for all the caches and RAM) and the physical\narchitecture of the processor, so the number of CPUs should be used as a rough guide\nonly.\n\n\n## Examples\n\nFetch the number of logical CPUs.\n\n```\nlet cpus = num_cpus::get();\n```\n\nSee [`rayon::Threadpool`] for an example of where the number of CPUs could be\nused when setting up parallel jobs (Where the threadpool example uses a fixed\nnumber 8, it could use the number of CPUs).\n\n[processor tricks]: https://en.wikipedia.org/wiki/Simultaneous_multithreading\n[`rayon::ThreadPool`]: https://docs.rs/rayon/1.*/rayon/struct.ThreadPool.html","links":{},"attrs":["#![deny(missing_docs)]","#![allow(non_snake_case)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:72:1725","0:73:1743"],"is_stripped":false}}},"2:12316:29681":{"id":"2:12316:29681","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12315:29664"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44008:9592","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12412:31391":{"id":"2:12412:31391","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4541:31391"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44024:9502","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5525:32051":{"id":"5:5525:32051","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:72:1725":{"id":"0:72:1725","crate_id":0,"name":"get","span":{"filename":"src/lib.rs","begin":[73,0],"end":[75,1]},"visibility":"public","docs":"Returns the number of available CPUs of the current system.\n\nThis function will get the number of logical cores. Sometimes this is different from the number\nof physical cores (See [Simultaneous multithreading on Wikipedia][smt]).\n\nThis will always return at least `1`.\n\n# Examples\n\n```\nlet cpus = num_cpus::get();\nif cpus > 1 {\n    println!(\"We are on a multicore system with {} CPUs\", cpus);\n} else {\n    println!(\"We are on a single core system\");\n}\n```\n\n# Note\n\nThis will check [sched affinity] on Linux, showing a lower number of CPUs if the current\nthread does not have access to all the computer's CPUs.\n\nThis will also check [cgroups], frequently used in containers to constrain CPU usage.\n\n[smt]: https://en.wikipedia.org/wiki/Simultaneous_multithreading\n[sched affinity]: http://www.gnu.org/software/libc/manual/html_node/CPU-Affinity.html\n[cgroups]: https://www.kernel.org/doc/Documentation/cgroup-v1/cgroups.txt","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12299:319":{"id":"2:12299:319","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12063:1550"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12387:31387":{"id":"2:12387:31387","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12046:428","self::pattern":"2:11989:16661"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:9285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12290:31368":{"id":"2:12290:31368","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12326:26780":{"id":"2:12326:26780","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12046:428","self::pattern":"2:11989:16661"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:9285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11994:9285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12009:16659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12352:27162":{"id":"2:12352:27162","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12046:428","self::pattern":"2:11989:16661","str::rsplitn":"2:12355:27164"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43829:9297","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:9285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12315:29664":{"id":"2:12315:29664","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12316:29681"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43999:9591","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12319:29683":{"id":"2:12319:29683","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44017:9312","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12396:31388":{"id":"2:12396:31388","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12046:428","self::pattern":"2:11989:16661"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:9285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11994:9285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12009:16659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5514:32049":{"id":"5:5514:32049","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:9285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5526:32052":{"id":"5:5526:32052","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2546","`String`":"5:7449:227"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2546","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:9200","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12384:31386":{"id":"2:12384:31386","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12046:428","self::pattern":"2:11989:16661"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:9285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11994:9285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12014:16658","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12415:31392":{"id":"2:12415:31392","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4539:31392"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44042:9501","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12291:31369":{"id":"2:12291:31369","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12407:24782":{"id":"2:12407:24782","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5510:32048":{"id":"5:5510:32048","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2546","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:9200","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2546","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:9200","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"20:4042:5749":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"7:32:18647":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:4798:7281":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:44476:11048":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:40347:9509":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"6:4518:5219":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"11:968:8839":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"6:5051:10830":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"2:46814:9682":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:3345:2329":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:46260:9653":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"11:1818:2370":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:3300:2340":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"11:798:9103":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:21843:11499":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:13758:8265":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:10165:19773":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"2:42040:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:6864:16772":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"20:1416:3801":{"crate_id":20,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:10083:225":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:11639:7454":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:44303:16674":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:7175:2386":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"20:4919:6269":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:4638:5227":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:12063:1550":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:12827:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"5:6637:7192":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"5:7425:9224":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:10292:7570":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:4157:11451":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"20:4209:5785":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"11:399:32873":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:20971:2292":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"17:13546:8203":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"16:5743:8619":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"20:5494:6621":{"crate_id":20,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:40441:7248":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:10809:2285":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"6:4938:10801":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"5:4363:7216":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:47770:9723":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:14163:8367":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:4639:10549":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"20:3160:5213":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"16:2359:8519":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"16:6401:8545":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"16:3232:8510":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:9985:9540":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"16:5963:8644":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:10755:9927":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"16:7677:200":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:12484:7951":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:14460:8467":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:1587:9123":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"16:5017:8596":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:42001:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"6:7552:5269":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:4781:10730":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:11244:7778":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"16:5939:8495":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:5431:9787":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:12585:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:356:9748":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"16:7006:8826":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"5:2223:32412":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:9122:9799":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"11:2168:10684":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"18:699:7409":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:9921:7585":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:9107:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:44314:9607":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"6:4436:5209":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"5:3183:32421":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:5415:9786":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:1426:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"6:4328:5200":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"16:5435:8602":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"5:822:7198":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:48089:9734":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"16:7318:8876":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:12959:8039":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:1075:7439":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:47050:9686":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:43020:9552":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:9425:6760":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:22273:11430":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"5:3720:2335":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"9:52:18679":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"20:1558:3815":{"crate_id":20,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"20:4974:6272":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:3278:16627":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"5:4348:248":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:12997:8043":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"5:2461:10951":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"16:6687:8776":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:12437:7939":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"13:0:2124":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:10280:2322":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"11:695:9100":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"6:5080:10838":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:434:7436":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"16:7862:8953":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:13723:8261":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"16:7269:32895":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:11490:7771":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:11552:9774":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"11:1831:7226":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:40669:7396":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"6:573:3045":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:8524:9284":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:7646:9750":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"16:3315:8568":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"17:13906:8302":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:4420:5207":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:45889:9634":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:13826:8279":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:14068:8345":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:5500:9789":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"6:506:3037":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:1565:7226":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"5:1464:9101":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"6:5955:10868":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"5:2960:32568":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"16:4557:8582":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"16:5419:7557":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:6433:1986":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"6:1733:3816":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:10139:19772":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"17:11710:7751":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"5:7211:7209":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"10:0:2128":{"crate_id":10,"path":["adler"],"kind":"module"},"11:2060:9111":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:8659:19719":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:8631:9285":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"16:3797:8572":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:48168:9739":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"5:6930:7239":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:40321:9505":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"7:79:18654":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"16:2305:18812":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"2:2166:604":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"16:2696:8533":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"20:5046:6277":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:532:3039":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:43275:11039":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:11531:9773":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:2918:212":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"5:895:2370":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:2861:8853":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"20:4824:2826":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:40569:9521":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"20:3363:5232":{"crate_id":20,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"6:4810:10741":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:40206:9494":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:7719:11368":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:9574:32898":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:48054:9731":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"5:3217:32419":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:11381:7761":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"11:0:2129":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"17:13040:8049":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"16:6968:19680":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:11547:7774":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:12047:1566":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:14434:8458":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:39445:202":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"16:6456:8738":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:13055:8053":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:12876:8023":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"5:7412:9222":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"5:2049:9202":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:14110:8356":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"20:0:840":{"crate_id":20,"path":["libc"],"kind":"module"},"2:22082:10960":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:13685:8254":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:21397:2292":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:1757:10957":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"6:6711:6268":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:4626:5226":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:22885:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"20:3471:5244":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"6:4723:5237":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:1041:8839":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:1575:3801":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"6:4887:10765":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:9177:9913":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"5:2959:6737":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:39603:9364":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"5:7365:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:40653:9259":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:40621:9257":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:48191:9740":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"5:4426:7216":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"5:7290:6689":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"5:3800:7226":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:44532:16900":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:42079:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"6:1696:3812":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:3160:11388":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"6:1569:3800":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:6753:8790":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:41900:195":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"6:5044:10827":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:11151:7732":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:20973:11502":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:2279:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"5:1288:9110":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:2365:2268":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:3993:9237":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"5:276:2546":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:40683:9261":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"6:5074:10835":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"5:3330:7226":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"20:3296:5226":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:2391:2278":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"9:486:18660":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:11830:7313":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:2885:7280":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"11:1538:9119":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:11304:7307":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:44460:11044":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"20:3401:5236":{"crate_id":20,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"20:3408:5237":{"crate_id":20,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:41629:11427":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:9896:19755":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"14:202:16675":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:10514:9297":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:9086:7557":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:3843:9774":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:8575:2372":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"18:96:23698":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"16:8154:9000":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:10714:7674":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:6549:2400":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:11211:2298":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"17:9328:2321":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:8848:19737":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:43452:9564":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"16:6352:8728":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:8170:2287":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:20777:2604":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:1640:603":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:21841:2292":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:40295:9502":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:10616:7657":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"16:3461:8569":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"5:3568:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:3250:16703":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"6:474:3032":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:2524:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:1814:9763":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:2540:240":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"17:14134:8360":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:2903:16785":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:13676:8253":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:40314:9504":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"16:5634:8604":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:46067:9642":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:21960:9326":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"6:5818:5776":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:10547:7651":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"20:3433:5240":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:3462:2288":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:2533:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:12882:11374":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"20:4781:3727":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:43725:2322":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"1:3519:2289":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:41763:183":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:12043:7851":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:46336:9655":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:44464:11045":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:14282:8416":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:6817:11494":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:4814:817":{"crate_id":2,"path":["core","iter"],"kind":"module"},"5:4194:2308":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:10603:7656":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"9:0:2127":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"6:7540:5267":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"5:1102:31352":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:3526:1983":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:26142:250":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:2782:231":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"18:652:7376":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:12685:7982":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:4165:11452":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:10023:7571":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"5:7261:9218":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"20:3389:5235":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"16:7284:6749":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"20:3414:5238":{"crate_id":20,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:14355:8437":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:9423:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:2332:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:7547:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:39383:16630":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"17:9945:7590":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:9682:9288":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:10542:9299":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"6:1603:3804":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"16:2618:8530":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:11235:7745":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:3062:11386":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"6:4678:5232":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:22522:179":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:13188:8077":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:10970:9789":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:22174:29731":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:32329:9357":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"17:9070:7556":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"6:4524:5220":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:7295:6620":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:21228:11496":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:21009:11504":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"17:9959:7591":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:2869:11493":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"20:4095:5773":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"20:4910:6268":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"20:4120:5776":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:22157:9336":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"11:2201:2260":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"16:7513:8929":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:9437:6765":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:8949:11488":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"6:6625:2826":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:31084:185":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1:7137:26309":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:13162:8075":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:10397:7628":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"18:766:23709":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:41714:9775":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"5:1426:9116":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:22013:9327":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:8871:9898":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"6:6130:5807":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"16:6818:8803":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:41737:9279":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"6:6850:6277":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"16:5995:8501":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:11215:7740":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"16:6386:8732":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:4788:31157":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:2825:2595":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"6:7505:5264":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:12983:8042":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:2773:2590":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"6:5877:5781":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:40847:9264":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:8159:2351":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:12513:7956":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:8879:6689":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:40215:9495":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"20:3443:5241":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:11995:9947":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:11061:7305":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"16:6901:8553":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"16:7736:8939":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"5:1374:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:2772:2538":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"16:2722:8534":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"16:8181:8564":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:14024:8331":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:43623:9576":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:9383:2291":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"16:4462:8579":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"11:805:11373":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"13:110:32875":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"6:4496:5217":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:6008:10890":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:9051:19720":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:9117:221":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:45827:9632":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"6:1590:3802":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:12422:7935":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:2924:16787":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:3302:2341":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:40513:9516":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:11111:7729":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:44468:11046":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:40227:29726":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"15:306:18767":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:8933:11486":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:40366:9510":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:10929:7714":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:22753:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:6153:7272":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"20:4298:5808":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:10788:19842":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:6987:28631":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"9:450:18661":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:7583:7296":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:2865:11491":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:12059:763":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"16:5696:19673":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:11389:7763":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:12607:30340":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:11295:7749":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:1980:187":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"20:3197:5218":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"20:3380:5234":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:2877:16780":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:1554:2370":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:14522:8480":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"5:7253:200":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"18:727:7418":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:9431:6763":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"6:5829:5777":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"16:5727:8617":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:46012:9639":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:40634:9526":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"5:5975:17093":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:2216:2264":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:12531:7957":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"5:2035:2335":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:10186:7610":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"17:9521:7567":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"6:4794:10735":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"5:6788:7236":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:9634:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"6:7609:6621":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"20:4817:6266":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:12737:7988":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:4964:11472":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:940:9106":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:10771:7679":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"6:4428:5208":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:11687:19746":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:43775:9584":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:9119:30406":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"5:7529:7226":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:7400:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"6:5068:10833":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"6:4664:5229":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:3263:29658":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:12051:1417":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:1570:9120":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:9867:7580":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:11172:9895":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:4848:5784":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:14126:8359":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"16:3600:8570":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:22195:29762":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:4906:11465":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"20:5473:5267":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:12136:7863":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"5:1411:2370":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:2914:8859":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"11:760:7226":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:44744:9125":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"18:0:2135":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:9172:7426":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:46428:9659":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:46404:9658":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:5446:9788":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"5:7438:7222":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:4740:11442":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:11991:7840":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:20837:29774":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:8321:9876":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"18:574:7376":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:13024:8047":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:43613:9575":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"18:624:32907":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:11815:7798":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"17:11062:7725":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"20:3059:5202":{"crate_id":20,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:43989:9590":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:12044:379":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"16:3915:8575":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:22149:9335":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"5:1273:9111":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:7543:9944":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"16:6261:8720":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:46114:9643":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"18:636:7398":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:41908:212":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:10857:24285":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"16:4745:8587":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"20:3425:5239":{"crate_id":20,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:8305:9874":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"5:5839:7209":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:5569:11481":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:21404:11506":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"6:4489:5216":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:8997:9903":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:13487:8151":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:14420:8456":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"6:4587:5223":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"16:2406:8521":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:47832:9724":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"6:4908:10780":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:2536:241":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:9433:196":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:10440:7633":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"6:4483:5215":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"16:6425:8736":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:12215:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:45859:9633":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:40491:9515":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:5308:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"16:6742:8789":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:14346:8435":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"5:261:7192":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:43743:9295":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:41038:9267":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:904:7226":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"6:4543:10713":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:5849:5764":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:13973:8318":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"16:6569:8551":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:12003:7411":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:44499:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:14090:8350":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:8895:19738":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:11448:19744":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"20:3180:5216":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"18:599:32908":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:12576:7967":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:44520:9617":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"16:4053:8576":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:11949:2374":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:10797:9932":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:10980:7570":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:5767:5771":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"16:2428:8522":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"6:6171:10908":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:21195:11501":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"16:3830:8573":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:6960:8815":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"6:1536:3797":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:9972:7592":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:44715:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"16:4344:8577":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"20:1436:3803":{"crate_id":20,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"6:6036:10897":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:48230:9741":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"20:3032:5201":{"crate_id":20,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:9427:6761":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:22122:9334":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:46358:9656":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"6:482:3033":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:44033:9236":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"11:667:9099":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:9137:7425":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:47940:9726":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:12237:7888":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:3501:2291":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:20835:29776":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:11115:16655":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"11:285:10679":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:4005:9238":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"16:7768:8550":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:42157:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:42393:2392":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:11396:11065":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"16:7568:8560":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:3044:16629":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"2:41031:9266":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:8841:9895":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:43552:9571":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:44659:197":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"20:3174:5215":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:4685:5233":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:10575:7653":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"1:10961:9178":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:2819:2593":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:50036:11513":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:1576:9121":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:41701:9543":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"20:1386:3798":{"crate_id":20,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:13922:8306":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:10370:7626":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"16:5760:19674":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:5978:7283":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:3441:7452":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"16:5322:8600":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"14:0:2131":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:2920:16786":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:5566:2770":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"20:4131:5777":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:14514:8477":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"11:1068:9113":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"16:2907:8542":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"16:8115:8996":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"16:4889:8592":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:6169:7289":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:1743:16811":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:946:9108":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:12724:7986":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"6:4616:5225":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"16:7613:8935":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:10628:7660":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"16:7582:8932":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"6:4872:10760":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"5:2141:9203":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:3972:11433":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:32304:9355":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:11351:7756":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:8466:2366":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:531:7275":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"6:1595:3803":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:10366:7625":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"20:5417:2992":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:7722:8552":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:414:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"16:6332:8543":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"20:3370:5233":{"crate_id":20,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:1500:3794":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:12934:8035":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:8250:11426":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"16:2766:8536":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"6:7558:10934":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:21109:11510":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"2:41976:185":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"16:5673:8548":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"16:8195:9005":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"5:6485:7192":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:8855:9896":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:45990:9638":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"6:4568:5222":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"5:6798:7238":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"6:4456:5211":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:40451:9512":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"5:4032:7192":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:11473:7524":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:4173:11453":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:40583:9524":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:2992:2324":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:13071:8054":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"5:35:7188":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:3238:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"16:6915:8554":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:11617:7778":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:10949:7715":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"6:4341:5201":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:30608:29749":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"17:10672:7667":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"20:4870:3728":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"5:4074:9116":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"9:393:18662":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"16:8239:8897":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"20:5447:6620":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:8294:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:952:9109":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:22819:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:14042:8335":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"5:1482:9117":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"6:7517:5266":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"5:7545:7230":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"6:6598:10914":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:44480:11049":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"20:4773:2959":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:3182:24578":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:14:2235":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:12572:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:5475:2308":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"17:10265:7618":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:43711:2321":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:3066:11387":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:7937:2335":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:43633:9577":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:22720:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"5:4985:2308":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:10985:24292":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:7602:7298":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:31112:2604":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:46660:9664":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:13868:8293":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:12888:8025":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"11:311:10682":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:48034:9729":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:3738:9772":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:14156:8365":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:7670:9811":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:10036:7597":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:13451:8120":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:2822:2539":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"20:3238:5222":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:1631:3805":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:40500:2319":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"5:3142:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:11384:9807":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:5787:2395":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"20:5004:6274":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:21627:11511":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:8904:9899":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"6:541:3040":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:11989:16661":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:46479:9660":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:9047:9910":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:20818:29779":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:12225:7885":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:2886:8854":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:39797:28283":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"17:12172:7872":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:10084:7600":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:21731:29566":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:12062:761":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"14:160:9090":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:10227:7616":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:4034:11437":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"20:3147:5211":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:8398:11476":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:11620:28924":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"16:4585:8583":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"20:477:3033":{"crate_id":20,"path":["libc","unix","utimbuf"],"kind":"struct"},"20:1410:3800":{"crate_id":20,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:43701:9582":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:3565:7453":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:14221:8409":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:14145:8364":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"6:1690:3811":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:8506:2368":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"16:5905:8638":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:10447:7636":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:2618:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"18:736:23708":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:21065:11509":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"2:41612:9278":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"20:4203:5784":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlattr"],"kind":"struct"},"2:46896:9683":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:12554:7960":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:41069:7256":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:7896:29938":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"11:749:7209":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"6:554:3042":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:9160:9912":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:11137:7731":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"6:4374:5203":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:4895:10770":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"16:8072:8991":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:12267:7900":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:10726:7675":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:12658:7977":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:11354:9804":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:3007:2541":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"16:8097:8994":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:30288:11429":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:41814:6688":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:12071:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"17:10478:7644":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:894:7209":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:2932:16789":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:6015:10891":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:12068:811":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:22687:180":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:21274:11498":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"20:4174:5780":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlmsgerr"],"kind":"struct"},"16:7503:8557":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:3223:16791":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"6:6022:10892":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:42755:11031":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"5:1776:7226":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"17:11281:7748":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:12184:7875":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:4700:11467":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:12621:7973":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:587:3047":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:13148:8074":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:3244:16704":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:10240:7590":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"6:5836:5778":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:4963:5242":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:10073:2292":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"6:1520:3795":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:6028:10895":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:9102:7424":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:44757:9626":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"20:3019:5200":{"crate_id":20,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:11467:7309":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:43999:9591":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"5:1503:9100":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"20:3308:5227":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:6077:5786":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:638:9755":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:12086:7856":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"6:1513:10706":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"5:2690:10954":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:9429:6762":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:22621:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"11:1852:9122":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:42529:6762":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"6:4395:5082":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:9435:6764":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"18:564:7385":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:13802:8277":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"6:7523:10929":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"20:5479:5268":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:9003:19742":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"16:6545:8750":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:7381:29013":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:11184:2041":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:43067:9561":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:6178:10959":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"5:3594:9116":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:10348:24317":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"16:6189:8687":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:40408:1846":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"2:10556:9300":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:4017:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"20:4278:1784":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:47582:9721":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"11:630:2370":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"20:3154:5212":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:10637:7661":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"16:6467:8739":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"6:4535:10708":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:11321:9800":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:2844:8852":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"16:7660:8937":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:2881:16782":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:13202:8080":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:41595:9276":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:1761:627":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:4703:11456":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:12305:7908":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:45805:9631":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:2898:16784":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:11971:7839":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:11023:7719":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:8713:19733":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:9418:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"18:681:7406":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:21:701":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:41951:2370":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:2406:1982":{"crate_id":1,"path":["std","io"],"kind":"module"},"6:5987:5230":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:13135:8073":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"5:5366:16647":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:13174:8076":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"5:2131:7206":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:11272:7747":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:8564:2371":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:11761:7791":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:9607:7569":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"16:6531:8748":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"6:6726:6270":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:11393:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"6:5775:5772":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:10588:7302":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"16:7554:8559":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"11:1121:9115":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:46738:9680":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:9985:7594":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:40531:9518":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:6304:208":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:7745:9816":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"6:4475:5214":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:910:9117":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"6:4833:5779":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:14076:8348":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"16:6156:8682":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"16:7015:8829":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"18:80:23697":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"16:2284:18786":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"16:7792:19684":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"6:7546:5268":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"11:1048:32874":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"18:491:7375":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:5882:5782":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:12970:8040":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"6:4770:10722":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:13113:8062":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:5630:7283":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"16:4613:8584":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"5:4234:2370":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:10494:7646":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:9823:19753":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"5:3204:9122":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:3508:7209":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"6:1709:3814":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:4323:7246":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:13981:8319":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"16:5588:8547":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:14056:8342":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:48115:9736":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:44641:207":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:1928:673":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"1:3676:11428":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:40522:9517":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"6:4401:5205":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:3233:237":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"16:5661:8613":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:2178:7446":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"20:1514:3809":{"crate_id":20,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:12009:16659":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:9488:32900":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:10383:7627":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:1582:9122":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:9027:9906":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:2369:191":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:4862:10754":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"11:365:7183":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:12046:428":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:7859:16768":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:12070:1163":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"18:515:7373":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:8007:9822":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"16:6243:8710":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:12659:9321":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:40378:29748":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:43512:9566":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:2178:16801":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"2:7491:2544":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:2839:11492":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:12252:7894":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:9642:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"20:2982:5197":{"crate_id":20,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:48074:9733":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:12074:7855":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:41848:6749":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:2488:16733":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:11192:11049":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"2:40361:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:1766:9228":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"6:6688:3731":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:7883:2282":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:11402:11066":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"14:165:18747":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:4140:9240":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"16:7597:32891":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:919:9100":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:4973:5244":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"20:1398:3799":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:13966:8317":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:2211:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:10819:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"17:13286:8091":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"20:5019:6275":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:6067:10906":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:42315:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:4767:397":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:8951:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:44448:11041":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:10507:7648":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"20:3080:1994":{"crate_id":20,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:7438:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"20:3215:5220":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"20:4229:5786":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"16:8205:19686":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:20790:29561":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"16:3655:7466":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:3013:2543":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"6:4824:10746":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:5381:9784":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:4259:9242":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"11:97:10678":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:13010:8044":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"16:5798:8623":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:11742:7788":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:13710:8256":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:12465:7946":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:10848:24302":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"1:1055:9110":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:7363:16769":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:13851:8288":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:40560:9247":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:10750:7677":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"11:723:9101":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"20:527:3039":{"crate_id":20,"path":["libc","unix","hostent"],"kind":"struct"},"1:10108:9917":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"6:1649:3807":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"16:7128:9910":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:43521:9568":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:9061:24311":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"6:4854:10749":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:9701:7571":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:4635:10545":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"17:11162:7733":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"11:403:32868":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:22134:29738":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:10483:7301":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"1:9482:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:6960:16764":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"15:288:18766":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:45781:9630":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"5:7396:29748":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:5240:192":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:8972:2396":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"20:563:3044":{"crate_id":20,"path":["libc","unix","sigval"],"kind":"struct"},"2:43260:9563":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:43683:9581":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"6:6805:6274":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:1561:7209":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:3261:2344":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:2012:7442":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:5623:208":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:5816:8627":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:7740:9760":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"2:21021:30261":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"17:10278:7619":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:21280:11500":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:7645:2292":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:8686:19732":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:837:2370":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"9:330:10692":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:6473:2403":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:21622:11503":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:1073:9115":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"20:5455:5264":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"5:1257:8839":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"16:8050:8990":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:8182:2290":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:13949:8310":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:44008:9592":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"0:73:1743":{"crate_id":0,"path":["num_cpus","get_physical"],"kind":"function"},"2:41839:6689":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"20:4180:5781":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:10738:7676":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:46580:9663":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:2937:16790":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:32315:9356":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"2:43695:9305":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"20:469:3032":{"crate_id":20,"path":["libc","unix","group"],"kind":"struct"},"16:2548:8527":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:11507:19745":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:30714:29744":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"20:582:3047":{"crate_id":20,"path":["libc","unix","servent"],"kind":"struct"},"1:12050:317":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:44177:9603":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:2527:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"6:6648:3756":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:12634:194":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"9:177:18728":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:11845:7802":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"11:836:9108":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"6:4740:5239":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"20:1531:3811":{"crate_id":20,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:6775:6272":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"16:3065:7461":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"16:4949:8594":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"16:2574:8528":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:44225:9605":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:40287:9236":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"0:0:1864":{"crate_id":0,"path":["num_cpus"],"kind":"module"},"17:12945:8037":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:2659:9233":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"2:43847:9298":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"11:1838:9120":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:12064:1547":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:1837:9764":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:4048:11439":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:10400:9294":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:9852:19754":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"11:119:7179":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:11886:7811":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"11:986:9110":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"6:0:840":{"crate_id":6,"path":["libc"],"kind":"module"},"2:21023:16800":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"1:4625:11436":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"16:2596:8529":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"6:7278:10921":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:22247:9348":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:0:2134":{"crate_id":17,"path":["object"],"kind":"module"},"17:12598:7968":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:11573:7775":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:39344:16702":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:11627:9808":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:11694:9306":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"6:1527:3796":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:12496:7953":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"11:2186:32867":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"20:1522:3810":{"crate_id":20,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:22240:10963":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:9896:7267":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"5:676:234":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:11158:9894":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"20:3119:5208":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:0:508":{"crate_id":2,"path":["core"],"kind":"module"},"16:4641:8585":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:12778:7994":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:11719:19747":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"6:4380:5204":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:44324:9611":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:21378:11497":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:4056:11440":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"6:4955:5241":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:7772:9355":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"1:881:9102":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:41678:29737":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:43045:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"5:7182:9200":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:39549:205":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"18:660:7399":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"18:481:7374":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:9393:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:13422:8100":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"20:3461:5243":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"5:7382:9219":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"16:7621:19683":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:14308:8425":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:10520:7649":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"20:549:3042":{"crate_id":20,"path":["libc","unix","winsize"],"kind":"struct"},"1:850:9116":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"5:2170:10946":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"5:5362:16646":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"20:1350:3793":{"crate_id":20,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:13567:8213":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:9864:7261":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"14:215:9095":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:40601:9525":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:2777:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"16:5403:7556":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:10340:7624":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:2559:2332":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:2379:2272":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:40551:9245":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:12645:7974":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:13897:8301":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:10168:9918":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"19:0:1057":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:11248:9799":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"2:12779:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"6:653:3066":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:10698:7672":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:14378:8450":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:46382:9657":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:10962:7716":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"6:7564:10935":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"5:1672:7192":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:40279:9501":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"5:0:291":{"crate_id":5,"path":["alloc"],"kind":"module"},"5:3735:9202":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"10:44:9126":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:1647:6634":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:21406:9325":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:40592:9251":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:12017:11370":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"11:2033:8839":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:10957:9819":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:7409:2545":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"6:5058:5243":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:149:7175":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"11:1826:7209":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:30550:29739":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"2:2775:229":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:2635:2334":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"6:579:3046":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"16:6268:32894":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"6:4650:5228":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:3741:9773":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"20:568:3045":{"crate_id":20,"path":["libc","unix","itimerval"],"kind":"struct"},"6:5805:5775":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:119:2721":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"6:6565:2959":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:4317:9777":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:9277:7429":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"16:5088:8598":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"6:500:3036":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"6:1495:3793":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"6:5025:10813":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"6:6868:6278":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:10110:9916":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"2:43028:9554":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:362:9749":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:12846:8004":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:48043:9730":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:9289:9764":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:2257:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:13816:8278":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"6:4748:10717":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"5:6439:7209":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:2855:16779":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"11:2174:10685":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:43503:9565":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:1892:9766":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:14469:8471":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"6:4818:10745":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:3388:2350":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:11535:7773":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"6:4729:5238":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"16:3764:8571":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"6:1717:3815":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:11951:7829":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"18:719:7415":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:929:11373":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"16:7694:8561":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"6:1911:3869":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"20:489:3035":{"crate_id":20,"path":["libc","unix","timespec"],"kind":"struct"},"17:261:7432":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:0:1439":{"crate_id":1,"path":["std"],"kind":"module"},"15:394:18777":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:41060:2350":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"20:4806:6265":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:8299:11455":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:11754:9310":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:42795:8968":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:10829:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:3929:2308":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"6:4463:5212":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:7575:10939":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:10588:7654":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"1:8122:2286":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"1:5637:7284":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:44289:9606":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:1554:2308":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"5:685:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"16:4921:8593":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:9752:7572":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:12024:7846":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:7734:11369":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"20:501:3037":{"crate_id":20,"path":["libc","unix","rusage"],"kind":"struct"},"1:6201:9795":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:3399:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"20:4069:5771":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"20:3071:5204":{"crate_id":20,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"6:4842:5780":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"20:3257:5223":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"20:55:2645":{"crate_id":20,"path":["libc","unix","DIR"],"kind":"enum"},"2:41749:9281":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:9207:7427":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"16:3888:8574":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"16:7884:19685":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"5:5128:2391":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:40823:2320":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:40541:9520":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"6:6156:5808":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:3986:11434":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"16:2472:8524":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:6172:9258":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"17:11000:7718":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:8150:2349":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:45929:9636":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:1831:9231":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:10089:9763":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"16:4835:8590":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"6:1663:3808":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:14033:8334":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:6902:7293":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"17:11367:7758":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:22211:29743":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"16:5830:8628":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"6:5799:5774":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:43591:9573":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"16:7492:8926":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"11:1611:7185":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"5:7245:6689":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:12056:660":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:6616:2405":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"18:671:7405":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:555:9751":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:39430:9360":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:4497:11457":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"11:1012:9111":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"16:7544:8931":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"6:5994:10879":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"5:3171:2370":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:9445:7566":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"6:1545:3798":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"16:4719:8586":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:45960:9637":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:10331:9788":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:2928:16788":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"16:5982:8651":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"16:6226:8704":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"11:1845:9121":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"6:7586:10940":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:2363:2267":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"6:4368:5202":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:6077:7285":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"17:1184:7441":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:45715:9627":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"16:6929:8812":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"16:3032:8565":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:4915:11466":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:42783:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:43875:9586":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:9650:7570":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"20:1537:3812":{"crate_id":20,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:5967:10872":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:14013:8327":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"18:507:7376":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:11934:7826":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"6:1638:3806":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:4608:16722":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:5753:2393":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:13989:8320":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:12014:16658":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"20:4107:5775":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:4315:5199":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:5395:9785":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"6:5793:5773":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:11337:19867":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"5:5923:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"16:8167:9003":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"6:7511:5265":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:12543:7959":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"14:187:18754":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:3010:2542":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"5:5769:235":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:14100:8353":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:47894:9725":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"5:2243:10950":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:10255:9116":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"20:1361:3795":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:14316:8428":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:7532:7438":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:11306:7751":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:7359:16770":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:9390:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"16:7360:32893":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"5:778:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:2893:16783":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:9798:7258":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"16:5049:8597":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"16:3049:18815":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"20:4272:5807":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"5:1302:9115":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"5:1523:9199":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:20805:29561":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"5:7337:2260":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"20:4193:5783":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"11:2194:10689":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"16:6083:18785":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:11805:9292":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"16:2969:18814":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:9242:7428":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"11:844:9109":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"20:3451:5242":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:22786:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"11:817:9106":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"16:6346:8727":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"11:1103:9114":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:2209:7449":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"6:4606:5224":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:2920:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:11261:7746":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"17:12098:7859":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:724:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"20:4943:6271":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:3221:2342":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:9494:7300":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"17:12671:7684":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:5994:9252":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:45759:9629":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"6:7272:6619":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"20:4151:5764":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"16:7391:19682":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"6:6618:6266":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:12069:1606":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:30520:6639":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"6:4879:1026":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"12:0:2130":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:22098:9329":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:2595:2325":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:11770:9311":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"11:332:7181":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:635:9753":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:1477:1749":{"crate_id":2,"path":["core","mem"],"kind":"module"},"18:614:32909":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:10059:7598":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:41658:11030":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:41572:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:4475:11456":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"6:4716:5236":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"0:72:1725":{"crate_id":0,"path":["num_cpus","get"],"kind":"function"},"2:43893:9587":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:12208:7877":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:42274:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:39485:201":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"5:7199:9217":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:8343:2826":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:4237:9776":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:22852:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"5:1492:9099":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:2150:19800":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:10779:11062":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"17:14478:8473":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:9209:11056":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:8522:11371":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:13085:8056":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:46784:9681":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"20:4077:5772":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"5:1514:200":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"20:1479:3806":{"crate_id":20,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"11:1027:18741":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:4695:5234":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"3:234:212":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:43929:9588":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:2363:184":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:42838:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:8815:188":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:7768:9819":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:12028:24305":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:32268:10688":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:13215:8081":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:5994:208":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"5:6886:247":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:48100:9735":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:14499:8476":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:8825:19736":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:11124:7730":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"6:6841:10918":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:8885:9790":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:9199:28731":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"2:10323:9292":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"6:568:3044":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"16:7342:32896":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:40612:9256":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"6:4550:10715":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"9:237:2366":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"20:2995:5198":{"crate_id":20,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:6775:6695":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"5:1118:31318":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:8339:9878":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"11:657:6689":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"11:2130:18736":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"2:43075:9562":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:40257:9499":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:8245:9870":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:44017:9312":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"6:4917:10786":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:10468:7643":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:42515:6761":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:14335:8434":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:10473:9296":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"16:6485:8546":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:9881:7262":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"6:5863:10846":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"20:4138:5778":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"8:0:2126":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:10197:7612":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"16:6499:8563":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"20:557:3043":{"crate_id":20,"path":["libc","unix","linger"],"kind":"struct"},"17:12062:7852":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"5:3238:9123":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"6:4291:5197":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:4637:10547":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"17:11661:7780":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:32308:8897":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"16:5612:8549":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"6:7529:10930":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:14083:8349":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:2220:2068":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"16:7067:8836":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:1677:1115":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"6:1681:3810":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:8991:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"16:2450:8523":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"20:3489:5246":{"crate_id":20,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"16:4806:8589":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"6:5900:5785":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"9:357:18676":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"20:3111:5207":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"16:2788:8537":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:44357:9316":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"20:1431:3802":{"crate_id":20,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:43036:9555":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"6:6044:10900":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"5:6558:6689":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:43669:9578":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:9372:7558":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:4250:209":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"6:123:2722":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"6:4506:5218":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"13:226:10677":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:8765:19734":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:12007:7844":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:2530:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:10528:9298":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:41045:1986":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"20:5439:6619":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:8978:19741":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"5:4393:2308":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:10258:11483":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"16:6583:8752":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:9886:7582":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:43979:2318":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"16:7436:8655":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:10542:2342":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"1:10839:2287":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:9531:32902":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:8917:11487":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:4109:9239":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:21719:9323":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:46974:9684":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"18:644:7376":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:10214:7615":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:44694:9620":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"14:7:9090":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:13554:8206":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"6:4992:10808":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"20:5467:5266":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:10112:7602":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"5:7221:7204":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:481:7274":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:42860:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:39527:203":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:22588:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:11519:16861":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:9998:7547":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"5:629:9194":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:4744:11445":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:11229:11064":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"20:3065:5203":{"crate_id":20,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"9:426:18663":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"16:2933:18813":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:13575:8214":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:21142:11505":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"11:1858:9123":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"20:4185:5782":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:2776:228":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"2:48016:9728":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:22654:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"17:10916:7712":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"15:0:2132":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:8416:2365":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"5:6769:7224":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"16:8281:9012":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:3510:24646":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:3936:11432":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"20:1543:3813":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"16:6415:8735":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:13667:8249":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"20:1444:3804":{"crate_id":20,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:21212:2292":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"16:2504:8525":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"16:7708:8562":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:41881:6750":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:5387:2308":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:923:9103":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:9034:9907":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"11:2049:9110":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:45735:9628":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:44160:9602":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:5760:2394":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"20:3226:5221":{"crate_id":20,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:11226:7744":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"5:5954:2391":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:7029:7294":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:14269:8410":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"16:4774:8588":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:8294:11050":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:13890:8299":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:8946:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"16:5121:8599":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:11201:7735":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:12053:1531":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:9114:29940":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:2496:1984":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"16:536:8499":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:256:7431":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:10420:7504":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:8017:2336":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:10561:7652":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"17:10534:7650":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:44651:213":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"11:1501:18742":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:11067:7306":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"16:0:2133":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:9711:32901":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"16:2810:8538":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:2213:2263":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:11535:9303":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"17:13244:8084":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:12052:1447":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:14536:8483":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:30514:6638":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"20:4995:6273":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:10903:7711":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:11369:9805":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"10:36:10691":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"16:6361:8729":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:12698:7983":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"16:2526:8526":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:42118:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:8953:19740":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"16:6600:19678":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"5:7463:9225":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:7873:2285":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"11:1822:6689":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:7896:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"18:521:23710":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"20:1368:3796":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"6:6136:1784":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:5979:5231":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"5:3212:9120":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:5082:9783":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:47084:9687":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:39624:9366":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"6:4787:10733":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"14:31:9090":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:44732:9625":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"5:7282:6689":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:12060:764":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:6437:2397":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:14324:8429":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"20:3320:5228":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"20:5461:5265":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:10126:7604":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"2:41054:9268":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:46526:9661":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:42354:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:11086:7727":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:8548:2369":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:47692:9722":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:1557:3799":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"16:7828:8949":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:4764:10719":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:13259:8088":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:43531:9569":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:43947:9589":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:40302:16728":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:2830:2597":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"17:9455:32903":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:3994:11435":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:46160:9650":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:10231:2370":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:46212:9652":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"20:1355:3794":{"crate_id":20,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:41079:9270":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:9039:9908":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:1928:9232":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:4186:11454":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"20:3127:5209":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"16:7523:8930":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:2908:8858":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:8926:19739":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"5:878:7200":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:22261:9349":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:7115:2349":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:2573:7262":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:4044:11438":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:9489:2284":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"6:4754:5240":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:4378:7247":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:10410:7629":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:41967:6689":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:41891:6748":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"6:7250:2992":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:8558:2370":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"16:6879:8808":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"20:614:3066":{"crate_id":20,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:2607:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:2765:223":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:41959:9116":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:12810:7998":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:6589:2917":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:5648:8608":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"6:4556:5221":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:494:3035":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"20:3355:5231":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Chdr"],"kind":"struct"},"17:11316:7753":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"15:327:18771":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"20:3209:5219":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"16:6017:19675":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"6:6744:6271":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:40693:9528":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:44146:9599":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:8226:2322":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"20:4887:3731":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:40394:9511":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:44456:11043":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:643:11365":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:4182:6770":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:40267:9500":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:5535:9248":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"16:7090:8838":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"20:1490:3807":{"crate_id":20,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"5:7349:2261":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"5:5318:7192":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:11608:9941":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"6:1702:3813":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:44472:11047":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"16:2670:8532":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:12123:7862":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:11407:19743":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:12196:7876":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:9350:7433":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:10545:2344":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"20:1550:3814":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:1558:6689":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:6912:29941":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"18:531:7380":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"20:4925:6270":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"20:4904:6267":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:3223:2343":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"16:2380:8520":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:8523:11480":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"14:221:9097":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:6602:2404":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"14:40:7826":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"16:2644:8531":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:2327:190":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:41087:9272":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:6650:219":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"16:2832:8539":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:12373:7910":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:10435:9295":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:12154:7871":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:48063:9732":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"16:7474:8918":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"16:6204:8689":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:619:9752":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:13792:8276":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"6:5015:5246":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"5:4846:206":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:45911:9635":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:11327:9940":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"20:138:2722":{"crate_id":20,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:860:6689":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:10685:7670":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:582:7438":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:44042:9501":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"16:7534:8558":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"11:736:9102":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"20:3086:5082":{"crate_id":20,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"6:4944:10804":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"16:6944:32890":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:8827:9894":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"11:793:9117":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"5:1011:7192":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:30480:6637":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:42811:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"6:595:3048":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"5:4002:7209":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"5:6955:7242":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:13632:8248":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:2827:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"20:483:3034":{"crate_id":20,"path":["libc","unix","timeval"],"kind":"struct"},"20:574:3046":{"crate_id":20,"path":["libc","unix","tms"],"kind":"struct"},"2:4387:6772":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"5:7231:32410":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:7665:9809":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:48153:9738":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:7752:11406":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:3416:2308":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:6256:7283":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"18:707:7411":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"6:6607:6265":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:4800:10738":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:13274:7751":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"20:590:3048":{"crate_id":20,"path":["libc","unix","protoent"],"kind":"struct"},"2:43279:9289":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:8489:2367":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:13101:8060":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"20:3166:5214":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"5:6306:11587":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:4407:2427":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:9564:7568":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"5:2970:32566":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:8220:2321":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"20:4165:5779":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlmsghdr"],"kind":"struct"},"16:7462:8917":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:39505:204":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:7861:2284":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:12045:960":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:4742:11444":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"16:2881:8541":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"20:3482:5245":{"crate_id":20,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"5:3178:9121":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"9:507:9181":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:2849:8849":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:39461:200":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:3188:26583":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:13298:8098":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:44131:9594":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:3315:16628":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:3942:11431":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"5:4164:2308":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:40833:9263":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"20:3104:5206":{"crate_id":20,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:4704:5235":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:7691:7302":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"20:495:3036":{"crate_id":20,"path":["libc","unix","rlimit"],"kind":"struct"},"17:10456:7639":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:11788:7792":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:14296:8422":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"16:2864:8540":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:10362:9293":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:9660:32897":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:8233:2318":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"11:1517:9118":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:4254:9241":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"6:526:3038":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"5:207:7190":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:12049:1077":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:1983:186":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:11994:9285":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"6:547:3041":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:12058:766":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:3642:6689":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:9762:32904":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:7921:9821":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:6183:7254":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"16:7102:19681":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"20:5485:5269":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:4569:11462":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"20:4847:3756":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:5051:9783":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:12293:7905":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:40471:9513":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:5832:2402":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:13778:8273":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"16:6696:8777":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:44702:9622":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"20:1504:3808":{"crate_id":20,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:8986:9900":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"16:6792:8802":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"16:2321:8511":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"16:6721:19679":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:12012:29026":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:7913:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"6:4446:5210":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:14173:8372":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"20:5033:6276":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","termios2"],"kind":"struct"},"16:6376:19677":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"11:644:9116":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"6:5008:5245":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:4040:16626":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:9112:220":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:47978:9727":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"20:3092:5205":{"crate_id":20,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"5:3581:2370":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"20:3286:5225":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:9004:24294":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:1778:9762":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"6:1506:10703":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:3444:1985":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:9382:212":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"20:3276:5224":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:12830:7999":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"20:134:2721":{"crate_id":20,"path":["libc","unix","FILE"],"kind":"enum"},"16:8134:8999":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:41831:9116":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:44109:16673":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:2381:2273":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"16:7782:8941":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:8239:9868":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:9677:16737":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:868:9101":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"5:7191:6689":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"20:521:3038":{"crate_id":20,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:3185:26582":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"16:6513:8740":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:4135:26308":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:14448:8465":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"6:4929:10795":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"16:7651:8936":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"16:4417:8578":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:42522:6760":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:8203:2319":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:1921:11417":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"5:5612:7224":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:7856:2283":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"18:582:2604":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:10316:7623":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:40200:9236":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:1839:9765":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:11074:7726":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:21272:2292":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"16:7054:8833":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"16:4497:8580":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:32322:6771":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"6:5890:5783":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:8594:19721":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"20:4797:2917":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"20:1377:3797":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"6:4389:1994":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"11:2180:10686":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:7866:2281":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"5:7449:227":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"5:1138:31355":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:10097:7601":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:4333:6771":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:11041:9301":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"2:42196:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:21373:2292":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"17:13914:8304":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:504:7437":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"6:62:2645":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"1:3263:2345":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:46190:9651":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:4000:11436":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:46030:9640":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"5:782:7195":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:11634:9808":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:13876:8296":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:43578:9513":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:12765:7993":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:46049:9641":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"16:5384:19672":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"6:7463:6276":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:7852:2373":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:12066:1549":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"16:5866:8635":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:7855:11377":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"16:7041:8830":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:21294:9325":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:586:11362":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:13838:8282":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:12061:765":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:43057:2366":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"16:5574:8544":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:39610:9365":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"6:6820:6275":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:12790:7272":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"6:4984:10806":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:10661:7666":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"16:4986:8595":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:42820:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:44252:9315":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:22555:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:8863:2370":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:44337:9615":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:6364:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"16:4527:8581":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:43541:9570":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:44444:11040":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"17:9912:7583":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:47440:9720":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:39571:2254":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:12280:7904":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"6:7599:10944":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:12057:662":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:12060:16667":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:3232:7450":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"6:4469:5213":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:4413:5206":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:30536:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:4821:11441":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"6:6796:6273":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:6834:10915":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"17:9617:32899":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"16:5363:8601":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:42765:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:2787:2591":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"6:4304:5198":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"18:690:7408":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:12790:7995":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:12711:7985":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"16:2339:8513":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:502:7206":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"5:6079:2308":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:46557:9662":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"5:3669:7192":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:2260:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:11358:19868":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:11910:7825":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:11191:7454":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"16:2744:8535":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:488:3034":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"20:2976:5196":{"crate_id":20,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:47020:9685":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:400:7434":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:44024:9502":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"20:542:3041":{"crate_id":20,"path":["libc","unix","pollfd"],"kind":"struct"},"1:8287:9775":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"5:2966:32569":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:40243:9498":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:22066:9328":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"4:0:2125":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"18:609:7392":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"16:5712:8614":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"16:4862:8591":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:11003:9896":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"17:11173:19866":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:23332:222":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"20:3348:5230":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Chdr"],"kind":"struct"},"17:13693:8255":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:9780:7573":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"16:6318:8725":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:4434:6773":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:7929:2333":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:10440:9893":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:10012:7570":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:13611:8243":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"18:755:7423":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:14001:8326":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:4:1039":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"20:536:3040":{"crate_id":20,"path":["libc","unix","iovec"],"kind":"struct"},"17:10430:7631":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"16:6279:8723":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:3112:2352":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"17:12911:8034":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"20:3006:5199":{"crate_id":20,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:5920:10847":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:32416:2598":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"20:1472:3805":{"crate_id":20,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:9790:32905":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:10784:2281":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"6:1673:3809":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:9933:7588":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"20:3187:5217":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:8213:2320":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:10548:2340":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"1:5128:193":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"16:6560:7178":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"1:12067:1546":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"6:6671:3728":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:40328:16729":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"5:7474:9226":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"16:6171:196":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:6546:2399":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:915:9099":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:1776:9761":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:40644:9527":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:41823:2370":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:12473:7948":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:9082:11052":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:13228:8082":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:12065:1548":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:8313:9868":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:11586:7777":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"20:3137:5210":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:11048:7721":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"5:1473:9102":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:42235:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:11872:7810":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"2:43793:9585":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"5:1442:6689":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:3003:2540":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:6573:3727":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:7396:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:11731:9309":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:12452:7944":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:8809:9893":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:1064:9111":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"6:5737:5749":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"16:6893:8810":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"3:0:453":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"20:1574:3816":{"crate_id":20,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:14118:8357":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"7:0:1596":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:11098:7728":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:43604:9574":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:12750:7990":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:8365:9779":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"18:590:7386":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"16:6844:8804":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:4389:9778":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"5:2962:10947":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:2873:16781":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:43829:9297":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:2834:11490":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:48138:9737":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:10646:7662":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"16:6041:19676":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"6:562:3043":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:2487:2292":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:14401:8451":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:11050:7304":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:8794:19735":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:12111:7861":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:4949:5196":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:11327:7754":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:21156:16800":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"18:538:7383":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"18:113:23699":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:11074:9302":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:44452:11042":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:9141:2298":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"20:3334:5229":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:6705:6267":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:47234:9688":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:20820:29777":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"20:4101:5774":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:11549:16662":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:5593:9250":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"20:1635:3869":{"crate_id":20,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"6:6720:6269":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:13739:8264":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:8012:9823":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:2176:16800":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"1:10774:11060":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:11490:9772":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:42536:6763":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:46306:9654":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"20:5064:6278":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:2979:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"}},"external_crates":{"20":{"name":"libc","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}