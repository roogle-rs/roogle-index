{"root":"0:0:1964","crate_version":"1.16.0","includes_private":false,"index":{"2:12940:25472":{"id":"2:12940:25472","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12592:17403"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:9650","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12597:9650","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12612:17401","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12966:26019":{"id":"2:12966:26019","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12592:17403","str::rsplitn":"2:12969:26021"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44229:9665","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:9650","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12899:879":{"id":"2:12899:879","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12072:453"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12927:9842":{"id":"2:12927:9842","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12072:453"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44101:9823","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1964":{"id":"0:0:1964","crate_id":0,"name":"num_cpus","span":{"filename":"src/lib.rs","begin":[1,0],"end":[485,1]},"visibility":"public","docs":"A crate with utilities to determine the number of CPUs available on the\ncurrent system.\n\nSometimes the CPU will exaggerate the number of CPUs it contains, because it can use\n[processor tricks] to deliver increased performance when there are more threads. This \ncrate provides methods to get both the logical and physical numbers of cores.\n\nThis information can be used as a guide to how many tasks can be run in parallel.\nThere are many properties of the system architecture that will affect parallelism,\nfor example memory access speeds (for all the caches and RAM) and the physical\narchitecture of the processor, so the number of CPUs should be used as a rough guide\nonly.\n\n\n## Examples\n\nFetch the number of logical CPUs.\n\n```\nlet cpus = num_cpus::get();\n```\n\nSee [`rayon::Threadpool`] for an example of where the number of CPUs could be\nused when setting up parallel jobs (Where the threadpool example uses a fixed\nnumber 8, it could use the number of CPUs).\n\n[processor tricks]: https://en.wikipedia.org/wiki/Simultaneous_multithreading\n[`rayon::ThreadPool`]: https://docs.rs/rayon/1.*/rayon/struct.ThreadPool.html","links":{},"attrs":["#![deny(missing_docs)]","#![allow(non_snake_case)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:72:1824","0:73:1842"],"is_stripped":false}}},"2:12951:2103":{"id":"2:12951:2103","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12592:17403","`DoubleEndedIterator`":"2:7973:131","prim@char":"1:12072:453","str::split_whitespace":"2:12929:30757","str::rsplit":"2:12957:26017"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44125:2425","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:9650","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12913:25983":{"id":"2:12913:25983","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42244:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42242:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10682:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10682:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13026:27216":{"id":"2:13026:27216","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:918:35143"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12909:333":{"id":"2:12909:333","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12910:1865","`u8`":"1:12089:1649"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12900:2184":{"id":"2:12900:2184","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12969:26021":{"id":"2:12969:26021","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12072:453","str::splitn":"2:12966:26019","self::pattern":"2:12592:17403"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44247:9666","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:9650","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12597:9650","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12612:17401","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12926:9681":{"id":"2:12926:9681","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12072:453"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44095:9673","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13007:26026":{"id":"2:13007:26026","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12592:17403"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42242:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:9650","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12597:9650","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12612:17401","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5600:33507":{"id":"5:5600:33507","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7622:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12990:2107":{"id":"2:12990:2107","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13013:32806":{"id":"2:13013:32806","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12592:17403"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:9650","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13022:27213":{"id":"2:13022:27213","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40215:27169","Self::is_ascii":"2:13021:25822"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42242:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40215:27169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5603:25821":{"id":"5:5603:25821","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13024:25819"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13028:27218":{"id":"2:13028:27218","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:918:35143"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12908:32790":{"id":"2:12908:32790","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12978:2329":{"id":"2:12978:2329","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12592:17403","`DoubleEndedIterator`":"2:7973:131","prim@char":"1:12072:453","str::rmatches":"2:12981:32796"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44329:9829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:9650","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13023:25823":{"id":"2:13023:25823","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12957:26017":{"id":"2:12957:26017","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12592:17403","`DoubleEndedIterator`":"2:7973:131","prim@char":"1:12072:453","str::split":"2:12951:2103"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44143:9663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:9650","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12597:9650","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12612:17401","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12917:25985":{"id":"2:12917:25985","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10682:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10682:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13025:25818":{"id":"2:13025:25818","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12911:1824":{"id":"2:12911:1824","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42244:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42242:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10682:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10682:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12937:25470":{"id":"2:12937:25470","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12592:17403"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:9650","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5585:33504":{"id":"5:5585:33504","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:286:2647","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:286:2647","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12928:6779":{"id":"2:12928:6779","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44111:2424","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12924:26013":{"id":"2:12924:26013","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:12923:26012"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42242:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5604:25820":{"id":"5:5604:25820","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13025:25818"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13032:32809":{"id":"2:13032:32809","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4769:32809"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44442:9742","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13029:32808":{"id":"2:13029:32808","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4771:32808"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44424:9743","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12934:26025":{"id":"2:12934:26025","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12592:17403"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:9650","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73:1842":{"id":"0:73:1842","crate_id":0,"name":"get_physical","span":{"filename":"src/lib.rs","begin":[108,0],"end":[110,1]},"visibility":"public","docs":"Returns the number of physical cores of the current system.\n\nThis will always return at least `1`.\n\n# Note\n\nPhysical count is supported only on Linux, mac OS and Windows platforms.\nOn other platforms, or if the physical count fails on supported platforms,\nthis function returns the same as [`get()`], which is the number of logical\nCPUS.\n\n# Examples\n\n```\nlet logical_cpus = num_cpus::get();\nlet physical_cpus = num_cpus::get_physical();\nif logical_cpus > physical_cpus {\n    println!(\"We have simultaneous multithreading with about {:.2} \\\n              logical cores to 1 physical core.\", \n              (logical_cpus as f64) / (physical_cpus as f64));\n} else if logical_cpus == physical_cpus {\n    println!(\"Either we don't have simultaneous multithreading, or our \\\n              system doesn't support getting the number of physical CPUs.\");\n} else {\n    println!(\"We have less logical CPUs than physical CPUs, maybe we only have access to \\\n              some of the CPUs on our system.\");\n}\n```\n\n[`get()`]: fn.get.html","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12929:30757":{"id":"2:12929:30757","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12930:30767"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44399:9832","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12954:26015":{"id":"2:12954:26015","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12592:17403"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12408:9660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:9650","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12963:32795":{"id":"2:12963:32795","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12592:17403","str::split":"2:12951:2103","prim@char":"1:12072:453","str::split_terminator":"2:12960:32794"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44193:9826","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:9650","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12597:9650","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12612:17401","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12997:32802":{"id":"2:12997:32802","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13024:25819":{"id":"2:13024:25819","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12919:32791":{"id":"2:12919:32791","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12078:1545","str::slice_mut_unchecked":"2:12920:32792","crate::ops::Index":"2:39861:12110"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12947:6788":{"id":"2:12947:6788","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42244:191","prim@char":"1:12072:453","self::pattern":"2:12592:17403"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42242:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:9650","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12597:9650","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12612:17401","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12910:1865":{"id":"2:12910:1865","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12089:1649"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12923:26012":{"id":"2:12923:26012","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:12924:26013"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42242:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12992:32799":{"id":"2:12992:32799","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13004:2149":{"id":"2:13004:2149","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12592:17403"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42242:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:9650","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12972:26023":{"id":"2:12972:26023","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42242:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:9650","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12984:32797":{"id":"2:12984:32797","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12592:17403","`DoubleEndedIterator`":"2:7973:131","prim@char":"1:12072:453","str::rmatch_indices":"2:12987:32798"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44275:9827","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:9650","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13021:25822":{"id":"2:13021:25822","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13001:32804":{"id":"2:13001:32804","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12592:17403"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:9650","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12898":{"id":"2:12898","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12899:879","2:12900:2184","2:12901:32787","2:12902:32788","2:12904:32789","2:12907:25351","2:12908:32790","2:12909:333","2:12910:1865","2:12911:1824","2:12913:25983","2:12915:25984","2:12917:25985","2:12919:32791","2:12920:32792","2:12921:26008","2:12922:26009","2:12923:26012","2:12924:26013","2:12926:9681","2:12927:9842","2:12928:6779","2:12929:30757","2:12930:30767","2:12931:2100","2:12932:32793","2:12933:30747","2:12934:26025","2:12937:25470","2:12940:25472","2:12943:2168","2:12947:6788","2:12951:2103","2:12954:26015","2:12957:26017","2:12960:32794","2:12963:32795","2:12966:26019","2:12969:26021","2:12972:26023","2:12975:26024","2:12978:2329","2:12981:32796","2:12984:32797","2:12987:32798","2:12990:2107","2:12992:32799","2:12994:32800","2:12996:32801","2:12997:32802","2:12998:32803","2:13001:32804","2:13004:2149","2:13007:26026","2:13010:32805","2:13013:32806","2:13016:32807","2:13019:1957","2:13021:25822","2:13022:27213","2:13023:25823","2:13024:25819","2:13025:25818","2:13026:27216","2:13027:27217","2:13028:27218","2:13029:32808","2:13031:12085","2:13032:32809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5586:6736":{"id":"5:5586:6736","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7622:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:9650","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12907:25351":{"id":"2:12907:25351","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12140:17404"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12932:32793":{"id":"2:12932:32793","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44389:9831","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12943:2168":{"id":"2:12943:2168","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42244:191","prim@char":"1:12072:453","self::pattern":"2:12592:17403"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42242:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:9650","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12996:32801":{"id":"2:12996:32801","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12904:32789":{"id":"2:12904:32789","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12902:32788"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12922:26009":{"id":"2:12922:26009","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12921:26008","str::split_at_mut_checked":"2:12924:26013"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12981:32796":{"id":"2:12981:32796","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12592:17403","`DoubleEndedIterator`":"2:7973:131","prim@char":"1:12072:453","str::matches":"2:12978:2329"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44347:9830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:9650","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12597:9650","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12612:17401","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12994:32800":{"id":"2:12994:32800","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12998:32803":{"id":"2:12998:32803","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12592:17403"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:9650","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12597:9650","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12617:17400","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5589:33505":{"id":"5:5589:33505","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7622:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:9650","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5592:33506":{"id":"5:5592:33506","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7622:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5601:33508":{"id":"5:5601:33508","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:286:2647","`String`":"5:7622:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:286:2647","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12920:32792":{"id":"2:12920:32792","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12078:1545","crate::ops::IndexMut":"2:3253:12111","str::slice_unchecked":"2:12919:32791"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12960:32794":{"id":"2:12960:32794","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12592:17403","str::split":"2:12951:2103","prim@char":"1:12072:453","`DoubleEndedIterator`":"2:7973:131","str::rsplit_terminator":"2:12963:32795"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44175:9825","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:9650","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12930:30767":{"id":"2:12930:30767","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12929:30757"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44408:9833","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12915:25984":{"id":"2:12915:25984","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10682:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10682:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5602:2450":{"id":"5:5602:2450","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7622:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12987:32798":{"id":"2:12987:32798","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12592:17403","`DoubleEndedIterator`":"2:7973:131","prim@char":"1:12072:453","str::match_indices":"2:12984:32797"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44293:9828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:9650","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12597:9650","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12612:17401","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5584":{"id":"5:5584","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5585:33504","5:5586:6736","5:5589:33505","5:5592:33506","5:5600:33507","5:5601:33508","5:5602:2450","5:5603:25821","5:5604:25820"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12901:32787":{"id":"2:12901:32787","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12902:32788":{"id":"2:12902:32788","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13016:32807":{"id":"2:13016:32807","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12592:17403"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:9650","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12597:9650","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12612:17401","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12975:26024":{"id":"2:12975:26024","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42242:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:9650","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12597:9650","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12612:17401","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13027:27217":{"id":"2:13027:27217","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:918:35143"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12921:26008":{"id":"2:12921:26008","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:12923:26012","str::split_at_mut":"2:12922:26009"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12931:2100":{"id":"2:12931:2100","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44379:2421","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13019:1957":{"id":"2:13019:1957","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12553:137","`FromStr`":"2:12552:2477"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42385:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12552:2477","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12552:2477","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12933:30747":{"id":"2:12933:30747","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44417:9680","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:72:1824":{"id":"0:72:1824","crate_id":0,"name":"get","span":{"filename":"src/lib.rs","begin":[73,0],"end":[75,1]},"visibility":"public","docs":"Returns the number of available CPUs of the current system.\n\nThis function will get the number of logical cores. Sometimes this is different from the number\nof physical cores (See [Simultaneous multithreading on Wikipedia][smt]).\n\nThis will always return at least `1`.\n\n# Examples\n\n```\nlet cpus = num_cpus::get();\nif cpus > 1 {\n    println!(\"We are on a multicore system with {} CPUs\", cpus);\n} else {\n    println!(\"We are on a single core system\");\n}\n```\n\n# Note\n\nThis will check [sched affinity] on Linux, showing a lower number of CPUs if the current\nthread does not have access to all the computer's CPUs.\n\nThis will also check [cgroups], frequently used in containers to constrain CPU usage.\n\n[smt]: https://en.wikipedia.org/wiki/Simultaneous_multithreading\n[sched affinity]: http://www.gnu.org/software/libc/manual/html_node/CPU-Affinity.html\n[cgroups]: https://www.kernel.org/doc/Documentation/cgroup-v1/cgroups.txt","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13010:32805":{"id":"2:13010:32805","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12592:17403"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:9650","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12597:9650","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12612:17401","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13031:12085":{"id":"2:13031:12085","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4772:12085"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44433:9599","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"17:11557:7757":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"17:15814:8614":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:12055:25348":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"18:680:7522":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:5039:10951":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"16:6555:9009":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"18:698:7525":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:12808:7908":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"20:3226:5325":{"crate_id":20,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:48373:9974":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:3501:17372":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:12201:7852":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"5:7462:6792":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:12039:29378":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:6438:186":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"5:7528:2360":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"6:6562:11112":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"5:6682:6792":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"16:5794:8870":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:39952:214":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"6:6597:11133":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:38623:17543":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:12408:9660":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"16:2979:8797":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:4203:9600":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:12089:1649":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:46616:9896":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:22728:9697":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:945:9340":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"11:1910:9353":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:6615:9624":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:4650:12197":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:9671:21028":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:11075:7716":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"16:4649:8818":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"6:586:3152":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:46970:9906":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:32820:116":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:9155:235":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:12251:7856":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"20:1368:3900":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:12087:802":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"6:5546:5348":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"6:8282:5371":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"16:2641:8764":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"6:8012:11217":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:1887:10004":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:34050:17536":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:31507:2708":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"6:5370:5884":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"20:4824:2930":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"20:4995:6377":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:4909:5310":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"16:5485:8776":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"6:6698:11171":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"1:7730:2391":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:10719:129":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"17:13187:7948":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:517:3142":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:9048:25320":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"20:3080:2090":{"crate_id":20,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:532:3144":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:10439:7682":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:33814:12226":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:42291:174":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:15206:8439":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:11042:7709":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:4550:12191":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:2268:2362":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:6621:2502":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:4061:12169":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:41106:9769":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"16:2883:20118":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"16:6030:8914":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:10001:144":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"6:1490:3898":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:46169:9875":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:21401:31360":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:3221:142":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:39992:2353":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:44247:9666":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:43925:9806":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:13437:8000":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"18:706:7527":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:640:9995":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"6:1692:3917":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:13959:8114":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:15608:8562":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:8315:12150":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:43503:2469":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:14977:8390":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"16:2819:8772":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:7710:2489":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:44841:11337":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:12294:9674":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:728:190":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"2:41082:7512":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:5018:31825":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:14372:8191":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:4550:7365":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:1054:9342":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:43214:6876":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"20:3414:5342":{"crate_id":20,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:11214:7726":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:11524:7754":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:12433:7877":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"16:6408:8982":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"6:7452:6372":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"14:0:2228":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"5:6954:7353":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"2:45055:207":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"1:11358:10177":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"16:6882:9062":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"16:536:8731":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"18:113:25226":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:2424:2367":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:13844:8096":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:40995:9765":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"15:327:20076":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:16269:7998":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"16:2789:8771":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:40693:9741":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"20:4910:6372":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:40727:17470":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"6:6417:5876":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:12851:7910":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"14:220:9329":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"16:7523:8793":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:4119:12173":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"19:0:1139":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:14079:8131":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:12370:9679":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:5997:9615":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:42316:6792":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"1:893:7323":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:42222:9646":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:7948:2381":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:10479:7380":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"17:12328:7861":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"2:40683:9740":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:11647:25317":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:1581:7323":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:16151:8702":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"2:45047:227":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:22493:2391":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"17:14752:8257":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"6:5636:11088":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"6:7446:6371":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"16:2665:8765":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:14177:8160":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"5:1455:2473":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"20:3355:5335":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Chdr"],"kind":"struct"},"6:8259:5370":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"6:4870:5307":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:8304:10105":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:3273:2445":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"20:4138:5882":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:44111:2424":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:8236:2386":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:5652:12216":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:6068:220":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"5:2299:11246":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:2687:2391":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"6:5436:11025":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"16:3709:8803":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"16:6268:8777":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:32708:9724":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"2:44125:2425":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:3203:2427":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:10759:7696":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"16:6579:20984":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:9858:21044":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:13972:7810":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"20:1550:3918":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:22782:9703":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:13363:7989":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:4109:12172":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:42513:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:21627:12231":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:42385:226":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:6507:2082":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:3424:147":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:12663:17409":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:14436:8210":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:8385:10113":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:4215:9601":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:5527:115":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:12072:453":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"5:6921:7339":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"16:6422:7292":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"2:42170:9784":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:46091:9872":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:4069:12170":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:1207:7558":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"20:542:3145":{"crate_id":20,"path":["libc","unix","pollfd"],"kind":"struct"},"2:9690:32137":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"6:6689:11165":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"2:40876:2385":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"17:14131:8136":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:15799:8613":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:8428:10017":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:7996:10058":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:32697:9723":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"5:4456:2407":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"6:7429:3835":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:15931:7948":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"2:3190:127":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"20:614:3170":{"crate_id":20,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:43934:9807":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:15646:8572":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:2032:198":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:13877:8104":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:46137:9874":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:3024:12225":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:43706:9804":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:10043:6870":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"11:1566:20046":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"16:5580:8780":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:21625:2391":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"10:0:2225":{"crate_id":10,"path":["adler"],"kind":"module"},"6:6738:11181":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"16:6376:8972":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:33208:9084":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:45096:9863":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:16249:8722":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"2:10031:130":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:14298:8180":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:8310:10107":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"18:613:34254":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:479:3138":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"16:7366:8790":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:47284:9926":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:10851:9348":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"10:36:10929":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"17:15023:8398":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"5:4297:2473":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"16:5601:20978":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:33394:9081":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"20:5439:6723":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:30958:6876":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:42425:2473":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:42450:196":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"16:2573:8761":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"6:5415:11010":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:13855:8097":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:10887:10133":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"17:14560:8225":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:7749:10046":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:15701:8588":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"6:1517:3900":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:15356:8479":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"5:4911:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:3056:17367":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"1:8291:2425":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"17:14587:8228":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:46199:9876":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:3698:7323":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"17:12900:7914":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:3409:17545":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"11:1582:9350":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:3430:17445":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"16:6141:34236":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"16:7452:20988":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:11142:7696":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:10996:9662":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"20:1416:3905":{"crate_id":20,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:12949:7571":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"6:6768:11191":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"1:8268:2422":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:2730:163":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"5:5438:17389":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"11:2369:9358":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"17:10419:7550":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:6691:2508":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"6:6532:5887":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"20:3482:5349":{"crate_id":20,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:10877:7698":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"16:3260:8800":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"16:5006:8830":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:9076:10144":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"11:875:9340":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"5:7720:7345":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"16:5919:20981":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"16:4462:8813":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:8351:10013":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:13999:8120":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:9503:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"6:8006:6723":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"5:1508:9333":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"16:6462:20983":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:3545:8802":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:46045:9870":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:10747:29693":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"6:8253:5369":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"6:5407:1109":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:13397:117":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"6:5046:10953":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"11:1917:9354":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"6:6763:11190":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"2:46270:9879":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"6:5181:5337":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:2234:7566":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:12671:7897":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"10:44:9361":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"5:933:2473":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"16:6929:9070":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:15748:8602":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:16093:8687":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"6:5002:5322":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:10284:7544":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:13525:12097":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:10671:34249":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"6:5376:5888":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"11:2569:2359":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:859:6792":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"16:5346:8834":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:13325:7983":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:3589:2079":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"17:10155:7680":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"5:1716:7306":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"20:3111:5311":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:8931:6792":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"6:1526:3901":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:8400:17521":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:3832:6792":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"6:8265:11225":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:9982:226":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"11:2536:10922":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:40943:9759":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"20:477:3137":{"crate_id":20,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:10573:34247":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"5:1161:33991":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:5336:10988":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"16:7345:9161":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:11242:7728":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:13375:7992":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:7627:10181":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"20:3154:5316":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:11153:7697":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"20:3092:5309":{"crate_id":20,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"16:5238:8832":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:4126:2407":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"6:7984:3096":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:2355:8751":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:3522:2387":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"16:5298:20977":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"6:5260:10957":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:918:9332":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"16:6759:8786":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:12124:9671":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:2736:257":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:13594:8042":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"20:1514:3913":{"crate_id":20,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:13273:9689":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:44424:9743":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:15456:8502":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:11102:7718":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"16:5959:20090":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:3061:17368":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"2:46522:9894":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:40029:9733":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:8298:2421":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:10710:7695":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:9150:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:48204:9967":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:7898:17522":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:12085:800":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"17:11392:7744":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:1911:17563":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:10457:139":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"16:3993:8808":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"5:3236:9353":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:15176:8433":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:45034:150":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"17:13509:8014":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:12023:10184":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:8620:2474":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"11:687:9348":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"18:659:7515":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"5:713:249":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:11419:7696":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:10729:2386":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"2:42788:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:16198:8712":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"17:11743:7783":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"2:40981:9762":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:11637:9669":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"1:10069:10002":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"6:5160:5333":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:12044:12092":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:16105:8689":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"9:52:19983":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"16:6599:9021":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:11915:21149":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:14212:8171":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"11:2304:9071":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"5:7114:7361":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"16:7355:9162":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:6621:11255":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"2:34360:17538":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:13199:165":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"16:8097:9244":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"14:31:9322":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"6:6491:5868":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"16:6099:8936":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:7461:6373":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:22893:11259":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:46668:9898":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:10170:7681":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"6:6441:5878":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"5:7517:2359":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:11493:7751":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:9807:21033":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:39781:17443":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"16:7869:9222":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:22061:9693":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"16:6737:9042":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:40912:2422":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"16:6849:9058":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:3442:2453":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"5:7442:9455":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:10382:7418":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"6:497:3141":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:10887:34245":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:1809:662":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:10487:7419":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"2:2353:639":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:16079:8683":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"2:42747:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:11227:7727":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:15313:8464":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:1826:10001":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"14:160:9322":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"0:73:1842":{"crate_id":0,"path":["num_cpus","get_physical"],"kind":"function"},"17:13272:7976":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:40022:9732":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"6:8351:6725":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:6052:7406":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:11089:7717":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:43231:30866":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"20:4131:5881":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:14402:8197":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"20:4797:3021":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:7684:9185":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"16:6331:8971":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"6:5014:5323":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:44555:9843":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:1596:9353":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"14:7:9322":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"6:6874:5911":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:10676:2380":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"17:11443:7749":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:0:1537":{"crate_id":1,"path":["std"],"kind":"module"},"5:217:7304":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:44849:11339":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:48353:9972":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"7:78:19958":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:1862:10002":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"6:578:3151":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"16:6646:9034":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:11031:9663":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:44869:11344":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"16:7706:20990":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:8966:12222":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"20:3348:5334":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Chdr"],"kind":"struct"},"17:0:2231":{"crate_id":17,"path":["object"],"kind":"module"},"5:2279:34029":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:2733:145":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"17:13568:8037":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"6:6478:5882":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"5:6600:7306":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"5:661:9429":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:39865:9728":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:3234:30321":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:11069:9664":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"6:4924:5312":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"11:811:7341":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"17:14147:8141":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:14111:8135":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:6788:11199":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"16:4787:8823":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:10041:206":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:3253:12111":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"20:1472:3909":{"crate_id":20,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:43259:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:11654:10045":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:12929:7915":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:33991:17534":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:46470:9892":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:5052:5325":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"20:4272:5911":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:7363:17524":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"17:14386:8193":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"5:916:7314":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:13252:7966":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:7976:129":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:44193:9826":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:7113:7411":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"5:3270:9352":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:47048:9922":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:48288:9969":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:12342:7866":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:40633:9735":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:46424:9885":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"5:820:7309":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:12213:7853":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"16:7335:8789":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:8870:199":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:15342:8472":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"6:7584:6381":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:13986:8119":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:3275:2446":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"6:4992:5321":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"5:722:120":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"6:6621:5335":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:40753:17471":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:44837:11336":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"17:10997:7706":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:2271:2363":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"16:6152:8955":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"20:1490:3911":{"crate_id":20,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:10612:7693":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:3589:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"16:5713:8859":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"20:3137:5314":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"16:4761:8822":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:41096:9627":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:6979:7410":{"crate_id":1,"path":["std","sys","pal","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:533:7393":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:9102:25253":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:12108:17606":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:48326:9970":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"5:40:7302":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:6511:2500":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"16:4968:8829":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"13:0:2221":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:40670:9739":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:2001:189":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"20:134:2825":{"crate_id":20,"path":["libc","unix","FILE"],"kind":"enum"},"17:10661:7694":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:3916:10012":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"20:3119:5312":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:1686:3916":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:41066:9625":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"6:5290:10973":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:48478:9981":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:15368:8482":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"16:4907:8827":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:13424:7999":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:12094:854":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"1:7921:2382":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:43482:9796":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"6:4824:5304":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:8369:10111":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"16:6201:8775":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:12711:138":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"5:7362:6792":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:9017:2499":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:48364:9973":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"16:7998:8796":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:12289:7859":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"6:6471:5881":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:13774:8085":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"18:538:7499":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:7686:7415":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"16:8012:9237":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:12824:21052":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"6:1707:3919":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:7931:146":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:38513:17541":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:11293:21080":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"16:4545:8816":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:7667:7413":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"16:2489:8757":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:13248:205":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:15092:8413":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:41013:9766":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"5:7353:9435":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:44329:9829":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:9081:10145":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:4996:12201":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"18:726:7534":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"20:563:3148":{"crate_id":20,"path":["libc","unix","sigval"],"kind":"struct"},"20:5004:6378":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:33932:17535":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:47330:9927":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:11661:7776":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"16:6745:8785":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"20:4209:5889":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:7223:29020":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:6151:7401":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"16:2859:8774":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:21753:12232":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:15734:8595":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"20:1479:3910":{"crate_id":20,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"20:1504:3912":{"crate_id":20,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:12092:1648":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"16:8055:9129":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:22271:12317":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"6:6756:11189":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"17:11324:7738":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"6:4971:5318":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"6:4811:5303":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"16:7444:9167":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"5:4095:7306":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:3570:30700":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"16:2709:8767":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:22462:17553":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"function"},"2:3020:2696":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"16:7537:8794":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"6:4979:5319":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:3013:2694":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"6:7330:3021":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:7389:3860":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:10946:7422":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:14994:8392":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:11715:7780":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"6:5528:5345":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:5314:10983":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:39817:17371":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"17:12621:7894":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"2:40816:9752":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:15445:8501":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:21646:9694":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"6:4965:5317":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:5477:5300":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:4572:12192":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"20:5494:6725":{"crate_id":20,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:256:7548":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:4:1122":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"20:3160:5317":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:8090:2439":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:11558:10011":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"3:0:480":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:44873:11345":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:13797:8090":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:12557:7716":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"2:10876:2425":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"6:6775:11192":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"17:13173:7947":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:10088:10154":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"17:11764:7787":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:11112:11356":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"17:15760:8604":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:42441:6792":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"5:2079:2438":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"6:6670:11160":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:5624:11082":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"2:10033:6866":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"5:3024:33999":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"20:536:3144":{"crate_id":20,"path":["libc","unix","iovec"],"kind":"struct"},"1:1063:9343":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"5:7392:7318":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:15410:8493":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:10447:2443":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"17:11841:7800":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:8085:10060":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"16:7551:8784":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:10905:7699":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"20:1558:3919":{"crate_id":20,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"16:8109:138":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"20:1386:3902":{"crate_id":20,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:13553:8031":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"20:4974:6376":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"20:1398:3903":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:5225:5342":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:11574:7762":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:12362:7871":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"5:2187:7320":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:15281:8456":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:42827:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:42036:12151":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"5:2517:11247":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"6:5445:11031":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:22031:2391":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"1:7731:9990":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:10350:7546":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:10682:239":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:8907:10133":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:11352:10037":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"5:4257:2407":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"16:7889:9223":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:15010:8393":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:13946:8111":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:13738:8076":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"16:2917:20119":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:8915:2473":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:3214:2644":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"16:2617:8763":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"6:5250:5344":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:13089:7929":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:11189:7724":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:11399:10042":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"7:31:19951":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"20:5467:5370":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:41034:9623":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"16:7507:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:15992:8668":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"6:5671:11100":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:42552:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:15463:8504":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:30943:6743":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:40772:9750":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:12388:7872":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:2516:201":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:5244:10955":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"9:446:19965":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:15836:8620":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:42366:12093":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"6:8288:5372":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:44891:132":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:12724:21051":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:725:2391":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"2:40704:9742":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:13399:7996":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:44275:9827":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:14189:8162":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:48384:9975":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"20:3127:5313":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:6714:11177":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"5:3863:7341":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1:3504:2081":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"6:8317:11235":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"5:7635:9462":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"20:3363:5336":{"crate_id":20,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"6:8247:5368":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:4987:12200":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:4560:6879":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:36582:9091":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:10954:21060":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:3224:143":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:22831:30871":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:15944:7962":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"2:44647:9683":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:44750:9684":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"16:6724:9040":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:11115:7720":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:8082:179":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:1841:1196":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"5:7622:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:2521:135":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"5:5050:2407":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"16:4283:8809":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:5720:10027":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:11413:10044":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"18:670:7521":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:12887:7912":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:15151:8425":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"6:491:3140":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"11:2352:9343":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"20:3471:5348":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:32789:2698":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:2175:21107":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:13221:31074":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:5200:5339":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"6:5665:11098":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"5:6421:12326":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"1:5462:10022":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"5:3652:9348":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"20:549:3146":{"crate_id":20,"path":["libc","unix","winsize"],"kind":"struct"},"2:47206:9925":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:8215:2452":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:12077:1512":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"5:816:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"20:3032:5305":{"crate_id":20,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:4011:12167":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:14599:8235":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"6:1593:3908":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:12572:7696":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"2:10827:2473":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"16:6394:8980":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"6:559:3148":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:12189:7851":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"16:5331:7681":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"5:1346:9347":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"5:5434:17388":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"20:1361:3899":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"14:165:20052":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"16:6669:9035":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:7070:30238":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:46359:9883":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"18:491:7491":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:44347:9830":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:9070:9649":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:12076:7841":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"6:5212:5340":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:14311:8181":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"0:72:1824":{"crate_id":0,"path":["num_cpus","get"],"kind":"function"},"17:11354:7742":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"16:5316:7680":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"20:3174:5319":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:645:12087":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:33873:12228":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"11:2443:7323":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"17:11537:7755":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:723:154":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:3172:17370":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"17:15569:8547":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:12090:1646":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:22913:9718":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:42433:9348":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:482:7392":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:40215:27169":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"17:14847:8340":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"11:430:34215":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:7837:10055":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"20:568:3149":{"crate_id":20,"path":["libc","unix","itimerval"],"kind":"struct"},"16:7270:8887":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:11256:7730":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"11:1903:9352":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:8478:2468":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:2740:256":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"17:13922:8110":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:9145:187":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:9041:10140":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"20:4042:5853":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"16:7386:8791":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:11063:7714":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:39877:213":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"16:7491:9169":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"16:6788:34235":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"11:2548:10924":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:12597:9650":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"20:4151:5868":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"11:2562:10927":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:3113:9086":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:8391:2476":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:12030:7837":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:5713:7406":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:5827:2496":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:45118:181":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"16:6230:8961":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:4491:8814":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"20:1635:3973":{"crate_id":20,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:4902:12176":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:7960:140":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:12095:1704":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:44013:9814":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:44926:17644":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"6:5146:5332":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:15957:8638":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"2:43874:9805":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:3315:2447":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"11:2498:20041":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"6:7485:6375":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"11:1066:20045":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:42630:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:4821:7576":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"2:42978:6868":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"6:1485:3897":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:4844:8825":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"5:7543:7332":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:3597:7570":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:44229:9665":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"20:4095:5877":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"20:3433:5344":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:44505:17415":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"20:590:3152":{"crate_id":20,"path":["libc","unix","protoent"],"kind":"struct"},"1:8406:2930":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:10738:29695":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"1:10230:115":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"2:10037:6868":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:403:7551":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:5097:860":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:4335:9602":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"16:7429:34234":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:11230:10176":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"1:8604:2472":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"16:2729:8768":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:2671:7380":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:2688:17475":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"5:6063:17836":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:10958:9661":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"20:3389:5339":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"20:5455:5368":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:1547:3903":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:39914:212":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:12617:17400":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:44845:11338":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:12516:7889":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"20:4904:6371":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:8285:2424":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:46025:9869":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"6:7575:11214":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:2203:7563":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"5:3732:7306":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:15301:8463":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:4661:6881":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"5:3798:9437":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:9938:21047":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:588:12084":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:48501:9982":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:40972:9612":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:6227:7390":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"5:3626:183":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"16:3177:8742":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:4075:12171":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:40934:9758":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"5:1181:33933":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:9035:117":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:44084:9822":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:10915:34242":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:10026:121":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1:11385:10041":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"11:2554:34216":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:3436:17444":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"6:5515:11057":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"2:22815:9705":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:1590:9352":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:5649:2874":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"16:2375:8752":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:2818:138":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"1:10935:7421":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:30937:6742":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:12606:7527":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:1885:10003":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"6:5643:5347":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:5653:11091":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"18:80:25224":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"18:735:25235":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:11579:10012":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"20:527:3143":{"crate_id":20,"path":["libc","unix","hostent"],"kind":"struct"},"16:5278:8833":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:10044:21049":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:6426:9617":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"20:3443:5345":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:8224:2454":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:14356:8190":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:32722:9725":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:42308:9348":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:21362:2708":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:41448:9633":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:15720:8593":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"20:483:3138":{"crate_id":20,"path":["libc","unix","timeval"],"kind":"struct"},"16:2553:8760":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:2365:17554":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"2:2727:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"13:109:34218":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"5:1145:33932":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:46115:9873":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:10242:153":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:13785:8088":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"11:673:2473":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"5:7704:7341":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:10847:10055":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"1:1574:2473":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"20:1410:3904":{"crate_id":20,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:15:2332":{"crate_id":2,"path":["core","write"],"kind":"macro"},"16:5521:8781":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:4464:10016":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:2450:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"16:7951:9231":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:12353:7870":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"20:3461:5347":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"5:2226:11242":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"11:856:9338":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:9983:2390":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"18:651:7492":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:11430:11362":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:10818:7697":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:11051:7711":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"16:2835:8773":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:3017:138":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:40856:9753":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:10039:6869":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"20:3380:5338":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:12823:121":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:8278:2423":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"17:14271:8177":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:11661:10045":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"5:4065:7323":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:5277:10968":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"20:4847:3860":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:38458:17540":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:12478:7882":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:48002:9964":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:40846:7367":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:41441:9632":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"6:5174:5336":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:13415:7390":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:2983:2692":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:12530:7891":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"17:13412:7998":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:16176:8710":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"2:2469:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"17:11605:7770":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:12543:7892":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"1:4123:12174":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:4879:7399":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:44865:11343":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"6:1580:3906":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:46890:9905":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:42182:10013":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"6:5102:5328":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"9:329:10930":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:9069:10143":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:8549:2470":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:4210:29023":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:15426:8496":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:4481:9604":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"6:4864:5306":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"5:860:7312":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:922:9335":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:15778:8610":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:40720:9743":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:41470:2453":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:15769:8608":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:12070:403":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"17:12993:21053":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:357:9988":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:11495:7426":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:15058:8402":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:15434:8497":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:12969:7917":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"6:5320:10984":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:10045:6871":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"6:465:3136":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"6:485:3139":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:10720:34243":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"6:1653:3912":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"16:7324:9158":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:513:7554":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:14284:8179":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"5:6944:7351":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"11:1891:7323":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:14235:8172":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:11497:7752":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:4784:12191":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:4823:12179":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:40903:9756":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:46500:9893":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"20:5033:6380":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","termios2"],"kind":"struct"},"17:10524:7692":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:6725:233":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:3356:2444":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:8526:2469":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:11026:21062":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:867:9333":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:12076:332":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"16:2319:8743":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:21384:31351":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"16:7565:9171":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:7816:12091":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"20:501:3141":{"crate_id":20,"path":["libc","unix","rusage"],"kind":"struct"},"16:2529:8759":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:14788:8288":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"11:1896:7341":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"16:2749:8769":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:32715:6879":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"6:6519:5885":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"11:123:7293":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:47094:9923":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"5:7402:9454":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"17:12422:7875":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:21744:2391":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"16:6895:9065":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:4614:6880":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:5132:10021":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:2419:8754":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:10218:7542":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"6:6706:11174":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"17:15473:8509":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"11:1025:9342":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:11077:11345":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"1:8363:12190":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"6:4837:5305":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:4781:12202":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:10855:10026":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"4:0:2222":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"6:7359:6370":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:2657:2435":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:437:7553":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:14986:8391":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:11152:9668":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"11:774:9333":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"11:1087:34217":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"16:4813:8824":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:46300:9880":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:2266:139":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"11:2231:7762":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"17:12264:7857":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:2724:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:12552:2477":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"16:6362:8795":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:21430:31363":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"17:12464:21174":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"16:2304:20117":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"17:12647:7895":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"5:286:2647":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"16:6077:8921":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:8377:10105":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"9:391:19966":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"16:2593:8762":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:5134:5331":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:6721:11178":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"2:3218:141":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:5861:2498":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:7931:2380":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:10444:2447":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"5:1486:6792":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"20:1436:3907":{"crate_id":20,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"5:6764:7306":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"16:7194:34239":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"5:3229:2473":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:44389:9831":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"20:3209:5323":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:10710:140":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"17:9737:21027":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"2:2971:2691":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"1:9089:10147":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:43721:11335":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:44417:9680":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"6:4800:5302":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"6:7537:6377":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"16:2336:8745":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:43974:9812":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:10919:9660":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"5:271:7306":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"17:16223:8718":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"17:12107:7696":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"9:0:2224":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"6:5361:5883":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"11:299:10917":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:9916:21046":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"6:538:3145":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"6:4959:5316":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:21574:12235":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"6:5472:11049":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"6:1639:3911":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"16:2995:20120":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:12093:1645":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:22900:9717":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:22448:12323":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:6330:7406":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:42064:11326":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:3264:7567":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"6:4985:5320":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"6:1559:3904":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:11313:7736":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"16:6188:8957":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:15635:8571":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"6:5122:5330":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:8394:12101":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:8026:2645":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"15:394:20082":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:44026:9815":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"5:4489:7330":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"5:6042:2494":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"9:481:19964":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:48540:9983":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:40644:9736":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"18:608:7508":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:14325:8184":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"5:6010:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"6:4942:5314":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:557:9991":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"16:6221:8960":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:14912:8380":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"5:4137:9348":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"11:1676:7299":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:8996:12223":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"6:4897:5309":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:44572:9844":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:26357:266":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:43953:9810":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"11:1107:9345":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:2276:2164":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:6547:2506":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:4261:12189":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"5:3241:32552":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:15273:8455":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:40746:9746":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"20:3334:5333":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:9181:9650":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:1643:1848":{"crate_id":2,"path":["core","mem"],"kind":"module"},"15:306:20072":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"20:3215:5324":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"16:6908:9068":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:48410:9977":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"6:5617:11079":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:43963:9811":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:10870:25322":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:42591:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:9122:11348":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"20:3451:5346":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:903:7341":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:10689:10168":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"2:4838:17464":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"11:837:9335":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"16:3600:7586":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"20:3370:5337":{"crate_id":20,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"20:138:2826":{"crate_id":20,"path":["libc","unix","fpos_t"],"kind":"enum"},"6:6880:1884":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:15383:8486":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"16:2769:8770":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"20:4781:3831":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:1939:10005":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:16212:8716":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"1:951:9341":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"20:5064:6382":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:10156:12218":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"16:6445:8984":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"16:4355:8810":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:2121:9468":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:8564:2471":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"20:4165:5883":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlmsghdr"],"kind":"struct"},"2:39972:216":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"16:5825:8727":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:10462:7379":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:12097:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"6:5352:10990":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"5:3017:6841":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"5:1301:9071":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:1717:2407":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"17:12127:7844":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"11:490:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:11773:7788":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"11:1728:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"16:5568:8845":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:15390:8487":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:22743:11256":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"6:8271:11226":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:3561:2390":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:909:9349":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:3472:2407":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"5:7611:7337":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"5:1567:9434":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"16:5662:20979":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:2558:202":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:14091:8132":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:13064:7928":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"16:7294:9149":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:43491:157":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:880:9334":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"6:7561:6379":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"20:5447:6724":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:40712:9599":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:11341:7741":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"6:5588:5350":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"16:3773:8805":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:14025:8123":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"6:6657:11156":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:13235:7963":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"5:1332:9342":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"15:0:2229":{"crate_id":15,"path":["addr2line"],"kind":"module"},"5:3275:32544":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:45037:219":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:41479:7375":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"16:7971:9232":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"11:102:10916":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:7935:166":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:43474:9795":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:40925:9757":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:15138:8419":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:15616:8565":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:3354:2443":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:9196:10149":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:6821:5890":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:8894:10132":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:12863:7911":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:11138:9667":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:11799:7793":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"6:7366:2930":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:4821:12177":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"20:3086:5186":{"crate_id":20,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:2496:2078":{"crate_id":1,"path":["std","io"],"kind":"module"},"6:4876:5308":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:10534:34241":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"6:8328:11236":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"16:5555:8840":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:47124:9924":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:44055:9818":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:12695:7899":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"17:15214:8441":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:44698:17416":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:3579:2388":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:14475:8213":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:43306:6877":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:42204:9644":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"6:6542:5889":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:11688:7778":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"11:2124:9071":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:14876:8351":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:5056:2455":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"6:5191:5338":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:14066:8130":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:8631:2475":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:39892:210":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:44095:9673":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:21418:31361":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"5:7412:32556":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:4605:7366":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:2363:17553":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"16:6045:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"9:237:2469":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"18:573:7492":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:42367:12215":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"20:4203:5888":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlattr"],"kind":"struct"},"17:15376:8485":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"20:3238:5326":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:13015:7877":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"6:6900:5912":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:9460:139":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"6:6409:5875":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:1503:10944":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:10769:34244":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"6:8294:5373":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"20:5485:5373":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"11:1142:9346":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"16:5878:8733":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:5512:10025":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"17:10399:2424":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:15418:8494":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:1975:709":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"2:3419:253":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:42004:9641":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:14489:8214":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:13211:7962":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"16:7609:9173":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"11:2423:6792":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"1:5476:10023":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:40042:9734":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:1824:10000":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:4716:10783":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"6:5581:5349":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:46836:9903":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:21755:9694":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"20:3147:5315":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"16:2284:20091":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:10828:34248":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"5:1054:7306":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:7926:2383":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:8614:2473":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"16:3856:8807":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:12485:21175":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:48250:9968":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"20:4174:5884":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlmsgerr"],"kind":"struct"},"5:7434:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:43725:9657":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"11:364:7295":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"11:0:2226":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:2447:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:40739:9745":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:11635:10178":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:46377:9884":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:5712:2407":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"6:6379:5853":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"16:6692:9036":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:11702:7779":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"6:7348:6369":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:14855:8343":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:11647:7775":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"5:5200:2494":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"18:689:7524":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:261:7549":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:22185:12233":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"5:6554:7323":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"14:214:9327":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:31480:196":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:44433:9599":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"16:5038:8831":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:14051:8127":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:9160:162":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"6:5565:11060":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:11595:7769":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"5:5699:7339":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:12150:7845":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:3464:17369":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"6:1621:3909":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:7754:10048":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:2552:195":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"6:4787:5301":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:44853:11340":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"16:5616:8846":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"16:6292:8968":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:2973:119":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:40963:9610":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:16121:8694":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"16:7306:9150":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"16:5897:20980":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:1446:156":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"18:589:7502":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:12584:7697":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"18:531:7496":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"20:4185:5886":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:13526:8022":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:22675:9696":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"6:7602:6382":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"11:883:9341":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:12073:1665":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"1:8461:12211":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:15266:8454":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"20:3019:5304":{"crate_id":20,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"7:0:1694":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:21416:31366":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:15102:8414":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"20:3489:5350":{"crate_id":20,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:44684:9847":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:1072:9347":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:38568:17542":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"5:1558:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:4312:10014":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:7774:7419":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"16:5630:8849":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:13832:8094":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:10672:2391":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:13024:21054":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"5:7382:7323":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"6:5283:10971":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"6:8029:6724":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:15197:8438":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"16:6858:9061":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:2978:246":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1:11058:10132":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:4891:5186":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"16:7103:34237":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"16:3406:8801":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"16:5846:8876":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"20:1377:3901":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:14575:7877":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"6:5557:11058":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:15678:8587":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"9:356:19980":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:12683:7898":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"2:42377:9651":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"6:1628:3910":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:8937:10028":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:11269:21079":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"6:6746:11182":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"17:15324:8468":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"20:0:884":{"crate_id":20,"path":["libc"],"kind":"module"},"11:844:12096":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"9:423:19967":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:8004:2436":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"6:7412:3832":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:15624:8566":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:48425:9978":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:32788:2643":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:47360:9928":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:41057:9768":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"9:177:20032":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"20:3320:5332":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"16:7595:8782":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:8402:10115":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:47394:9929":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"20:4806:6369":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:10251:7543":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:11547:7626":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"16:2509:8758":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:21372:31351":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"11:2542:10923":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:46322:9881":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"6:5031:10946":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:15400:8490":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"18:96:25225":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:44442:9742":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"15:288:20071":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"11:2383:2473":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"1:3749:12152":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"5:3388:7341":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"17:14246:8174":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:6677:2507":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"5:6402:12325":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:46570:9895":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:12089:7842":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"6:553:3147":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:7894:17523":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"16:8022:20991":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:5834:2497":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:22:736":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"5:3028:33998":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"20:3071:5308":{"crate_id":20,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"5:3296:9355":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"11:396:7297":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:48463:9980":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"20:5046:6381":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:40655:30858":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:12043:7838":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"16:6546:9008":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"20:3006:5303":{"crate_id":20,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"20:3257:5327":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:11670:9670":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"1:5581:10026":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:12792:7646":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"5:3783:2438":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:34533:17539":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:8012:2438":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"5:7645:9463":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:6243:7405":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:41004:9616":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:34706:9090":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:15333:8471":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"20:557:3147":{"crate_id":20,"path":["libc","unix","linger"],"kind":"struct"},"17:11853:7801":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"6:6609:11137":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:22408:17553":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"function"},"17:15521:8546":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"5:1526:9349":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:15116:8415":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:46738:9901":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:12494:7884":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:5389:130":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"17:10317:7545":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:13766:8083":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"18:581:2708":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:43521:9803":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:3237:29152":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"16:7376:9163":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:30905:6741":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"20:4870:3832":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"16:6431:8783":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:11069:2137":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:41489:9635":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:16165:8705":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"16:149:7289":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:5209:204":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"16:5541:8836":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"6:6636:11144":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:42368:6854":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:43466:9793":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"16:4399:8811":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"11:2151:9343":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:1578:6792":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"20:4107:5879":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:7364:17525":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:9299:10003":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"1:4392:10015":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:7938:2384":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:1098:7556":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:4718:10785":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"2:22807:9704":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"16:5865:8883":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"6:7467:6374":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:3240:29162":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"11:710:9331":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:10666:11352":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"16:2689:8766":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:10494:7385":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:849:9348":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"20:1537:3916":{"crate_id":20,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:2422:2366":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"20:2982:5301":{"crate_id":20,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:12175:7847":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:31131:30825":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:43268:6876":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:40801:30878":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:11367:7716":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:45157:9868":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"6:5236:5343":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"11:2469:7341":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"1:504:7320":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"6:5483:11051":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"1:12083:698":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"6:5266:10960":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:6460:5880":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"20:4193:5887":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:13674:8047":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:12140:17404":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:11877:7803":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"20:5019:6379":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:5296:10976":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:5083:5327":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:6624:2503":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:8954:10136":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"20:3408:5341":{"crate_id":20,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:13485:8012":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"6:6650:11155":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:41497:9637":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:3317:2448":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"16:5726:8860":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:11755:7786":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"2:12592:17403":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"6:8197:6380":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:12056:7840":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:10982:21061":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"12:0:2227":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:3473:7569":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:8080:10059":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:14723:8237":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:4227:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:44541:9840":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"16:4518:8815":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:12071:1041":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"20:4180:5885":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:16032:7966":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"16:7118:6855":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"6:6505:11111":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"20:4925:6374":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:22542:12312":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"1:1968:12139":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:48080:9965":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:3029:12227":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:5706:220":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"6:523:3143":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"16:3741:8804":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"6:0:884":{"crate_id":6,"path":["libc"],"kind":"module"},"6:6435:5877":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"16:7152:9108":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"6:5400:11005":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:12086:801":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"5:2104:9438":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"20:4120:5880":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:7616:7555":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"8:0:2223":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:39202:17544":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:1925:11253":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:12659:7896":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"2:44861:11342":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:45109:9866":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"20:4101:5878":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"20:55:2749":{"crate_id":20,"path":["libc","unix","DIR"],"kind":"enum"},"16:7482:9168":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"6:6524:5886":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:3039:9085":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:14868:8350":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"6:7516:6376":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"11:1160:9347":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"20:4077:5876":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:30681:12153":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:12278:7858":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:32731:237":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:45145:9360":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:46069:9871":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"6:473:3137":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"5:1470:9348":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:41231:2423":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:11567:7759":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"17:10018:21029":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:11128:7671":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:42356:6856":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:6447:5879":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:40883:9754":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"20:1531:3915":{"crate_id":20,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:41455:2082":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:10622:34246":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:10441:2445":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"2:9685:31371":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:12084:803":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"6:6629:5334":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"6:6811:11205":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:22406:30793":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"17:11865:7802":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"16:6803:9047":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:12079:1630":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"5:7599:9461":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:8981:12221":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:6729:11179":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"2:4366:9603":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:48448:9979":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:41025:9622":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"6:1680:3915":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:41982:171":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:14545:8221":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:7650:2452":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"16:6116:8942":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:9467:2383":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"17:13723:8072":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:10090:10153":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"2:44035:9816":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"14:40:7963":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"14:187:20059":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"20:5479:5372":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:10092:21050":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:11583:7765":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:7944:2646":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:22036:12237":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"2:32661:10926":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:10290:9656":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:11095:2397":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"2:22379:2391":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"1:6378:220":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:4720:10787":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"2:1811:6738":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:40828:1946":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"2:12612:17401":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:14529:8219":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:13473:8009":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:46714:9900":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"18:0:2232":{"crate_id":18,"path":["memchr"],"kind":"module"},"20:1522:3914":{"crate_id":20,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"20:1350:3897":{"crate_id":20,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:12238:7855":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:4986:7578":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"16:2439:8755":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:15249:8447":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"11:787:9334":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:13146:7939":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:22183:2391":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:42325:6855":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"17:11467:7750":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:12075:1159":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:15222:8443":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"18:598:34256":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:41255:9630":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:44399:9832":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"20:3425:5343":{"crate_id":20,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:14260:8176":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:2035:197":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:42669:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:5906:2505":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:8923:10135":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:1040:9071":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:1607:9355":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:3811:10010":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:16187:8711":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"1:621:9992":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:2982:7398":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:10671:11354":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"2:22622:9695":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:43943:9809":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:11290:9413":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"17:13344:7988":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:4409:6878":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:22355:12319":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1:7822:12129":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"11:742:9332":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"6:6915:11207":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"5:0:307":{"crate_id":5,"path":["alloc"],"kind":"module"},"11:1887:6792":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:10285:12144":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:1602:9354":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:32701:9129":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"5:1418:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:15190:8436":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"18:718:7531":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"20:3104:5310":{"crate_id":20,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"18:623:34253":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"6:5489:11053":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"2:42708:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"11:1007:9071":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:7802:12090":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:44408:9833":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:11124:9666":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"20:1431:3906":{"crate_id":20,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:5423:11015":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:2438:2371":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:15582:8553":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"6:5502:11056":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"2:7258:6798":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"11:434:34210":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:3449:31344":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:42964:6867":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:9178:2397":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:11130:162":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"17:14414:8199":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:23957:236":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:5163:10021":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:5390:10999":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"20:4817:6370":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:5496:10024":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:8248:2389":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"18:521:25237":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:13292:7977":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:13435:9692":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"16:3830:8806":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:39932:215":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:11714:17397":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"6:8306:11231":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:4634:2530":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"5:7587:9459":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:11518:10010":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:43243:9200":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:10339:10130":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:13606:8045":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:4477:221":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"6:5598:11065":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"16:4733:8821":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:10647:10163":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"17:12768:21030":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"20:469:3136":{"crate_id":20,"path":["libc","unix","group"],"kind":"struct"},"17:11016:7708":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"6:5677:11103":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:12091:1647":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"6:5020:5324":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"20:5473:5371":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:12225:7854":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:11166:7723":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:10185:7540":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:44732:9856":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"6:5064:5326":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"16:7984:9235":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:11424:11361":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"20:4069:5875":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:42300:2473":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"6:5329:10987":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"11:1883:2473":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:4248:12188":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:13116:7935":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"20:3065:5307":{"crate_id":20,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:7428:30745":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"6:1663:3913":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:12408:7874":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:11335:7424":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"1:415:185":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:4240:12187":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"6:4916:5311":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:5045:12207":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:11730:7782":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"2:44379:2421":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"17:13814:8093":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:12354:9678":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"5:5926:7323":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"5:2093:9437":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"18:563:7501":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:40627:9599":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:15655:8574":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"5:1547:9332":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:4232:12186":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:34187:17537":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"16:5696:8855":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"16:7414:9164":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"16:6215:8959":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"17:12443:7879":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"6:4932:5313":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"5:4411:264":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"11:2140:9342":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"5:7572:30878":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:10952:7423":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:11160:11357":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:928:12096":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:7467:29377":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:46692:9899":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:42971:6866":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"16:6244:20982":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:44620:9846":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"5:1820:7341":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"18:507:7492":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:32733:244":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"20:495:3140":{"crate_id":20,"path":["libc","unix","rlimit"],"kind":"struct"},"6:5112:5329":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"0:0:1964":{"crate_id":0,"path":["num_cpus"],"kind":"module"},"5:6167:2407":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:11825:7798":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:5321:203":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"11:832:9349":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:14503:8217":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:22394:12322":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"2:30969:30841":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:2440:2372":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"18:643:7492":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:9886:21045":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:2733:2437":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:13899:8105":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:9472:7417":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"17:11510:7753":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"6:1723:3920":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"16:6965:10147":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"11:1923:9355":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"20:3180:5320":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:22759:9698":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"6:545:3146":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:11788:7792":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"5:5390:7306":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"5:7470:6792":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:12088:798":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"5:7426:6792":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"11:1603:9351":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"18:481:7490":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:22851:30844":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:31026:30837":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"6:4952:5315":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:43513:9802":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:10396:7377":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:9235:25347":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","DtorState"],"kind":"enum"},"2:9498:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:16138:8696":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"2:43285:138":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:15822:8617":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"16:6773:9044":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"11:800:7323":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"6:1585:3907":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:11110:9665":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:22924:12165":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"18:754:7539":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:363:9989":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"6:5466:11046":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"6:1565:3905":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"20:1355:3898":{"crate_id":20,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:11812:7796":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:14449:8211":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:11674:7777":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:13387:7993":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:12331:9677":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"20:5461:5369":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:16235:8721":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"20:2976:5300":{"crate_id":20,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:5219:5341":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:13581:8041":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"6:5630:11085":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"6:6678:11162":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:5883:9613":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:11898:7805":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"5:3262:9354":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:45088:9861":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"5:3018:34038":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"20:4229:5890":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:22866:30839":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"20:5417:3096":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"3:234:226":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:4250:17365":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:11045:10131":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:21572:2391":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:939:9338":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:42985:6869":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:14933:8385":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:10068:21032":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"16:5645:8851":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"5:3639:2473":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"5:7370:9453":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:48399:9976":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:12454:7880":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"20:4887:3835":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"5:2748:11250":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"6:8341:11240":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"5:1517:9334":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:44293:9828":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:3051:17366":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"2:10035:6867":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:726:12154":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"2:41464:9634":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:2450:2377":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"9:501:9416":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:7973:131":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"16:7225:20987":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:44143:9663":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:4486:9605":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"11:2403:9348":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"16:5499:8779":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"20:3296:5330":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:42148:30838":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"20:489:3139":{"crate_id":20,"path":["libc","unix","timespec"],"kind":"struct"},"2:44071:9819":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:2859:9469":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"16:7932:9228":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"20:3401:5340":{"crate_id":20,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:47544:9930":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:1804:638":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"6:5306:10979":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:44000:9754":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:14012:8122":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"6:7306:3063":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:8881:10131":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:4706:12171":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:15039:8401":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:13470:152":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:597:7555":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:32818:2697":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"1:3399:2432":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:12078:1545":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"16:6941:20986":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:1934:9465":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"6:5457:11040":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:21633:12234":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"11:351:34207":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"20:2995:5302":{"crate_id":20,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:15289:8457":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"6:7546:6378":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:48142:9966":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:21399:31355":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:13455:8008":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"20:4943:6375":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:9984:21048":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"16:4674:8819":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:22073:31358":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:836:2473":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"5:1536:9331":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:4997:421":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"17:12371:7915":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"16:7653:9181":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:3346:211":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:13046:7925":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"14:202:17417":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"16:2399:8753":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:2693:2428":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"5:7089:7358":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:40785:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:16069:8682":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"20:4773:3063":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:4131:12175":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"20:4919:6373":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"20:3187:5321":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:11405:7745":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"16:2459:8756":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:46239:9878":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"6:8300:11230":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"20:582:3151":{"crate_id":20,"path":["libc","unix","servent"],"kind":"struct"},"2:44045:9817":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:44915:9858":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:7982:10008":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"2:46221:9877":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"16:7914:9226":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:6892:12229":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"5:4227:2407":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:4047:12168":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"18:635:7514":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"16:4572:8817":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:12597:7893":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"2:44101:9823":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"5:1317:9343":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:42474:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:14038:8125":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:46340:9882":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:44526:9835":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:5382:10994":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"20:4298:5912":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:7339:11213":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"5:7045:263":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:2807:126":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"5:5856:250":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:42020:9643":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:10247:29346":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"2:45134:9867":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:16259:7993":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"6:6664:11157":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:12082:696":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:5807:2407":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:7480:17517":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"20:3197:5322":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:9030:10137":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"16:4702:8820":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"20:1574:3920":{"crate_id":20,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:44719:9852":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"20:574:3150":{"crate_id":20,"path":["libc","unix","tms"],"kind":"struct"},"6:564:3149":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"5:7559:9456":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"16:4871:8826":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:12707:7900":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:8864:10130":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:9755:21025":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:10137:21026":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:9781:21043":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"16:7400:8792":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:32732:2642":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:47892:9963":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:13538:8025":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:3015:226":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"2:40790:9751":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:10700:2384":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"2:22793:30877":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"16:6811:20985":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"16:7176:34238":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:12508:7887":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:16050:7976":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"16:6610:9022":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:13753:8081":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"20:4278:1884":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:3814:10011":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"11:1051:9343":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:6275:10033":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:0:536":{"crate_id":2,"path":["core"],"kind":"module"},"6:1496:10941":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"16:6320:8970":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"18:515:7489":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"16:6254:8964":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:47750:9962":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:14968:8386":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:12096:1255":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:637:9993":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"20:3166:5318":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:8438:31374":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:12318:7571":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:4269:17447":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"18:765:25236":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:14463:8212":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:8358:11346":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:42242:194":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"16:6282:8967":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:2588:2080":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:11634:7774":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:14516:8218":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:33580:17533":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"6:7314:3831":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"16:0:2230":{"crate_id":16,"path":["gimli"],"kind":"module"},"13:226:10915":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:914:9331":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:13308:7981":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:43204:11327":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:13497:8013":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:9213:10150":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","Key"],"kind":"struct"},"6:1535:3902":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:46867:9904":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:12300:21173":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:10250:157":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:2037:7559":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:42866:2495":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:46646:9897":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:570:3150":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:9830:6888":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"6:1699:3918":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"16:6348:8778":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:14341:8186":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"5:4426:7330":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"16:4937:8828":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"6:5344:10989":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"17:12399:7873":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"6:1510:3899":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:1671:3914":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:15168:8430":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:15078:8410":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:11621:7772":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"6:4885:2090":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"11:2326:9342":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"16:3010:7581":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:15596:8559":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:6626:7373":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"16:4433:8812":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"11:328:10920":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"20:3308:5331":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:11858:7430":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:41241:9629":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"16:5759:8867":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:15126:8416":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"5:3200:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:44175:9825":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:40953:9761":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:44857:11341":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"5:2197:9439":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:46789:9902":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"20:521:3142":{"crate_id":20,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:22537:12314":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"20:3286:5329":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:44709:9848":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"16:6062:8919":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:41047:9767":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"16:7619:20989":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:4017:12166":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"20:3059:5306":{"crate_id":20,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"11:700:6792":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:39861:12110":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"1:1585:7341":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"16:6134:8952":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:22508:12313":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"2:48344:9971":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"20:3276:5328":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:22316:12318":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"1:9964:9781":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"1:4825:12180":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"20:1543:3917":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"5:3020:11243":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"20:1444:3908":{"crate_id":20,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:5536:5346":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:7987:10057":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"}},"external_crates":{"20":{"name":"libc","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}