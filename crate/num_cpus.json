{"root":"0:0:1692","crate_version":"1.13.1","includes_private":false,"index":{"2:8103:128":{"id":"2:8103:128","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8105:654"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10033:171":{"id":"2:10033:171","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10034:630"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3086:205":{"id":"2:3086:205","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3088:119","2:3089:1373"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5631:7246":{"id":"1:5631:7246","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5632:7030","1:5633:52731"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13168:57169":{"id":"2:13168:57169","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47055:158","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:7647","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:7647","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12756:7645","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8302:149":{"id":"2:8302:149","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8303:7119","2:8304:890","2:8305:7121","2:8306:468","2:8308:7122","2:8311:7123","2:8312:1877","2:8313:7124","2:8314:7105","2:8316:7125","2:8318:7126","2:8319:7127","2:8321:809","2:8324:7128","2:8331:1600","2:8333:1815","2:8336:7129","2:8337:7130","2:8338:7131","2:8340:7132","2:8342:7133","2:8345:1268","2:8346:7061","2:8347:7134","2:8351:7135","2:8354:7136","2:8355:7137","2:8356:7138","2:8358:7103","2:8359:2377","2:8361:7139","2:8364:7140","2:8366:7141","2:8376:7142","2:8391:7143","2:8393:7144","2:8397:7145","2:8406:1825","2:8409:7146","2:8411:7147","2:8414:252","2:8421:269","2:8428:1879","2:8435:7148","2:8444:7149","2:8454:983","2:8461:7150","2:8468:7106","2:8469:1840","2:8470:7151","2:8482:7152","2:8489:7153","2:8501:7154","2:8508:7155","2:8509:7156","2:8514:7157","2:8517:7158","2:8520:7159","2:8521:7160","2:8523:6643","2:8525:388","2:8528:7161","2:8531:966","2:8534:7162","2:8537:575","2:8540:7163","2:8543:875","2:8545:794","2:8547:760","2:8549:683","2:8551:666","2:8553:7164","2:8554:7165","2:8562:7166"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10632:194":{"id":"2:10632:194","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:10634:163","2:10635:1557","2:10636:51102","2:10637:51103","2:10638:51104","2:10639:721","2:10640:722"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:10623:7253","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13096:7115":{"id":"2:13096:7115","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8066:7617":{"id":"2:8066:7617","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8068:7160"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3485:7738":{"id":"2:3485:7738","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3487:722"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"2:3481:7346","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:5514:8146":{"id":"5:5514:8146","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5516:163","5:5517:405"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3245:7313":{"id":"2:3245:7313","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3247:163","2:3248:241"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:9193:7266":{"id":"1:9193:7266","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9194:54205","1:9195:54206","1:9196:1865","1:9197:54207","1:9198:7997","1:9199:40424","1:9200:54204"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10368:7253","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3481:7346":{"id":"2:3481:7346","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3483:163","2:3484:721"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3396:109":{"id":"2:3396:109","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3397:200","2:3398:514"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3012:7644":{"id":"2:3012:7644","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:3011:7253","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3297:7564":{"id":"2:3297:7564","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3298:163","2:3299:921"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13220:7300":{"id":"2:13220:7300","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:15669:1945"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:49321:7301","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13200:51143":{"id":"2:13200:51143","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:12731:7646","prim@char":"1:15669:1945"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47055:158","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:7647","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:7647","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12756:7645","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:4600:7639":{"id":"2:4600:7639","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4601:7119","2:4602:56065","2:4603:7121"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2799:98":{"id":"2:2799:98","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2800:382","2:2801:384"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9966:2088":{"id":"2:9966:2088","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9967:1484","2:9968:56716","2:9970:52606"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12761:7650":{"id":"2:12761:7650","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12756:7645","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13209:57181":{"id":"2:13209:57181","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:12731:7646","prim@char":"1:15669:1945"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:7647","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:7647","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12756:7645","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5785:52125":{"id":"5:5785:52125","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:15674:1950"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8069:196","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2829:165":{"id":"2:2829:165","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2831:575","2:2832:875"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3080:141":{"id":"2:3080:141","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3082:1909"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13125:57165":{"id":"2:13125:57165","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:49277:7965","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3420:2370":{"id":"2:3420:2370","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3421:549"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3343:7581":{"id":"2:3343:7581","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3345:1194"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13183:1821":{"id":"2:13183:1821","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8580:7637":{"id":"2:8580:7637","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8302:149","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:2875:166":{"id":"2:2875:166","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2877:966","2:2878:794","2:2879:760","2:2880:683","2:2881:666"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2829:165","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:5762":{"id":"5:5762","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5582:1300","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5763:57817","5:5764:2123","5:5767:57818","5:5770:57819","5:5782:57820","5:5783:57821","5:5784:2144","5:5785:52125","5:5786:52126"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:10239:138":{"id":"2:10239:138","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10240:622","2:10241:2028","2:10242:55438","2:10243:55439","2:10244:55440","2:10245:55441","2:10246:55442","2:10247:55443","2:10248:55444","2:10249:55445","2:10250:55446","2:10251:55447","2:10252:55448","2:10253:55449","2:10254:55450","2:10255:1484"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3284:7604":{"id":"2:3284:7604","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3286:861"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13203:57179":{"id":"2:13203:57179","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:12731:7646","prim@char":"1:15669:1945"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:7647","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:7647","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12756:7645","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3090:204":{"id":"2:3090:204","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3092:119","2:3093:1372"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13171:2025":{"id":"2:13171:2025","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12731:7646","prim@char":"1:15669:1945","`DoubleEndedIterator`":"2:8151:112","str::matches":"1:15674:1950"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49217:7963","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:7647","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2834:116":{"id":"2:2834:116","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2829:165","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13094":{"id":"2:13094","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12191:1300","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13095:761","2:13096:7115","2:13097:57160","2:13098:57161","2:13100:57162","2:13103:54423","2:13104:57163","2:13105:279","2:13106:1597","2:13107:1557","2:13109:51102","2:13111:51103","2:13113:51104","2:13115:7381","2:13116:57164","2:13117:51124","2:13118:51125","2:13119:7987","2:13120:7675","2:13121:7104","2:13122:33314","2:13123:33304","2:13124:1814","2:13125:57165","2:13126:33299","2:13127:51140","2:13130:51141","2:13133:51142","2:13136:1879","2:13140:7114","2:13144:1817","2:13147:33171","2:13150:51134","2:13153:57166","2:13156:57167","2:13159:51136","2:13162:51138","2:13165:57168","2:13168:57169","2:13171:2025","2:13174:57170","2:13177:57171","2:13180:57172","2:13183:1821","2:13185:57173","2:13187:57174","2:13189:57175","2:13190:57176","2:13191:57177","2:13194:57178","2:13197:1860","2:13200:51143","2:13203:57179","2:13206:57180","2:13209:57181","2:13212:1684","2:13214:8129","2:13215:51024","2:13216:51025","2:13217:51026","2:13218:57182","2:13220:7300","2:13221:57183"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:6451:7290":{"id":"1:6451:7290","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6452:54800","1:6453:54801"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5671:7248":{"id":"1:5671:7248","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5672:54745","1:5673:54746","1:5674:54747","1:5675:54748"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:22737:7788":{"id":"2:22737:7788","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"2:23386:7746","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22728:7253","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3255:7593":{"id":"2:3255:7593","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3257:163","2:3258:860"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13117:51124":{"id":"2:13117:51124","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:15674:1950"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13111:51103":{"id":"2:13111:51103","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10632:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10632:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:3348:7584":{"id":"2:3348:7584","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3350:1197"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3325:7572":{"id":"2:3325:7572","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3327:163","2:3328:1196"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5549:7273":{"id":"1:5549:7273","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5550:8871","1:5551:54423"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10368:7253","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3186:197":{"id":"2:3186:197","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:772:201":{"id":"5:772:201","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:773:7168","5:774:1885","5:775:7169"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8116:2372":{"id":"2:8116:2372","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8118:7116","2:8120:7117","2:8121:7118"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3155:108":{"id":"2:3155:108","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3156:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13121:7104":{"id":"2:13121:7104","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:48999:2119","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3280:7316":{"id":"2:3280:7316","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3282:1316"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13107:1557":{"id":"2:13107:1557","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47055:158"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47055:158","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10632:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10632:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13180:57172":{"id":"2:13180:57172","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12731:7646","prim@char":"1:15669:1945","`DoubleEndedIterator`":"2:8151:112","str::match_indices":"1:15674:1950"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49181:7961","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:7647","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:7647","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12756:7645","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13123:33304":{"id":"2:13123:33304","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:15674:1950"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:49296:7967","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13105:279":{"id":"2:13105:279","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"1:15683:1959","str::as_mut_ptr":"1:15674:1950"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13162:51138":{"id":"2:13162:51138","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"self::pattern":"2:12731:7646","str::splitn":"1:15674:1950","prim@char":"1:15669:1945"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49135:7930","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:7647","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:7647","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12756:7645","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13218:57182":{"id":"2:13218:57182","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:15669:1945"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:49312:7969","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:22692:17276":{"id":"2:22692:17276","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:22693:56440","2:22694:56441","2:22695:56442"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22685:7253","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13147:33171":{"id":"2:13147:33171","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"2:12731:7646","prim@char":"1:15669:1945"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:12523:7923","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:7647","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3621:8039":{"id":"2:3621:8039","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"2:3552:8038","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13153:57166":{"id":"2:13153:57166","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"`DoubleEndedIterator`":"2:8151:112","prim@char":"1:15669:1945","str::split":"1:15674:1950","self::pattern":"2:12731:7646","str::rsplit_terminator":"1:15674:1950"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49063:7956","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:7647","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3463:7767":{"id":"2:3463:7767","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3465:213","2:3466:188","2:3467:56760"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8151:112":{"id":"2:8151:112","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8152:7109","2:8153:7110","2:8154:7111","2:8155:7112","2:8159:7113","2:8162:7114"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8302:149","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13104:57163":{"id":"2:13104:57163","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:3335:7577":{"id":"2:3335:7577","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3337:328"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10229:134":{"id":"2:10229:134","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10230:685","2:10232:55007"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5693:7251":{"id":"1:5693:7251","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5694:7030"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:1075:7298":{"id":"1:1075:7298","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1076:7168","1:1077:8129","1:1078:52125","1:1079:52126","1:1080:51024","1:1081:51025","1:1082:51026"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6090:202":{"id":"5:6090:202","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6091:7170"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13130:51141":{"id":"2:13130:51141","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"2:12731:7646","prim@char":"1:15669:1945"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:7647","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13215:51024":{"id":"2:13215:51024","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12178:8136":{"id":"2:12178:8136","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12179:7119","2:12180:57042"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5518:8148":{"id":"5:5518:8148","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5520:163","5:5521:1869"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6353:7293":{"id":"1:6353:7293","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6354:54246","1:6355:2679","1:6356:54247","1:6357:54248","1:6358:54249","1:6359:54250"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10368:7253","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:5782:57820":{"id":"5:5782:57820","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8069:196"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8069:196","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10025:7204":{"id":"2:10025:7204","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10026:630"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3423:122":{"id":"2:3423:122","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3425:350"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3426:123","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13127:51140":{"id":"2:13127:51140","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"2:12731:7646","prim@char":"1:15669:1945"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:7647","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3292:7608":{"id":"2:3292:7608","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3294:1072"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3679:7587":{"id":"2:3679:7587","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13122:33314":{"id":"2:13122:33314","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:15674:1950"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:49287:7966","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13197:1860":{"id":"2:13197:1860","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:15669:1945","self::pattern":"2:12731:7646"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47055:158","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:7647","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5770:57819":{"id":"5:5770:57819","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8069:196"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8069:196","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5767:57818":{"id":"5:5767:57818","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8069:196"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8069:196","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:7647","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13120:7675":{"id":"2:13120:7675","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:15669:1945"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:48989:7952","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13140:7114":{"id":"2:13140:7114","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"prim@char":"1:15669:1945","`None`":"2:47055:158","self::pattern":"2:12731:7646"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47055:158","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:7647","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:7647","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12756:7645","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13103:54423":{"id":"2:13103:54423","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12202:8096"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13116:57164":{"id":"2:13116:57164","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"crate::ops::IndexMut":"2:3485:7738","str::slice_unchecked":"1:15674:1950","`str`":"1:15674:1950"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13206:57180":{"id":"2:13206:57180","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:15669:1945","self::pattern":"2:12731:7646"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:7647","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10037:7209":{"id":"2:10037:7209","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10038:630"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3288:7606":{"id":"2:3288:7606","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3290:530"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:7631:7766":{"id":"2:7631:7766","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7632:56578","2:7633:56579","2:7634:56576","2:7635:56574","2:7636:56580","2:7637:56577","2:7638:56575"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2799:98","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2875:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:93:1557":{"id":"0:93:1557","crate_id":0,"name":"get","span":{"filename":"src/lib.rs","begin":[73,0],"end":[75,1]},"visibility":"public","docs":"Returns the number of available CPUs of the current system.\n\nThis function will get the number of logical cores. Sometimes this is different from the number\nof physical cores (See [Simultaneous multithreading on Wikipedia][smt]).\n\nThis will always return at least `1`.\n\n# Examples\n\n```\nlet cpus = num_cpus::get();\nif cpus > 1 {\n    println!(\"We are on a multicore system with {} CPUs\", cpus);\n} else {\n    println!(\"We are on a single core system\");\n}\n```\n\n# Note\n\nThis will check [sched affinity] on Linux, showing a lower number of CPUs if the current\nthread does not have access to all the computer's CPUs.\n\nThis will also check [cgroups], frequently used in containers to constrain CPU usage.\n\n[smt]: https://en.wikipedia.org/wiki/Simultaneous_multithreading\n[sched affinity]: http://www.gnu.org/software/libc/manual/html_node/CPU-Affinity.html\n[cgroups]: https://www.kernel.org/doc/Documentation/cgroup-v1/cgroups.txt","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:9037:7427":{"id":"2:9037:7427","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13119:7987":{"id":"2:13119:7987","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:15669:1945"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:48983:7951","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3304:7419":{"id":"2:3304:7419","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3306:163","2:3307:325"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4609:1793":{"id":"1:4609:1793","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4610:7093","1:4611:7094","1:4612:7095","1:4614:2116","1:4615:7096","1:4617:1817","1:4618:1814"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"1:4527:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5623:7245":{"id":"1:5623:7245","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5624:7030","1:5625:54919","1:5626:54920"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3187:100":{"id":"2:3187:100","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2799:98","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8577:2182":{"id":"2:8577:2182","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8302:149","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:22543:7269":{"id":"2:22543:7269","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22533:7253","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13126:33299":{"id":"2:13126:33299","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:49305:7968","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13174:57170":{"id":"2:13174:57170","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12731:7646","prim@char":"1:15669:1945","str::matches":"1:15674:1950","`DoubleEndedIterator`":"2:8151:112"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:49235:7964","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:7647","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:7647","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12756:7645","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6331:7294":{"id":"1:6331:7294","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6332:6734","1:6333:6735","1:6334:52725","1:6335:55086","1:6337:55090","1:6339:55087","1:6340:55088","1:6342:55089"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10368:7253","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3638:129":{"id":"2:3638:129","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3640:657"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3633:203","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3409:2124":{"id":"2:3409:2124","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3410:516"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3396:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:94:1575":{"id":"0:94:1575","crate_id":0,"name":"get_physical","span":{"filename":"src/lib.rs","begin":[108,0],"end":[110,1]},"visibility":"public","docs":"Returns the number of physical cores of the current system.\n\nThis will always return at least `1`.\n\n# Note\n\nPhysical count is supported only on Linux, mac OS and Windows platforms.\nOn other platforms, or if the physical count fails on supported platforms,\nthis function returns the same as [`get()`], which is the number of logical\nCPUS.\n\n# Examples\n\n```\nlet logical_cpus = num_cpus::get();\nlet physical_cpus = num_cpus::get_physical();\nif logical_cpus > physical_cpus {\n    println!(\"We have simultaneous multithreading with about {:.2} \\\n              logical cores to 1 physical core.\", \n              (logical_cpus as f64) / (physical_cpus as f64));\n} else if logical_cpus == physical_cpus {\n    println!(\"Either we don't have simultaneous multithreading, or our \\\n              system doesn't support getting the number of physical CPUs.\");\n} else {\n    println!(\"We have less logical CPUs than physical CPUs, maybe we only have access to \\\n              some of the CPUs on our system.\");\n}\n```\n\n[`get()`]: fn.get.html","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"5:5764:2123":{"id":"5:5764:2123","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8069:196"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8069:196","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:7647","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12741:7647":{"id":"2:12741:7647","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12743:7649","2:12744:56830","2:12745:56831","2:12746:56832","2:12747:56834","2:12748:56833","2:12749:56835"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13124:1814":{"id":"2:13124:1814","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:49267:2122","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3177:192":{"id":"2:3177:192","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6757:7242":{"id":"1:6757:7242","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6758:54994"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6755:7239":{"id":"1:6755:7239","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6756:54222"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6579:7247":{"id":"1:6579:7247","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6580:54427","1:6581:6949","1:6582:6950","1:6583:6952","1:6584:6951","1:6585:6953","1:6586:6954","1:6587:6956","1:6588:6707","1:6589:6959","1:6590:6960","1:6591:6961","1:6592:6962","1:6593:6963","1:6594:6964","1:6595:6957","1:6596:6958"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3083:127":{"id":"2:3083:127","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3085:651"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12670:2183":{"id":"2:12670:2183","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12671:118","2:12672:55215"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5784:2144":{"id":"5:5784:2144","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8069:196"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8069:196","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3633:203":{"id":"2:3633:203","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3634:163","2:3635:7688","2:3636:656","2:3637:343"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"2:3638:129","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3633:203","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8107:143":{"id":"2:8107:143","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8108:7119","2:8109:7120","2:8110:736"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8584:7765":{"id":"2:8584:7765","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"2:7631:7766","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5681:7249":{"id":"1:5681:7249","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5682:52829"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13843:133":{"id":"2:13843:133","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13844:253","2:13845:491","2:13846:256","2:13847:1048"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13100:57162":{"id":"2:13100:57162","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:15674:1950"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4527:1795":{"id":"1:4527:1795","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4528:2066","1:4529:7097","1:4531:7098","1:4532:7099","1:4533:1870","1:4534:7100","1:4535:7101","1:4537:7102","1:4538:7103","1:4539:7104","1:4540:7105","1:4542:7061"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3716:7588":{"id":"2:3716:7588","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5783:57821":{"id":"5:5783:57821","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`String`":"5:8069:196","`Box<str>`":"5:421:2373"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:2373","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:7774:8152","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8069:196","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13216:51025":{"id":"2:13216:51025","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13165:57168":{"id":"2:13165:57168","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47055:158","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:7647","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13212:1684":{"id":"2:13212:1684","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12670:2183","`FromStr`":"2:12670:2183"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47182:187","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12670:2183","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12670:2183","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13095:761":{"id":"2:13095:761","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:15669:1945"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3185:198":{"id":"2:3185:198","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8070:7619":{"id":"2:8070:7619","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8072:6643"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8176:2371":{"id":"2:8176:2371","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8177:761","2:8178:7115"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8302:149","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:23386:7746":{"id":"2:23386:7746","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:23387:7787"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23382:7253","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3187:100","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13106:1597":{"id":"2:13106:1597","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:15683:1959"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13113:51104":{"id":"2:13113:51104","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10632:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10632:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:3426:123":{"id":"2:3426:123","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3428:351"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3429:124","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13118:51125":{"id":"2:13118:51125","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:15674:1950"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6845:7252":{"id":"1:6845:7252","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6846:52732"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13187:57174":{"id":"2:13187:57174","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3904:67":{"id":"2:3904:67","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3905:1385"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"1:6681:7303":{"id":"1:6681:7303","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6682:52838","1:6683:52839"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10368:7253","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13136:1879":{"id":"2:13136:1879","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:47055:158","self::pattern":"2:12731:7646","prim@char":"1:15669:1945"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47055:158","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:7647","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13150:51134":{"id":"2:13150:51134","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12731:7646","prim@char":"1:15669:1945","str::split":"1:15674:1950","`DoubleEndedIterator`":"2:8151:112"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49031:7926","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:7647","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:7647","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12756:7645","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13097:57160":{"id":"2:13097:57160","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3272:7600":{"id":"2:3272:7600","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3273:163","2:3274:881"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9036:7428":{"id":"2:9036:7428","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13915:7306":{"id":"2:13915:7306","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13916:54937","2:13917:54938","2:13918:54939","2:13919:54940","2:13920:54941","2:13921:54942","2:13922:7103"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3644:7688":{"id":"2:3644:7688","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3646:53558"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:7669:7401":{"id":"1:7669:7401","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7670:54201"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12750:7649":{"id":"2:12750:7649","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:12752:7668","2:12753:890","2:12754:56983","2:12755:56984"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13190:57176":{"id":"2:13190:57176","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3250:7315":{"id":"2:3250:7315","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3252:163","2:3253:1315"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3276:7314":{"id":"2:3276:7314","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3278:242"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3218:2369":{"id":"2:3218:2369","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13156:57167":{"id":"2:13156:57167","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"str::split":"1:15674:1950","self::pattern":"2:12731:7646","prim@char":"1:15669:1945","str::split_terminator":"1:15674:1950"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49081:7957","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:7647","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:7647","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12756:7645","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2865:159":{"id":"2:2865:159","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2866:388","2:2867:7106","2:2868:1840","2:2869:7107"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2834:116","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2875:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:5786:52126":{"id":"5:5786:52126","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:15674:1950"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8069:196","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10027:7205":{"id":"2:10027:7205","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10028:630"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2565:119":{"id":"1:2565:119","crate_id":1,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2566:54304","1:2568:1932","1:2569:55253","1:2570:55254"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10016:103","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10023:111","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3309:7420":{"id":"2:3309:7420","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3311:163","2:3312:327"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2774:92":{"id":"2:2774:92","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2776:2014"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13098:57161":{"id":"2:13098:57161","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3331:7575":{"id":"2:3331:7575","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3333:326"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12756:7645":{"id":"2:12756:7645","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:12758:7109","2:12759:56113","2:12760:56114"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"2:12750:7649","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13194:57178":{"id":"2:13194:57178","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:15669:1945","self::pattern":"2:12731:7646"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:7647","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13144:1817":{"id":"2:13144:1817","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"`DoubleEndedIterator`":"2:8151:112","str::rsplit":"1:15674:1950","str::split_whitespace":"1:15674:1950","self::pattern":"2:12731:7646","prim@char":"1:15669:1945"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49013:2121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:7647","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5637:7247":{"id":"1:5637:7247","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5638:6758","1:5639:52829","1:5640:7030","1:5641:55347","1:5642:6734","1:5643:6735","1:5644:55348","1:5645:1264","1:5646:55349","1:5647:55350","1:5648:55351","1:5649:55352","1:5650:55353","1:5651:55354","1:5652:55355","1:5653:55356"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13459:142":{"id":"2:13459:142","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13460:163","2:13461:142","2:13462:735"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13191:57177":{"id":"2:13191:57177","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"2:12731:7646","prim@char":"1:15669:1945"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:7647","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:7647","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"2:12761:7650","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10016:103":{"id":"2:10016:103","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10017:630"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6753:7241":{"id":"1:6753:7241","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6754:55395"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13185:57173":{"id":"2:13185:57173","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3260:7590":{"id":"2:3260:7590","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3262:163","2:3263:529"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13214:8129":{"id":"2:13214:8129","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3339:7579":{"id":"2:3339:7579","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3341:331"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13444:130":{"id":"2:13444:130","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13445:163","2:13446:982"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3266:7597":{"id":"2:3266:7597","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3268:163","2:3269:1071"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2777:7686":{"id":"2:2777:7686","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2779:50999"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2774:92","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5685:7250":{"id":"1:5685:7250","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5686:55169"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10368:7253","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10031:7207":{"id":"2:10031:7207","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10032:630"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10029:7206":{"id":"2:10029:7206","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10030:630"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10035:7208":{"id":"2:10035:7208","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10036:630"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:0:1692":{"id":"0:0:1692","crate_id":0,"name":"num_cpus","span":{"filename":"src/lib.rs","begin":[1,0],"end":[459,1]},"visibility":"public","docs":"A crate with utilities to determine the number of CPUs available on the\ncurrent system.\n\nSometimes the CPU will exaggerate the number of CPUs it contains, because it can use\n[processor tricks] to deliver increased performance when there are more threads. This \ncrate provides methods to get both the logical and physical numbers of cores.\n\nThis information can be used as a guide to how many tasks can be run in parallel.\nThere are many properties of the system architecture that will affect parallelism,\nfor example memory access speeds (for all the caches and RAM) and the physical\narchitecture of the processor, so the number of CPUs should be used as a rough guide\nonly.\n\n\n## Examples\n\nFetch the number of logical CPUs.\n\n```\nlet cpus = num_cpus::get();\n```\n\nSee [`rayon::Threadpool`] for an example of where the number of CPUs could be\nused when setting up parallel jobs (Where the threadpool example uses a fixed\nnumber 8, it could use the number of CPUs).\n\n[processor tricks]: https://en.wikipedia.org/wiki/Simultaneous_multithreading\n[`rayon::ThreadPool`]: https://docs.rs/rayon/1.*/rayon/struct.ThreadPool.html","links":{},"attrs":["#![deny(missing_docs)]","#![allow(non_snake_case)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:93:1557","0:94:1575"]}},"2:13217:51026":{"id":"2:13217:51026","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3314:7421":{"id":"2:3314:7421","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3316:163","2:3317:330"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13159:51136":{"id":"2:13159:51136","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"str::rsplitn":"1:15674:1950","self::pattern":"2:12731:7646","prim@char":"1:15669:1945"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49117:7929","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:7647","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10023:111":{"id":"2:10023:111","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10024:630"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3189:199":{"id":"2:3189:199","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5763:57817":{"id":"5:5763:57817","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:2373","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:7774:8152","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:2373","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:7774:8152","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13189:57175":{"id":"2:13189:57175","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3552:8038":{"id":"2:3552:8038","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3554:56094","2:3555:56095","2:3556:51140"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3319:7569":{"id":"2:3319:7569","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3321:163","2:3322:1193"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3074:73":{"id":"2:3074:73","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3076:280"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13177:57171":{"id":"2:13177:57171","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"prim@char":"1:15669:1945","`DoubleEndedIterator`":"2:8151:112","str::rmatch_indices":"1:15674:1950","self::pattern":"2:12731:7646"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49163:7960","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:7647","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10274:7344":{"id":"2:10274:7344","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10275:138","2:10276:34398","2:10277:54269"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3429:124":{"id":"2:3429:124","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3431:163","2:3432:352"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13221:57183":{"id":"2:13221:57183","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:15669:1945"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:49330:7970","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4887:7275":{"id":"1:4887:7275","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4888:2175","1:4889:55205"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6684:7294":{"id":"1:6684:7294","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6685:52726"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10368:7253","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3182:2368":{"id":"2:3182:2368","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13133:51142":{"id":"2:13133:51142","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:15669:1945","self::pattern":"2:12731:7646"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:7647","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:7647","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12756:7645","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3077:72":{"id":"2:3077:72","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3079:7108"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:4602:2086":{"id":"1:4602:2086","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4603:52742","1:4604:2522","1:4605:52743","1:4606:52744"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5543:7271":{"id":"1:5543:7271","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5544:54488","1:5545:8231"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10368:7253","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13109:51102":{"id":"2:13109:51102","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47055:158"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47055:158","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10632:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10632:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5615:7244":{"id":"1:5615:7244","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5616:54159","1:5617:54161","1:5618:54160","1:5619:54162"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13115:7381":{"id":"2:13115:7381","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"crate::ops::Index":"2:3481:7346","`str`":"1:15674:1950","str::slice_mut_unchecked":"1:15674:1950"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:4584:2088":{"id":"1:4584:2088","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4585:2028","1:4586:52602","1:4588:52603","1:4589:8400","1:4590:52604","1:4591:52605","1:4592:52606","1:4601:7103"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"paths":{"6:1723:3577":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:5347:41700":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:11499:44698":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:2429:7640":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"6:4203:4991":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:11794:44989":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:2166:7325":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"5:7828:90":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"5:6889:7324":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:2777:7686":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:3485:7738":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"6:1690:3573":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:5877:7545":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:11738:9193":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"1:2395:13162":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:10380:54327":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"2:48115:119":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"16:3604:42443":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:5615:7244":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"12:2309:56440":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:24210:7463":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"20:3011:4963":{"crate_id":20,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:4600:7639":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:10052:44129":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:11794:54310":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"5:1534:7321":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"14:231:8144":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:1438:7120":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:9378:2204":{"crate_id":1,"path":["std","sys_common","condvar","Condvar"],"kind":"struct"},"1:15691:1967":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"20:606:2813":{"crate_id":20,"path":["libc","unix","protoent"],"kind":"struct"},"1:12471:120":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"17:9005:44057":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"6:88:2410":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"1:15148:54315":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:14319:2083":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"20:3075:4967":{"crate_id":20,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:3249:2074":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:12685:49032":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"6:4120:41498":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:13488:50094":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:11482:44483":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"5:7999:8228":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:4373:2138":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:10941:7277":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"20:4813:2682":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:13978:50207":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:3633:203":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:10180:52914":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"6:4013:4974":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:47055:158":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:10611:2065":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:49063:7956":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:9531:7491":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"6:6185:6039":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:12472:7959":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"16:5707:8584":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"1:4295:2140":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"16:3118:8800":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"6:6644:6385":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:10928:2121":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:4593:54125":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:10236:8862":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"0:93:1557":{"crate_id":0,"path":["num_cpus","get"],"kind":"function"},"17:11337:8910":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:46242:7712":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"18:774:59534":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:12095:48873":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:2177:7416":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:2829:165":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:5469:5551":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:3182:2368":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:9069:7425":{"crate_id":1,"path":["std","lazy","SyncOnceCell"],"kind":"struct"},"17:13924:50199":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:900:7437":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"4:0:1919":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:48891:7940":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"6:5969:2682":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:10117:8958":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:45966:8117":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"17:13933:50200":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"0:0:1692":{"crate_id":0,"path":["num_cpus"],"kind":"module"},"20:3379:4997":{"crate_id":20,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"5:7882:8176":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:10407:8942":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:3233:2069":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:10033:171":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"20:4123:5540":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:14611:9225":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"6:4164:4988":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"5:7898:7120":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"18:636:59534":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:5856:7542":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:11186:44079":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"16:7843:8630":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:49741:7981":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:46342:2118":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:56984:55806":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"1:2456:9812":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"6:4511:41512":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"20:3182:4979":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:3255:7593":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:51714:7829":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:10377:8944":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:47234:7321":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:14483:7274":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:12488:7962":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:7166:55068":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:53069:22826":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:10304:8905":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:10489:8918":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:11015:7926":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:1736:3579":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:12073:48867":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:10862:2148":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:10599:44288":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:11640:44806":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:9065:44059":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:3266:7597":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:2565:119":{"crate_id":1,"path":["std","error","Error"],"kind":"trait"},"6:5528:1616":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:49779:7317":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"2:48189:71":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1:11857:7360":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:11726:44867":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"6:4112:41497":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:10673:44291":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:13915:7306":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:15687:1963":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:11920:7366":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:6221:6042":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:3972:4847":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"16:4704:43042":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"6:4419:5545":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:10995:7284":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"17:13318:49724":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:12449:7958":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"7:0:1435":{"crate_id":7,"path":["unwind"],"kind":"module"},"5:2886:7168":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"6:5436:58553":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"20:4117:5539":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"20:1447:3567":{"crate_id":20,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:9943:59026":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:12521:48960":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"20:1371:3559":{"crate_id":20,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:4127:41499":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"20:3386:4998":{"crate_id":20,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:11348:2173":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:50867:7800":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:46022:7886":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"5:3548:9167":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:6589:6959":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"17:13746:50121":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"16:5717:8585":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:3343:7581":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:13865:50168":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:47486:84":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"5:2075:9169":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:10472:7339":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"2:51989:7791":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:32007:55770":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"20:5020:6039":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:49312:7969":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"20:3459:5006":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"20:3292:4989":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:10369:7433":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:10279:8902":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:2865:159":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"20:1432:3566":{"crate_id":20,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:1311:8963":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:47182:187":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:13884:50174":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:49235:7964":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:45960:7301":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:10169:44054":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:7669:7401":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:11638:7946":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:46201:7705":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:10420:8941":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"16:4852:43065":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:3260:7590":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"17:12221:48939":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:52853:7810":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:49733:7979":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:10543:44285":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:45989:8118":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:49913:172":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"16:6744:8823":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"20:1574:3580":{"crate_id":20,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:8577:2182":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"20:565:2807":{"crate_id":20,"path":["libc","unix","winsize"],"kind":"struct"},"2:47826:7206":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"20:4314:5573":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:11771:7399":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"12:925:7326":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"16:6087:8526":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:13535:169":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:47165:7176":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"6:5167:5537":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:10081:8902":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"6:6893:5034":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"16:5815:8590":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:2543:8913":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"16:5595:8581":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:12598:48965":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"18:896:8983":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"20:499:2799":{"crate_id":20,"path":["libc","unix","timeval"],"kind":"struct"},"1:5671:7248":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"6:6812:6041":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"20:1651:3634":{"crate_id":20,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"6:591:2807":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:45558:181":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:23730:40082":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"5:7981:96":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:10516:8919":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:46578:35780":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"6:5312:41699":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"12:866:7324":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"20:3048:4966":{"crate_id":20,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"6:4523:41514":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"6:5407:41704":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:11871:7363":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:10827:8887":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"16:6021:8783":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:13221:49612":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:11756:7398":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:10571:44287":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"16:5753:8587":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:13192:49610":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:13429:50087":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:5130:5514":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:7529:7393":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"16:3365:8776":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:13506:50096":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:10095:8956":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:11093:7499":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:13942:50201":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:14633:9227":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"12:2039:7417":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:11960:2205":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"16:4506:42969":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"6:4347:41502":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:46567:35778":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"6:5420:41706":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"16:6636:8545":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:607:44053":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"18:801:8975":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:7459:7626":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"6:5274:5547":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:783:9218":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"2:50890:7804":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:13788:50159":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:50948:55646":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:696:7432":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"16:7406:8532":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:2155:2175":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:49753:7977":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"5:4382:9170":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"6:4331:5005":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:48814:7934":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:13394:50058":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"16:5927:8592":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:9896:59211":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:1518:7331":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:48754:7928":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:8248:7460":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"6:578:2805":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:4255:7481":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"16:2968:8787":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"13:0:1918":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:9976:126":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:10462:7338":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"17:12537:48961":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"20:5465:6385":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"5:1748:9167":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"18:837:7649":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"6:543:2802":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"12:556:135":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:10448:8864":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:22281:57003":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"6:4425:5549":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"5:6367:8170":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:14871:7376":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:9698:7909":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:2162:7324":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"20:3505:5011":{"crate_id":20,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:12761:7650":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:13772:50157":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:5623:7245":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:11822:44991":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:13967:2137":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"1:9516:7490":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"1:1459:7323":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"16:6126:8596":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"5:5568:9177":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"6:3862:4961":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:4358:41503":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"5:5518:8148":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"6:3957:4969":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:510:44052":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:45450:178":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"12:463:58648":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"16:6413:8446":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:11231:8935":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:15686:1962":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:12385:48951":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"16:7205:8622":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:11001:7308":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"18:829:8978":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:46533:35775":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"20:1426:3565":{"crate_id":20,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:4890:43078":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:8652:55070":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"17:9659:58970":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:12946:49502":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:47812:7205":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:50909:55773":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:11391:2174":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:10500:8263":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"10:0:1922":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"6:610:2810":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"5:8063:58042":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"2:52347:7835":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:23859:8030":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"16:7264:8544":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"5:1595:7328":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:45897:7884":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:10801:44258":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:9664:9218":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"2:46055:8045":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:4887:7275":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"5:3924:7324":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:11094:7929":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:22596:7787":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:5754:7536":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"17:12142:48933":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:10505:2117":{"crate_id":1,"path":["std","error","Chain"],"kind":"struct"},"1:14720:2094":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"17:10962:44347":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"6:5282:5548":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:7856:8631":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:2852:162":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:51557:7834":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:51683:7826":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"5:6631:8153":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:9264:42438":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"16:6136:8568":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:13540:50102":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"9:996:8362":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:24852:7871":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:51797:7814":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"20:4209:5548":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"20:3176:4978":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:9719:44068":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"16:3172:8790":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:12645:49029":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:49445:7657":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"16:7971:119":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"16:6208:8599":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"16:3091:8847":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:13532:50101":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:0:1928":{"crate_id":17,"path":["object"],"kind":"module"},"19:0:963":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:3420:2370":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:4293:5001":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:10656:44272":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"5:781:102":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:3440:1794":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:22537:7267":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"12:1118:7335":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:13296:49660":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"12:354:58641":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:53016:22823":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:46549:35777":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:4052:4979":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"18:704:59534":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:10027:7205":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"6:6091:6033":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:11122:7931":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:10651:7474":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"16:6577:8609":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"18:620:59550":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:4371:41505":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"20:5503:5034":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:15689:1965":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:48852:7938":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:51193:7801":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"6:5978:41736":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:10942:7924":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:48823:7935":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:49622:40387":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"1:10922:2119":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:49537:7660":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:22334:57039":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:4908:2253":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:31908:7066":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:13644:7395":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"6:1760:3581":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:52970:22819":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:12478:2062":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:3617:2131":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:10812:2175":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:11786:7400":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:6757:7242":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:11304:44081":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:22313:57037":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:11665:44808":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"12:1855:137":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"5:421:2373":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:13582:50107":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"14:194:42359":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:12275:48943":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:3552:8038":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"12:1762:9165":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:10935:2122":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:11147:44077":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"6:4005:4973":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:5505:8578":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:46191:7704":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"12:1159:8427":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:6331:7294":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"16:7804:8538":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:8278:8270":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"5:7858:176":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:11142:7540":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:13143:7510":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"17:12155:48934":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"16:6464:8541":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:13660:55039":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"2:49609:7664":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"5:1604:176":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"16:3218:8792":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"6:6239:6043":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"6:5945:2724":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:8558:2204":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:8616:154":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"16:7420:8549":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"12:181:8435":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:3997:4972":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:11378:8888":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"20:1566:3579":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:13799:50160":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"6:6864:5031":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:10594:2061":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"5:7448:211":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:32107:55760":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"1:15679:1955":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"5:6331:68":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:51224:7805":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:4459:5009":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:6353:7293":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:14886:7377":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"6:5221:5542":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"0:94:1575":{"crate_id":0,"path":["num_cpus","get_physical"],"kind":"function"},"2:2834:116":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"5:772:201":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:12480:9223":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:14244:7304":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:2433:13174":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:1651:7337":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"16:6252:8601":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"20:1393:3562":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:50804:55762":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:5631:7246":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:3292:7608":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"18:754:59545":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:45680:7892":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:3716:7588":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"16:7174:8619":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"12:812:7328":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"5:7492:9179":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:13807:183":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"2:9036:7428":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"6:0:766":{"crate_id":6,"path":["libc"],"kind":"module"},"17:9799:44070":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"5:3591:2132":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"20:1495:3571":{"crate_id":20,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"16:7761:8629":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"6:3990:4971":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:4494:5010":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:7612:7397":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"9:157:8313":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"2:4931:7221":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:4:948":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:11030:54316":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"6:1584:3564":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:3116:1870":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"20:1488:3570":{"crate_id":20,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"5:5096:2108":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:8929:44056":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:48349:7345":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"14:0:1925":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:49330:7970":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:49745:7982":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:49296:7967":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:13459:142":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:45922:8122":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:7212:168":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:22692:17276":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"16:5295:42440":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"6:1665:3571":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:12456:48955":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:49287:7966":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"20:505:2800":{"crate_id":20,"path":["libc","unix","timespec"],"kind":"struct"},"1:8514:2203":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"5:2887:58478":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:7387:111":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:3276:7314":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:50650:7819":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:13041:49504":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:4371:2137":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:3348:7584":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:3155:108":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"17:9551:8932":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"20:3213:4983":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:47528:78":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"5:3123:2175":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:3955:119":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:3650:7690":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"20:485:2797":{"crate_id":20,"path":["libc","unix","group"],"kind":"struct"},"2:8642:7429":{"crate_id":2,"path":["core","lazy","OnceCell"],"kind":"struct"},"17:11738:44976":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:11401:2175":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"20:4941:6035":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:9210:44062":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:12287:48944":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:31955:55767":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"6:5255:41689":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:2723:7256":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:10106:8957":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:49721:7975":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"5:7288:8204":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"9:603:42140":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:12982:49503":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"6:1729:3578":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:9572:9216":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"20:4219:5549":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlattr"],"kind":"struct"},"6:1572:3563":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"6:632:2813":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:7895:7460":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"17:9689:59153":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:11135:7277":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:2362:571":{"crate_id":1,"path":["std","env"],"kind":"module"},"18:610:8985":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"16:7226:8624":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:13370:49728":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"20:3102:4847":{"crate_id":20,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:5826:7539":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"3:0:403":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:49013:2121":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:52979:22820":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:12756:49042":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:9368:44063":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"20:590:2811":{"crate_id":20,"path":["libc","unix","tms"],"kind":"struct"},"17:10502:44187":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"16:4955:43093":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"16:7392:8534":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:11030:119":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:10274:7344":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"14:250:42366":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:48365:7697":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"16:7295:8546":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"16:3018:8788":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:5681:7249":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:3261:2080":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:49749:7976":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:50002:7259":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:51247:7808":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"6:5563:41724":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"16:3392:8801":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:48832:7936":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:49393:7648":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:12795:49108":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"6:1676:3572":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:11993:48762":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"16:5855:8591":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:24312:8013":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"12:469:58645":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"6:4083:4983":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"6:4272:4999":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"20:3273:4988":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:11254:8933":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"20:3364:4995":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Chdr"],"kind":"struct"},"6:670:2831":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"16:5941:171":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:46163:7701":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"16:6807:8614":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"12:2025:7415":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:13547:50103":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:15688:1964":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"20:3035:4965":{"crate_id":20,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"20:4058:5514":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:4040:4977":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"5:4224:8241":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"6:531:2800":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:8070:7619":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:3951:4968":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:13054:49556":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:11767:44985":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"16:6731:8822":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:11001:44344":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:13898:50192":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:12412:7955":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:11136:7932":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"16:6014:8595":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"20:517:2802":{"crate_id":20,"path":["libc","unix","rusage"],"kind":"struct"},"16:7467:8530":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"20:3371:4996":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Chdr"],"kind":"struct"},"17:542:8504":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"12:2303:58651":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:10529:44188":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"7:38:41910":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"6:5241:5529":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:47444:77":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:24176:8011":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"5:2892:58413":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:46210:7706":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"5:2896:58414":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"20:5035:6040":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:511:2797":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"6:4073:4982":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"5:3152:7418":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:10611:44289":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"20:579:2809":{"crate_id":20,"path":["libc","unix","sigval"],"kind":"struct"},"1:7795:7459":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"5:7050:7120":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"5:8164:8200":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:3429:124":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"16:7360:176":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:15670:1946":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"1:1041:7292":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:15677:1953":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:12034:7311":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:23287:7268":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:55748:7735":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"12:1235:8430":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"18:885:8982":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:10737:7411":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"12:761:7321":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:11932:48756":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"6:4145:4987":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:12051:48866":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:10458:44186":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"6:6028:3521":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"18:0:1929":{"crate_id":18,"path":["memchr"],"kind":"module"},"16:5561:8580":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"6:3978:4970":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:6154:7708":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:1018:7460":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"6:1540:40916":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:52892:7830":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:50675:7811":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:13912:50198":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"12:1688:8442":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:6845:7252":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:10975:44346":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"5:3233:7325":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"16:2945:8809":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:3077:72":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"5:5217:2201":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:13119:49560":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"20:558:2806":{"crate_id":20,"path":["libc","unix","pollfd"],"kind":"struct"},"17:10814:8886":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"6:6124:6036":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"16:3488:8797":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"6:4281:5000":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:24482:8017":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"17:11458:44482":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:11087:7498":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:13444:130":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"6:1533:40915":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:2004:2108":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:45512:180":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"6:4215:4992":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"16:4614:43027":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:7631:7766":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"16:6391:8604":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:12725:49040":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"6:4439:5007":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:15676:1952":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:52490:7803":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:51420:55817":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:10019:103":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"12:1667:8441":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:24380:7402":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"12:1200:8429":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:24142:8010":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:47612:80":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:24346:8014":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"17:13627:50117":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"5:5469:9167":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:23756:40101":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"18:729:59537":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"9:900:42063":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"16:2991:8798":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:5864:7544":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"20:1460:3569":{"crate_id":20,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"16:6176:8598":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:49510:7659":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:48386:2171":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"12:0:1924":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"20:5485:5031":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:6215:7513":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:14269:2064":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"2:12202:8096":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:22728:7253":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:12741:49041":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:48076:125":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"1:1075:7298":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:47226:2175":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"17:10179:44142":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:50996:7833":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:10368:7253":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:51043:7821":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:5685:7250":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"16:5522:8579":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:22685:7253":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"20:1506:3572":{"crate_id":20,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:9088:44060":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:6755:7239":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"20:3196:4981":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:15064:7497":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"16:7024:8832":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:2183:7417":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"16:7870:8535":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"16:7195:8621":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"16:5360:8570":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"5:0:253":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:9703:7910":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"5:8069:196":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:4478:41511":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:51876:7802":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:3245:7313":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:50698:7799":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"20:0:766":{"crate_id":20,"path":["libc"],"kind":"module"},"2:23715:7850":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:15635:55333":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:4879:7907":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"6:1527:3559":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:3205:7623":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"6:4033:4976":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:13598:50109":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"18:739:59551":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:3284:7604":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"19:117:59552":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"2:52140:7815":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:4888:7220":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"12:160:8431":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"5:1422:7335":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:3235:2070":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:57005:55768":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"2:23480:8005":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"6:6935:6387":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"20:598:2812":{"crate_id":20,"path":["libc","unix","servent"],"kind":"struct"},"16:2866:8785":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:53054:22825":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:49181:7961":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"5:8147:7325":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"1:14329:54486":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:11980:2207":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:10211:44140":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:4334:2142":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"12:1180:8428":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:23702:7849":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:9577:9217":{"crate_id":1,"path":["std","sys_common","rwlock","MovableRwLock"],"kind":"struct"},"20:4990:6037":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:14:2028":{"crate_id":2,"path":["core","write"],"kind":"macro"},"16:4790:43053":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"5:3457:152":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"12:112:58644":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"5:3603:8271":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"20:3405:5000":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"6:584:2806":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"16:6554:8608":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"6:5269:5546":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"9:722:8298":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"20:1414:3564":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"5:3660:7325":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"1:12014:2094":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"20:630:2831":{"crate_id":20,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:11328:44082":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:4824:7906":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:13746:7641":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"6:1554:3561":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:10836:7321":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:47819:7204":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:13685:50119":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"16:7823:8540":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"9:927:42029":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"6:5292:5550":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:8790:2210":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"16:5433:8574":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:31943:7067":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:4602:2086":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"5:912:8218":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"20:4822:6030":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:8507:2202":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"6:4066:4981":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"6:1596:3565":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"14:56:44483":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:3187:100":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:3083:127":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"20:5457:6384":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:9476:44066":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"20:4789:2724":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"6:4133:4986":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"16:6166:8597":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:5567:7700":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:9849:59452":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:12480:48957":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:23677:40064":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:14792:54332":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:6579:7247":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:8580:7637":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"16:6691:8612":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"5:7798:7324":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:49905:34209":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:38461:7624":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:47174:170":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:1446:7322":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:46150:2117":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"12:1144:7336":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:11118:44076":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:15139:31405":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"16:3264:8794":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:53146:22829":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"12:976:7333":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:46042:8044":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:3918:4966":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:11407:2177":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:12632:49028":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"16:7185:8620":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"5:1837:7325":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"1:4468:2147":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:12262:48942":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"18:644:8987":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:49117:7929":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"20:4181:5544":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlmsghdr"],"kind":"struct"},"6:4449:5008":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:8954:8893":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:9133:44061":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"16:4823:43061":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:10643:110":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"9:776:8343":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"9:41:8346":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"16:4641:43029":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"5:3481:7321":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"9:749:8299":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"1:14899:7383":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:49305:7968":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:48983:7951":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"20:5049:6041":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","termios2"],"kind":"struct"},"1:8863:2212":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"18:677:134":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"16:3522:42441":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:1472:7324":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"16:7477:8550":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:2202:7773":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"6:6899:41531":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:48922:7943":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"6:6068:3496":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"9:809:2171":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:5414:41705":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"20:3242:4986":{"crate_id":20,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:10279:7696":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"16:3145:8799":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"12:2323:58649":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:13760:50122":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:11835:45004":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:10998:7285":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"17:12431:48953":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:11714:44866":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:49792:8056":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"20:3302:4990":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:10035:7208":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"5:1199:8254":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:11904:7365":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"16:5456:8575":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:52931:7795":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:45868:7881":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:11147:7543":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"6:616:2811":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:11167:7514":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:14000:50243":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:13098:49559":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"5:8014:8045":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"20:71:2410":{"crate_id":20,"path":["libc","unix","DIR"],"kind":"enum"},"20:3312:4991":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:10968:7279":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"16:7146:8617":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"16:3714:42452":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"5:3145:7415":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:10604:2064":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"5:1000:2175":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:7495:7391":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:13756:7991":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:53084:22827":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"16:4230:42868":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:8066:7617":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:14800:7406":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"18:790:8974":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:3297:7564":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"5:4998:182":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"20:1590:3581":{"crate_id":20,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:51452:55784":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:11779:44986":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:6684:7294":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:11798:54155":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"20:3424:5002":{"crate_id":20,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:11153:7509":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:6681:7303":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:46290:7716":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"20:4136:5541":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:51146:7813":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:10864:44262":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"20:573:2808":{"crate_id":20,"path":["libc","unix","linger"],"kind":"struct"},"6:157:2486":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"6:1717:3576":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"5:5936:8204":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"16:5330:42437":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:48070:69":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"6:4060:4980":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:9404:44064":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"5:3130:7416":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:10028:44127":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"12:2013:7324":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:47242:7120":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:13564:50105":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:4762:7901":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:14259:54321":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:10625:121":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"6:6214:41737":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"6:4501:5011":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:3272:7600":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:10253:8853":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:10353:8946":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:37241:7188":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"5:7774:8152":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:10029:7206":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:8849:8931":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"20:4225:5550":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:6596:7711":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:15684:1960":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"17:13590:50108":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"16:4671:43034":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:9540:74":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"20:537:2803":{"crate_id":20,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:10390:7441":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:4834:7218":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"20:1402:3563":{"crate_id":20,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"6:4262:4998":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:52743:7827":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"12:2331:2055":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:4261:7483":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"20:3163:4976":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:11331:2172":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:4688:7217":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"1:1501:7329":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:9430:9213":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"17:13331:49725":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:6997:15438":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:52806:7792":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"16:3287:8795":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"5:2182:8276":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:9545:81":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:23386:7746":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:12182:48936":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"9:0:1921":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:12659:49030":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:13494:56937":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:13609:50110":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:3953:187":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"17:10266:8856":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:48085:66":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"2:12670:2183":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:1507:7330":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:46540:1796":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:3314:7421":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:1157:12159":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:53031:22824":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:8342:184":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"5:4015:7321":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:9966:2088":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:11082:8892":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"12:1100:7334":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"20:3120:4971":{"crate_id":20,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"16:4734:43047":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"5:1080:9167":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"16:4417:42955":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:24244:8012":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:1524:7332":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"6:5359:41701":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:1190:12160":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"17:11406:44473":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:10413:7443":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:8356:7362":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:3012:7644":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:9809:59463":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"5:2202:8256":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"5:983:8219":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"16:6569:8818":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"16:2889:8804":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"5:1586:7327":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"16:7279:8834":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"5:6154:7324":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"20:5435:2757":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:10883:2087":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:13780:50158":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"18:152:50564":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"16:7378:8533":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:50762:7820":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"16:6964:7180":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:11418:2178":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"16:6366:8447":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:8176:2371":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:45621:7261":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:8107:143":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"6:3905:4965":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"16:7571:8525":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:8000:7460":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"20:2992:4961":{"crate_id":20,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:13963:50202":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:12523:7923":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:2113:7063":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:14759:7310":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"5:7121:9167":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"20:5514:6387":{"crate_id":20,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:2171:7415":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:3426:123":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:12494:48958":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:11616:44770":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"18:811:8976":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:4545:2084":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:9961:44073":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:4293:2139":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:46219:55575":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"6:6100:6034":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:12552:48962":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:50929:7789":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:10623:44290":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"20:3477:5008":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:45853:7301":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"5:1433:7337":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:31768:8068":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:12040:48865":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"20:1520:3573":{"crate_id":20,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:6227:7709":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:3080:141":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"12:2005:2175":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:37217:160":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:47402:83":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:4492:2108":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"16:5421:8573":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"20:3467:5007":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:294:58962":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:3090:204":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:48904:7941":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"20:511:2801":{"crate_id":20,"path":["libc","unix","rlimit"],"kind":"struct"},"6:4317:5004":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:23831:8073":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"14:11:42358":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"20:4154:5543":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:12961:40386":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"17:9600:58958":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"20:5497:5033":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"16:6424:8605":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"16:4477:42965":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:38398:7258":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"6:6051:3493":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:11743:163":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:3186:197":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"2:9038:7446":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"12:2032:7416":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"16:6591:8610":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"20:3487:5009":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:299:59216":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:15675:1951":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"16:5632:8582":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"16:3338:8775":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:12783:49105":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"5:5554:9174":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"16:6949:8829":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:49267:2122":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"6:4395:41508":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:50836:7812":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:1633:7335":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:45943:8116":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"20:3231:4985":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"12:949:7331":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"5:1500:89":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"16:7786:8539":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"20:3108:4970":{"crate_id":20,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"9:1075:8364":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"16:7236:8625":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:46233:7707":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"5:3468:2175":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"16:5996:8594":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"16:2773:8810":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"20:4245:5551":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:11678:44809":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:13620:50116":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:14739:54156":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"17:13497:50095":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"5:8092:8142":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:10988:44345":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:45614:7692":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:11073:14756":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"6:1658:3570":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"9:1020:8363":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:10747:2133":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:1497:7328":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:55590:7742":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:14479:13176":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"6:6614:2757":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:3113:2066":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:10632:194":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"16:6682:8542":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"18:720:55781":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"6:5998:6031":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:2512:8943":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:48052:66":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:13154:49564":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:51636:7822":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"16:6718:8821":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"6:5953:3492":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"6:4046:4978":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:12917:49501":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:8738:7524":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"17:12699:49033":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"11:54:8417":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"20:3441:5004":{"crate_id":20,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:22737:7788":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:49949:7989":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"6:4300:5002":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"20:4147:5542":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:4023:4975":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:47113:7120":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:10844:8917":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:11098:7500":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:13402:50085":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"16:6620:8816":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:11277:44044":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:5848:7541":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:3423:122":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:11915:48755":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:13570:34210":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:10395:7458":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"16:7738:8628":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:12178:8136":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:13205:49611":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"18:782:59534":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:50581:55647":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:9162:8934":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:3549:42442":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"18:169:50565":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:11257:2161":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:8302:149":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"20:4167:5529":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:47833:7207":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:12195:48937":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:3177:192":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:55683:7735":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:4922:43085":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:15163:8458":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"20:3170:4977":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:5522:5572":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:14707:7399":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:9245:8857":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"12:2009:7120":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:51295:7793":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"16:6605:8543":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"5:7904:7120":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:11816:52219":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"2:47360:76":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:11308:2171":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:3218:2369":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:10635:44257":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:47156:7181":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:6825:7243":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:9193:7266":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"6:569:2804":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"20:5062:6042":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:49725:7978":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"6:6176:6038":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:4500:2108":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:13380:7388":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"16:6219:8600":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:12750:7649":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:13961:2139":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"17:12168:48935":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:3529:2129":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:14855:7375":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:15174:8458":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:13842:50165":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:46037:95":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:11985:2213":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:13306:49722":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"16:5231:43294":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:49321:7301":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"20:3022:4964":{"crate_id":20,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:11604:44769":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"20:5473:5029":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:11108:7930":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"16:5029:43117":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:6005:2591":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:23551:8006":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"5:6934:9167":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:9440:44065":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:2397:13163":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:6451:7290":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"16:2912:8786":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:5379:4995":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"5:7310:8205":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"20:3127:4972":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:48878:7939":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:13377:49740":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"16:5273:8778":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:15004:7286":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:11045:44075":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"20:5479:5030":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"20:552:2805":{"crate_id":20,"path":["libc","unix","iovec"],"kind":"struct"},"2:31949:7068":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"20:3449:5005":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:12671:49031":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:55709:7735":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:55735:7735":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:3251:2075":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"20:3190:4980":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:3309:7420":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:11358:8889":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"16:5407:8572":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:51272:7790":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:23661:55814":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:10980:7925":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:7373:7125":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"16:5975:8593":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"20:4959:6036":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:51372:55802":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"9:234:8321":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"2:46362:7628":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:51097:7828":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:10855:2146":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:46299:7717":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:12582:48964":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:45535:179":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:8061:9198":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"2:49574:7661":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:11605:7945":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:14694:7398":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:48173:7203":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"12:774:7120":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"20:1384:3561":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:10037:7209":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"6:1700:3574":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:48600:8127":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:15683:1959":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:12507:48959":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"20:3350:4994":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:4377:41506":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:46352:7721":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"18:744:59540":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:10001:44126":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:24278:7464":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"17:10477:8914":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"20:3324:4992":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:48805:7933":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:8680:7430":{"crate_id":2,"path":["core","lazy","Lazy"],"kind":"struct"},"1:3110:2063":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"15:248:8450":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:49277:7965":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:10128:8959":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"16:4995:43108":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:6269:8602":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:12442:48954":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"18:136:50563":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"6:6881:5032":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:820:9218":{"crate_id":1,"path":["std","thread","local","os","Key"],"kind":"struct"},"2:48913:7942":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"6:6155:6037":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:10255:9221":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:27663:7622":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"16:6152:8528":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"6:4517:41513":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"20:493:2798":{"crate_id":20,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:0:1291":{"crate_id":1,"path":["std"],"kind":"module"},"1:1488:7326":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:3319:7569":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"20:1547:3576":{"crate_id":20,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"16:7549:8537":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:22739:7787":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"13:232:58654":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"9:963:8361":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"6:4401:41509":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"12:1651:8440":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:13733:50120":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:15667:1943":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"5:2418:8260":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"6:1630:3569":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:9128:7426":{"crate_id":1,"path":["std","lazy","SyncLazy"],"kind":"struct"},"6:5185:5538":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:11891:7364":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:12134:9812":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"5:1396:7334":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:23824:40102":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"5:69:8199":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:23622:40076":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"1:9567:9215":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"1:14282:54149":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"16:0:1927":{"crate_id":16,"path":["gimli"],"kind":"module"},"16:7303:8627":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:8902:44055":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:48842:7937":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:5693:7251":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"16:4304:42917":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:10950:44370":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:49990:7260":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"20:5491:5032":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:7543:7394":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"13:120:42313":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:13964:2141":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:11849:2175":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:12010:48765":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:9423:55040":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"17:13386:50057":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:4095:4984":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:12741:7647":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:1302:135":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"3:300:187":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:4753:7219":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:46130:13780":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"20:1530:3574":{"crate_id":20,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"15:0:1926":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:48932:7944":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"5:1545:7120":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:9280:42437":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:2774:92":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"1:2159:7120":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:49729:7980":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"5:7806:8221":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:3539:9195":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:11936:7367":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:13308:54100":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"16:7342:8561":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"6:599:2808":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"18:820:8977":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:6999:8615":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:4448:42961":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:10584:8895":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"6:605:2809":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"6:6887:5033":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:13755:7396":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:12610:48979":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"14:189:42358":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:51074:7825":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:3679:7587":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"18:667:8989":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:10239:138":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:15690:1966":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:11161:7498":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:10915:2118":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"12:877:7325":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"2:8116:2372":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"20:4111:5538":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:11186:7302":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:10623:7253":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"5:3137:7417":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:3644:7688":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"16:5384:8571":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:3904:67":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:15419:9228":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:12712:49034":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"16:7514:8548":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:4008:44261":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"16:5672:8583":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:49737:7983":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:50602:55780":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"20:4935:6034":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:8256:2171":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"17:13172:49566":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:47318:86":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"12:937:7330":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"6:6923:41822":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"8:0:1920":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:12807:7653":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"16:5346:8527":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:2188:7770":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:48596:8126":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"6:3868:4962":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:11050:54142":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"6:1547:3560":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"20:3203:4982":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:10435:44185":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:1152:12158":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:13163:49565":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"20:4886:3493":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:11962:44294":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"6:4387:41507":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:7135:55068":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:1708:3575":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"20:3143:4974":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:49958:7990":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:7666:2535":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"16:7928:8564":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:12028:48809":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"5:6788:9179":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"1:2582:52919":{"crate_id":1,"path":["std","error","from","StringError"],"kind":"struct"},"2:3409:2124":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:2765:7257":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"17:11588:44768":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:11572:44767":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:7867:55572":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"2:4757:7900":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:9769:59392":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"5:8031:8229":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:5394:7504":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"18:712:7188":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"20:154:2487":{"crate_id":20,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:10160:44144":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"20:584:2810":{"crate_id":20,"path":["libc","unix","itimerval"],"kind":"struct"},"17:4157:8896":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"20:4920:6032":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:4306:5003":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:0:461":{"crate_id":2,"path":["core"],"kind":"module"},"1:7509:7392":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"16:3320:8848":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:1530:7333":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:3662:7691":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:22296:57003":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"6:6085:6032":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:3563:2125":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:6095:7512":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:23846:8031":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:7557:7395":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:52601:7823":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:3463:7767":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:11994:7310":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"9:692:8297":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"2:49135:7930":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:48971:7685":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"16:3041:8789":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:47105:7321":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"6:4364:41504":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:48357:55794":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:15651:54152":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:6753:7241":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:50731:7832":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"20:4833:6031":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:10229:134":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:6348:56982":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"2:46321:7719":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"16:6518:8607":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"9:469:42035":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"11:0:1923":{"crate_id":11,"path":["adler"],"kind":"module"},"6:4193:4990":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"5:3679:9167":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:9886:44071":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"16:6032:8519":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:3288:7606":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"16:7333:8547":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"5:375:8227":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:22336:57035":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:11628:44805":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:53005:22822":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:52680:7807":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:14295:121":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:3108:120":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"20:3135:4973":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"12:2315:58653":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"14:244:42360":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"6:6200:6040":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:2484:44174":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:13258:49655":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"5:2093:8178":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"5:1524:2175":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:8349:7361":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"12:892:8419":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"2:9158:7647":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:47088:7119":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:49217:7963":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"16:7158:8618":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:3743:8883":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:8584:7765":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:48956:8047":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"18:660:8988":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:3189:199":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"6:5371:4996":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"12:840:7322":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:1132:7262":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:15671:1947":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"5:7951:2055":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"6:5228:5543":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:11100:8937":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:5543:7271":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:3621:8039":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"6:5428:41707":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:12373:48950":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"5:4314:212":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:15674:1950":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:11539:44759":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:12327:48946":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"5:8045:8230":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:1482:7325":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"2:2690:550":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:3304:7419":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"20:4190:5545":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlmsgerr"],"kind":"struct"},"5:909:91":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"12:2018:7325":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"2:49895:183":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"6:4431:5006":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"16:5736:8586":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:1602:3566":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:13477:50093":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:46262:7713":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"16:6238:8531":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:4557:7733":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:8103:128":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:11989:2214":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:1619:7334":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:4584:2088":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:11212:7296":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"12:1253:7337":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:22543:7269":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"20:3396:4999":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:13348:49726":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:46181:7703":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:49163:7960":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:49462:7658":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:9034:44058":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:10742:7412":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:9037:7427":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"16:2794:8516":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"12:377:8434":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"16:7884:8536":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"6:563:2803":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:5350:747":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:9729:59014":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"12:930:7329":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"5:2134:8257":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:51954:7809":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"6:4241:4994":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"20:5011:6038":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:3185:198":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"16:6644:8611":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"16:7250:8626":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"6:6910:41532":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"20:1538:3575":{"crate_id":20,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:12956:40385":{"crate_id":2,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"2:48404:55652":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:9186:8891":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"20:4926:6033":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:6768:8825":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"20:1553:3577":{"crate_id":20,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:22315:57040":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"6:6858:5030":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"16:6780:8613":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"16:3506:8796":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:1236:44143":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:11696:44810":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"9:686:8295":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"6:4325:41500":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:10146:56820":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"17:13574:50106":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:11015:44371":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:46311:7718":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"18:857:8980":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:10317:8908":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:12731:7646":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:10905:2117":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:12756:7645":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:2314:8945":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"16:4350:42938":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:10926:44368":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:10331:8917":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:13289:13174":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:23794:40103":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:4609:1793":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:2188:7418":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:12208:48938":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"6:6852:5029":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"16:2843:8784":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:48103:101":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"2:4200:7120":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"5:7866:8175":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:10140:8917":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"18:650:8984":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"16:3772:42485":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:10071:8962":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"12:429:8432":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:9933:44072":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:9971:59447":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"16:7216:8623":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"5:5514:8146":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"6:5386:41702":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:10558:44286":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:13282:49658":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:11555:44760":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"16:3195:8791":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:4161:2085":{"crate_id":1,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"2:2318:7616":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:4183:4989":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:23738:40100":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:13682:7397":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:48374:138":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"6:5159:5536":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:10667:2132":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:3335:7577":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"16:7453:8529":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"16:6072:8498":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:55696:7735":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:4527:1795":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:11159:44078":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:5303:6386":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"12:2045:7418":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"2:45996:8119":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:46251:7710":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:11970:44292":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"20:3225:4984":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:23644:7854":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:12771:44082":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:12568:48963":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:49599:7663":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"16:6110:8567":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:45859:33786":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:11847:45005":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"11:46:58640":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"5:6090:202":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:9649:44067":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:47276:79":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"5:1179:57966":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:9332:8909":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"6:5210:5541":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"20:4093:5537":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:2799:98":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:1886:1580":{"crate_id":2,"path":["core","mem"],"kind":"module"},"2:46072:8046":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"20:1452:3568":{"crate_id":20,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"16:7894:8565":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:10788:44259":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"6:4410:5544":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:11809:44990":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"6:1908:3634":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"9:27:8345":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"17:13637:50118":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:1428:7321":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:5978:7506":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:11981:44293":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:22268:7188":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"16:6491:8606":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"20:3336:4993":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:45466:176":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"20:4903:3496":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:3183:7589":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:3331:7575":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"20:3430:5003":{"crate_id":20,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:47570:85":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"16:7073:8616":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:13446:50088":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:45912:8121":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:15681:1957":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"6:1744:3580":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:52959:22818":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:15085:7504":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:11865:7120":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:46558:2147":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:4258:7482":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:13180:49608":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:5549:7273":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:4545:7731":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:15026:7496":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:3074:73":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"16:3064:8846":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"18:694:8990":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:7883:2198":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:9435:9214":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"2:3011:7253":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:2211:7774":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:10599:2062":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:55670:7735":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:9528:2119":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:14496:7400":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"17:13819:50164":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:10016:103":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"16:3939:42602":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:10659:2130":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:49757:113":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:10938:44369":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:10230:9219":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"5:7783:7120":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:7800:55035":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"2:49588:7662":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:8151:112":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"16:5790:8589":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:23778:40092":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:12408:48952":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:3908:7414":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"14:216:42367":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"15:269:8454":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:1642:7336":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:48396:55805":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:6593:6963":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"17:12307:48945":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:10224:44146":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:10061:44145":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:7843:9198":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"16:5580:8766":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"20:3087:4969":{"crate_id":20,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"20:4288:5572":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:9296:44045":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"6:4101:4985":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:7561:7782":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:13810:50161":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:24414:8015":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:1493:7327":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"6:6636:6384":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"20:3081:4968":{"crate_id":20,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:9317:52910":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"20:3254:4987":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:15669:1945":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:11809:55074":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"6:5191:5539":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"5:8080:8141":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"20:4840:2591":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:49416:7651":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:3966:1804":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:10860:2121":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:46271:7714":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"5:1567:7323":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:5548:5573":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"20:5080:6043":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"16:5960:8773":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:22533:7253":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:45374:7693":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"16:5766:8588":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"16:3429:8517":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:47097:2175":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1:1149:12156":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"6:537:2801":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:11239:15439":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:15640:12161":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"16:5472:8576":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"5:6351:2201":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"16:2733:8500":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:13640:56981":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"17:10200:44141":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:10871:2083":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:15673:1949":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:15672:1948":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"16:4386:42949":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:51476:55771":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:5637:7247":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"6:3881:4963":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:5131:8113":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:10965:7278":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"2:45581:2049":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"5:1576:7326":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:3638:129":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"6:1563:3562":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"16:5488:8577":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:6591:6961":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"17:9839:8917":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:10912:44359":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:11519:44699":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"9:1056:8356":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:14312:110":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:10479:13169":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"20:4797:3492":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"16:547:8768":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:3250:7315":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"12:784:7327":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:9592:120":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"2:7810:2146":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:10031:7207":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:10149:44071":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"12:396:8433":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"5:1410:7336":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"16:3241:8793":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:11053:7927":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:12467:48956":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:13828:9224":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:48137:70":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"2:50627:7831":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:49972:150":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:21:642":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"12:747:2175":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:48989:7952":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:13356:49727":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"18:766:59546":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:1522:3558":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:46172:7702":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:13986:50209":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"5:2888:58019":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"20:1366:3558":{"crate_id":20,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:45402:7768":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:1415:2175":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:53107:22828":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:15678:1954":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:10456:12157":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:2855:161":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:49081:7957":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:11750:44977":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:3339:7579":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:15682:1958":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:10971:7283":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"2:2875:166":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:46280:7715":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"5:1613:8252":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"6:5197:5540":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:45491:177":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:14042:7443":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"17:13062:49558":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"16:2816:8803":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:45935:7970":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"5:4329:9170":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"6:4341:41501":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:4332:2141":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"6:4255:4997":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"16:6101:8524":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"6:525:2799":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:15668:1944":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:12247:48941":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"7:85:41917":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:9759:44069":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:13240:49614":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"6:1617:3567":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:13272:49657":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"6:4470:41510":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:23382:7253":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"6:3892:4964":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"20:1377:3560":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:5324:7783":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:5269:7496":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:15685:1961":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"5:4152:2175":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"5:3951:9167":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:3086:205":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:2108:549":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"20:3417:5001":{"crate_id":20,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"16:3800:42488":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"6:1622:3568":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"5:6443:2108":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"20:4196:5546":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"5:1219:8255":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:47654:87":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"6:624:2812":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:15680:1956":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:45881:7882":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"5:7852:7120":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:8721:1796":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:11737:7396":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:13507:7404":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:46120:9187":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:11947:48757":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:10403:8916":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:11434:44481":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:12343:48947":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:46003:8120":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"16:7119:8520":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:47122:7180":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:45982:7969":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"20:3498:5010":{"crate_id":20,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:10468:8915":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:49431:7654":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"16:5314:42438":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:9574:8911":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:8787:2209":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:10023:111":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"5:7814:58013":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:14627:9226":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"20:1559:3578":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"6:4227:4993":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:12118:48874":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:13453:50091":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"15:230:8449":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:13554:50104":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"6:6106:6035":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"20:4201:5547":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"16:2754:8777":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:10496:13176":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:10041:44128":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:894:7436":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:14905:7384":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:12234:48940":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"5:1558:7322":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:10441:12154":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:55722:7735":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"14:47:42358":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:3195:7223":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1:2027:137":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"16:7042:8833":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:24108:8009":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:11199:44080":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:51923:7806":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"20:4863:3521":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"18:866:8981":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:4762:43050":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:7321:167":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:10025:7204":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"20:543:2804":{"crate_id":20,"path":["libc","unix","hostent"],"kind":"struct"},"2:52990:22821":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:13465:50092":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"20:4294:1616":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:46331:7720":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:3396:109":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:11026:44074":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"5:7789:8220":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"20:2998:4962":{"crate_id":20,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:5272:7497":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:681:44054":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"6:6870:41530":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:3481:7346":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"5:7517:9185":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"12:853:7323":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"20:150:2486":{"crate_id":20,"path":["libc","unix","FILE"],"kind":"enum"},"2:50785:7824":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"20:3153:4975":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:14264:54320":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"1:11975:2206":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:51320:7794":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:47251:160":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:48999:2119":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:52950:22817":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"16:6357:8603":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:4569:7734":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:3325:7572":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:13520:50098":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:11653:44807":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:24448:8016":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:8898:55070":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"6:5987:6030":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"16:4535:42973":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"6:161:2487":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:49031:7926":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"5:2634:8259":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"18:849:8979":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"20:4085:5536":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:11190:2591":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"12:968:7332":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"6:3945:4967":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:10903:7923":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:13843:133":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"6:519:2798":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:10887:44260":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"5:7964:2056":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"20:3096:1804":{"crate_id":20,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:2458:13181":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"6:5400:41703":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:3280:7316":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"6:5459:41708":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:8157:7460":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"}},"external_crates":{"20":{"name":"libc","html_root_url":null},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":15}