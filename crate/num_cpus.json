{"root":"0:0:1865","crate_version":"1.16.0","includes_private":false,"index":{"5:5525:32215":{"id":"5:5525:32215","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12339:25851":{"id":"2:12339:25851","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11592:16670"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12362:30113":{"id":"2:12362:30113","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43652:9440","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12395:26646":{"id":"2:12395:26646","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12038:428","self::pattern":"2:12032:16669","str::rsplitn":"2:12398:26648"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43464:9425","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:9413","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12336:31534":{"id":"2:12336:31534","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12334:31533"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12380:2007":{"id":"2:12380:2007","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12032:16669","`DoubleEndedIterator`":"2:7472:121","prim@char":"1:12038:428","str::split_whitespace":"2:12358:30132","str::rsplit":"2:12386:26644"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43360:2321","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:9413","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12383:26642":{"id":"2:12383:26642","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12038:428","self::pattern":"2:12032:16669"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11848:9420","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:9413","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12343:1726":{"id":"2:12343:1726","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41400:181"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41398:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10126:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10126:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12407:2231":{"id":"2:12407:2231","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12032:16669","`DoubleEndedIterator`":"2:7472:121","prim@char":"1:12038:428","str::rmatches":"2:12410:31543"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43564:9589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:9413","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12426:31549":{"id":"2:12426:31549","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12416:31545":{"id":"2:12416:31545","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12032:16669","`DoubleEndedIterator`":"2:7472:121","prim@char":"1:12038:428","str::match_indices":"2:12413:31544"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43528:9588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:9413","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12037:9413","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12052:16667","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12454:26374":{"id":"2:12454:26374","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12330":{"id":"2:12330","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12331:836","2:12332:2088","2:12333:31532","2:12334:31533","2:12336:31534","2:12339:25851","2:12340:31535","2:12341:320","2:12342:319","2:12343:1726","2:12345:26609","2:12347:26610","2:12349:26611","2:12351:31536","2:12352:31537","2:12353:26633","2:12354:26634","2:12355:9441","2:12356:9602","2:12357:6677","2:12358:30132","2:12359:30141","2:12360:2004","2:12361:31538","2:12362:30113","2:12363:26650","2:12366:26651","2:12369:26652","2:12372:2072","2:12376:6686","2:12380:2007","2:12383:26642","2:12386:26644","2:12389:31539","2:12392:31540","2:12395:26646","2:12398:26648","2:12401:31541","2:12404:31542","2:12407:2231","2:12410:31543","2:12413:31544","2:12416:31545","2:12419:2011","2:12421:31546","2:12423:31547","2:12425:31548","2:12426:31549","2:12427:31550","2:12430:31551","2:12433:2053","2:12436:26653","2:12439:31552","2:12442:31553","2:12445:31554","2:12448:1858","2:12450:26378","2:12451:26551","2:12452:26379","2:12453:26375","2:12454:26374","2:12455:31555","2:12457:11371","2:12458:31556"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5514:32213":{"id":"5:5514:32213","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:9413","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5517:32214":{"id":"5:5517:32214","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5528:26377":{"id":"5:5528:26377","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12453:26375"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5510:32212":{"id":"5:5510:32212","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2545","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:9201","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2545","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:9201","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12363:26650":{"id":"2:12363:26650","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12038:428","self::pattern":"2:12032:16669"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:9413","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5511:6634":{"id":"5:5511:6634","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:9413","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12433:2053":{"id":"2:12433:2053","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12038:428","self::pattern":"2:12032:16669"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41398:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:9413","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73:1744":{"id":"0:73:1744","crate_id":0,"name":"get_physical","span":{"filename":"src/lib.rs","begin":[108,0],"end":[110,1]},"visibility":"public","docs":"Returns the number of physical cores of the current system.\n\nThis will always return at least `1`.\n\n# Note\n\nPhysical count is supported only on Linux, mac OS and Windows platforms.\nOn other platforms, or if the physical count fails on supported platforms,\nthis function returns the same as [`get()`], which is the number of logical\nCPUS.\n\n# Examples\n\n```\nlet logical_cpus = num_cpus::get();\nlet physical_cpus = num_cpus::get_physical();\nif logical_cpus > physical_cpus {\n    println!(\"We have simultaneous multithreading with about {:.2} \\\n              logical cores to 1 physical core.\", \n              (logical_cpus as f64) / (physical_cpus as f64));\n} else if logical_cpus == physical_cpus {\n    println!(\"Either we don't have simultaneous multithreading, or our \\\n              system doesn't support getting the number of physical CPUs.\");\n} else {\n    println!(\"We have less logical CPUs than physical CPUs, maybe we only have access to \\\n              some of the CPUs on our system.\");\n}\n```\n\n[`get()`]: fn.get.html","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12357:6677":{"id":"2:12357:6677","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43346:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12361:31538":{"id":"2:12361:31538","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43624:9591","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12369:26652":{"id":"2:12369:26652","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12038:428","self::pattern":"2:12032:16669"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:9413","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12037:9413","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12052:16667","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12425:31548":{"id":"2:12425:31548","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12427:31550":{"id":"2:12427:31550","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12038:428","self::pattern":"2:12032:16669"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:9413","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12037:9413","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12057:16666","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12331:836":{"id":"2:12331:836","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12038:428"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12442:31553":{"id":"2:12442:31553","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12038:428","self::pattern":"2:12032:16669"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:9413","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5527:2346":{"id":"5:5527:2346","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12423:31547":{"id":"2:12423:31547","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12342:319":{"id":"2:12342:319","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12055:1551"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12351:31536":{"id":"2:12351:31536","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12044:1448","str::slice_mut_unchecked":"2:12352:31537","crate::ops::Index":"2:3068:11394"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12333:31532":{"id":"2:12333:31532","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12457:11371":{"id":"2:12457:11371","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4556:11371"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43668:9364","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12358:30132":{"id":"2:12358:30132","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12359:30141"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43634:9592","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:72:1726":{"id":"0:72:1726","crate_id":0,"name":"get","span":{"filename":"src/lib.rs","begin":[73,0],"end":[75,1]},"visibility":"public","docs":"Returns the number of available CPUs of the current system.\n\nThis function will get the number of logical cores. Sometimes this is different from the number\nof physical cores (See [Simultaneous multithreading on Wikipedia][smt]).\n\nThis will always return at least `1`.\n\n# Examples\n\n```\nlet cpus = num_cpus::get();\nif cpus > 1 {\n    println!(\"We are on a multicore system with {} CPUs\", cpus);\n} else {\n    println!(\"We are on a single core system\");\n}\n```\n\n# Note\n\nThis will check [sched affinity] on Linux, showing a lower number of CPUs if the current\nthread does not have access to all the computer's CPUs.\n\nThis will also check [cgroups], frequently used in containers to constrain CPU usage.\n\n[smt]: https://en.wikipedia.org/wiki/Simultaneous_multithreading\n[sched affinity]: http://www.gnu.org/software/libc/manual/html_node/CPU-Affinity.html\n[cgroups]: https://www.kernel.org/doc/Documentation/cgroup-v1/cgroups.txt","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12345:26609":{"id":"2:12345:26609","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41400:181"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41398:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10126:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10126:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12376:6686":{"id":"2:12376:6686","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41400:181","prim@char":"1:12038:428","self::pattern":"2:12032:16669"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:9413","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12037:9413","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12052:16667","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12430:31551":{"id":"2:12430:31551","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12038:428","self::pattern":"2:12032:16669"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:9413","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5509":{"id":"5:5509","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5510:32212","5:5511:6634","5:5514:32213","5:5517:32214","5:5525:32215","5:5526:32216","5:5527:2346","5:5528:26377","5:5529:26376"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12360:2004":{"id":"2:12360:2004","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43614:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12413:31544":{"id":"2:12413:31544","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12032:16669","`DoubleEndedIterator`":"2:7472:121","prim@char":"1:12038:428","str::rmatch_indices":"2:12416:31545"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43510:9587","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:9413","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12340:31535":{"id":"2:12340:31535","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12410:31543":{"id":"2:12410:31543","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12032:16669","`DoubleEndedIterator`":"2:7472:121","prim@char":"1:12038:428","str::matches":"2:12407:2231"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43582:9590","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:9413","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12037:9413","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12052:16667","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12404:31542":{"id":"2:12404:31542","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41398:183","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:9413","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12037:9413","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12052:16667","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5529:26376":{"id":"5:5529:26376","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12454:26374"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12421:31546":{"id":"2:12421:31546","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12386:26644":{"id":"2:12386:26644","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12032:16669","`DoubleEndedIterator`":"2:7472:121","prim@char":"1:12038:428","str::split":"2:12380:2007"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43378:9423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:9413","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12037:9413","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12052:16667","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12389:31539":{"id":"2:12389:31539","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12032:16669","str::split":"2:12380:2007","prim@char":"1:12038:428","`DoubleEndedIterator`":"2:7472:121","str::rsplit_terminator":"2:12392:31540"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43410:9585","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:9413","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12332:2088":{"id":"2:12332:2088","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12439:31552":{"id":"2:12439:31552","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12038:428","self::pattern":"2:12032:16669"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:9413","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12037:9413","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12052:16667","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12401:31541":{"id":"2:12401:31541","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41398:183","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:9413","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12372:2072":{"id":"2:12372:2072","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41400:181","prim@char":"1:12038:428","self::pattern":"2:12032:16669"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:9413","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12453:26375":{"id":"2:12453:26375","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12455:31555":{"id":"2:12455:31555","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4555:31555"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43659:9503","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12445:31554":{"id":"2:12445:31554","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12038:428","self::pattern":"2:12032:16669"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:9413","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12037:9413","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12052:16667","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12352:31537":{"id":"2:12352:31537","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12044:1448","crate::ops::IndexMut":"2:3072:11395","str::slice_unchecked":"2:12351:31536"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12347:26610":{"id":"2:12347:26610","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10126:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10126:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12354:26634":{"id":"2:12354:26634","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12353:26633"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12359:30141":{"id":"2:12359:30141","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12358:30132"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43643:9593","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12451:26551":{"id":"2:12451:26551","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39432:26524","Self::is_ascii":"2:12450:26378"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41398:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39432:26524","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12349:26611":{"id":"2:12349:26611","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10126:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10126:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1865":{"id":"0:0:1865","crate_id":0,"name":"num_cpus","span":{"filename":"src/lib.rs","begin":[1,0],"end":[485,1]},"visibility":"public","docs":"A crate with utilities to determine the number of CPUs available on the\ncurrent system.\n\nSometimes the CPU will exaggerate the number of CPUs it contains, because it can use\n[processor tricks] to deliver increased performance when there are more threads. This \ncrate provides methods to get both the logical and physical numbers of cores.\n\nThis information can be used as a guide to how many tasks can be run in parallel.\nThere are many properties of the system architecture that will affect parallelism,\nfor example memory access speeds (for all the caches and RAM) and the physical\narchitecture of the processor, so the number of CPUs should be used as a rough guide\nonly.\n\n\n## Examples\n\nFetch the number of logical CPUs.\n\n```\nlet cpus = num_cpus::get();\n```\n\nSee [`rayon::Threadpool`] for an example of where the number of CPUs could be\nused when setting up parallel jobs (Where the threadpool example uses a fixed\nnumber 8, it could use the number of CPUs).\n\n[processor tricks]: https://en.wikipedia.org/wiki/Simultaneous_multithreading\n[`rayon::ThreadPool`]: https://docs.rs/rayon/1.*/rayon/struct.ThreadPool.html","links":{},"attrs":["#![deny(missing_docs)]","#![allow(non_snake_case)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:72:1726","0:73:1744"],"is_stripped":false}}},"2:12341:320":{"id":"2:12341:320","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12342:319","`u8`":"1:12055:1551"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12356:9602":{"id":"2:12356:9602","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12038:428"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43336:9583","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12353:26633":{"id":"2:12353:26633","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12354:26634"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12398:26648":{"id":"2:12398:26648","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12038:428","str::splitn":"2:12395:26646","self::pattern":"2:12032:16669"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43482:9426","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:9413","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12037:9413","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12052:16667","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12334:31533":{"id":"2:12334:31533","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12450:26378":{"id":"2:12450:26378","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12392:31540":{"id":"2:12392:31540","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12032:16669","str::split":"2:12380:2007","prim@char":"1:12038:428","str::split_terminator":"2:12389:31539"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43428:9586","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:9413","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12037:9413","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12052:16667","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12452:26379":{"id":"2:12452:26379","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12458:31556":{"id":"2:12458:31556","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4553:31556"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43677:9502","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5526:32216":{"id":"5:5526:32216","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2545","`String`":"5:7449:227"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2545","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:9201","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12448:1858":{"id":"2:12448:1858","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11993:127","`FromStr`":"2:11992:2373"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41543:212","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:11992:2373","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11992:2373","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12366:26651":{"id":"2:12366:26651","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12038:428","self::pattern":"2:12032:16669"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:9413","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12355:9441":{"id":"2:12355:9441","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12038:428"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43330:9433","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12436:26653":{"id":"2:12436:26653","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12038:428","self::pattern":"2:12032:16669"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41398:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:9413","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12037:9413","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12052:16667","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12419:2011":{"id":"2:12419:2011","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"17:14522:8481":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:14156:8366":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:21016:11510":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:13792:8277":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:3391:2349":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:12543:7960":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:47075:9721":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:10685:7671":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:46161:9662":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:11562:16869":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:41636:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:43992:9444":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:12051:764":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:11184:11051":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"2:39912:9502":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"20:3174:5217":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:4919:10788":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:9933:7589":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:30747:2606":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"6:7584:10941":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:4343:5203":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:40326:9529":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:1840:9765":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:10265:7619":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:30155:6641":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:2782:228":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:10738:7677":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:11164:9897":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"16:4557:8583":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:12043:1418":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"17:10410:7630":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:22200:9464":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:11737:9434":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"6:4465:5214":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:8291:11463":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:8297:9876":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"5:2035:2334":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"16:3797:8573":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:11845:7803":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"20:1361:3797":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:11619:9810":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:3072:11395":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:2223:2068":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"16:2696:8534":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"5:6637:7194":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:10637:7662":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:11459:7310":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"18:660:7400":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"20:5046:6279":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:40041:1847":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"2:44294:197":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"20:3127:5211":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:9133:2297":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"16:7677:200":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"20:4824:2828":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:7430:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"16:2832:8540":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"6:5082:10840":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"6:554:3044":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"20:3363:5234":{"crate_id":20,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"16:2933:18830":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:4160:11459":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"6:4750:10719":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:4268:9369":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:2368:2267":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"16:6600:19695":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:11815:7799":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:3016:2541":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"16:6569:8552":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:12057:1549":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:11991:7841":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:8498:2367":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:1817:9764":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:43330:9433":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:31950:9484":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"18:574:7377":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:10126:225":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:10585:9427":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"6:6616:6267":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:4478:11464":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"6:6714:6269":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:10366:9420":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"20:3433:5242":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:10214:7616":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:12059:1547":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"17:3565:7454":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"11:2168:10686":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"5:6306:11595":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:41831:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:9201:11058":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"11:844:9110":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:8195:2318":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"16:6960:8816":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"5:3178:9122":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"5:4348:248":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"18:636:7399":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"16:4344:8578":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:44155:9618":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"13:0:2124":{"crate_id":13,"path":["std_detect"],"kind":"module"},"11:2186:32893":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"20:3389:5237":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"20:5455:5266":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:7575:7297":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"9:426:18680":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"6:4986:10808":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:11042:7305":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:6644:219":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"11:1831:7228":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:2855:8850":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"20:5447:6622":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"6:6877:6280":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:10995:9898":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"6:5746:5751":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:4622:16730":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:11822:7314":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"14:40:7827":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:2536:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"6:1733:3818":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"16:6753:8791":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:41586:2369":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:7397:16777":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:1470:1750":{"crate_id":2,"path":["core","mem"],"kind":"module"},"2:21447:11514":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"16:8167:9004":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:7737:9818":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"20:590:3050":{"crate_id":20,"path":["libc","unix","protoent"],"kind":"struct"},"17:13055:8054":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:14173:8373":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:4401:6774":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:43239:9575":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"16:2907:8543":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:256:7432":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"10:0:2128":{"crate_id":10,"path":["adler"],"kind":"module"},"1:926:9104":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:11600:9943":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"6:1717:3817":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:7149:2348":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:12009:11378":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"14:215:9096":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:10102:9918":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"6:532:3041":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"16:2359:8520":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:4176:11461":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"6:4881:1027":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:9762:32926":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"6:1696:3814":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:4835:5781":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:45394:9630":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:9328:2320":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"18:736:23725":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:5802:5775":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:10456:7640":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:4347:6773":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"16:6352:8729":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"11:1517:9119":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:9998:7548":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:2382:2271":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:13802:8278":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"6:1673:3811":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"11:0:2129":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"20:1635:3871":{"crate_id":20,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"16:5612:8550":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:46063:9660":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"5:7438:7224":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:8807:188":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:7393:16778":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:39432:26524":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"17:14469:8472":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"20:4042:5751":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"16:4806:8590":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:4047:11446":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"6:1536:3799":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:41293:11032":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:13174:8077":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:1075:7440":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:9026:9909":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:46449:9683":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"20:1410:3802":{"crate_id":20,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:13922:8307":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:44286:213":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:21416:2291":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:43972:9616":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:10788:19859":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"6:5988:5233":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:2325:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"1:2562:2331":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:39245:9493":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"5:7365:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"0:0:1865":{"crate_id":0,"path":["num_cpus"],"kind":"module"},"11:1121:9116":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:6071:7285":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"5:3204:9123":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:11272:7748":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"5:1302:9116":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:10628:7661":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"9:507:9182":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:13667:8250":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"6:5784:5774":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"16:2618:8531":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:21886:11507":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"20:3380:5236":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:9019:9908":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:10849:28192":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:2920:8860":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:14434:8459":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"18:515:7374":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:14126:8360":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"20:4095:5775":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"20:4120:5778":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:5640:9791":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"18:699:7410":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:10383:7628":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:11742:7789":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"6:6139:5809":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:11346:9806":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:14013:8328":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"9:393:18679":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:29923:11437":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:483:7276":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"6:1569:3802":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:2879:16789":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"5:2690:10956":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"6:1702:3815":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:7921:2332":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"16:5995:8502":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"18:755:7424":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:12074:7856":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"16:6386:8733":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"11:2049:9111":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:12280:7905":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"20:469:3034":{"crate_id":20,"path":["libc","unix","group"],"kind":"struct"},"17:13676:8254":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"11:365:7185":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:21670:11519":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:40155:9518":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:30349:29874":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"6:6720:6270":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"5:878:7202":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:30149:6640":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"6:1500:3796":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:9924:7264":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"6:4796:10737":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:11544:9775":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:46017:9658":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:10672:7668":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:11191:7455":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"16:6901:8554":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"5:3568:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:6880:16780":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:2788:231":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:4830:818":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:8558:9412":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:7594:7299":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:10023:7572":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:9074:11054":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"16:8181:8565":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"6:6031:10894":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:47698:9733":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:41909:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:10475:7302":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:40225:9379":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"6:4910:10782":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:41466:9117":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"6:4370:5204":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:9148:30350":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:43482:9426":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"5:35:7190":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:8896:9901":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:39259:9494":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:11687:19763":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:12045:1532":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"16:5905:8639":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:10750:7678":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:13693:8256":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:1781:9763":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:42895:9564":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"9:0:2127":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:12039:1567":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:42455:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:9169:9915":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"2:2867:8854":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:2493:2291":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"20:3461:5245":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:20848:29625":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"17:14118:8358":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"5:1011:7194":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"16:6361:8730":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:8072:8992":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:47669:9730":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:2539:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:22796:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:40456:2319":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:4138:25525":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:8231:9870":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:2250:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:47788:9739":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:11473:7525":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:1058:9111":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:40074:7250":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:10962:9790":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"1:9191:25698":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"17:14001:8327":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:12225:7886":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:13451:8121":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:7888:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:2598:2324":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:8004:9825":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"14:160:9091":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"16:5727:8618":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"6:5070:10835":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:43582:9590":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:4642:10551":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"17:11573:7776":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"6:4680:5234":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:3013:2540":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:8550:2369":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:41458:2369":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:46192:9663":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:43187:9572":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:12473:7949":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:22316:11438":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:6431:2396":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"5:7474:9227":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"16:7828:8950":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:6634:2828":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"16:6583:8753":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:884:9103":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:43428:9586":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:11872:7811":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:9977:9541":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"2:1640:6636":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"18:521:23727":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"16:3600:8571":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:4264:209":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:40714:9398":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:13228:8083":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:40184:9373":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:13274:7752":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:14478:8474":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:2171:16809":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"1:7711:11376":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"9:330:10694":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"6:4666:5231":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"20:5473:5269":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:6582:3729":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:11221:11066":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:2845:11500":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"16:3764:8572":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:12267:7901":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:13868:8294":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:1579:9122":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:11281:7749":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:9470:6763":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:21185:11513":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:5781:2394":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"16:7660:8938":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:14401:8452":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:5569:2772":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"5:1374:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:11358:19885":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:12750:7991":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"18:590:7387":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:3945:11439":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:11327:7755":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"16:3915:8576":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:6596:2403":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:12044:1448":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"11:399:32895":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:10397:7629":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:6261:8721":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:4824:11449":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:12870:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"5:2243:10952":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"16:4745:8588":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"6:5060:5245":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:1931:674":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"5:7231:31388":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"5:1503:9101":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:2825:2592":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"16:6531:8749":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:4240:9777":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:1044:8840":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:10953:9179":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"16:2406:8522":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:45684:9642":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:3419:2307":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"17:12983:8043":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:9945:7591":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"5:4363:7218":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"20:3215:5222":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:40302:7397":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"6:6607:10916":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:13758:8266":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"6:7532:10931":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:9070:7557":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"5:7253:200":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"6:6784:6274":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:11639:7455":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:6199:7256":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"2:44095:11046":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:12305:7909":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"16:4053:8577":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:25777:250":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"6:4526:5222":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:13778:8274":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"16:2428:8523":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:43087:9565":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:40011:29886":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:13202:8081":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"11:695:9101":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:646:11373":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"5:7529:7228":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:12004:25618":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"11:1826:7211":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:1681:3812":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:43464:9425":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"5:207:7192":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:587:3049":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"16:3830:8574":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"5:7425:9225":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:9099:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:43938:16682":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"6:119:2723":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"17:13897:8302":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:2781:229":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:2216:2262":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"20:4925:6272":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:3188:29318":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:9685:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"20:3209:5221":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"6:5814:5777":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:653:3068":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:2914:8859":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"20:549:3044":{"crate_id":20,"path":["libc","unix","winsize"],"kind":"struct"},"1:10977:25569":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"18:0:2135":{"crate_id":18,"path":["memchr"],"kind":"module"},"6:4520:5221":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:10766:11062":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"16:7768:8551":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"6:7514:5266":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:2783:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1:11482:9773":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:12970:8041":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"16:6017:19692":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:8225:2317":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:2779:2589":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:45350:9628":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"6:579:3048":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:4804:30097":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:8408:2364":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"18:624:32936":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"16:5322:8601":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"11:760:7228":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:11158:16663":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"6:500:3038":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:12737:7989":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:10949:9821":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"20:4131:5779":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:47217:9722":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:10323:2321":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:14308:8426":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:7848:2282":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"16:8115:8997":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:6165:5810":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:12293:7906":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"16:4889:8593":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:4638:10547":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:44350:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:558:9752":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:5398:9786":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"16:7613:8936":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:11361:9807":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:5858:5766":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:45795:9651":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"5:6788:7238":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:2923:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"6:4940:10803":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"16:7582:8933":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"11:311:10684":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:12959:8040":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:8313:9878":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:43213:9514":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:12007:7845":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:47678:9731":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:434:7437":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:6467:2402":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"20:3334:5231":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"20:4272:5809":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"16:6041:19693":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"20:4229:5788":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:8218:2321":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"6:4508:5220":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:11761:7792":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:40722:9400":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"6:7567:10936":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"7:0:1597":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:7722:8553":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"6:6735:6272":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:4589:5225":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:4054:16634":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"20:3451:5244":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:45595:9638":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:10811:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"6:5010:5247":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:3226:2342":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"16:6332:8544":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"20:3370:5235":{"crate_id":20,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"18:644:7377":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:43410:9585":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:30185:29883":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:6250:7290":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"16:5673:8549":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"20:2995:5200":{"crate_id":20,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:871:9102":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"20:5064:6280":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:14083:8350":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"6:4537:10710":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:1561:6691":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:3019:2542":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:8357:9780":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"16:7090:8839":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"20:1490:3809":{"crate_id":20,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:11319:9942":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"20:3147:5213":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:22631:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:7930:30351":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"11:2130:18753":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"6:4965:5244":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"16:8195:9006":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"5:7337:2259":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:9480:6767":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:45702:9643":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:45440:9632":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:46869:9689":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:3244:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:40104:9514":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"15:394:18794":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"1:3465:2287":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"5:782:7197":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"5:5362:16654":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"20:1522:3812":{"crate_id":20,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:14536:8484":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"20:4203:5786":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlattr"],"kind":"struct"},"17:9003:19759":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:9277:7430":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:9104:220":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:1429:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"16:6915:8555":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"20:4919:6271":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"5:2960:32861":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:2998:2323":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:12032:16669":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:1590:9124":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:9867:7581":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:1595:3805":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:10776:2280":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"5:1138:31301":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"5:1411:2369":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"6:4856:10751":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:2499:1984":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:12061:1607":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"11:285:10681":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:10165:19790":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:8162:2286":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:6163:7289":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:9172:7427":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"16:5816:8628":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:12711:7986":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"16:8239:8898":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:1986:186":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"20:4174:5782":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlmsgerr"],"kind":"struct"},"17:11719:19764":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:11367:7759":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:10980:7571":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"16:8050:8991":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"11:749:7211":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"6:4897:10772":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:12465:7947":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"6:6627:6268":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"7:32:18664":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:13851:8289":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"16:5696:19690":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"14:0:2131":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:8335:2828":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"20:3019:5202":{"crate_id":20,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"5:7412:9223":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"5:2049:9203":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"20:3086:5084":{"crate_id":20,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:14110:8357":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"16:2548:8528":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:47750:9737":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:8567:2371":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:4703:11475":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"6:4946:10806":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:43812:9604":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:5054:9784":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:482:3035":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:5747:2392":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:840:2369":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"6:4772:10724":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:11296:7308":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:43795:9603":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"20:1479:3808":{"crate_id":20,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:7929:2334":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:505:7208":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:897:7211":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:9725:9416":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"5:5366:16655":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"16:2574:8529":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"6:4697:5236":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:13071:8055":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:12650:30034":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:1983:187":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"11:1012:9112":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:41207:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"20:3238:5224":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:41264:11435":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"6:5808:5776":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:43949:9608":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:21774:29630":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"11:1845:9122":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"6:7287:10923":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:11151:7733":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:10340:28962":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"16:7360:32922":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:7637:2291":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:43744:16681":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:39954:9506":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:1184:7442":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:4031:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:12925:11382":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:10507:7649":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"16:4585:8584":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"11:836:9109":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:2828:2538":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:400:7435":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:1633:604":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:11586:7778":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"5:1288:9111":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"16:6268:32921":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"5:3581:2369":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:12056:1548":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"6:7472:6278":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"20:4806:6267":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:9468:6762":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:41516:6752":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:5434:9788":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:12020:25561":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"6:5929:10849":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"16:6560:7180":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"2:20880:29782":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"16:8097:8995":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:9780:7574":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:43614:2317":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:43268:9578":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"16:6376:19694":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:44337:9623":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:10100:9919":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"20:3071:5206":{"crate_id":20,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"16:7503:8558":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:42164:6764":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"16:8294:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"20:527:3041":{"crate_id":20,"path":["libc","unix","hostent"],"kind":"struct"},"17:3232:7451":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:12888:8026":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:1603:3806":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:6010:9380":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:12052:765":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:12111:7862":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"5:3171:2369":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:2159:605":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"16:6083:18802":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:1824:9232":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:45564:9637":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:3441:7453":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:45625:9639":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"6:7520:5267":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:40666:9394":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:11306:7752":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"5:4985:2307":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:12822:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:12043:7852":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"13:226:10679":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:43378:9423":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:2899:16791":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"20:483:3036":{"crate_id":20,"path":["libc","unix","timeval"],"kind":"struct"},"2:41230:9404":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"6:0:841":{"crate_id":6,"path":["libc"],"kind":"module"},"17:10603:7657":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"2:22217:29877":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:3348:2328":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:43346:2320":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:8556:11379":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:8978:9902":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:45847:9653":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:21440:2291":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:39848:9496":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"5:7282:6691":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:41675:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"9:52:18696":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"16:6545:8751":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"11:1611:7187":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"20:5467:5268":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"5:4032:7194":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"11:793:9118":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"16:6189:8688":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:40480:9392":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:43781:9600":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"5:5839:7211":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"18:481:7375":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"6:5076:10837":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:30243:29876":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"7:79:18671":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"20:4278:1785":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"20:4185:5784":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:21421:11505":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"17:14324:8430":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"5:3142:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"6:6814:6276":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:568:3046":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:9039:9912":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"11:97:10680":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:11797:9438":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"6:4742:5241":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:2209:7450":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:358:9749":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"16:4417:8579":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:8713:19750":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:13567:8214":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:9031:9910":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:10240:7591":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:11084:9429":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"20:3320:5230":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:11389:7764":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"14:31:9091":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:40316:9389":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"20:4107:5777":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:10274:2369":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"6:6859:6279":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:46215:9664":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:45416:9631":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:31957:6773":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"2:40704:7258":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:11813:9439":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"20:4797:2919":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:526:3040":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"5:276:2545":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"20:5019:6277":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:12598:7969":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:12513:7957":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:40124:9516":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:40164:9519":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"11:2180:10688":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:5131:193":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:2362:191":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"16:6156:8683":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"14:7:9091":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:13554:8207":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:21108:11517":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"18:564:7386":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"20:3006:5201":{"crate_id":20,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"20:3257:5225":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:4306:5200":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"5:7245:6691":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"16:4613:8585":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:11848:9420":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:8863:9900":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"6:4498:5219":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:9720:16745":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:10557:9425":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:3648:6691":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"16:7128:9912":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:39876:9499":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:10929:7715":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:2542:241":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:3250:16712":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"16:149:7177":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"16:5588:8548":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:12554:7961":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:7744:11414":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:39184:205":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:6194:10961":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"5:7221:7206":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:45546:9636":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:11535:7774":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"16:4835:8591":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:10726:7676":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"16:5661:8614":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:43304:9579":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"5:1442:6691":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:6298:208":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"16:7492:8927":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:11226:7745":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:7443:2544":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"16:2969:18831":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:8801:9895":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:12042:317":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"17:12024:7847":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:22664:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"20:4151:5766":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"18:727:7419":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"16:7544:8932":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:41594:9117":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"16:5384:19689":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"6:7595:10942":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:22283:10965":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:4967:11480":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:4572:11470":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:41792:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:22165:9462":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"18:614:32937":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"16:5982:8652":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"16:6226:8705":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"17:10561:7653":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"16:6243:8711":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"20:4180:5783":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:14420:8457":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:14460:8468":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"6:4874:10762":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:42446:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"20:4870:3730":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:6598:2919":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:8978:19758":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:12058:1550":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"20:1537:3814":{"crate_id":20,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:40174:9521":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"20:2982:5199":{"crate_id":20,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"5:5128:2390":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:8205:2319":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"17:10186:7611":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"1:6981:25677":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:11507:19762":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:10440:7634":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"1:1779:9762":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"20:1531:3813":{"crate_id":20,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"11:1818:2369":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"18:113:23716":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"6:5996:5232":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"6:5891:5784":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:11393:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"20:134:2723":{"crate_id":20,"path":["libc","unix","FILE"],"kind":"enum"},"17:12136:7864":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:11000:7719":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"9:450:18678":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"16:7269:32920":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:10789:9934":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:12063:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"20:4101:5776":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"5:6798:7240":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"18:766:23726":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"11:119:7181":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:8833:9897":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"16:6968:19697":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:9053:25579":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:1842:9766":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"16:3655:7467":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:8594:19738":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"6:4397:5084":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:8305:9870":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"6:6574:2961":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"6:7618:6623":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:4957:5243":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"16:5798:8624":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:11388:11067":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"14:165:18764":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:9102:7425":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:10771:7680":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:2904:16792":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:12252:7895":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:416:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"11:2060:9112":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:2921:212":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"5:1464:9102":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:4747:11453":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"11:1822:6691":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:1759:9229":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"20:4904:6269":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:9418:2290":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:9486:7301":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:43336:9583":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:4706:5237":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:14316:8429":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:10012:7571":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:11295:7750":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:10430:7632":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"2:43510:9587":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"5:1257:8840":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"20:4165:5781":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlmsghdr"],"kind":"struct"},"5:5975:17101":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:39860:29872":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:4392:7249":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"6:4330:5202":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"5:3217:32545":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:14514:8478":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:40084:9513":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"1:6195:9797":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"17:11547:7775":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:7726:11377":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:42910:11041":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:14090:8351":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"20:3197:5220":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:40193:9375":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:12437:7940":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:7608:10946":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:43138:9566":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:12060:812":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"5:7349:2260":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:43318:9582":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:10599:9428":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:4189:11462":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"16:3065:7462":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"16:4949:8595":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:922:9101":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:4628:5228":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:43643:9593":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"6:4975:5246":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:5085:9784":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:7554:8560":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"6:6829:6277":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:9985:7595":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:43659:9503":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"6:4820:10747":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:4422:5209":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"20:3080:1994":{"crate_id":20,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:9461:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"20:4077:5774":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:2384:2272":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"6:4766:10721":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"6:4477:5216":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:13611:8244":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"20:5479:5270":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:8212:2320":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:2613:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"6:5976:10874":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:2771:223":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:39120:201":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:13162:8076":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:12062:1163":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:12054:762":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"6:4391:1994":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:12103:16675":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:47529:9726":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"16:5121:8600":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:2833:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:8989:9905":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:22730:180":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:40245:9384":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:46039:9659":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:11316:7754":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:45665:9641":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:10370:7627":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:3009:2539":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:39238:9492":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:22763:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:7131:25514":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:3191:29319":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:622:9753":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:22565:179":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"5:7199:9218":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:31939:9483":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:9972:7593":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:30171:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:43176:9571":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:11351:7757":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"16:4641:8586":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:3989:11442":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:11215:7741":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"15:288:18783":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:9153:30938":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:9086:7558":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:9841:7260":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"5:4194:2307":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:8458:2365":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:2178:7447":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"16:3232:8511":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"20:3226:5223":{"crate_id":20,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"20:3425:5241":{"crate_id":20,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:22003:9454":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:47327:9723":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:2356:184":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"16:6485:8547":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:40267:9527":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:3939:11440":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:10139:19789":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"20:4069:5773":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:41474:6691":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"6:4725:5239":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"5:629:9195":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:12934:8036":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:2665:9234":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"1:2409:1982":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:47467:9725":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:2546:240":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:21064:30042":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"6:5053:10832":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"16:7284:6751":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:13710:8257":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"20:1350:3795":{"crate_id":20,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:8926:19756":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:7905:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"18:707:7412":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:5572:11489":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:39961:16737":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:14499:8477":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"16:5403:7557":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"11:805:11381":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"20:3111:5209":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"5:895:2369":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"20:4847:3758":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"5:5318:7194":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:10616:7658":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"6:4608:5226":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:2366:2266":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"20:1431:3804":{"crate_id":20,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:43652:9440":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:9436:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"6:7281:6621":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:11617:7779":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"18:538:7384":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:44367:9626":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:2494:16741":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:7886:2372":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:14282:8417":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:46685:9687":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"6:4640:5229":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:11124:7731":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"6:4826:10748":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"11:2033:8840":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"14:221:9098":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"5:4074:9117":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:8819:9896":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:14335:8435":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:11448:19761":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:39890:9500":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"5:7261:9219":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"6:7538:10932":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:41543:212":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:47613:9728":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:4154:9368":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"6:6850:10920":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:41372:9407":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:13826:8280":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:5449:9789":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:9350:7434":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:6791:6697":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:4448:6775":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"6:1545:3800":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:11523:9774":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"16:5088:8599":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:7889:11385":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:6753:6273":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:11661:7781":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"16:7436:8656":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"5:4234:2369":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:12041:1078":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:20820:2606":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:14024:8332":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"20:1514:3811":{"crate_id":20,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"11:630:2369":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:47575:9727":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"6:6053:10902":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:11788:7793":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"6:4652:5230":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:11235:7746":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"6:4850:5786":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"16:7651:8937":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:14:2234":{"crate_id":2,"path":["core","write"],"kind":"macro"},"20:5461:5267":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:43624:9591":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:41611:185":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:0:2134":{"crate_id":17,"path":["object"],"kind":"module"},"20:138:2724":{"crate_id":20,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:44115:11051":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"16:7694:8562":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"16:3461:8570":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:2150:19817":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"16:6415:8736":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"5:676:234":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:5491:2307":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"16:4497:8581":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:3224:2341":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:4918:11474":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:0:508":{"crate_id":2,"path":["core"],"kind":"module"},"2:12628:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"16:2504:8526":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"11:736:9103":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"2:44091:11045":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"16:4921:8594":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:40133:2318":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"20:1355:3796":{"crate_id":20,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:2888:7282":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:30719:185":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"5:1102:31297":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:8286:11052":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:3068:11394":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:21315:2291":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:12172:7873":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:10084:7601":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:2943:16798":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:0:1440":{"crate_id":1,"path":["std"],"kind":"module"},"16:3888:8575":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:727:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"6:547:3043":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"5:1672:7194":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:14448:8466":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:8909:11495":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:10278:7620":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:47803:9740":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:4168:11460":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"16:2472:8525":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:10227:7617":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"20:4887:3733":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"18:599:32938":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:12778:7995":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"5:0:291":{"crate_id":5,"path":["alloc"],"kind":"module"},"5:6930:7241":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:949:9109":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:10447:7637":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"6:5872:10848":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"16:5830:8629":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:8142:2348":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"17:13487:8152":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"20:4943:6273":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:2930:16795":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"5:5954:2390":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:11337:19884":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:3050:16637":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"6:6003:10881":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:14296:8423":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"16:6204:8690":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:4438:5211":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:3741:9773":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:22177:29898":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"20:495:3038":{"crate_id":20,"path":["libc","unix","rlimit"],"kind":"struct"},"6:6843:10917":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"11:2174:10687":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:42680:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:39206:2253":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:10116:2291":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"6:5909:5787":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:4719:8587":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:14269:8411":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:47689:9732":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:8237:9872":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"20:489:3037":{"crate_id":20,"path":["libc","unix","timespec"],"kind":"struct"},"17:9790:32928":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:11053:7306":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:12184:7876":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"16:6929:8813":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"16:3032:8566":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:10420:7505":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:47724:9735":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:13148:8075":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"20:2976:5198":{"crate_id":20,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:13244:8085":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:40695:2349":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:43887:9443":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"6:4951:5198":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:9466:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:5551:9376":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"5:3594:9117":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"5:261:7194":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:2169:16808":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"2:43564:9589":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:6188:9386":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"6:7304:6622":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:932:11381":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:46114:9661":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:14346:8436":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:42495:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1:10081:9764":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:42702:9562":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:10478:9423":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"5:6558:6691":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:7535:9946":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"5:685:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:3239:237":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:2793:2590":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"16:5743:8620":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:42710:9563":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:46295:9665":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:1557:2369":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"6:4618:5227":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:4196:6772":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:14056:8343":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:1921:9233":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:41714:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:39900:9501":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:9488:32925":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:40216:9525":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:41483:6751":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"6:5776:5773":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:4051:11447":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"16:5049:8598":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:3321:16636":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:11062:7726":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:12833:7274":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"6:4552:10717":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"11:1858:9124":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:364:9750":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:10840:28194":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"2:9472:6764":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:261:7433":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"20:4193:5785":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:44103:11048":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:1895:9767":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"6:1575:3803":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:8009:2335":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:9478:6766":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:11111:7730":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:32051:2597":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"10:36:10693":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:39096:200":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"16:6346:8728":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"11:1852:9123":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:12055:1551":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"20:4781:3729":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"20:3166:5216":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"5:1273:9112":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:47651:9729":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:43634:9592":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:1709:3816":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:20833:29625":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"9:177:18745":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"16:7597:32916":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:12876:8024":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:45462:9633":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:10575:7654":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"6:4485:5217":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"5:3800:7228":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1:10771:11064":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"16:2670:8533":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:4743:11450":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"20:3482:5247":{"crate_id":20,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:13113:8063":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:4628:11444":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:4909:11473":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:14076:8349":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:6979:16772":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:12765:7994":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:6928:30118":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:1670:1116":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"16:2284:18803":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"5:1492:9100":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"20:542:3043":{"crate_id":20,"path":["libc","unix","pollfd"],"kind":"struct"},"1:11626:9810":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"9:237:2365":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:2892:8855":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:10494:7647":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"20:4298:5810":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:488:3036":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"5:4002:7211":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:5826:2401":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:14033:8335":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:22928:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:39839:9495":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:10097:7602":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:12810:7999":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"5:6485:7194":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"5:2141:9204":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:2836:2596":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"1:1568:7228":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"6:6017:10892":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:12037:9413":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:40673:9395":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"5:5923:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"6:4317:5201":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:10126:7605":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"5:5769:235":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:11910:7826":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:7732:9761":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"17:9752:7573":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:12237:7889":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:44111:11050":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:12049:663":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"10:44:9127":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"5:2970:32859":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:8279:9776":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:9912:7584":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:907:7228":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"17:9852:19771":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"1:10537:2343":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"5:1473:9103":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:9390:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"5:778:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"20:3286:5227":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:42671:9556":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"6:5017:5248":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:11992:2373":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"5:3669:7194":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:4471:5215":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"20:3276:5226":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:6805:6275":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"11:1068:9114":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"6:4731:5240":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:46609:9685":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"11:968:8840":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:41449:6690":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:13981:8320":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:44134:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"20:1444:3806":{"crate_id":20,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:1649:3809":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:8953:19757":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"6:4789:10735":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"20:3160:5215":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:12038:428":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:582:7439":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"16:2881:8542":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:41989:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:2909:16793":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"16:6499:8564":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:9939:7269":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"16:7102:19698":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:6427:1986":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"6:6037:10897":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:13085:8057":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"6:7526:5268":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:9445:7567":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"12:0:2130":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:13632:8249":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:3305:2340":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"16:7067:8837":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:8847:9898":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:955:9110":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:5418:9787":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:12052:16667":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:4545:10715":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"11:723:9102":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:5972:7290":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"16:2450:8524":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:13010:8045":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"6:4403:5207":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"20:3489:5248":{"crate_id":20,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:4756:5242":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:13101:8061":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:21:702":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"17:9650:7571":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:11137:7732":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"16:2788:8538":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:9476:196":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"6:4812:10743":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:22829:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"17:9617:32927":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:42157:6762":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:8556:2370":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:41247:9406":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:12671:7685":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:7638:9751":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:39833:9364":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:2778:2537":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"5:7545:7232":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"20:574:3048":{"crate_id":20,"path":["libc","unix","tms"],"kind":"struct"},"2:2272:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:41602:6691":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:11173:19883":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"5:1514:200":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:8925:11494":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:562:3045":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"6:7549:5269":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:10468:7644":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"3:234:212":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:3846:9775":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:3997:11443":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"5:6439:7211":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:1067:9112":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:13298:8099":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:47735:9736":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"6:4889:10767":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"2:46419:9682":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:40202:9522":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:40277:9528":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:22056:9455":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:47405:9724":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"20:3059:5204":{"crate_id":20,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:43924:9607":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"20:3065:5205":{"crate_id":20,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:12048:661":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:43360:2321":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"6:4430:5210":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"5:6886:247":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:9152:9914":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:12046:7412":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:7524:7439":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"6:4994:10810":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"16:8281:9013":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:42473:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"16:6721:19696":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:2831:2594":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"16:7782:8942":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:4059:11448":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:43147:9567":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"20:1543:3815":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:21317:11506":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:44392:9627":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:3975:11441":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:13422:8101":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"16:6513:8741":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:863:6691":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"16:7708:8563":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:8877:9792":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:12057:16666":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"20:0:841":{"crate_id":20,"path":["libc"],"kind":"module"},"2:49671:11521":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"5:1523:9200":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:20863:29784":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:43766:9595":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:1527:3798":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:7662:9813":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:4320:9778":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:8985:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:42028:2391":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"9:486:18677":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"16:4774:8589":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:41384:9409":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:13890:8300":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:6045:10899":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:13215:8082":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:45941:9655":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"8:0:2126":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:2012:7443":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"16:7884:19702":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:1750:10959":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"6:5827:5778":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:8871:6691":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:2253:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:9051:19737":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:3256:16711":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"20:1377:3799":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"11:798:9104":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:6358:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"16:6456:8739":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"6:6180:10910":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"5:3238:9124":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"11:644:9117":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"11:667:9100":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"6:7573:10937":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"20:3355:5233":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Chdr"],"kind":"struct"},"16:2305:18829":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"16:2810:8539":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:8855:2369":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:13906:8303":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:1663:3810":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:3303:2339":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:22697:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"20:1472:3807":{"crate_id":20,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:5609:9378":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"6:1557:3801":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"11:2201:2259":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"16:7513:8930":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"6:4864:10756":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:22304:9477":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"20:4995:6275":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:39994:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:10916:7713":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"20:501:3039":{"crate_id":20,"path":["libc","unix","rusage"],"kind":"struct"},"2:45749:9644":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:10405:9421":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:10323:9789":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"16:7041:8831":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"5:7191:6691":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"18:491:7376":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:10801:2284":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"2:41349:9776":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"16:2526:8527":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:11074:7727":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:43156:9569":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:12098:7860":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:10478:7645":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"11:1838:9121":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:40254:9385":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"20:1550:3816":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:47773:9738":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:8848:19754":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"6:1520:3797":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:8825:19753":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"20:1368:3798":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"6:573:3047":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:4019:9366":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:13973:8319":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"6:4382:5206":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"16:7568:8561":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"20:568:3047":{"crate_id":20,"path":["libc","unix","itimerval"],"kind":"struct"},"2:9417:212":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"2:9907:7263":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:20878:29786":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:9481:2283":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:12658:7978":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:7999:9824":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:4273:9370":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:14221:8410":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:39065:9488":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:7865:2284":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:44099:11047":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"6:123:2724":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"6:1495:3795":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"6:6680:3730":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:7913:9823":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:10698:7673":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"5:2966:32860":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:39140:204":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:13024:8048":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:8794:19752":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"5:3735:9203":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"16:7736:8940":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:4640:10549":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"20:3414:5240":{"crate_id":20,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"6:7555:5270":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:13876:8297":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:41398:183":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"15:0:2132":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:13135:8074":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:8114:2285":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"1:2576:7264":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:12086:7857":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"11:1538:9120":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:6657:3758":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"18:582:2606":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:14378:8451":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"20:3408:5239":{"crate_id":20,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:10962:7717":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:9921:7586":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:13838:8283":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:4392:9779":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:4462:8580":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:8983:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:45524:9635":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"16:7391:19699":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:4500:11465":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:47865:9742":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"20:4910:6270":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:42400:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"17:12846:8005":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"6:5046:10829":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"16:7523:8931":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"6:506:3039":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:11394:11068":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:2530:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:40027:9512":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:10903:7712":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:2214:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:22125:10962":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:8765:19751":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"6:62:2647":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:39080:202":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:44167:16908":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:2850:8853":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:12698:7984":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:7875:2281":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:2320:190":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:13816:8279":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"16:6879:8809":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"16:5648:8609":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"16:0:2133":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:41950:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:42390:11033":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:11971:7840":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:11023:7720":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"18:681:7407":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"5:7463:9226":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:3284:16635":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"6:5964:10870":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:10588:7655":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"17:10520:7650":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"5:4426:7218":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"18:690:7409":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:10160:9920":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"20:1416:3803":{"crate_id":20,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:10298:9117":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:9114:9801":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"5:6079:2307":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"6:4558:5223":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:3166:11396":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:42655:9553":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:11086:7728":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:5403:2307":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"17:9886:7583":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:3744:9774":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:47709:9734":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:11059:7307":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:4:1040":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"11:1048:32894":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:21271:11504":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"16:6944:32917":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"16:2380:8521":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"6:4783:10732":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"16:2644:8532":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:9607:7570":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"20:4138:5780":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:41753:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:8540:2368":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:6543:2399":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"6:4844:5782":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:5311:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"16:7474:8919":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:10821:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:2938:16797":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:6697:3733":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:8557:11488":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:10547:7652":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:4037:11445":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:8964:2395":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"16:7534:8559":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"16:8134:9000":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:11381:7762":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:4007:9365":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:2219:2263":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:1573:9121":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"5:2959:6739":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:11117:9430":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"5:3212:9121":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:12196:7877":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"5:1118:32854":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:45971:9656":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:5899:5785":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:9677:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"20:3092:5207":{"crate_id":20,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:6896:7294":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"6:6024:10893":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:21014:2291":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"20:5439:6621":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:43668:9364":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"6:4931:10797":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:6811:11502":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:7683:7303":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:7209:2385":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"16:6742:8790":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:13989:8321":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"16:7015:8830":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:534:7277":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"6:494:3037":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:46373:9681":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:4570:5224":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:10646:7663":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:2861:16787":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:2638:2333":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"16:7462:8918":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:2624:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:22895:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"17:11886:7812":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"16:7621:19700":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"6:6729:6271":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"5:6955:7244":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:42914:9417":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:10432:9895":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:8481:2366":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"6:4293:5199":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:8895:19755":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:42692:2365":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:2871:11499":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:10571:9426":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:11578:9431":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"20:3104:5208":{"crate_id":20,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"5:7396:29886":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:6401:8546":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:41336:9544":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:11313:9802":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:3513:28924":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:9823:19770":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:31943:8898":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:41870:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:9474:6765":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:853:9117":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"16:2864:8541":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:43528:9588":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"11:332:7183":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:12053:766":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:13739:8265":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:13040:8050":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"20:4817:6268":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:14145:8365":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:11261:7747":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"16:5939:8496":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:46655:9686":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:12945:8038":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"11:817:9107":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:9701:7572":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"5:4846:206":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"16:7006:8827":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:918:9100":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:39980:9510":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:42430:8969":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:10292:7571":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:5988:208":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"6:1631:3807":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:8996:25566":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:2934:16796":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:10747:9929":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"16:7318:8877":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:913:9118":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"16:6696:8778":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:44276:207":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:11098:7729":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"6:4458:5213":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"16:6792:8803":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"16:2321:8512":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:7581:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"20:5033:6278":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","termios2"],"kind":"struct"},"2:31903:10690":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:40146:9517":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"20:3154:5214":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:39928:9503":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:7764:9483":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"1:4745:11452":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"6:4718:5238":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:2533:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:23375:222":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"16:5760:19691":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:12154:7872":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:10036:7598":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:5243:192":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:3529:1983":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:12615:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:39920:9364":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:43166:9570":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:12645:7975":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:8390:11484":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"5:7182:9201":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:9242:7429":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:38979:16710":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"16:3315:8569":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"17:9959:7592":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"5:4164:2307":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"11:1103:9115":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:7893:16776":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:12496:7954":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:4421:2426":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:10831:2286":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:8242:11434":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:3229:16799":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:11244:7779":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:9474:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"17:9896:19772":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:8686:19749":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:8659:19736":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:40466:9391":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"16:5419:7558":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:8174:2289":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:9711:32924":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:10340:7625":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"16:6425:8737":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:9281:9765":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:4003:11444":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:21323:11508":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"16:7054:8834":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:12422:7936":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"14:202:16683":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"9:357:18693":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"20:3348:5232":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Chdr"],"kind":"struct"},"6:1690:3813":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:9574:32931":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:4801:7283":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"5:3720:2334":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:6610:2404":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"6:4687:5235":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"20:3180:5218":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:12621:7974":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"5:822:7200":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"16:7792:19701":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:12997:8044":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:10534:2341":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"17:14163:8368":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"6:4491:5218":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:1764:628":{"crate_id":1,"path":["std","env"],"kind":"module"},"17:13723:8262":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:21449:9453":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:11490:7772":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:14068:8346":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:31964:9485":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:21884:2291":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:12702:9449":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:5845:5780":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:1590:3804":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"16:5866:8636":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"20:1436:3805":{"crate_id":20,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:589:11370":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"18:96:23715":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"16:5574:8545":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:12484:7952":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:11710:7752":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"13:110:32901":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:5626:208":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:9109:221":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"16:4986:8596":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:11407:19760":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"6:7561:5271":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"20:521:3040":{"crate_id":20,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:9660:32929":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"15:306:18784":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"16:4527:8582":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"6:6076:10908":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:10197:7613":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:6147:7274":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:12062:7853":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:7657:9811":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:21052:11512":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"20:3137:5212":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"5:7290:6691":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:12036:379":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:22141:9457":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"18:719:7416":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:3115:2351":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"1:3264:2343":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"6:5838:5779":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:10316:7624":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:5633:7290":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"16:5363:8602":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:39018:16638":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:12037:961":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:22109:9456":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:21665:11511":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:2840:11498":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"14:187:18771":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:8980:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"19:0:1058":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:12050:767":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"5:2962:10949":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"16:2339:8514":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"6:7259:2994":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:44107:11049":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:9564:7569":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"5:4393:2307":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"16:2744:8536":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:44079:11042":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"16:2596:8530":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:13685:8255":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:44087:11044":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:4337:7248":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"5:6769:7226":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:9521:7568":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:1736:16819":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"20:4773:2961":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:21152:11518":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"20:3296:5228":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:44329:9621":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:10112:7603":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:12830:8000":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"16:5712:8615":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"16:4862:8592":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"20:3401:5238":{"crate_id":20,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"11:1027:18758":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"5:5612:7226":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"5:7382:9220":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"20:5004:6276":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:9455:32923":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"20:5417:2994":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:12531:7958":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"5:2131:7208":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:47826:9741":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"5:7449:227":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:3405:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:5503:9790":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"16:6318:8726":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:13575:8215":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"16:8205:19703":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"16:2766:8537":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:20861:29787":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"16:8154:9001":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:11240:9801":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"2:10443:9422":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:11774:9437":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"16:6279:8724":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"20:3443:5243":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:9372:7559":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"20:55:2647":{"crate_id":20,"path":["libc","unix","DIR"],"kind":"enum"},"18:671:7406":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:1547:2307":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:10540:2339":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:2883:16788":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:43226:9574":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"6:4376:5205":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:40689:9396":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:21337:9453":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"18:80:23714":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:7434:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"20:3187:5219":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:13286:8092":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"6:1638:3808":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:11201:7736":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"2:40680:1986":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"16:5634:8605":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"15:327:18788":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:11203:2297":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"16:3049:18832":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:1513:10708":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:504:7438":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:21238:11509":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"20:4209:5787":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:12677:194":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:12724:7987":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"11:657:6691":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:22862:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"20:5494:6623":{"crate_id":20,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:21199:16808":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"17:10534:7651":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:7760:9821":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"16:7342:32919":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:7023:7295":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"6:6086:5788":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:13914:8305":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"18:609:7393":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:2887:16790":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:7525:2543":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:9207:7428":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"5:2170:10948":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"5:7211:7211":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"16:6893:8811":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"11:403:32896":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"6:1506:10705":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:11951:7830":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"16:6467:8740":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:22192:9463":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"20:1574:3818":{"crate_id":20,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:11176:2041":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:7853:2283":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"20:3119:5210":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:10714:7675":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:22254:29891":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:4706:11464":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"16:6844:8805":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:8331:9880":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:10661:7667":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:3269:30368":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:14100:8354":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:44379:9126":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1:1564:7211":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"20:582:3049":{"crate_id":20,"path":["libc","unix","servent"],"kind":"struct"},"2:46531:9684":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"5:3183:32543":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"6:6145:1785":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:7375:25632":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:45993:9657":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:13966:8318":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:42171:6765":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"11:1501:18759":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:1924:11425":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:43248:9576":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:14134:8361":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:12576:7968":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:11612:28432":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:3504:2290":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"20:1558:3817":{"crate_id":20,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"11:2194:10691":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:45370:9629":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"4:0:2125":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"16:6818:8804":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:5754:2393":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"5:2461:10953":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:8941:11496":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:2875:11501":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:43258:9577":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:5384:9785":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:22598:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:2985:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:13949:8311":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:7858:2280":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"20:5485:5271":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"0:72:1726":{"crate_id":0,"path":["num_cpus","get"],"kind":"function"},"1:3447:1985":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:21255:2291":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:638:9754":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:1585:9123":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:9137:7426":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"6:1911:3871":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"18:652:7377":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"20:1504:3810":{"crate_id":20,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:12123:7863":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:12685:7983":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:9531:32930":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:12790:7996":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:3522:2288":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"6:5886:5783":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:43860:9606":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:14355:8438":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:43677:9502":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:13259:8089":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:42418:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:12258:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"18:507:7377":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:12452:7945":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"20:614:3068":{"crate_id":20,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:11934:7827":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:7472:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:8151:2350":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"5:3330:7228":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"17:10366:7626":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:11162:7734":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"16:2722:8535":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"20:536:3042":{"crate_id":20,"path":["libc","unix","iovec"],"kind":"struct"},"17:10059:7599":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:3185:28379":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:10516:9424":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:40234:9526":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:11592:16670":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:474:3034":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"5:1426:9117":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:2394:2277":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:3679:11436":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"16:536:8500":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"16:6171:196":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:45895:9654":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:1076:9116":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:39162:203":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:11150:9896":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:10580:7303":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:2926:16794":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:44083:11043":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:11987:9949":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"11:986:9111":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:22238:29880":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:21762:9451":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:42663:9555":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"16:5963:8645":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"20:477:3035":{"crate_id":20,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:45647:9640":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"6:4448:5212":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"0:73:1744":{"crate_id":0,"path":["num_cpus","get_physical"],"kind":"function"},"2:41526:6750":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:10949:7716":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:12911:8035":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"5:2223:31403":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"20:563:3046":{"crate_id":20,"path":["libc","unix","sigval"],"kind":"struct"},"17:12208:7878":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"16:5017:8597":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:39947:9505":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"3:0:453":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"1:3266:2344":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:41313:29892":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:8665:9413":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:46719:9688":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:5027:10815":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"20:3308:5229":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:4802:10740":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:4415:5208":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:10250:11491":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:3935:2307":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:39935:16736":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:3514:7211":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:39999:9511":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:13188:8078":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:14042:8336":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"5:1482:9118":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"16:5435:8603":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:4123:9367":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:45825:9652":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"5:1776:7228":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"17:11048:7722":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"20:3471:5246":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:11376:9809":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"20:1386:3800":{"crate_id":20,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"20:4974:6274":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:4783:397":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"1:641:9756":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:6540:2398":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:43959:9612":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:21066:16808":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"20:1398:3801":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:45494:9634":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"16:6687:8777":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:22290:9476":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"18:531:7381":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"20:3032:5203":{"crate_id":20,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:13546:8204":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:30115:6639":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"6:541:3042":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:41535:195":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:12373:7911":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"16:7862:8954":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:943:9107":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:42150:6763":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"20:557:3045":{"crate_id":20,"path":["libc","unix","linger"],"kind":"struct"},"6:595:3050":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:40286:9387":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"}},"external_crates":{"20":{"name":"libc","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}