{"root":"0:0:1768","crate_version":"1.15.0","includes_private":false,"index":{"2:11874:30788":{"id":"2:11874:30788","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11873:30786"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:50975:9285","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11901:24163":{"id":"2:11901:24163","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11547:16199","`DoubleEndedIterator`":"2:7151:120","prim@char":"1:11864:410","str::split":"2:11895:1897"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:50710:9105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11552:9095","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11552:9095","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11567:16197","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11925:32871":{"id":"2:11925:32871","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11547:16199","`DoubleEndedIterator`":"2:7151:120","prim@char":"1:11864:410","str::matches":"2:11922:2124"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:50914:9282","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11552:9095","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11552:9095","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11567:16197","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11965:25255":{"id":"2:11965:25255","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11967:25257":{"id":"2:11967:25257","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11860:24127":{"id":"2:11860:24127","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:48697:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48695:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9728:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9728:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11910:24165":{"id":"2:11910:24165","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11547:16199","str::rsplitn":"2:11913:24167"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:50796:9107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11552:9095","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5356:33533":{"id":"5:5356:33533","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:2446","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6981:9009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:2446","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6981:9009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11866:32864":{"id":"2:11866:32864","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11870:1369","str::slice_mut_unchecked":"2:11867:32865","crate::ops::Index":"2:2993:10973"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11876:32866":{"id":"2:11876:32866","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:50956:9283","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11972:32884":{"id":"2:11972:32884","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4500:32884"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:51009:9191","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11864:24129":{"id":"2:11864:24129","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9728:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9728:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11971:10952":{"id":"2:11971:10952","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4503:10952"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:51000:9046","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11907:32868":{"id":"2:11907:32868","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11547:16199","str::split":"2:11895:1897","prim@char":"1:11864:410","str::split_terminator":"2:11904:32867"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:50760:9278","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11552:9095","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11552:9095","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11567:16197","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11846:797":{"id":"2:11846:797","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11864:410"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11877:31462":{"id":"2:11877:31462","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:50984:9122","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11878:24169":{"id":"2:11878:24169","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11547:16199"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11552:9095","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11919:32870":{"id":"2:11919:32870","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48695:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11552:9095","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11552:9095","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11567:16197","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11938:32875":{"id":"2:11938:32875","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11957:32881":{"id":"2:11957:32881","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11547:16199"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11552:9095","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11845":{"id":"2:11845","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:11110:1369","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11846:797","2:11847:1978","2:11848:32860","2:11849:32861","2:11851:32862","2:11854:25493","2:11855:32863","2:11856:310","2:11857:1673","2:11858:1633","2:11860:24127","2:11862:24128","2:11864:24129","2:11866:32864","2:11867:32865","2:11868:24152","2:11869:24153","2:11870:9123","2:11871:9294","2:11872:6569","2:11873:30786","2:11874:30788","2:11875:1894","2:11876:32866","2:11877:31462","2:11878:24169","2:11881:23698","2:11884:23700","2:11887:1962","2:11891:6578","2:11895:1897","2:11898:24161","2:11901:24163","2:11904:32867","2:11907:32868","2:11910:24165","2:11913:24167","2:11916:32869","2:11919:32870","2:11922:2124","2:11925:32871","2:11928:32872","2:11931:32873","2:11934:1901","2:11936:32874","2:11938:32875","2:11940:32876","2:11941:32877","2:11942:32878","2:11945:32879","2:11948:1943","2:11951:24170","2:11954:32880","2:11957:32881","2:11960:32882","2:11963:1760","2:11965:25255","2:11966:25256","2:11967:25257","2:11968:25258","2:11969:32883","2:11971:10952","2:11972:32884"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5363:33535":{"id":"5:5363:33535","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7230:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7230:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5373:2238":{"id":"5:5373:2238","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7230:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7230:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11963:1760":{"id":"2:11963:1760","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11509:126","`FromStr`":"2:11508:2268"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48839:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11508:2268","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11508:2268","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11857:1673":{"id":"2:11857:1673","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11881:1465"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11942:32878":{"id":"2:11942:32878","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11547:16199"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11552:9095","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11552:9095","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11572:16196","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11941:32877":{"id":"2:11941:32877","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5357:2214":{"id":"5:5357:2214","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7230:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7230:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11552:9095","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11968:25258":{"id":"2:11968:25258","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5374:25384":{"id":"5:5374:25384","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11967:25257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7230:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11849:32861":{"id":"2:11849:32861","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11862:24128":{"id":"2:11862:24128","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9728:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9728:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:5360:33534":{"id":"5:5360:33534","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7230:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7230:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11552:9095","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11891:6578":{"id":"2:11891:6578","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:48697:176","prim@char":"1:11864:410","self::pattern":"2:11547:16199"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48695:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11552:9095","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11552:9095","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11567:16197","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11934:1901":{"id":"2:11934:1901","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11931:32873":{"id":"2:11931:32873","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11547:16199","`DoubleEndedIterator`":"2:7151:120","prim@char":"1:11864:410","str::match_indices":"2:11928:32872"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:50860:9280","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11552:9095","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11552:9095","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11567:16197","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11851:32862":{"id":"2:11851:32862","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11849:32861"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:72:1633":{"id":"0:72:1633","crate_id":0,"name":"get","span":{"filename":"src/lib.rs","begin":[73,0],"end":[75,1]},"visibility":"public","docs":"Returns the number of available CPUs of the current system.\n\nThis function will get the number of logical cores. Sometimes this is different from the number\nof physical cores (See [Simultaneous multithreading on Wikipedia][smt]).\n\nThis will always return at least `1`.\n\n# Examples\n\n```\nlet cpus = num_cpus::get();\nif cpus > 1 {\n    println!(\"We are on a multicore system with {} CPUs\", cpus);\n} else {\n    println!(\"We are on a single core system\");\n}\n```\n\n# Note\n\nThis will check [sched affinity] on Linux, showing a lower number of CPUs if the current\nthread does not have access to all the computer's CPUs.\n\nThis will also check [cgroups], frequently used in containers to constrain CPU usage.\n\n[smt]: https://en.wikipedia.org/wiki/Simultaneous_multithreading\n[sched affinity]: http://www.gnu.org/software/libc/manual/html_node/CPU-Affinity.html\n[cgroups]: https://www.kernel.org/doc/Documentation/cgroup-v1/cgroups.txt","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11858:1633":{"id":"2:11858:1633","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:48697:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48695:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9728:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9728:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11904:32867":{"id":"2:11904:32867","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11547:16199","str::split":"2:11895:1897","prim@char":"1:11864:410","`DoubleEndedIterator`":"2:7151:120","str::rsplit_terminator":"2:11907:32868"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:50742:9277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11552:9095","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5372:33537":{"id":"5:5372:33537","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:288:2446","`String`":"5:7230:221"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:2446","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6981:9009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7230:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11855:32863":{"id":"2:11855:32863","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11913:24167":{"id":"2:11913:24167","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11864:410","str::splitn":"2:11910:24165","self::pattern":"2:11547:16199"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:50814:9108","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11552:9095","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11552:9095","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11567:16197","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11951:24170":{"id":"2:11951:24170","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11547:16199"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48695:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11552:9095","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11552:9095","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11567:16197","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11873:30786":{"id":"2:11873:30786","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11874:30788"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:50966:9284","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11945:32879":{"id":"2:11945:32879","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11547:16199"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11552:9095","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11969:32883":{"id":"2:11969:32883","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4502:32883"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:50991:9198","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11872:6569":{"id":"2:11872:6569","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:50678:2210","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11867:32865":{"id":"2:11867:32865","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11870:1369","crate::ops::IndexMut":"2:2997:10974","str::slice_unchecked":"2:11866:32864"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11870:9123":{"id":"2:11870:9123","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11864:410"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:50662:9115","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11887:1962":{"id":"2:11887:1962","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:48697:176","prim@char":"1:11864:410","self::pattern":"2:11547:16199"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48695:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11552:9095","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11898:24161":{"id":"2:11898:24161","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11547:16199"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:11371:9102","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11552:9095","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11871:9294":{"id":"2:11871:9294","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11864:410"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:50668:9275","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1768":{"id":"0:0:1768","crate_id":0,"name":"num_cpus","span":{"filename":"src/lib.rs","begin":[1,0],"end":[459,1]},"visibility":"public","docs":"A crate with utilities to determine the number of CPUs available on the\ncurrent system.\n\nSometimes the CPU will exaggerate the number of CPUs it contains, because it can use\n[processor tricks] to deliver increased performance when there are more threads. This \ncrate provides methods to get both the logical and physical numbers of cores.\n\nThis information can be used as a guide to how many tasks can be run in parallel.\nThere are many properties of the system architecture that will affect parallelism,\nfor example memory access speeds (for all the caches and RAM) and the physical\narchitecture of the processor, so the number of CPUs should be used as a rough guide\nonly.\n\n\n## Examples\n\nFetch the number of logical CPUs.\n\n```\nlet cpus = num_cpus::get();\n```\n\nSee [`rayon::Threadpool`] for an example of where the number of CPUs could be\nused when setting up parallel jobs (Where the threadpool example uses a fixed\nnumber 8, it could use the number of CPUs).\n\n[processor tricks]: https://en.wikipedia.org/wiki/Simultaneous_multithreading\n[`rayon::ThreadPool`]: https://docs.rs/rayon/1.*/rayon/struct.ThreadPool.html","links":{},"attrs":["#![deny(missing_docs)]","#![allow(non_snake_case)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:72:1633","0:73:1651"],"is_stripped":false}},"2:11854:25493":{"id":"2:11854:25493","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11115:16200"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11856:310":{"id":"2:11856:310","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11857:1673","`u8`":"1:11881:1465"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11948:1943":{"id":"2:11948:1943","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11547:16199"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48695:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11552:9095","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5375:25385":{"id":"5:5375:25385","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11968:25258"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7230:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11881:23698":{"id":"2:11881:23698","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11547:16199"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11552:9095","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11847:1978":{"id":"2:11847:1978","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11916:32869":{"id":"2:11916:32869","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48695:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11552:9095","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11936:32874":{"id":"2:11936:32874","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11928:32872":{"id":"2:11928:32872","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11547:16199","`DoubleEndedIterator`":"2:7151:120","prim@char":"1:11864:410","str::rmatch_indices":"2:11931:32873"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:50842:9279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11552:9095","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5355":{"id":"5:5355","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5266:1369","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5356:33533","5:5357:2214","5:5360:33534","5:5363:33535","5:5371:33536","5:5372:33537","5:5373:2238","5:5374:25384","5:5375:25385"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11922:2124":{"id":"2:11922:2124","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11547:16199","`DoubleEndedIterator`":"2:7151:120","prim@char":"1:11864:410","str::matches":"2:11922:2124"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:50896:9281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11552:9095","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11884:23700":{"id":"2:11884:23700","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11547:16199"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11552:9095","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11552:9095","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11567:16197","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:73:1651":{"id":"0:73:1651","crate_id":0,"name":"get_physical","span":{"filename":"src/lib.rs","begin":[108,0],"end":[110,1]},"visibility":"public","docs":"Returns the number of physical cores of the current system.\n\nThis will always return at least `1`.\n\n# Note\n\nPhysical count is supported only on Linux, mac OS and Windows platforms.\nOn other platforms, or if the physical count fails on supported platforms,\nthis function returns the same as [`get()`], which is the number of logical\nCPUS.\n\n# Examples\n\n```\nlet logical_cpus = num_cpus::get();\nlet physical_cpus = num_cpus::get_physical();\nif logical_cpus > physical_cpus {\n    println!(\"We have simultaneous multithreading with about {:.2} \\\n              logical cores to 1 physical core.\", \n              (logical_cpus as f64) / (physical_cpus as f64));\n} else if logical_cpus == physical_cpus {\n    println!(\"Either we don't have simultaneous multithreading, or our \\\n              system doesn't support getting the number of physical CPUs.\");\n} else {\n    println!(\"We have less logical CPUs than physical CPUs, maybe we only have access to \\\n              some of the CPUs on our system.\");\n}\n```\n\n[`get()`]: fn.get.html","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11940:32876":{"id":"2:11940:32876","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11960:32882":{"id":"2:11960:32882","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11547:16199"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11552:9095","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11552:9095","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11567:16197","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11954:32880":{"id":"2:11954:32880","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11547:16199"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11552:9095","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11552:9095","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11567:16197","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11848:32860":{"id":"2:11848:32860","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5371:33536":{"id":"5:5371:33536","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7230:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7230:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11869:24153":{"id":"2:11869:24153","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11868:24152"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11868:24152":{"id":"2:11868:24152","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11869:24153"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11895:1897":{"id":"2:11895:1897","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11547:16199","`DoubleEndedIterator`":"2:7151:120","prim@char":"1:11864:410","str::split_whitespace":"2:11873:30786","str::rsplit":"2:11901:24163"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:50692:2212","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11552:9095","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11966:25256":{"id":"2:11966:25256","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11875:1894":{"id":"2:11875:1894","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:50946:2213","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"20:4904:6160":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:2993:10973":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"1:8926:106":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"20:4174:5673":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlmsgerr"],"kind":"struct"},"2:46918:199":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:6399:2297":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"5:3136:2260":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"20:4095:5666":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:2685:222":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"20:4120:5669":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:9031:34493":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:9283:7423":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:50479:9259":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:9728:219":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"16:6330:8552":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"6:4241:5100":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:48561:11013":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:10704:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:50662:9115":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"1:8987:9605":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"5:964:7035":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:5327:9478":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:9871:2260":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:47587:9213":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"18:652:7232":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:10546:19174":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"5:1058:34385":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"7:32:18010":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"6:4747:10408":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:9526:7104":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"5:864:7043":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:11867:1030":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"6:587:2941":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:11297:9119":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:8871:7407":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:52587:9330":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:3153:16344":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:48822:6637":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:7665:10955":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:3929:11023":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"20:3238:5115":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:4673:11033":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:5514:5667":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:4189:5095":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:22357:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:50896:9281":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:54649:9424":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"16:6619:8605":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:10357:7143":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"5:5774:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"5:3561:8915":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:4404:11046":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"5:1332:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"12:1044:18182":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:4516:5127":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:47749:9223":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:9048:191":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:54591:9419":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:11939:7824":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:8229:10640":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"20:3147:5104":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"18:614:34504":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:48590:10621":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"20:1431:3696":{"crate_id":20,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:4807:10429":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:4401:6675":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:2686:108":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:46874:195":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:641:9449":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:6587:16325":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:7543:32605":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:12485:7901":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"16:5510:8418":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"6:7224:5158":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:21571:9139":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:3346:2199":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:48932:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"12:632:2260":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:8137:19163":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"12:274:10321":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"5:2187:34042":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:51076:16204":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"16:4217:8382":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:2934:2440":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"16:4144:8381":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"16:6719:34486":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:8839:9594":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:10714:9112":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"6:6402:3625":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:2869:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:11343:7705":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"5:7078:6583":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"16:6109:8527":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:47690:9221":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"5:2934:32857":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:13184:8164":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:48890:8915":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:10894:7604":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"16:5703:8442":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:12339:106":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:46757:16253":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"12:1085:8912":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:49252:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:53132:9353":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:3973:11025":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:11885:1461":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:53549:9375":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:11951:7826":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:4216:4976":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"16:5447:8412":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:5556:7126":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"5:1734:7026":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"9:896:18024":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:1436:143":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:3161:2234":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"6:6332:6159":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:2770:11081":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"20:1444:3698":{"crate_id":20,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"16:6690:8358":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"20:3111:5100":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"5:5684:7056":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"16:5596:8427":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"18:548:140":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:10670:7587":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:8499:2262":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"6:1894:3763":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:54345:9414":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:48669:9089":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:361:9443":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:9223:19183":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:21245:9439":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:10088:7529":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:47363:9198":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:12884:8084":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"20:3471:5137":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"6:4389:5115":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:2845:8660":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:6359:1876":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"5:0:283":{"crate_id":5,"path":["alloc"],"kind":"module"},"16:2579:8334":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"20:3154:5105":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"5:3746:7026":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"2:11336:9121":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:2851:16339":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:11315:7695":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:9631:7456":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"6:5845:5700":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:4608:10376":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"18:96:22913":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:10933:7146":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"16:5815:19105":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:22093:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"5:6556:7069":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:11327:7152":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"20:1368:3690":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:22258:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"20:0:802":{"crate_id":20,"path":["libc"],"kind":"module"},"5:1215:8640":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:53235:9355":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:2681:2438":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"5:6996:9025":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"16:6052:8521":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"20:3320:5121":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:50046:9255":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"8:0:2017":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:12008:7838":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:1921:9042":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:8168:2213":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"20:3065:5096":{"crate_id":20,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"16:6842:8637":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:49461:6658":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"12:300:10324":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:10849:25598":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"16:7637:8754":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:3174:16255":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"18:515:7229":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:47347:16278":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"17:11106:7652":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"12:1065:34467":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"5:3628:7035":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:4301:6673":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:11886:775":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"9:505:18168":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"5:7153:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"16:6059:34489":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:9488:7446":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"20:3086:4976":{"crate_id":20,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:47648:9062":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:13158:8158":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"6:6419:6160":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:48839:207":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:10997:7626":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"20:5046:6170":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:3193:31175":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:7953:2227":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"6:0:802":{"crate_id":6,"path":["libc"],"kind":"module"},"1:6528:2298":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"17:10642:19176":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:13492:8263":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:48771:6583":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:13594:8288":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:11813:7791":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"16:6316:8550":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:12134:7855":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:8941:7408":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:22390:9165":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:8595:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:7832:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"18:531:7236":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:11708:7775":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:4083:9049":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:8424:2257":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"6:4669:5677":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:4427:5117":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"12:2178:10326":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:51443:10638":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:47324:16277":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"5:3548:2260":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:7681:9511":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"17:8752:2210":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:12874:8083":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"5:6072:11124":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"20:3209:5112":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"6:4284:5105":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:3240:2232":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:9897:7491":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"20:4781:3621":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:48504:152":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"16:2465:8329":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"5:5208:16182":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"20:4151:5657":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:47252:9185":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:8148:2209":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"18:609:7248":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:12816:8070":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:13148:8155":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"5:2134:10538":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:49172:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:11101:9113":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:11245:10651":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:9930:7494":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"20:1635:3763":{"crate_id":20,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"20:5455:5157":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:11508:2268":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:1786:9455":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:9071:34497":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"9:111:18038":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"2:50966:9284":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:5060:188":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"1:1788:9456":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:12964:8107":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:11787:7787":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:8798:2260":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"6:5682:10469":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:4645:10389":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:47280:9188":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:2751:2494":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:4152:6672":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"1:3985:11027":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:8165:11069":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:2359:2169":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:10466:7569":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:54609:9420":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:9185:9458":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:51423:10633":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:11893:7800":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"5:688:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"16:5839:19106":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:11199:7664":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:6681:16317":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:46984:2146":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:48527:9086":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"9:622:18044":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"6:4310:5109":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:51419:10632":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"5:6271:7035":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:12462:10976":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:7797:2156":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:8981:7409":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"20:5019:6168":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"16:6903:9605":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:49694:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:2863:16342":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:1962:7304":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"16:4849:8401":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"6:4437:5118":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"6:5520:5668":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:50016:144":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"20:4229:5679":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"20:3408:5130":{"crate_id":20,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:4506:5126":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:5122:8404":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:48898:6583":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:39844:2493":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:8105:2179":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:53389:9373":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"5:3148:34002":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:11773:111":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"16:6528:8591":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:7151:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:50668:9275":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"12:2080:8910":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:12215:9131":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:6123:9488":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"16:4262:8383":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"20:1531:3705":{"crate_id":20,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"5:288:2446":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:11884:1464":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"18:113:22914":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:13091:8139":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:12748:8055":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:5378:9481":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:7541:7140":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:4750:11028":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:51431:10635":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"5:4303:7062":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:7865:2224":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:2308:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:9052:6663":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:588:10950":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"16:6463:8578":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:8441:2258":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:2938:2441":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:10824:9514":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:21257:30836":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:11547:7752":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:8155:2210":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"16:8069:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:355:9442":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:47264:30925":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:9722:7469":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:10654:10648":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"16:5494:19103":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:11761:7784":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:5615:5678":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:1649:3700":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:6830:2240":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:53359:9372":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"6:6985:6512":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:1614:3698":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:50956:9283":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"20:4165:5672":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlmsghdr"],"kind":"struct"},"2:3642:6583":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:914:7026":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"1:4671:11032":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:8180:9565":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"16:7288:8730":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"16:6210:8538":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:9044:6660":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"5:6344:6583":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"16:7909:8800":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"20:1522:3704":{"crate_id":20,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"20:1350:3687":{"crate_id":20,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:7622:7144":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:2361:2170":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"6:6534:6168":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:9553:7411":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"6:1601:3696":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:9063:215":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:47527:9208":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:47464:1749":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"6:4621:10381":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"16:5411:8353":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"12:738:8901":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"6:4125:5091":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:6747:11083":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"16:5981:8489":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:49999:9247":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:4229:9053":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"5:1231:8910":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"5:2105:9012":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:11721:7778":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:10462:7144":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:47556:2208":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:11887:1518":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:9857:7487":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:4565:16271":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:39835:9173":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"14:165:18188":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"16:3689:8378":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:9382:2156":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"5:6225:7056":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:10659:2158":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"2:3245:16164":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:51626:192":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"1:621:9446":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:9458:7442":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"12:1840:7056":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:51127:9295":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"16:4721:8397":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"5:4012:8915":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"16:7388:8736":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"6:1713:3707":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"16:7319:8732":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:9092:2189":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:51618:208":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"11:0:2020":{"crate_id":11,"path":["adler"],"kind":"module"},"2:10681:9111":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"2:1638:578":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"20:5485:5162":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:13340:8221":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"5:6157:7073":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"5:7213:9032":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:2674:217":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"12:2069:8909":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:4291:7090":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:13039:8124":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:4166:9469":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:0:487":{"crate_id":2,"path":["core"],"kind":"module"},"7:79:18017":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:7601:9506":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"5:2926:10539":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:6611:9489":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"2:9046:6661":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:47507:9207":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"6:1720:3708":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:52642:9333":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"6:6279:2853":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:9193:34494":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:46843:9176":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"6:5851:1692":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:6440:6163":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:11875:632":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:11014:7630":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:50984:9122":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"18:707:7267":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:10845:7566":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:2156:579":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:11174:7662":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"20:3425:5132":{"crate_id":20,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:8967:9601":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:10121:7531":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:1571:7056":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:20677:11030":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"18:582:2498":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:7956:8368":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:50590:9269":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:12060:7844":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:13413:8242":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"5:1481:9008":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:12756:8056":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:11087:7647":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:2941:2442":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:11161:7660":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:904:7056":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:54015:9411":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:47422:9205":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:8333:11061":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"16:7298:8731":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"16:4749:8398":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"12:834:8905":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:13557:8281":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:7522:7138":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:10796:7594":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:29977:30902":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:11056:2189":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"16:6877:19111":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:5916:203":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"20:3104:5099":{"crate_id":20,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:21351:11030":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:2738:2439":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:6634:30870":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"5:6981:9009":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:939:10960":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:5686:2288":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"6:4639:10388":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:2800:11082":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"16:8056:8813":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:11468:9631":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:50571:9267":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:11594:7758":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:4318:9471":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:2345:186":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:50814:9108":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:47450:9206":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:12630:8014":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"12:2053:8640":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:13192:8165":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:54157:9412":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:2506:132":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"17:13134:8153":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"16:6186:8349":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:4554:11023":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:8884:11075":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"20:55:2539":{"crate_id":20,"path":["libc","unix","DIR"],"kind":"enum"},"1:8117:2182":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"0:72:1633":{"crate_id":0,"path":["num_cpus","get"],"kind":"function"},"1:8921:9595":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:12103:7850":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:10075:9105":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:50742:9277":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:13404:8240":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:13572:8282":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:5313:9477":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"16:2411:8327":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:562:7294":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:8096:2242":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:47304:9190":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"5:1369:2260":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"20:4870:3622":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:7072:16323":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"16:6359:8554":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"6:4485:5122":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:49468:6660":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"6:595:2942":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:8596:7282":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:50600:9270":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:12022:7840":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:48755:2260":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:54675:9426":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"5:36:7031":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"20:3092:5098":{"crate_id":20,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:13047:8125":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"16:6781:8627":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"20:4806:6158":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"20:3059:5095":{"crate_id":20,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"6:5730:10489":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"6:4459:5120":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:4267:5103":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:9274:7421":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"19:0:1012":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"5:4172:2260":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:54690:9427":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:10490:7571":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"6:7218:5157":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:10385:7559":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"20:1355:3688":{"crate_id":20,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"20:1361:3689":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:11871:1447":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"17:9475:7445":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:847:2260":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:8272:19167":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:10113:9106":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"20:1537:3706":{"crate_id":20,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:47978:9077":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"6:4663:5673":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:9627:7455":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"20:3257:5116":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:4568:10190":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"17:11259:7677":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:6075:7114":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:2944:2443":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:11074:10650":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:11882:1462":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"18:719:7271":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:4224:9052":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:20408:30941":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:50692:2212":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"16:5628:8432":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"6:4408:5116":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:12361:7899":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"6:1701:3705":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"20:4887:3625":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:11233:9502":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"12:2198:10330":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:51435:10636":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:487:7293":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"6:474:2926":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:9764:7474":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"16:4297:8384":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"5:7005:7056":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"6:5605:5676":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"5:4887:2199":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"16:5472:8352":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:962:8908":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:7857:9516":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"5:5212:16183":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"5:7230:221":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:1849:9459":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"6:562:2937":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:8526:7280":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:22126:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"16:7166:19112":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"5:6575:7081":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:1771:599":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:4632:11046":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:21766:9160":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:0:1361":{"crate_id":1,"path":["std"],"kind":"module"},"6:6963:2886":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:9250:7419":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:12198:7874":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:12514:7921":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:2775:8653":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"6:1692:3704":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:10973:7625":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"14:40:7626":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"6:554:2936":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:9738:7471":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"14:221:8896":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:3430:2183":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:9050:6662":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"6:4106:5089":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:47994:9078":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:4726:5136":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:7809:2159":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"5:6585:7083":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"1:870:6583":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:53054:9351":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:47434:30900":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:9433:7439":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"16:6270:8350":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:1674:1068":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:9831:7482":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:8234:11043":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:29963:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:20431:30944":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:9040:6658":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"16:7469:8365":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:47677:9068":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"20:2976:5089":{"crate_id":20,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"5:3169:8921":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:12739:8054":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"5:2095:7050":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:8814:6583":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:10608:7373":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"6:6555:10516":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:52290:9318":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"20:1472:3699":{"crate_id":20,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:51427:10634":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:5755:2296":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:7275:25741":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"17:10721:7591":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"6:1524:10349":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:2341:8324":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"20:4107:5668":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:1065:8909":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"20:4278:1692":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:21654:9146":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:51699:9317":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:547:2935":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:11125:7653":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"6:1506:3687":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:50508:9263":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:10583:19175":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"5:1461:8899":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"18:507:7232":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:53659:9378":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"16:7890:8797":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:51661:9312":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"18:644:7232":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"12:444:141":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:3126:28197":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:8162:19164":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:50842:9279":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"5:1094:34386":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:12176:7863":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:2824:16336":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:6178:7126":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:1645:6528":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:9303:7428":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"6:6385:3622":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:4756:781":{"crate_id":2,"path":["core","iter"],"kind":"module"},"5:6990:6583":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"12:98:10320":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:47294:9189":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"6:4736:5137":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"12:815:8902":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:2231:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"1:7473:7294":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:56610:11122":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"2:50558:9266":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:9317:7429":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"20:3334:5122":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:506:2931":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:3991:9048":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"5:1400:6583":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"20:4193:5676":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"20:1574:3710":{"crate_id":20,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:11371:9102":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:21093:11113":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:5563:7127":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"12:751:7056":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"20:4042:5642":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:3772:9467":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:2688:225":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:57019:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"20:4943:6164":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:2461:16283":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:7584:11030":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:22027:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"16:2300:8317":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:12674:8044":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:8418:19172":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"5:1450:8898":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"5:3689:9011":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:11070:7645":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:47064:9183":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:48780:6641":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:2829:16337":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"13:226:10319":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:52979:9349":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"20:4919:6162":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"20:3187:5110":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:2580:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:10950:7148":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:9526:7448":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:11870:1369":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"16:6070:8524":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"20:4180:5674":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:5963:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:49745:109":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"12:1555:8918":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:920:8916":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:11485:7736":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"5:7137:2153":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"5:3203:8922":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"6:6312:10512":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"6:4327:5111":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"16:2557:8333":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:9068:216":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:8393:19171":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"6:6303:2811":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:4888:8402":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"15:175:18200":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"20:1416:3695":{"crate_id":20,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:2693:2490":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"6:4778:5139":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"5:4366:7062":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"12:1518:18183":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:9293:7426":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"16:5780:8455":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:10528:7578":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:8240:9569":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:4296:5107":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:6827:7151":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","fast","Key"],"kind":"struct"},"20:4077:5665":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:22159:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"17:11909:7805":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:10168:9108":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"16:2389:8326":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:4246:9470":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:9328:7430":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:11203:9499":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:10630:9618":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:2234:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"18:590:7242":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:4115:11042":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"16:5996:8491":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:20376:30831":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"2:2500:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"12:822:10960":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:54638:9423":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"20:5479:5161":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:48633:9238":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"20:582:2941":{"crate_id":20,"path":["libc","unix","servent"],"kind":"struct"},"6:7008:6513":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:1564:2260":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:8868:11074":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:47370:9199":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:57006:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:10420:7563":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:10360:7550":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"2:51009:9191":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"16:2993:8369":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:10822:19177":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:47034:9181":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:13203:8169":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"20:3276:5117":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:12349:7892":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:7819:2160":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"20:527:2933":{"crate_id":20,"path":["libc","unix","hostent"],"kind":"struct"},"17:12211:7875":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"16:4689:8396":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"3:0:434":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"1:7873:2226":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"5:3177:8919":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:12836:8078":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"5:5883:2199":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"5:3107:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:679:10957":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"1:5014:9476":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:3677:2226":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:22225:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"6:4575:5133":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"16:153:7017":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:9371:7412":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:4709:6514":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"1:3963:11024":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:49092:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:54469:9416":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:2339:179":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"6:6362:3650":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"16:3599:8376":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"20:1386:3692":{"crate_id":20,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"6:482:2927":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:10138:11072":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"16:7343:8364":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:53155:9354":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:8666:7284":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:51608:202":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"20:1398:3693":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:8271:9095":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:8167:9094":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:11029:1931":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:14:2127":{"crate_id":2,"path":["core","write"],"kind":"macro"},"6:6321:6158":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:5432:9482":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:48831:190":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:4983:9476":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:8494:7398":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:12073:7845":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"6:1531:3689":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"16:7483:8366":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"16:6284:8367":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"20:1543:3707":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"6:4537:5129":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"16:2930:18247":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:12860:8082":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:13126:8150":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"20:3489:5139":{"crate_id":20,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"5:836:7041":{"crate_id":5,"path":["alloc","collections","binary_heap","retain","RebuildOnDrop"],"kind":"struct"},"1:6576:214":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:891:8901":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:49831:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"14:202:16216":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"5:4103:2199":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:2345:2165":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"16:7511:8740":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"5:781:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:12278:7882":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"16:4441:8389":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:8762:9589":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:10207:7536":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"20:549:2936":{"crate_id":20,"path":["libc","unix","winsize"],"kind":"struct"},"16:2771:8342":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"16:6345:8355":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:878:8900":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:9263:7420":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:9339:7432":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:12909:8093":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:6542:2299":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:12265:7881":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:3283:2220":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:8185:11011":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:8796:7400":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:13100:8140":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:46898:196":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:9895:8915":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"16:7278:8361":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:47760:2209":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:52933:9347":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:52334:9320":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:3979:9047":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:11846:25597":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"16:6790:8630":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:11974:7835":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:9509:7103":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"6:5551:5671":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"16:0:2024":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:8932:9598":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"20:3080:1884":{"crate_id":20,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:11037:10639":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"17:12850:8081":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"6:1511:3688":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"20:495:2930":{"crate_id":20,"path":["libc","unix","rlimit"],"kind":"struct"},"17:10434:7564":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"20:3308:5120":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:3051:2243":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"2:54713:9428":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:11606:7760":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:3159:2233":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"0:73:1651":{"crate_id":0,"path":["num_cpus","get_physical"],"kind":"function"},"2:9038:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"20:5467:5159":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:2217:1958":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"16:2282:8315":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:9108:7412":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"16:6654:8609":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:1762:9038":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"18:699:7265":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:52624:9332":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"20:4824:2720":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:49757:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:47569:9211":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:7174:2444":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"9:709:2256":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:4064:29728":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"16:6017:8505":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"17:11536:7749":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:7849:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:9001:25602":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:11511:9503":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:39795:10329":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"16:2842:8345":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:21639:30930":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:9982:9457":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"17:10283:7545":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:10310:7547":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"6:1707:3706":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:484:7116":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"9:188:18073":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"18:636:7254":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:4339:5112":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:21:668":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"6:4550:5131":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"12:393:34470":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"20:3226:5114":{"crate_id":20,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:494:2929":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:12980:8111":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:13221:8172":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:5679:31330":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"3:223:207":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"20:4069:5664":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"5:7184:30900":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:2825:8344":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"6:5782:10504":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:10001:26984":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"2:52535:9328":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:3208:16163":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:54515:9417":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"16:6161:19107":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:2210:2157":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:8881:34500":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:3123:28186":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:10506:7573":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:9539:7449":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"6:4615:10378":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:21679:30926":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:6322:9489":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"6:5759:10498":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"16:6171:8534":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:8991:34501":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:10221:7540":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:50545:9208":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:10002:9103":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:2594:127":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"6:4693:10403":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:10182:9109":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:8483:2259":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"20:4995:6166":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:2910:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:12046:7843":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"12:697:8899":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"16:6137:8529":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:8510:2263":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:7943:9517":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"6:4708:5134":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:11889:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:53101:9352":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"6:5564:5657":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:4820:10434":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:2460:11030":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:10774:7309":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:13214:8170":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:10520:7576":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:56967:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:10139:7411":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:48972:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:11869:1339":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"20:4925:6163":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"9:586:10333":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"1:3448:2181":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:4355:6674":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:47788:9074":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"5:2923:6630":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"20:521:2932":{"crate_id":20,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:13007:8115":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:4771:5138":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:47971:9076":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:11054:7641":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"5:2425:10543":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:2503:147":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"6:4257:5102":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:9256:140":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:10419:2235":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"12:1138:8914":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:49292:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"9:863:18023":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:11864:410":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"16:7929:8801":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:2831:7123":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"6:1568:3693":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:1989:181":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:25599:9036":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:9033:111":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:47668:9067":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"20:5461:5158":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"6:541:2934":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:7109:133":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:3163:231":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"6:5871:5701":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:46796:16166":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"2:47700:9222":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"20:3414:5131":{"crate_id":20,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:6475:2294":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"16:6593:8604":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:11251:10652":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:47774:9073":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"16:2793:8343":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"20:1550:3708":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:5495:11070":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:10828:8987":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:3373:1875":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:3865:11019":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"6:5490:5665":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:50991:9198":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:3201:2236":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:1898:9460":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:2371:2175":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"20:2982:5090":{"crate_id":20,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"20:4910:6161":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:50498:9262":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"6:4591:10365":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:1753:10549":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:11267:7151":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"6:5635:10444":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"16:6829:8634":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"6:4201:5097":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:4566:10188":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"17:12781:8066":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:53471:9374":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:6498:6589":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"6:500:2930":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:12142:16288":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:9778:7475":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"16:6567:8603":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:13536:8278":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"6:5597:5675":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:12407:139":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"6:123:2616":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:11997:7836":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"20:4101:5667":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"16:7452:195":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:11830:25758":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:9350:7393":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:413:162":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"5:1472:195":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:4564:10186":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"16:6123:8347":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:925:8898":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:9681:7353":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"12:1029:8910":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"12:646:8915":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:9844:7485":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"20:3451:5135":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"5:5008:2285":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:9021:7410":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"20:3355:5124":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Chdr"],"kind":"struct"},"1:860:8915":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"5:1440:8916":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"16:4662:8395":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"20:3166:5107":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:7372:34487":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:2916:7305":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"16:5374:8348":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"16:7426:8737":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"5:7324:7076":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:11218:9500":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"5:273:7035":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:3090:10975":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"18:766:22924":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"16:6676:8357":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"6:4675:10392":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:57045:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:10497:19284":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"12:762:7026":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"16:7044:34488":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"6:1547:3691":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"6:7289:10536":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:20597:11094":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:10867:9591":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"16:7357:8733":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"16:7543:8354":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"6:4561:5132":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:13279:8214":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:5549:203":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:13366:8230":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:4:996":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"16:6704:8613":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:10694:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:6363:2291":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:53595:9376":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:54805:9432":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:7802:2158":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:21700:30915":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:8278:2720":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:50250:9100":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:950:8905":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:20810:11086":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"17:9577:7453":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:3915:11021":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"6:5544:5670":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"4:0:2016":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"6:5670:10465":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"20:3197:5111":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:8992:131":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:7948:9518":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"6:4317:5110":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:1556:3692":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:8368:19170":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:9061:7411":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:4835:11053":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:52835:9344":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:53003:9350":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:11853:7796":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:8241:19166":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"20:4298:5701":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:7502:10963":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:50038:9254":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:12955:8106":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:8590:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:49718:130":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"6:4525:5128":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"0:0:1768":{"crate_id":0,"path":["num_cpus"],"kind":"module"},"2:2780:8650":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"17:9644:7457":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:49454:6659":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"16:7980:19116":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:12307:7885":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"18:755:7279":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:2868:16343":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"5:1630:7035":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"6:5702:5123":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"16:4921:8403":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:12237:7877":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:20836:11091":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:53313:9371":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:1597:8922":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:54664:9425":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:20391:30831":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"9:0:2018":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:10350:7309":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:51219:9125":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:12768:8061":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:52765:9342":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"16:5203:7398":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:20685:11089":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:11576:7757":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:13506:8270":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:50470:9258":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"6:4222:5098":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:3316:2241":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"20:3482:5138":{"crate_id":20,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:8174:9563":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"16:7659:19115":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:13374:8233":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"16:5949:8484":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"6:652:2960":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:39831:9172":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"1:2213:2161":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"5:1422:8900":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:8493:2260":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:51499:16464":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:1580:8919":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:11412:9467":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"20:614:2960":{"crate_id":20,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:12322:7889":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"13:110:34473":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"6:1580:3694":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:2765:11079":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:50007:9248":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"9:920:18025":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:50946:2213":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"16:5541:8423":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:50796:9107":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"5:1260:8914":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"6:6489:6165":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"16:5219:7399":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:48027:9082":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"20:4817:6159":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:579:2940":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:5492:2664":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:9270:144":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:6091:7132":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"6:5453:5642":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"16:3402:8374":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:11137:7656":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:54743:9430":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:51487:9309":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"6:5533:5669":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:11436:7711":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:48681:9091":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"12:659:6583":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"16:3632:8377":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:2683:8338":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"6:488:2928":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:47341:9046":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:5509:9061":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"6:1674:3702":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:10374:7555":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:11017:9590":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:1903:19215":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:11093:9493":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"1:3670:9466":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"20:5033:6169":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","termios2"],"kind":"struct"},"2:29901:6531":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"12:777:7028":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"5:881:2260":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:11217:7672":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:8300:9472":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:4893:11060":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:10532:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:10154:9107":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:10752:7592":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:9920:2212":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"1:1575:7026":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"20:3286:5118":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:38639:2498":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"18:671:7261":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"20:4185:5675":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:20648:11085":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"16:6034:8511":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:7122:2445":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:9446:7440":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"16:3457:7319":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"6:5743:10493":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"5:1431:8901":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:4149:5093":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:9186:9098":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"17:3249:7308":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:9791:7476":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:51324:9126":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:5679:2287":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"16:7249:8719":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:1074:8910":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:8138:2208":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"5:6742:7086":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"16:7059:6641":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:7506:16321":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"16:7117:34490":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:7704:9514":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:49779:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"20:5473:5160":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:21662:9147":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:21353:11088":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:11828:7794":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:54267:9413":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:8744:9588":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:20726:9133":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"20:483:2928":{"crate_id":20,"path":["libc","unix","timeval"],"kind":"struct"},"6:4814:10432":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:50975:9285":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:11572:16196":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:10625:7585":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:47497:7092":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"20:4773:2853":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:11877:729":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"17:247:7288":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"16:3263:8373":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"16:4545:8391":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"16:7211:8459":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:967:7295":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"6:4234:5099":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"20:1436:3697":{"crate_id":20,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"16:2433:8328":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:51113:9292":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"20:5417:2886":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:13580:8285":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:4249:5101":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"20:3348:5123":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Chdr"],"kind":"struct"},"1:6884:26902":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:8401:2256":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:4110:9051":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:47043:8698":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"17:13031:8123":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:48813:6642":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:12896:8087":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:13024:8122":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"16:3854:8380":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:10209:9481":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:1847:9458":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:3439:29954":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:2786:16332":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"6:5792:5679":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:7176:6169":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:9820:7481":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:638:9447":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:47616:9058":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:5712:2289":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:10724:25595":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:5172:187":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:11567:16197":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:4112:5090":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:52565:9329":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:3977:11026":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:8701:7285":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"16:7237:8718":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"20:557:2937":{"crate_id":20,"path":["libc","unix","linger"],"kind":"struct"},"2:51281:9299":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"6:4569:10360":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"7:0:1508":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:11873:7799":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:4654:5672":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"16:7497:8356":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:11879:731":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"6:5751:10495":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:5903:9063":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"16:7970:8806":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:52787:9343":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"16:2657:8337":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"6:5709:10476":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:4277:5104":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"6:4377:5114":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"5:2654:10546":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"5:1999:2226":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"6:1606:3697":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:10040:9104":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:48746:6582":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"20:3137:5103":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:11515:7745":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"17:1931:7301":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:13141:8154":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"20:574:2940":{"crate_id":20,"path":["libc","unix","tms"],"kind":"struct"},"2:51415:10631":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:10422:2231":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:50636:9271":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:11186:7663":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:10245:7542":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:10270:7544":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:8089:2240":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:20429:30946":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:11868:308":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:50710:9105":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:7499:2267":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:8822:34496":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"20:3032:5094":{"crate_id":20,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"6:4716:5135":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"16:7396:19113":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:8852:11073":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:242:7287":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"16:7135:34491":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:13393:8239":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:11356:7706":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:54618:9421":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"9:19:18093":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"2:21550:9137":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"17:11300:7689":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"16:6376:19108":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:3026:7315":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:8911:34499":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:9909:7492":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:12118:7854":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:11734:7499":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:12291:7883":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:2476:1874":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:8055:19152":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:9427:7100":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"5:7170:9027":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:52689:9334":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:11486:10654":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:9671:7459":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:47739:9071":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"6:4195:5096":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:52356:9321":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"16:2605:8335":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:52735:9341":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:12190:189":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:1927:11005":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:10714:2179":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:49012:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"18:660:7255":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:12972:8109":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"16:2631:8336":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:13176:8162":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"16:6472:8579":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:1824:9457":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:12695:8049":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:2208:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:47050:9182":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"6:5592:5674":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:11147:7149":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:2513:234":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"6:4631:10384":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"5:7200:9030":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:50914:9282":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:49332:2286":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:48000:2241":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"20:2995:5091":{"crate_id":20,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"20:1479:3700":{"crate_id":20,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"20:5494:6515":{"crate_id":20,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"20:1504:3702":{"crate_id":20,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"16:2868:8346":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"6:62:2539":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"6:4755:10410":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:8774:7289":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"6:1728:3709":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:11149:7657":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:9310:9099":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:11500:7740":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"18:0:2026":{"crate_id":18,"path":["memchr"],"kind":"module"},"20:4138:5671":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"20:542:2935":{"crate_id":20,"path":["libc","unix","pollfd"],"kind":"struct"},"16:5664:8439":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:11552:9095":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"20:4272:5700":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:2573:2216":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:8351:2246":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:4346:7091":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:48646:9468":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:10075:7527":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:2796:11080":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:20363:2498":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:48019:9080":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"6:4371:10358":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:2725:2492":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"12:60:34468":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:9873:7489":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:10233:7541":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"6:7259:5162":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:2792:8654":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:2997:10974":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:7034:29725":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:50678:2210":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:49727:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"17:1021:7296":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:4730:32530":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:8274:9573":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"5:7307:7026":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"1:7484:9632":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:11881:1465":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"20:1410:3694":{"crate_id":20,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:6816:8631":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:4375:2330":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:10051:9609":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"6:4136:5092":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:46962:200":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:53625:9377":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:48763:8915":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:52881:9345":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"6:526:2932":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:8561:7281":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:5347:9479":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:11288:7686":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:11260:9116":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"20:489:2929":{"crate_id":20,"path":["libc","unix","timespec"],"kind":"struct"},"5:4133:2199":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"20:3019:5093":{"crate_id":20,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:20623:11095":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"12:1852:8919":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"20:5439:6512":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:58320:9440":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"2:49052:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:10684:2159":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"1:5240:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:12163:31424":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"5:7051:9026":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:3934:2199":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"16:5525:8421":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"6:5578:10443":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"14:7:8889":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"12:353:7024":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:5432:9059":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:47384:16279":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:3379:16235":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"5:3765:7035":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:9601:7454":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:52310:9319":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"6:4602:10373":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:11661:7769":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"12:1003:8909":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:11330:7701":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:1771:7297":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"6:4345:5113":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:929:8899":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"20:1558:3709":{"crate_id":20,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:12381:202":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"9:33:18094":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"16:6298:8542":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"16:7567:19114":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:3605:11014":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:47057:6673":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"2:2684:223":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"6:6425:6161":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:4574:8392":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:50419:9257":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:21778:11016":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"16:6146:8530":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:4786:8399":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:3923:11022":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"5:5810:16670":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"20:536:2934":{"crate_id":20,"path":["libc","unix","iovec"],"kind":"struct"},"12:1836:6583":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:9119:26868":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","fast","DtorState"],"kind":"enum"},"12:861:8908":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:10649:10646":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:20829:11030":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"5:632:9003":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"20:3160:5106":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"16:3566:8375":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"20:1514:3703":{"crate_id":20,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:47597:9215":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"14:215:8894":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:9885:7490":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:51256:9298":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:9183:7414":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:10403:7592":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:3125:7307":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:58341:9441":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"16:6743:19110":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:10159:7533":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"16:6517:8590":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:2817:8655":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:1476:1656":{"crate_id":2,"path":["core","mem"],"kind":"module"},"17:8212:19165":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:51669:9314":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"12:1845:7026":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"2:47657:9220":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:8776:9590":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:12148:7857":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"20:4797:2811":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"20:1377:3691":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:7596:9504":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:4498:11050":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:4356:10351":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"5:7043:195":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:11235:7673":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"16:7872:8795":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"6:1660:3701":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:3391:9045":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"1:1051:8640":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:9118:34498":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:30035:30908":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"5:679:228":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:47237:9046":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:52464:9325":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:9422:7438":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"6:4290:5106":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"20:3071:5097":{"crate_id":20,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:11528:7747":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"6:4700:984":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:56980:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:21716:30929":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:13382:8234":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:51270:16209":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:11618:16206":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"12:1859:8920":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:7650:10953":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:7076:16322":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"16:4385:8387":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"5:6673:241":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:49132:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:1083:8914":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:9963:9102":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"14:31:8889":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"18:624:34506":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"6:6434:6162":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"16:6668:8611":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"16:5737:8300":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:48009:7098":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:51411:10630":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"16:2487:8330":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:9155:7413":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"18:80:22912":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"6:4304:5108":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:7792:2155":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:558:9445":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"16:8014:8698":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"5:4288:242":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:13082:8136":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:12033:7841":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:2549:7104":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:11706:7156":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:9165:34502":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:0:2025":{"crate_id":17,"path":["object"],"kind":"module"},"1:9387:7142":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:47607:9056":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"12:725:8900":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:5999:7128":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"17:12550:7952":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"12:853:8907":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:3199:2235":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:47417:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:50488:9261":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:50860:9280":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"12:320:7022":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:11547:16199":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"17:12087:7848":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:11368:7709":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:9375:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"17:13354:8227":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:3328:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:3168:134":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:420:7292":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:9805:7477":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"5:5164:7035":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"12:1866:8921":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"20:3127:5102":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:47985:1876":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:11005:9589":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:9947:19257":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"5:5794:2285":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:956:8907":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"16:4519:8390":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"20:3363:5125":{"crate_id":20,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:4026:16162":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"10:0:2019":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:6890:2280":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"16:2705:8339":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"16:7557:8742":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:4426:11047":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:52504:9327":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"18:574:7232":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"9:800:10335":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"16:6252:8541":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:21745:10554":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:6339:2720":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:9073:9493":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:21603:9140":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"20:477:2927":{"crate_id":20,"path":["libc","unix","utimbuf"],"kind":"struct"},"20:3433:5133":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:50519:9264":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:2855:16340":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:11835:10958":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:8763:32155":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"6:7265:10531":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:734:141":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:47016:9180":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:47578:9212":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"6:5508:5666":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:7229:156":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:9305:16290":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:8758:32604":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:13459:8256":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"5:5618:229":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:50231:9256":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:10455:7568":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:7585:9444":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:12129:135":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:2859:16341":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:10062:7526":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"16:2894:18246":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:9401:7436":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:51304:9307":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"16:4413:8388":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"6:6564:6170":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"5:2930:32856":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"6:5694:5124":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"5:3537:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"16:2367:8325":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"12:2184:10327":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:2834:16338":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:10314:9588":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:11271:7678":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:30141:30931":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"17:10682:7588":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:4844:11054":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"9:382:18128":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:10949:7611":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:10672:9623":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"20:1490:3701":{"crate_id":20,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:49991:9245":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:1592:8921":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"15:0:2023":{"crate_id":15,"path":["addr2line"],"kind":"module"},"18:564:7241":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:29935:6532":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"6:568:2938":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:52380:9322":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"16:6200:8537":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"16:5433:8408":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:13518:8272":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:10875:7601":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"20:3296:5119":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:4499:5125":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"15:214:18205":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:52486:9326":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"6:4585:10362":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"20:3401:5129":{"crate_id":20,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:12617:8007":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"16:2749:8341":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"16:7267:8727":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"5:2924:34045":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"20:4131:5670":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:7276:10535":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:2808:16333":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:1554:2199":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"6:7253:5161":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:1586:3695":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"16:6865:8639":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:20805:11030":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"16:5163:8405":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:8056:2178":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"1:534:7117":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"17:9362:7411":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:11748:7783":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"6:1517:10346":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:2804:16334":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:11865:1481":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:9751:7473":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:8631:7283":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:6286:163":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:20560:11093":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"16:4635:8394":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"5:4333:2199":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"16:7309:8362":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:11774:7786":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"5:1074:34046":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"20:469:2926":{"crate_id":20,"path":["libc","unix","group"],"kind":"struct"},"2:10196:9110":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:51000:9046":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:9877:9235":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"6:7247:5160":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"14:187:18195":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"16:6496:19109":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"9:977:8990":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:47725:7252":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:21587:10551":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"16:3010:18248":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"16:7603:8750":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:47625:9216":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:11878:730":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:53809:9379":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"16:4817:8400":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:12251:7878":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:386:7290":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"16:3716:8379":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:4094:11040":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:2539:2223":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"18:538:7239":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:48544:9088":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:21088:11090":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:8790:9591":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"18:491:7231":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:56993:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:12638:8015":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"20:3119:5101":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"20:3380:5127":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:47709:9069":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"16:5558:19104":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"6:1744:3710":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:52911:9346":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:9712:7468":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:10837:9482":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:9658:7458":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:54766:9431":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:5482:5664":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:6287:3621":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:22291:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"16:4606:8393":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"5:7013:7047":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:11518:9503":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:8222:9468":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:8510:7399":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"12:2205:2152":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"6:4826:10437":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"16:4357:8386":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:7299:6515":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"12:810:8916":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:2303:185":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:4727:7124":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"13:0:2015":{"crate_id":13,"path":["std_detect"],"kind":"module"},"6:6519:6167":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:6472:2293":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:10708:7589":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:11883:1463":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:22192:9164":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"16:6735:8616":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:3180:16254":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"5:219:7033":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"16:7847:8792":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:8256:9571":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"20:4847:3650":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"18:690:7264":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:51439:10637":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:11034:7640":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:2682:2489":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:51192:9297":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:20636:11030":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"2:51682:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"12:2190:34466":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:7671:9454":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"17:11639:7768":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:46940:198":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"18:481:7230":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:933:8902":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:11862:367":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"17:12926:8098":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:10296:7546":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"12:119:7020":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:12948:8104":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:9700:7464":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:20410:30943":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"20:3443:5134":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:51447:10639":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"5:6423:7035":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"5:7021:34003":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"11:36:10332":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"2:48695:178":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"9:827:18119":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:54553:9418":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:50246:10629":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"6:6510:6166":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:1586:8920":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"18:599:34503":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:9052:164":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"16:5793:8306":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:50650:9274":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"5:2207:10542":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:11115:16200":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:3455:1873":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"17:10257:7543":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"20:4209:5678":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:5363:9480":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:11874:631":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"6:4788:10415":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:51291:9303":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:2812:16335":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:7236:10527":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:8979:9603":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"6:4162:5094":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"5:4791:201":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:6926:7136":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:7113:149":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:13527:8276":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:20679:11087":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"12:1120:8913":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"18:736:22923":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"18:727:7274":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:9042:6659":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:54728:9429":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"9:592:18043":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"2:2923:2215":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"20:3461:5136":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:49475:6661":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:12934:8101":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:9382:7435":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:2839:8659":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:11320:9120":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:47243:9184":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"5:3182:34001":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:10394:7560":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:2867:207":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"1:8974:9602":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:11863:921":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:10944:7147":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:52434:9324":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:8441:19173":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:13059:8131":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:11684:7774":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:1642:3699":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"20:590:2942":{"crate_id":20,"path":["libc","unix","protoent"],"kind":"struct"},"17:12225:7876":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:13231:8177":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:9111:9607":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:57032:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:532:2933":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"5:1384:8915":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:11880:727":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:10921:7605":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:9022:10642":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:1739:16368":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:8475:19151":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:8820:9483":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:13436:8255":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"6:4683:10397":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:13327:8215":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:51711:8924":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:4003:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"5:7035:6583":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:8750:183":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:54629:9422":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"20:4974:6165":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"20:501:2931":{"crate_id":20,"path":["libc","unix","rusage"],"kind":"struct"},"17:13071:8132":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"14:0:2022":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"16:5460:8417":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:8166:11068":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"20:138:2616":{"crate_id":20,"path":["libc","unix","fpos_t"],"kind":"enum"},"20:563:2938":{"crate_id":20,"path":["libc","unix","sigval"],"kind":"struct"},"2:50580:9268":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"5:3295:7026":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"12:1832:2260":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"11:44:8925":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"5:784:7038":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:10476:19283":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"6:573:2939":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"6:5723:10487":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:2509:235":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"6:5886:10506":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"9:956:18026":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"16:5235:8406":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:29941:6533":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"16:5878:18219":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:9501:7428":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"6:119:2615":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:22060:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"16:5388:8351":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:47403:9204":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"18:521:22925":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"5:2013:9011":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:4669:11029":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:46858:197":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:51466:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:12164:7861":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"12:985:8640":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:21752:9159":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"5:3971:7035":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"5:7241:9033":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:2254:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1:505:7050":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"15:193:18201":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:4102:11041":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:49712:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"12:0:2021":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"2:4220:204":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:11085:16422":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"5:3941:7056":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:6582:6171":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:21497:9136":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:11888:1105":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"20:134:2615":{"crate_id":20,"path":["libc","unix","FILE"],"kind":"enum"},"2:49815:6657":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"20:568:2939":{"crate_id":20,"path":["libc","unix","itimerval"],"kind":"struct"},"17:8951:34495":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:6226:203":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"20:3215:5113":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"16:7942:8804":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"16:2509:8331":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:48882:2260":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:22789:9035":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"6:6548:10513":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"17:11617:7761":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:1827:9041":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"16:2727:8340":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:11800:7789":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:9691:7461":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"9:676:18031":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"2:47547:9210":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:12797:8069":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"20:3180:5109":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"6:1684:3703":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:2975:16165":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:1568:6583":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:50760:9278":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:21444:9135":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:29715:11015":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:1986:182":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"16:2535:8332":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:12609:8004":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:8982:2183":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:8339:19169":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"5:7125:2152":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:47377:9200":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"20:3006:5092":{"crate_id":20,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:51144:9296":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:21627:9145":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"9:649:18045":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"16:4327:8385":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"6:1538:3690":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:49212:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:2613:2225":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:13114:8147":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"12:1681:143":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:10445:7566":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"12:1872:8922":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"1:11164:9495":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:11350:9465":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"12:387:34469":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:8944:25601":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:11561:7267":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:4210:1884":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:10182:7534":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"16:7329:8363":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:12730:8050":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:4629:11055":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"16:5184:18218":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:8248:9563":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:13168:8161":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"16:3188:8372":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:8295:19168":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:7688:10984":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"17:10321:7548":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:10854:19178":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:11559:7754":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:3667:9465":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"20:5447:6513":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:11170:9630":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"20:3174:5108":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:5737:10490":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:48907:180":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:7708:9172":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"17:13478:8261":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"5:5460:7069":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"16:5761:8448":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:47316:9191":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"5:6717:7073":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"12:1628:7029":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:11391:9466":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"5:7072:6583":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:2497:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:20838:9133":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:8161:2212":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:8806:9593":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:8110:19150":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:11841:7795":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"14:160:8889":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"16:7825:8791":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:51098:9287":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:3391:2180":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:5900:7126":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:48610:30935":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:3120:26825":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"5:1246:8909":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"16:534:8304":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:8981:207":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"2:54407:9415":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:52957:9348":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"16:2261:18220":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:3238:2231":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:4364:10356":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:3508:7056":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"12:669:8898":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:9718:11030":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"20:5004:6167":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:4471:5121":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:11876:732":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"12:1534:8917":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"16:7435:8738":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:12350:7114":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:10108:7530":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"20:3370:5126":{"crate_id":20,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:2343:2164":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"5:3143:8920":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"16:7093:8677":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"20:5064:6171":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:646:10956":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:50028:2256":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"6:7230:5159":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:10416:2233":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"6:4447:5119":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"16:5614:8431":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:12337:7566":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"6:4544:5130":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:9541:7109":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:4086:11039":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:47639:9219":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"18:681:7262":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:52605:9331":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"16:2320:8323":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"16:6241:8540":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:3871:11018":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"20:4203:5677":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlattr"],"kind":"struct"},"1:8907:2290":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:52402:9323":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"5:7252:9034":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:10332:19282":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"20:3389:5128":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:8814:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"17:11247:7676":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:38622:180":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"6:6458:6164":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"6:6991:10519":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:10226:26981":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:3901:11020":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:22324:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"}},"external_crates":{"20":{"name":"libc","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}