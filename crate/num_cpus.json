{"root":"0:0:1741","crate_version":"1.13.1","includes_private":false,"index":{"2:3492:116":{"id":"2:3492:116","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3493:221","2:3494:543"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10440:109":{"id":"2:10440:109","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10441:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6092:2177":{"id":"5:6092:2177","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:7772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13697:52361":{"id":"2:13697:52361","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5811:7335":{"id":"1:5811:7335","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5812:53989"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10589:7313","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:22963:7921":{"id":"2:22963:7921","crate_id":2,"name":"SimdInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22964:7683","2:22965:56861","2:22966:1227","2:22967:1228","2:22968:4809","2:22969:56898","2:22970:56899","2:22971:56900","2:22972:56901","2:22973:56902","2:22974:56862","2:22975:56863","2:22976:56864","2:22977:56865","2:22978:56866","2:22979:56867","2:22980:56868"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3279:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23012:7313","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13580:58344":{"id":"2:13580:58344","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13656:58353":{"id":"2:13656:58353","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"str::matches":"1:15992:2002","`DoubleEndedIterator`":"2:8591:120","self::pattern":"2:13202:7771","prim@char":"1:15986:1997"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:49813:8050","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:7772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13212:7772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13227:7770","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3278:217":{"id":"2:3278:217","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13703:58366":{"id":"2:13703:58366","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:15986:1997"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:49908:8056","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3505:2178":{"id":"2:3505:2178","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3506:545"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Deref","id":"2:3492:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13676:58361":{"id":"2:13676:58361","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:15986:1997","self::pattern":"2:13202:7771"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:7772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13612:52454":{"id":"2:13612:52454","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:15986:1997","self::pattern":"2:13202:7771"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:7772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13600:52438":{"id":"2:13600:52438","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:15992:2002"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13653:2077":{"id":"2:13653:2077","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:13202:7771","str::matches":"1:15992:2002","`DoubleEndedIterator`":"2:8591:120","prim@char":"1:15986:1997"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49795:8049","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:7772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3389:7644":{"id":"2:3389:7644","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3390:181","2:3391:952"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23629:17562":{"id":"2:23629:17562","crate_id":2,"name":"SimdOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23630:57100","2:23631:57099","2:23632:57101"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdPartialOrd","id":"2:23624:7686","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6883:7319":{"id":"1:6883:7319","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6884:52306"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10723:7402":{"id":"2:10723:7402","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10724:146","2:10725:34840","2:10726:55253"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3172:149":{"id":"2:3172:149","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3174:1961"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13622:7178":{"id":"2:13622:7178","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"self::pattern":"2:13202:7771","`None`":"2:47628:176","prim@char":"1:15986:1997"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47628:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:7772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13212:7772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13227:7770","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:7819:7485":{"id":"1:7819:7485","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7820:54818"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3166:75":{"id":"2:3166:75","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3168:305"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3274:2425","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:2921:183":{"id":"2:2921:183","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2923:604","2:2924:907"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3274:2425","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3269:211":{"id":"2:3269:211","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10390:2142":{"id":"2:10390:2142","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10391:1533","2:10392:54873","2:10394:54871"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3717:8112":{"id":"2:3717:8112","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3274:2425","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"2:3648:8111","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8506:7707":{"id":"2:8506:7707","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8508:7226"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6114:53538":{"id":"5:6114:53538","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:15992:2002"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3431:7659":{"id":"2:3431:7659","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3433:357"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13603:7168":{"id":"2:13603:7168","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49577:2173","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23099:7344":{"id":"2:23099:7344","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:23089:7313","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6581:7307":{"id":"1:6581:7307","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6582:54729","1:6583:54730"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3519:130":{"id":"2:3519:130","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3521:376"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3522:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:9407:7473":{"id":"2:9407:7473","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3352:7741":{"id":"2:3352:7741","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3354:181","2:3355:558"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3516:2427":{"id":"2:3516:2427","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3517:578"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5819:7328":{"id":"1:5819:7328","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5820:7087"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10453:7273":{"id":"2:10453:7273","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10454:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13591:52415":{"id":"2:13591:52415","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47628:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47628:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11082:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11082:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6098:59003":{"id":"5:6098:59003","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:4000:68":{"id":"2:4000:68","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4001:1429"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"2:3775:7839":{"id":"2:3775:7839","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3274:2425","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3376:7751":{"id":"2:3376:7751","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3378:893"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12649:8210":{"id":"2:12649:8210","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12650:7183","2:12651:56789"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9028:2234":{"id":"2:9028:2234","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8748:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3396:7415":{"id":"2:3396:7415","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3398:181","2:3399:351"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6110:59004":{"id":"5:6110:59004","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6483:7338":{"id":"1:6483:7338","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6484:54700","1:6485:2736","1:6486:54701","1:6487:54702","1:6488:54703","1:6489:54704"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10589:7313","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13601:8073":{"id":"2:13601:8073","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:15986:1997"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49561:8037","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10451:7272":{"id":"2:10451:7272","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10452:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10678:142":{"id":"2:10678:142","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10679:715","2:10681:54360"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3364:7747":{"id":"2:3364:7747","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3365:181","2:3366:913"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13599:52437":{"id":"2:13599:52437","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:15992:2002"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13626:1869":{"id":"2:13626:1869","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"str::rsplit":"1:15992:2002","`DoubleEndedIterator`":"2:8591:120","prim@char":"1:15986:1997","self::pattern":"2:13202:7771","str::split_whitespace":"1:15992:2002"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49591:2175","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:7772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3279:106":{"id":"2:3279:106","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2888:104","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3427:7657":{"id":"2:3427:7657","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3429:354"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8543:136":{"id":"2:8543:136","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8545:684"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13604:33594":{"id":"2:13604:33594","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:15992:2002"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:49865:8052","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6887:7322":{"id":"1:6887:7322","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6888:55185"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3525:132":{"id":"2:3525:132","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3527:181","2:3528:378"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10461:7276":{"id":"2:10461:7276","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10462:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13659:58354":{"id":"2:13659:58354","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"`DoubleEndedIterator`":"2:8591:120","prim@char":"1:15986:1997","self::pattern":"2:13202:7771","str::rmatch_indices":"1:15992:2002"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49741:8046","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:7772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13141:2235":{"id":"2:13141:2235","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13142:126","2:13143:54857"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13650:58352":{"id":"2:13650:58352","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47628:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:7772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13212:7772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13227:7770","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13609:52453":{"id":"2:13609:52453","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"2:13202:7771","prim@char":"1:15986:1997"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:7772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3178:228":{"id":"2:3178:228","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3180:127","2:3181:1417"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3740:7636":{"id":"2:3740:7636","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3742:55919"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5807:7334":{"id":"1:5807:7334","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5808:54149"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5837:8218":{"id":"5:5837:8218","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5839:181","5:5840:1921"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13702:7364":{"id":"2:13702:7364","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:15986:1997"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:49899:7365","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3169:74":{"id":"2:3169:74","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3171:7172"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3274:2425","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:6461:7317":{"id":"1:6461:7317","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6462:6791","1:6463:6792","1:6464:51884","1:6465:51885","1:6467:51889","1:6469:51886","1:6470:51887","1:6472:51888"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10589:7313","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:22910:7680":{"id":"2:22910:7680","crate_id":2,"name":"SimdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22911:7683","2:22912:56861","2:22913:57085","2:22914:57086","2:22915:57087","2:22916:4809","2:22917:57088","2:22918:57089","2:22919:57090","2:22920:57091","2:22921:57092","2:22922:57093","2:22923:57094","2:22924:57095","2:22925:57096","2:22926:57097","2:22927:56902","2:22928:57098","2:22929:57099","2:22930:57100","2:22931:57101","2:22932:56862","2:22933:56863","2:22934:56864","2:22935:56865"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3279:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23012:7313","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3417:7652":{"id":"2:3417:7652","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3419:181","2:3420:1236"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2967:184":{"id":"2:2967:184","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2969:997","2:2970:826","2:2971:792","2:2972:713","2:2973:696"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3274:2425","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2921:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5741:7329":{"id":"1:5741:7329","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5742:55124","1:5743:55126","1:5744:55125","1:5745:55127"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3384:7755":{"id":"2:3384:7755","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3386:1103"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3277:218":{"id":"2:3277:218","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:14325:141":{"id":"2:14325:141","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14326:277","2:14327:518","2:14328:280","2:14329:1079"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23036:7685":{"id":"2:23036:7685","crate_id":2,"name":"SimdPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23037:7683","2:23038:1247","2:23039:1272"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3577:7404":{"id":"2:3577:7404","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3579:181","2:3580:753"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3274:2425","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13698:52362":{"id":"2:13698:52362","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3648:8111":{"id":"2:3648:8111","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3650:56973","2:3651:56974","2:3652:52453"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3274:2425","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:22999:7904":{"id":"2:22999:7904","crate_id":2,"name":"SimdUint","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23000:56861","2:23001:1227","2:23002:1228","2:23003:56862","2:23004:56863","2:23005:56864","2:23006:56865","2:23007:56866","2:23008:56867","2:23009:56868"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3279:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23012:7313","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3812:7840":{"id":"2:3812:7840","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6112:2198":{"id":"5:6112:2198","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3423:7655":{"id":"2:3423:7655","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3425:352"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9408:7472":{"id":"2:9408:7472","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13662:58355":{"id":"2:13662:58355","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"`DoubleEndedIterator`":"2:8591:120","prim@char":"1:15986:1997","str::match_indices":"1:15992:2002","self::pattern":"2:13202:7771"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49759:8047","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:7772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13212:7772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13227:7770","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13941:150":{"id":"2:13941:150","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13942:181","2:13943:150","2:13944:767"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13671:58358":{"id":"2:13671:58358","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3175:135":{"id":"2:3175:135","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3177:681"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13665:1873":{"id":"2:13665:1873","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10449:7271":{"id":"2:10449:7271","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10450:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13227:7770":{"id":"2:13227:7770","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13229:7173","2:13230:57487","2:13231:57488"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Searcher","id":"2:13221:7774","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:4741:2140":{"id":"1:4741:2140","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4742:54919","1:4743:2579","1:4744:54920","1:4745:54921"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13588:1646":{"id":"2:13588:1646","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:16003:2011"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13672:58359":{"id":"2:13672:58359","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3522:131":{"id":"2:3522:131","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3524:377"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3525:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3440:7664":{"id":"2:3440:7664","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3442:1237"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6811:7315":{"id":"1:6811:7315","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6812:52290","1:6813:54126"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10589:7313","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6983:7318":{"id":"1:6983:7318","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6984:54690"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13700:58365":{"id":"2:13700:58365","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:15986:1997"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:49890:8055","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2866:7759":{"id":"2:2866:7759","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2868:51730"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3274:2425","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2863:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13579:58343":{"id":"2:13579:58343","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13688:58363":{"id":"2:13688:58363","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:13202:7771","prim@char":"1:15986:1997"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:7772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:4783:7732":{"id":"2:4783:7732","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4784:7183","2:4785:57731","2:4786:7186"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13632:52447":{"id":"2:13632:52447","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"`DoubleEndedIterator`":"2:8591:120","str::split":"1:15992:2002","prim@char":"1:15986:1997","self::pattern":"2:13202:7771"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49609:8013","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:7772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13212:7772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13227:7770","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13618:1931":{"id":"2:13618:1931","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"prim@char":"1:15986:1997","`None`":"2:47628:176","self::pattern":"2:13202:7771"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47628:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:7772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13602:7800":{"id":"2:13602:7800","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:15986:1997"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49567:8038","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13699:52363":{"id":"2:13699:52363","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8616:2428":{"id":"2:8616:2428","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8617:793","2:8618:7179"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8748:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8547:151":{"id":"2:8547:151","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8548:7183","2:8549:7184","2:8550:768"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3406:7417":{"id":"2:3406:7417","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3408:181","2:3409:356"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13587:304":{"id":"2:13587:304","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:15992:2002","`u8`":"1:16003:2011"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3734:137":{"id":"2:3734:137","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3736:687"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Try","id":"2:3729:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23624:7686":{"id":"2:23624:7686","crate_id":2,"name":"SimdPartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23625:1270","2:23626:1269","2:23627:1267","2:23628:1266"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdPartialEq","id":"2:23036:7685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3347:7739":{"id":"2:3347:7739","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3349:181","2:3350:892"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2572:127":{"id":"1:2572:127","crate_id":1,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2573:8130","1:2575:55196","1:2576:55197","1:2577:54904"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"2:10440:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Display","id":"2:10447:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13593:52416":{"id":"2:13593:52416","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11082:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11082:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:4051:7373":{"id":"2:4051:7373","crate_id":2,"name":"Provider","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4052:54904"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13597:7454":{"id":"2:13597:7454","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"crate::ops::Index":"2:3577:7404","str::slice_mut_unchecked":"1:15992:2002","`str`":"1:15992:2002"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:3729:224":{"id":"2:3729:224","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3730:181","2:3731:7636","2:3732:686","2:3733:369"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FromResidual","id":"2:3734:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Try","id":"2:3729:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13589:1606":{"id":"2:13589:1606","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47628:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47628:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11082:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11082:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3342:7418":{"id":"2:3342:7418","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3344:181","2:3345:1355"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3401:7416":{"id":"2:3401:7416","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3403:181","2:3404:353"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13647:58351":{"id":"2:13647:58351","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47628:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:7772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13582:58345":{"id":"2:13582:58345","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:15992:2002"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3380:7753":{"id":"2:3380:7753","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3382:559"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4723:2142":{"id":"1:4723:2142","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4724:2080","1:4725:55004","1:4727:55005","1:4728:8483","1:4729:55006","1:4730:55007","1:4731:54871","1:4740:7167"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2888:104":{"id":"2:2888:104","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2889:408","2:2890:410"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13629:33451":{"id":"2:13629:33451","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:15986:1997","self::pattern":"2:13202:7771"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:12994:8010","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:7772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13606:1866":{"id":"2:13606:1866","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:49845:2176","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:9031:7678":{"id":"2:9031:7678","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8748:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:23248:17543":{"id":"2:23248:17543","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23249:56679","2:23250:56680","2:23251:56681"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:23241:7313","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13673:58360":{"id":"2:13673:58360","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"2:13202:7771","prim@char":"1:15986:1997"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:7772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13212:7772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:13232:7775","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13607:58348":{"id":"2:13607:58348","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:49855:8051","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:14401:7461":{"id":"2:14401:7461","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14402:54233","2:14403:54234","2:14404:54235","2:14405:54236","2:14406:54237","2:14407:54238","2:14408:7167"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3247:115":{"id":"2:3247:115","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3248:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13221:7774":{"id":"2:13221:7774","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13223:7793","2:13224:922","2:13225:56634","2:13226:56635"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6095:59002":{"id":"5:6095:59002","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:7772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1741":{"id":"0:0:1741","crate_id":0,"name":"num_cpus","span":{"filename":"src/lib.rs","begin":[1,0],"end":[459,1]},"visibility":"public","docs":"A crate with utilities to determine the number of CPUs available on the\ncurrent system.\n\nSometimes the CPU will exaggerate the number of CPUs it contains, because it can use\n[processor tricks] to deliver increased performance when there are more threads. This \ncrate provides methods to get both the logical and physical numbers of cores.\n\nThis information can be used as a guide to how many tasks can be run in parallel.\nThere are many properties of the system architecture that will affect parallelism,\nfor example memory access speeds (for all the caches and RAM) and the physical\narchitecture of the processor, so the number of CPUs should be used as a rough guide\nonly.\n\n\n## Examples\n\nFetch the number of logical CPUs.\n\n```\nlet cpus = num_cpus::get();\n```\n\nSee [`rayon::Threadpool`] for an example of where the number of CPUs could be\nused when setting up parallel jobs (Where the threadpool example uses a fixed\nnumber 8, it could use the number of CPUs).\n\n[processor tricks]: https://en.wikipedia.org/wiki/Simultaneous_multithreading\n[`rayon::ThreadPool`]: https://docs.rs/rayon/1.*/rayon/struct.ThreadPool.html","links":{},"attrs":["#![deny(missing_docs)]","#![allow(non_snake_case)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:93:1606","0:94:1624"],"is_stripped":false}},"2:13585:52003":{"id":"2:13585:52003","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12673:8175"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6709:7332":{"id":"1:6709:7332","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6710:54736","1:6711:7006","1:6712:7007","1:6713:7009","1:6714:7008","1:6715:7010","1:6716:7011","1:6717:7013","1:6718:6764","1:6719:7016","1:6720:7017","1:6721:7018","1:6722:7019","1:6723:7020","1:6724:7021","1:6725:7014","1:6726:7015"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10455:7274":{"id":"2:10455:7274","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10456:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13694:1733":{"id":"2:13694:1733","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:13141:2235","`FromStr`":"2:13141:2235"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47753:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:13141:2235","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:13141:2235","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23296:7855":{"id":"2:23296:7855","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdElement","id":"2:23933:7684","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23287:7313","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13667:58356":{"id":"2:13667:58356","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6111:59005":{"id":"5:6111:59005","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`String`":"5:8368:216","`Box<str>`":"5:432:2430"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2430","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8113:8224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13638:58350":{"id":"2:13638:58350","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:13202:7771","str::split":"1:15992:2002","prim@char":"1:15986:1997","str::split_terminator":"1:15992:2002"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49659:8043","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:7772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13212:7772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13227:7770","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13696:8217":{"id":"2:13696:8217","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13679:1912":{"id":"2:13679:1912","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:15986:1997","self::pattern":"2:13202:7771"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47628:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:7772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3559:7760":{"id":"2:3559:7760","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3561:237","2:3562:206","2:3563:57288"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13577:793":{"id":"2:13577:793","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:15986:1997"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5749:7330":{"id":"1:5749:7330","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5750:7087","1:5751:52271","1:5752:52272"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13608:33579":{"id":"2:13608:33579","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:49883:8054","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6418:223":{"id":"5:6418:223","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6419:1397"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13682:52456":{"id":"2:13682:52456","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:15986:1997","self::pattern":"2:13202:7771"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47628:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:7772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13212:7772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13227:7770","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3104:7769":{"id":"2:3104:7769","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:3103:7313","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10688:146":{"id":"2:10688:146","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10689:652","2:10690:2080","2:10691:54026","2:10692:54027","2:10693:54028","2:10694:54029","2:10695:54030","2:10696:54031","2:10697:54032","2:10698:54033","2:10699:54034","2:10700:54035","2:10701:54036","2:10702:54037","2:10703:54038","2:10704:1533"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3281:220":{"id":"2:3281:220","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4748:1845":{"id":"1:4748:1845","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4749:7157","1:4750:7158","1:4751:7159","1:4753:2170","1:4754:7160","1:4756:1869","1:4757:1866"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Read","id":"1:4666:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6091:59001":{"id":"5:6091:59001","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2430","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8113:8224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2430","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8113:8224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13641:52449":{"id":"2:13641:52449","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"self::pattern":"2:13202:7771","prim@char":"1:15986:1997","str::rsplitn":"1:15992:2002"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49695:8016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:7772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13598:58347":{"id":"2:13598:58347","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"crate::ops::IndexMut":"2:3581:7736","str::slice_unchecked":"1:15992:2002","`str`":"1:15992:2002"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:10457:189":{"id":"2:10457:189","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10458:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8748:157":{"id":"2:8748:157","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8749:7183","2:8750:922","2:8751:7185","2:8754:7186","2:8755:495","2:8757:7187","2:8760:7188","2:8761:1929","2:8762:7189","2:8763:7169","2:8765:7190","2:8767:7191","2:8768:7192","2:8770:841","2:8773:7193","2:8780:1649","2:8782:1867","2:8785:7194","2:8786:7195","2:8787:7196","2:8789:7197","2:8791:7198","2:8794:1308","2:8795:7119","2:8796:7199","2:8800:7200","2:8803:7201","2:8804:7202","2:8805:7203","2:8807:7167","2:8808:2434","2:8810:7204","2:8813:7205","2:8815:7206","2:8825:7207","2:8840:7208","2:8842:7209","2:8846:7210","2:8855:1877","2:8858:7211","2:8860:7212","2:8863:276","2:8870:294","2:8877:1931","2:8884:7213","2:8893:7214","2:8903:1014","2:8910:7215","2:8917:7170","2:8918:1892","2:8919:7216","2:8931:7217","2:8938:7218","2:8950:7219","2:8957:7220","2:8958:7221","2:8963:7222","2:8966:7223","2:8969:7224","2:8970:7225","2:8972:7226","2:8974:6700","2:8976:415","2:8979:7227","2:8982:997","2:8985:7228","2:8988:604","2:8991:7229","2:8994:907","2:8996:826","2:8998:792","2:9000:713","2:9002:696","2:9004:7230","2:9005:7231","2:9013:7232"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13576":{"id":"2:13576","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12662:1340","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13577:793","2:13578:7179","2:13579:58343","2:13580:58344","2:13582:58345","2:13585:52003","2:13586:58346","2:13587:304","2:13588:1646","2:13589:1606","2:13591:52415","2:13593:52416","2:13595:52417","2:13597:7454","2:13598:58347","2:13599:52437","2:13600:52438","2:13601:8073","2:13602:7800","2:13603:7168","2:13604:33594","2:13605:33584","2:13606:1866","2:13607:58348","2:13608:33579","2:13609:52453","2:13612:52454","2:13615:52455","2:13618:1931","2:13622:7178","2:13626:1869","2:13629:33451","2:13632:52447","2:13635:58349","2:13638:58350","2:13641:52449","2:13644:52451","2:13647:58351","2:13650:58352","2:13653:2077","2:13656:58353","2:13659:58354","2:13662:58355","2:13665:1873","2:13667:58356","2:13669:58357","2:13671:58358","2:13672:58359","2:13673:58360","2:13676:58361","2:13679:1912","2:13682:52456","2:13685:58362","2:13688:58363","2:13691:58364","2:13694:1733","2:13696:8217","2:13697:52361","2:13698:52362","2:13699:52363","2:13700:58365","2:13702:7364","2:13703:58366"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:94:1624":{"id":"0:94:1624","crate_id":0,"name":"get_physical","span":{"filename":"src/lib.rs","begin":[108,0],"end":[110,1]},"visibility":"public","docs":"Returns the number of physical cores of the current system.\n\nThis will always return at least `1`.\n\n# Note\n\nPhysical count is supported only on Linux, mac OS and Windows platforms.\nOn other platforms, or if the physical count fails on supported platforms,\nthis function returns the same as [`get()`], which is the number of logical\nCPUS.\n\n# Examples\n\n```\nlet logical_cpus = num_cpus::get();\nlet physical_cpus = num_cpus::get_physical();\nif logical_cpus > physical_cpus {\n    println!(\"We have simultaneous multithreading with about {:.2} \\\n              logical cores to 1 physical core.\", \n              (logical_cpus as f64) / (physical_cpus as f64));\n} else if logical_cpus == physical_cpus {\n    println!(\"Either we don't have simultaneous multithreading, or our \\\n              system doesn't support getting the number of physical CPUs.\");\n} else {\n    println!(\"We have less logical CPUs than physical CPUs, maybe we only have access to \\\n              some of the CPUs on our system.\");\n}\n```\n\n[`get()`]: fn.get.html","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"1:6814:7317":{"id":"1:6814:7317","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6815:52202"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10589:7313","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5675:7310":{"id":"1:5675:7310","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5676:8952","1:5677:52003"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10589:7313","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3372:7499":{"id":"2:3372:7499","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3374:1356"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3274:2425":{"id":"2:3274:2425","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2863:97":{"id":"2:2863:97","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2865:2066"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3274:2425","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"5:6113:53537":{"id":"5:6113:53537","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:15992:2002"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3411:7649":{"id":"2:3411:7649","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3413:181","2:3414:1233"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10447:119":{"id":"2:10447:119","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10448:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3435:7661":{"id":"2:3435:7661","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3437:1234"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10459:7275":{"id":"2:10459:7275","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10460:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:9367:7341":{"id":"1:9367:7341","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9368:54799","1:9369:54800","1:9370:1917","1:9371:54801","1:9372:54802","1:9373:40884","1:9374:54798"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10589:7313","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3310:2426":{"id":"2:3310:2426","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:783:222":{"id":"5:783:222","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:784:7234","5:785:1937","5:786:7235"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5833:8220":{"id":"5:5833:8220","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5835:181","5:5836:432"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3274:2425","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:1075:7362":{"id":"1:1075:7362","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1076:7234","1:1077:8217","1:1078:53537","1:1079:53538","1:1080:52361","1:1081:52362","1:1082:52363"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13615:52455":{"id":"2:13615:52455","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"2:13202:7771","prim@char":"1:15986:1997"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:7772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13212:7772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13227:7770","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8510:7706":{"id":"2:8510:7706","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8512:6700"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13691:58364":{"id":"2:13691:58364","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:13202:7771","prim@char":"1:15986:1997"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:7772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13212:7772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13227:7770","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:9035:7809":{"id":"2:9035:7809","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Step","id":"2:8071:7810","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:2926:124":{"id":"2:2926:124","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2921:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:23933:7684":{"id":"2:23933:7684","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:23934:7683"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:23929:7313","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Copy","id":"2:3279:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6885:7321":{"id":"1:6885:7321","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6886:54384"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3358:7744":{"id":"2:3358:7744","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3360:181","2:3361:1102"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13212:7772":{"id":"2:13212:7772","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13214:7774","2:13215:57644","2:13216:57649","2:13217:57645","2:13218:57647","2:13219:57646","2:13220:57648"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13605:33584":{"id":"2:13605:33584","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:15992:2002"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:49874:8053","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13586:58346":{"id":"2:13586:58346","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:5669:7312":{"id":"1:5669:7312","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5670:52211","1:5671:8306"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10589:7313","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:2957:177":{"id":"2:2957:177","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2958:415","2:2959:7170","2:2960:1892","2:2961:7171"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2926:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"2:2967:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:4666:1847":{"id":"1:4666:1847","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4667:2120","1:4668:7161","1:4670:7162","1:4671:7163","1:4672:1922","1:4673:7164","1:4674:7165","1:4676:7166","1:4677:7167","1:4678:7168","1:4679:7169","1:4681:7119"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:11082:214":{"id":"2:11082:214","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:11084:181","2:11085:1606","2:11086:52415","2:11087:52416","2:11088:52417","2:11089:753","2:11090:754"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3274:2425","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:11073:7313","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5008:7346":{"id":"1:5008:7346","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5009:2227","1:5010:54680"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:93:1606":{"id":"0:93:1606","crate_id":0,"name":"get","span":{"filename":"src/lib.rs","begin":[73,0],"end":[75,1]},"visibility":"public","docs":"Returns the number of available CPUs of the current system.\n\nThis function will get the number of logical cores. Sometimes this is different from the number\nof physical cores (See [Simultaneous multithreading on Wikipedia][smt]).\n\nThis will always return at least `1`.\n\n# Examples\n\n```\nlet cpus = num_cpus::get();\nif cpus > 1 {\n    println!(\"We are on a multicore system with {} CPUs\", cpus);\n} else {\n    println!(\"We are on a single core system\");\n}\n```\n\n# Note\n\nThis will check [sched affinity] on Linux, showing a lower number of CPUs if the current\nthread does not have access to all the computer's CPUs.\n\nThis will also check [cgroups], frequently used in containers to constrain CPU usage.\n\n[smt]: https://en.wikipedia.org/wiki/Simultaneous_multithreading\n[sched affinity]: http://www.gnu.org/software/libc/manual/html_node/CPU-Affinity.html\n[cgroups]: https://www.kernel.org/doc/Documentation/cgroup-v1/cgroups.txt","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:8591:120":{"id":"2:8591:120","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8592:7173","2:8593:7174","2:8594:7175","2:8595:7176","2:8599:7177","2:8602:7178"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8748:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5763:7332":{"id":"1:5763:7332","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5764:6815","1:5765:54149","1:5766:7087","1:5767:54150","1:5768:6791","1:5769:6792","1:5770:54151","1:5771:1304","1:5772:54152","1:5773:54153","1:5774:54154","1:5775:54155","1:5776:54156","1:5777:54157","1:5778:54158","1:5779:54159"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3182:227":{"id":"2:3182:227","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3184:127","2:3185:1416"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3337:7497":{"id":"2:3337:7497","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3339:181","2:3340:265"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6090":{"id":"5:6090","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5903:1340","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6091:59001","5:6092:2177","5:6095:59002","5:6098:59003","5:6110:59004","5:6111:59005","5:6112:2198","5:6113:53537","5:6114:53538"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13685:58362":{"id":"2:13685:58362","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:13202:7771","prim@char":"1:15986:1997"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:7772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13212:7772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13227:7770","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8556:2429":{"id":"2:8556:2429","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8558:7180","2:8560:7181","2:8561:7182"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5757:7331":{"id":"1:5757:7331","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5758:7087","1:5759:52157"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13578:7179":{"id":"2:13578:7179","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13669:58357":{"id":"2:13669:58357","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5797:7333":{"id":"1:5797:7333","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5798:52214","1:5799:52215","1:5800:52216","1:5801:52217"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13635:58349":{"id":"2:13635:58349","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"prim@char":"1:15986:1997","self::pattern":"2:13202:7771","`DoubleEndedIterator`":"2:8591:120","str::rsplit_terminator":"1:15992:2002","str::split":"1:15992:2002"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49641:8042","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:7772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3581:7736":{"id":"2:3581:7736","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3583:754"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3274:2425","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Index","id":"2:3577:7404","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13595:52417":{"id":"2:13595:52417","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11082:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11082:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13926:138":{"id":"2:13926:138","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13927:181","2:13928:1013"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13232:7775":{"id":"2:13232:7775","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13227:7770","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13644:52451":{"id":"2:13644:52451","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:15986:1997","str::splitn":"1:15992:2002","self::pattern":"2:13202:7771"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49713:8017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:7772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13212:7772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13227:7770","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8071:7810":{"id":"2:8071:7810","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8072:57502","2:8073:57503","2:8074:57507","2:8075:57505","2:8076:57504","2:8077:57508","2:8078:57506"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2888:104","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"2:2967:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3368:7498":{"id":"2:3368:7498","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3370:266"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}}},"paths":{"16:4840:43801":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:5990:7616":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"5:3038:7234":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"16:3494:43164":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:2543:8979":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:14235:2191":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:46495:8194":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"2:46487:8056":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"6:1712:3632":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:2395:13259":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:47930:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"16:6190:8683":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"12:1256:7395":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:15992:2002":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"6:5229:5598":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:47745:188":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"20:573:2865":{"crate_id":20,"path":["libc","unix","linger"],"kind":"struct"},"11:46:59680":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"2:3492:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"5:4643:9358":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"6:4485:41921":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:12069:51790":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"6:4410:41919":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"16:7131:8705":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:12700:49763":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:10874:44983":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"6:3907:5021":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:9646:60550":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"12:2032:2227":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:46176:7827":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"17:10788:44981":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"6:4098:5040":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"5:3336:7412":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"6:5288:5603":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:56046:7835":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"20:1393:3619":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:11433:45205":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:46414:34155":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"20:584:2867":{"crate_id":20,"path":["libc","unix","itimerval"],"kind":"struct"},"1:15491:8541":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:5797:7333":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:12017:181":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:2456:9902":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"20:4822:6087":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:9826:8983":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:12920:8044":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"20:606:2870":{"crate_id":20,"path":["libc","unix","protoent"],"kind":"struct"},"17:11002:45094":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:9367:7341":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:23629:17562":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"17:10775:44982":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"18:739:60590":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:10187:44864":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"6:4038:5032":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"12:2253:7392":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:10937:45093":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:49511:8030":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:48933:57263":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:11413:7348":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:11584:2223":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"20:3182:5036":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"6:6205:6095":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:9618:9399":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"16:6026:8606":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"5:69:8256":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:11689:45589":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:3104:7769":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:10443:109":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"2:14289:201":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"20:4926:6090":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:9396:44787":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:11371:7569":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"9:157:8396":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"17:11671:45533":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"6:1626:3625":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"6:3877:5018":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"16:5685:8668":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"9:722:8381":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"2:49695:8016":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"16:7238:8629":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:49535:8121":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"14:194:43082":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:13595:50839":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:12011:7480":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:14543:7325":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"16:6012:8608":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"5:3894:8327":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"20:3312:5048":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:10622:44980":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"18:866:9062":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:13129:50287":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"6:3993:5027":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:51475:56816":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:12543:49686":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"6:571:2861":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"20:3273:5045":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:9291:44768":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:9361:44786":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"20:4085:5593":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"20:1426:3622":{"crate_id":20,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"12:2052:7411":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"16:2861:8866":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:12649:8210":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"16:7155:8707":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:8512:7432":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:49641:8042":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"5:8332:8304":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:11376:7570":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"5:4242:9353":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:7653:7476":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"20:1377:3617":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:7033:7705":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"16:7110:8703":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:11797:45714":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"16:7184:8915":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:47151:36254":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"18:782:60578":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"9:686:8378":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"20:1651:3691":{"crate_id":20,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:11354:8010":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"16:5855:8673":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"16:5217:8859":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:11393:8011":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"12:162:8514":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:3972:5026":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"20:3035:5022":{"crate_id":20,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"20:1432:3623":{"crate_id":20,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:16003:2011":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"1:16011:2019":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"20:5491:5089":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:10407:9009":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:1642:7394":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:48628:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"12:1881:145":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"6:4208:5047":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"20:5020:6096":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"20:4941:6092":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:5488:5608":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:48713:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"2:48765:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1:1132:7375":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:3372:7499":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:49713:8017":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"18:766:60573":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:3384:7755":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"20:5435:2814":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:3172:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:3368:7498":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"5:5536:2255":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:6709:7332":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:11082:214":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"12:1162:8510":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:46844:7710":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:11545:8016":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:24814:7535":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"17:10015:44850":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:4732:54870":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"6:4270:5054":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:47122:36251":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:5039:7988":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:3648:8111":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:10949:45070":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:12634:49753":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"18:0:1981":{"crate_id":18,"path":["memchr"],"kind":"module"},"5:8390:8233":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:13293:50447":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:10340:9014":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"16:6557:8692":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"20:3254:5044":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:6688:6442":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"6:5260:5586":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:2572:127":{"crate_id":1,"path":["std","error","Error"],"kind":"trait"},"17:9579:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"1:5807:7334":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:13147:50289":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"16:3402:8599":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"14:47:43081":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:53277:7894":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:49659:8043":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:11628:45530":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:2171:7411":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"12:379:8517":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:13565:50831":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"6:1621:3624":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:13763:50882":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"9:692:8380":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"1:7673:7477":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"6:580:2862":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:49330:8015":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"20:3441:5061":{"crate_id":20,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"5:1560:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"12:472:59689":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:3278:217":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:9087:44783":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:46824:7704":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"20:4058:5571":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:14310:7515":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:3682:2179":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"5:7787:234":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:51803:7875":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:10516:44911":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"16:3051:8927":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:12716:49764":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:23012:7313":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"20:4111:5595":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:601:2865":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:46117:2101":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"20:3350:5051":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:13954:7481":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"20:4840:2648":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:13345:50451":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:10975:45068":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:52885:7902":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"20:4209:5605":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:5698:8669":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:4684:2138":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:46051:198":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:3775:7839":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:1524:7390":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:15335:7566":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:15989:1999":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"16:547:8849":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:13794:50887":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"16:5948:8864":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:12196:49662":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"20:3364:5052":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Chdr"],"kind":"struct"},"1:16002:2010":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:46031:195":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:32295:8149":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:2283:7845":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"6:5240:5599":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"5:3300:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"20:517:2859":{"crate_id":20,"path":["libc","unix","rusage"],"kind":"struct"},"17:9988:44849":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:3339:2128":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"16:0:1979":{"crate_id":16,"path":["gimli"],"kind":"module"},"12:559:143":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"6:6943:41942":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:2155:2227":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"6:4532:41924":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:15993:2003":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"16:4573:43750":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:10104:9039":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:6887:7322":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:12892:50224":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"16:4803:43788":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:50531:8075":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:49908:8056":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:10122:7996":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:10732:2171":{"crate_id":1,"path":["std","error","Chain"],"kind":"struct"},"1:4723:2142":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:5631:779":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:56481:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:3389:7644":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"16:6518:8625":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:14942:9411":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"6:565:2860":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"16:7247:8643":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:12205:7437":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:10093:9038":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"5:8257:2107":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:11409:45204":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:52229:7893":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:15998:2006":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:15115:7489":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:6885:7321":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:53560:23098":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:10595:57255":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"2:8547:151":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"20:1452:3625":{"crate_id":20,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:11209:7350":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"11:54:8500":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"17:11810:45727":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:10962:45069":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"20:598:2869":{"crate_id":20,"path":["libc","unix","servent"],"kind":"struct"},"2:23298:7683":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:48691:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"16:3576:43166":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"20:3292:5046":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:7639:7475":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"16:6691:8694":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:4921:7986":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"16:7295:8616":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"16:6595:8624":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"12:2269:7393":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"5:4699:9358":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"12:1682:8524":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"20:5514:6444":{"crate_id":20,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"16:5605:8664":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"16:7415:8630":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:13323:50449":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:24322:40598":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:24649:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"6:4321:5060":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"5:5889:9365":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"16:2772:8891":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:12360:49674":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"20:630:2888":{"crate_id":20,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:8616:2428":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:22723:57283":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"16:6858:8910":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"0:93:1606":{"crate_id":0,"path":["num_cpus","get"],"kind":"function"},"16:4660:43765":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:3559:7760":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"5:4628:235":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"6:5426:42117":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:13774:50883":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:4885:7985":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:49795:8049":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:11234:9001":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:8498:202":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"20:3449:5062":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:3743:9026":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:3352:7741":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"17:13735:50845":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"6:6016:6087":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:6665:6441":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"5:3044:58218":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"20:565:2864":{"crate_id":20,"path":["libc","unix","winsize"],"kind":"struct"},"18:651:9065":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:9163:2267":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:51635:7892":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:47106:36249":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"18:820:9058":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:5887:8854":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:3380:7753":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:11102:44799":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"16:3199:8873":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:8827:162":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:8670:2258":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:46183:7828":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"5:8445:7383":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"18:661:9069":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"16:7169:8626":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:47677:7379":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:25012:8090":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"6:4386:41916":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:12646:49754":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:12442:49679":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:13785:50884":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"12:2412:59686":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"6:612:2867":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:9911:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"20:3022:5021":{"crate_id":20,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:12247:2262":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"6:4075:5037":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:3966:5025":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:15394:7574":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:4157:9033":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"20:3386:5055":{"crate_id":20,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:51849:7860":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:5101:7993":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:8412:2223":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"17:13817:50888":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:10503:8985":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:1497:7386":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"12:2398:56679":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"18:169:51288":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"12:856:7381":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"2:53598:23100":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:10489:44910":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:24880:165":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"17:9240:8938":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"16:6931:8913":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"16:3177:8872":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:533:2857":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"6:4116:5042":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"16:5721:8670":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"6:1748:3637":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:15107:52141":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:10598:45012":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"5:432:2430":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:14812:7484":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"12:2066:7413":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"6:1912:3691":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"20:4990:6094":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:2292:7846":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"20:1495:3628":{"crate_id":20,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:52105:7901":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:9706:44791":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"5:7264:9353":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:48402:7273":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:15078:7442":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"2:2269:7842":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:50539:8076":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:13481:50819":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"6:5398:5052":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:53461:7862":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"16:7792:8646":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:10453:7273":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:14228:7734":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:13428:50814":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"20:4920:6089":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"20:5503:5091":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:5757:7331":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"20:5080:6100":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"5:3951:7383":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"17:12469:49681":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:11985:49488":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"18:729:60582":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:4296:5057":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:696:7504":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"12:787:7385":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:1152:12253":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"6:586:2863":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:51457:7871":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"16:6099:8679":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:11354:8970":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:46736:7695":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:12183:49661":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"12:183:8518":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:32475:7126":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"16:7141:8706":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"20:5035:6097":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:23093:7342":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"20:3108:5027":{"crate_id":20,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"6:4135:41909":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:11263:7354":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"1:15021:7483":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:4032:7471":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:48182:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"5:2553:8346":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:15984:1995":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:8510:7706":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"16:5498:8661":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:5974:7613":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"6:4402:41918":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:50114:7785":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"0:0:1741":{"crate_id":0,"path":["num_cpus"],"kind":"module"},"2:49993:7776":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:14795:13273":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"17:9517:2173":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:7531:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"5:923:8330":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:10223:8943":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:50318:8065":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:11161:2175":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"17:11181:44803":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"20:4093:5594":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"16:6949:8914":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"16:5326:8652":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:45917:7642":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"5:3329:2227":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:12281:2148":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:15170:7448":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"6:521:2855":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"9:1020:8446":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"16:2905:8867":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:1588:3621":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"20:3170:5034":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:11085:9005":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:24338:40609":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:5669:7312":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:50330:8068":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"20:3203:5039":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:13352:50463":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:22695:7252":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"16:6482:8899":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:12883:8041":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:11017:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:16009:2017":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"20:5062:6099":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:9920:44795":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:51971:56817":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:10826:2115":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:47628:176":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"12:2036:7184":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"5:3488:7383":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"17:10925:45092":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"18:801:9056":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"20:552:2862":{"crate_id":20,"path":["libc","unix","iovec"],"kind":"struct"},"1:1459:7381":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"5:5788:9353":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:607:44776":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"15:0:1978":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:46541:8196":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:50338:8063":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:4607:2201":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:10971:7468":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:6719:7016":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"6:4061:5035":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:11282:44804":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:11922:49480":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:3247:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"6:4356:41912":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:13938:50925":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:10616:7530":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:57777:57256":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"16:7281:8615":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:10678:142":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"18:712:7252":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:3243:8875":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"5:2777:8345":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:13859:50897":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:3310:2426":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:11197:7349":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"1:8762:2270":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"9:900:42487":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"5:4599:9356":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"2:11559:8017":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:1669:3628":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:10601:52161":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"6:4142:41910":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:3337:7497":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:5584:6443":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"1:14096:9409":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"20:4288:5629":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:22708:57283":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"12:1666:8523":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"16:7741:8711":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:46190:7286":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"2:32483:57469":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"1:13420:7580":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"17:13721:50844":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"6:4362:41913":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:46792:56957":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"6:3896:5020":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:23933:7684":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:11640:45531":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"6:4256:5051":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:51204:7898":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"20:4959:6093":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:13369:50781":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:5605:7757":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"6:4454:5064":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"12:843:7380":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:2397:7494":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"16:6075:8610":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:3341:2129":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"5:3882:2186":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"16:2839:8865":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"6:4538:41925":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"16:5443:8659":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"6:1733:3635":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"6:1662:3627":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:12065:52166":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"17:11547:45490":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:4666:1847":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:7896:7667":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:4434:2194":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"20:499:2856":{"crate_id":20,"path":["libc","unix","timeval"],"kind":"struct"},"16:3686:43175":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"5:1457:7394":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"5:1674:7386":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:49430:8025":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"12:895:8502":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"16:7449:8619":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:13361:50780":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"16:4411:43684":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:11591:45493":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:3736:2185":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:11907:49479":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:11445:7584":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:14325:141":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"5:2310:8359":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:12141:7433":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:23241:7313":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"17:12348:49673":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:46465:8199":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:8556:2429":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"20:150:2543":{"crate_id":20,"path":["libc","unix","FILE"],"kind":"enum"},"2:52183:7889":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:1488:7384":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:16007:2015":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:10457:189":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:51494:7856":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"4:0:1971":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"16:5784:8672":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:10445:44909":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:13440:50815":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"16:7121:8704":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:11130:44800":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:10318:8983":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:5156:7994":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:12015:49588":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:2594:52198":{"crate_id":1,"path":["std","error","from","StringError"],"kind":"struct"},"16:2981:8879":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"0:94:1624":{"crate_id":0,"path":["num_cpus","get_physical"],"kind":"function"},"2:3166:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:4000:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"6:6643:2814":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:15313:7355":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"18:885:9063":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"16:5668:8667":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:13233:50378":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:8863:52182":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"9:1056:8439":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:6721:7018":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"20:4314:5630":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:12731:49765":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"14:244:43083":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:2926:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:24249:7963":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:0:1980":{"crate_id":17,"path":["object"],"kind":"module"},"6:6250:6099":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:13180:50334":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:11784:45713":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:5516:8847":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:3505:2178":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:3197:2120":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"6:6967:42246":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"18:645:9068":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:5111:7286":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:15185:7449":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:10690:7396":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"6:5311:5607":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"20:3225:5041":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:12252:2268":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"16:6130:8680":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"20:5049:6098":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","termios2"],"kind":"struct"},"16:7264:194":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:15952:54838":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"16:5566:8663":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:11280:7463":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"2:3406:7417":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:11713:45699":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"16:6679:8906":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:9033:44781":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:1311:9044":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:49609:8013":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:10643:44995":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:8404:7532":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"1:6221:7582":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:1075:7362":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"5:1685:194":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:51657:7895":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:46783:7700":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"16:6173:8682":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"6:5439:42119":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:6057:3578":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:6343:7583":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:49741:8046":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:10831:8983":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:9259:43161":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"9:41:8429":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"5:8145:8333":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"9:234:8404":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"1:10727:8349":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:24781:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"12:2404:59685":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"20:1460:3626":{"crate_id":20,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:4379:41915":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"16:5639:8665":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"1:11223:7352":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"17:13573:50832":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:4315:5059":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:9160:9002":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:12771:52191":{"crate_id":1,"path":["std","sys","unix","fs","TimespecDebugAdapter"],"kind":"struct"},"17:9930:60551":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:5208:7289":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:5185:2311":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:3182:227":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"6:5419:42116":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:24193:7968":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"16:4467:43692":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:9716:60554":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"20:71:2467":{"crate_id":20,"path":["libc","unix","DIR"],"kind":"enum"},"6:5974:2781":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:3770:43211":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:11624:2225":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:10801:9029":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"5:5315:200":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:49883:8054":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:9676:60552":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:47821:178":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"20:1520:3630":{"crate_id":20,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"5:1939:7383":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"20:485:2854":{"crate_id":20,"path":["libc","unix","group"],"kind":"struct"},"17:12318:49670":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"16:6159:8613":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"12:979:7391":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"6:3987:4904":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:46764:7698":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"6:4464:5065":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"12:0:1976":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"1:12173:7435":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:3522:131":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:24913:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:1428:7379":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"6:4308:5058":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"20:1566:3636":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:46935:7669":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"14:56:45206":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:10400:134":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:53479:23091":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"16:4975:43840":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"20:3467:5064":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:618:2868":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"20:3127:5029":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:53613:23101":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:3281:220":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"5:3772:7379":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:10266:8962":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:13549:50829":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:53137:7890":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:4434:5602":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"5:1597:2227":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:48266:2256":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"20:1538:3632":{"crate_id":20,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"20:1384:3618":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:49874:8053":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:3717:8112":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:14617:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"17:10028:44851":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"6:5247:5600":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:46863:7712":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:10641:7515":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"5:8113:8224":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"7:0:1481":{"crate_id":7,"path":["unwind"],"kind":"module"},"6:5186:5594":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:22999:7904":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"2:2863:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"1:6811:7315":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"6:1526:3615":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:49899:7365":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:10253:8937":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"12:1183:8511":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:49813:8050":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:10447:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:51356:7891":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:11530:45483":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:10707:13266":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"20:3190:5037":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:5210:5596":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"20:3242:5043":{"crate_id":20,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"16:6407:8687":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"20:3176:5035":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"16:5289:8609":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"18:720:57276":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:10976:7469":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"6:6114:6089":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"20:3424:5059":{"crate_id":20,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:11474:45421":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:5165:7288":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:11073:7313":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:49567:8038":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:10198:44863":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:299:60560":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:3440:7664":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:12943:8045":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:48224:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"16:4271:43640":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:3658:9383":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"20:4789:2781":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:48652:133":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"5:7219:7382":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"6:5301:5605":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:49390:8021":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:11365:7568":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:2957:177":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"1:11168:2176":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"20:537:2860":{"crate_id":20,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:11431:7579":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:4373:41914":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"6:4081:5038":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:13167:50333":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:15041:2148":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"20:3143:5031":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:4230:5049":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"16:6089:8678":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"6:6007:42159":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"20:3302:5047":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:11725:45700":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:2937:179":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:6883:7319":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:6135:6092":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"12:1784:9351":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"5:6482:7382":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"5:374:8285":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:5149:5571":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"20:5465:6442":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:5819:7328":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:4965:7285":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"16:6060:8649":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"16:5902:8674":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:8156:7532":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"12:2392:59688":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:3277:218":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"5:1663:7385":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"20:3096:1856":{"crate_id":20,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"16:4871:43808":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:21:672":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:46451:7927":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"16:5374:8655":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:10435:8945":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:51374:56793":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"16:7637:8709":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:6954:41943":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"16:7826:7827":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"5:6679:2255":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"20:4154:5600":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:13932:52253":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"6:1740:3636":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:37761:178":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:22742:57474":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:1041:7309":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:3746:7639":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"20:3430:5060":{"crate_id":20,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"6:6268:6100":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:52025:56822":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"12:1203:8512":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:51751:7868":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:12080:52188":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"1:14581:51795":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:6003:7617":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"6:607:2866":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:13899:50922":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"5:8204:7184":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"18:811:9057":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:13278:7778":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"20:3417:5058":{"crate_id":20,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"16:6342:8686":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:11311:2175":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:12070:49596":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:51559:7900":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"16:3366:8882":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"5:8462:8257":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"5:783:222":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:1157:12254":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:12205:9381":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"1:10390:44777":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"16:5649:8666":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:2888:104":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"14:0:1977":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"5:1843:9353":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:12093:49597":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:49971:7773":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:7687:7478":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"5:1091:9353":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:1764:3638":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:46605:8118":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:13281:50445":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:10814:9030":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:13094:50283":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:13917:50924":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:15999:2007":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"11:0:1975":{"crate_id":11,"path":["adler"],"kind":"module"},"6:88:2467":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"16:6381:8623":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:6581:7307":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:4005:5028":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:1721:3633":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:8071:7810":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"5:3375:8277":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"16:6533:8897":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"16:5941:8676":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:8663:2257":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"16:7208:8708":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:10894:2184":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"15:230:8532":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:13976:57158":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"5:8368:216":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:11155:2173":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"16:4351:43672":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"6:4287:5056":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:6214:6096":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:5811:7335":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"16:7471:8607":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:10838:2118":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"15:269:8537":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:51226:7886":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"16:3521:43165":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:46698:7694":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"20:3324:5049":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:23296:7855":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"5:8137:7382":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"5:3839:9353":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"5:3396:7414":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"20:4219:5606":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlattr"],"kind":"struct"},"2:46512:7365":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:9786:44793":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:11653:45532":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"16:3265:8876":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:9795:9402":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"5:7649:8262":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"20:4294:1665":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:11425:7615":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:50322:8069":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:1944:1629":{"crate_id":2,"path":["core","mem"],"kind":"module"},"2:52419:7869":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"5:3748:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"5:8345:8305":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:38941:7369":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:50022:7782":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:11335:8971":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"6:1606:3623":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:9408:7472":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:13961:50932":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"18:621:60586":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:46574:7929":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:2508:7733":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"20:3087:5026":{"crate_id":20,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:48950:146":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"9:603:42564":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:10669:12249":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:12189:7436":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:16000:2008":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"16:6656:8904":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:10851:44985":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"20:5497:5090":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"16:6873:7245":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:22761:57473":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"16:6035:8648":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:2458:13278":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:10390:8982":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"20:511:2858":{"crate_id":20,"path":["libc","unix","rlimit"],"kind":"struct"},"20:3487:5066":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:12403:9902":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:12135:7184":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:13155:50331":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"5:8153:58140":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:1472:7382":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:8932:1848":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"3:0:430":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"17:13908:50923":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:11742:45708":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"5:7460:9353":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"20:4245:5608":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"16:6907:8696":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:5959:8601":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:24946:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:14799:7314":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:10902:2186":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"5:1472:7393":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"6:1576:3620":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:50569:7371":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:51705:7880":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"6:6153:6093":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:51873:7861":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:53508:23094":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:24301:40607":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:15033:1903":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:13472:50818":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"6:5433:42118":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:9183:8974":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:5034:7987":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"9:963:8444":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:50314:8066":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"6:5293:5604":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:12262:49667":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:11457:45206":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:7279:52196":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:12406:49676":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"6:6184:6094":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"5:3040:58113":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:14568:2117":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:4078:205":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"1:12733:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"5:3341:8276":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:11682:2229":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:8591:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:13421:50811":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"16:5869:189":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:47846:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:12673:8175":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"16:3461:8878":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"16:4495:43696":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"6:5998:2739":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:12417:49677":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:1530:7391":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:4397:7552":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:9756:60558":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:1438:7184":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"9:469:42459":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"9:27:8428":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"2:8307:57573":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"6:4526:41923":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"5:4515:8316":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"17:13138:50288":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"16:3103:8881":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:11117:2141":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:3396:7415":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:24748:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:49176:8214":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:50496:190":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:48972:57279":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:12383:49675":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"16:7309:8614":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"5:2218:8279":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:46095:199":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:50165:7787":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:46815:7708":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"20:4181:5601":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlmsghdr"],"kind":"struct"},"2:37785:7252":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:4783:7732":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"6:4012:5029":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:32635:57467":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"1:10723:13273":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"20:3477:5065":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"20:5457:6441":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"20:3135:5030":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:3883:5019":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"19:0:994":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"12:114:59692":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"20:1530:3631":{"crate_id":20,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:3435:7661":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:3175:135":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"17:12026:49589":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:10530:45008":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:47753:205":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:10464:8980":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:4748:1845":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"16:3314:8856":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"12:928:7384":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:3351:2134":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:15987:1998":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:50310:8064":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:10848:2119":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:46754:7697":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"5:8269:2108":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"6:6080:3550":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"12:880:7383":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"17:10610:45013":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"5:7627:8261":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:9658:9400":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"1:4432:2193":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:1415:2227":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:46555:8198":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:47685:7184":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"18:754:60576":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"20:4797:3549":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"18:896:9064":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:10127:8983":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:1149:12251":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:13452:50816":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:3648:2183":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:10039:44852":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:50186:7789":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:51334:7887":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"20:3153:5032":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"16:7721:8622":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:10147:44867":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"6:6925:5089":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:894:7508":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:1493:7385":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:10048:44868":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"13:232:59694":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:11168:44802":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:2062:2162":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"20:4201:5604":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"16:7754:8712":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"6:4346:5062":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:16008:2016":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:48646:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"6:4198:5046":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:48980:57269":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:13377:50808":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:5763:7332":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:12127:7430":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:12994:8010":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:49501:8029":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:10211:44869":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:15985:1996":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:15736:9413":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:10861:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:7310:52196":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:13653:7465":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:53385:7877":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"18:694:9071":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:11945:45015":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"16:7063:8699":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:7816:2592":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"6:1544:41316":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:11305:44805":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:10240:8934":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"5:7856:9373":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:15373:7567":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:49759:8047":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:4670:2162":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"2:50478:201":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:7951:7531":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"17:12496:49683":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:12607:49751":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:1507:7388":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:13227:7770":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:12119:2227":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:46894:7715":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:11956:45016":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:11467:2648":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:9948:44796":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:6983:7318":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:10364:9012":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:12048:49590":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:53423:7897":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"16:4743:43776":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"16:4198:43591":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:11096:2202":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:11262:2227":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"20:1506:3629":{"crate_id":20,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:46774:7699":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"20:154:2544":{"crate_id":20,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:52529:7858":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"20:3498:5067":{"crate_id":20,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:12029:7482":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"5:1694:8338":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:10886:7545":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:53488:23092":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:49890:8055":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"16:5273:43160":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:14926:9410":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"5:1644:7381":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"20:3336:5050":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"16:3007:8869":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:11516:15679":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:12302:49669":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:2187:578":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"12:1103:7392":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:10590:7505":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:12157:49659":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:9958:60566":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:2027:145":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"5:994:8331":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"5:1635:7380":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:24682:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:13953:50930":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:48941:7824":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:10390:2142":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:24847:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"17:11615:45529":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:1236:44866":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:8849:8999":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"12:466:59693":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"16:4942:43831":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"12:952:7389":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:9407:7473":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"6:4332:5061":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:50581:7370":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"17:13840:50891":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:3734:137":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:16006:2014":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:1633:7393":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:2751:7367":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:12222:49664":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:46621:8119":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"20:1402:3620":{"crate_id":20,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"16:3077:8928":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:47812:7184":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"16:6433:8688":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:6461:7317":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"16:4775:43784":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:13073:50282":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:51827:7857":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:3274:2425":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"6:5547:1665":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:24101:8087":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:3342:7418":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:49399:8022":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:15968:51794":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"6:634:2870":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"18:136:51286":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"12:353:59681":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:51250:7878":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:12957:50226":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"6:1634:3626":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"5:2200:9355":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:12455:49680":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:9663:52250":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"1:10401:52203":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:46872:7713":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"5:4306:7379":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"5:920:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"20:3011:5020":{"crate_id":20,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:11256:44767":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:49577:2173":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:50552:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"12:1121:7393":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:12573:49688":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:47669:2227":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1:4639:2162":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:46915:2172":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:53545:23097":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"6:672:2888":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"18:744:60585":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:48962:2223":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:11212:9003":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:14017:187":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:23152:7683":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"6:4110:5041":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"6:5331:42112":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:15217:7457":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"20:5479:5087":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:15456:31679":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:46745:7696":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:7999:9385":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"2:51512:56794":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"18:849:9060":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"5:6961:8226":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"5:3370:7411":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:11534:2213":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"20:590:2868":{"crate_id":20,"path":["libc","unix","tms"],"kind":"struct"},"2:47694:7245":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"1:1190:12255":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"1:15996:2004":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"12:815:7386":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:10476:8984":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"19:117:60591":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"2:48925:7403":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:46435:7925":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"6:4440:5606":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:5216:5597":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:25381:7976":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"6:593:2864":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"5:8167:7184":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:5675:7310":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"5:792:108":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:12687:49757":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:46835:7709":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:56416:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:46548:8197":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:6814:7317":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"10:0:1974":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"20:3213:5040":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:49469:8026":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:23248:17543":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"17:510:44775":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:48749:7270":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"5:3970:9353":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:45944:7761":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:2159:7184":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"9:0:1973":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:46806:7701":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:49419:8024":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"12:2280:7394":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"9:927:42453":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:9431:44788":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:13196:50335":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:5408:8191":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:11754:45709":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:51272:7866":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:11309:52144":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"2:3525:132":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:11514:45482":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:15957:12256":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:5952:7611":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:3325:2124":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:3347:7739":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:16001:2009":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"6:5274:42100":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:53215:7874":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:24172:40582":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"2:3431:7659":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:11466:8013":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"5:3759:2227":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"6:5567:5630":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:50326:8067":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"14:231:8235":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"20:1574:3637":{"crate_id":20,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:14593:2118":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"6:545:2859":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"6:4516:5068":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:24367:40608":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"20:3505:5068":{"crate_id":20,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:15997:2005":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:9131:44784":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:13584:50833":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:56455:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:9836:60556":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"16:4903:43816":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"16:5998:8580":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:23036:7685":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"6:6129:6091":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:3729:224":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"9:996:8445":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:13557:50830":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:12674:49756":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"20:3075:5024":{"crate_id":20,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"6:1531:3616":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:13257:50381":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"6:1558:3618":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:4752:102":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:7701:7479":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"16:7025:8602":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"12:1703:8525":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:4446:5063":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:46156:7374":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:5030:7287":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:28191:7831":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"20:4167:5586":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:13306:50448":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"20:3405:5057":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"7:38:42334":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:8954:8976":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:48014:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"18:829:9059":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"12:1238:8513":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:5880:7608":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"1:11105:2137":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"16:7684:8621":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:49409:8023":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:3275:7728":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:48140:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:56468:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"20:3196:5038":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:10459:7275":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:3192:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:51304:7899":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:2219:1050":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:11937:45017":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:294:60564":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"5:1618:7184":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"5:1195:59485":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"16:2883:8885":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:49482:8027":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:11329:51820":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"1:8051:7532":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"17:12143:49658":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"14:189:43081":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:11676:2227":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:10878:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"20:1447:3624":{"crate_id":20,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:9275:43160":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"6:5178:5593":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"12:2419:2107":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"7:85:42341":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"16:5923:8675":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"20:4117:5596":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:11420:7612":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:15991:2001":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"18:637:60578":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:46073:197":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:22910:7680":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"17:10558:45010":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:46884:7714":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:5398:7567":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"5:8362:58142":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"20:1553:3634":{"crate_id":20,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:48388:7272":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:12959:8048":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"6:5405:42115":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"5:8128:8332":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"16:7702:8620":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:0:488":{"crate_id":2,"path":["core"],"kind":"module"},"17:12585:49702":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:13522:50826":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"16:6549:8627":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"16:6717:8695":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"6:527:2856":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:13029:50279":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:10115:9040":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:47972:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"20:2992:5018":{"crate_id":20,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:57756:57271":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"16:6468:8689":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:11573:8018":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"5:2330:8342":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"6:161:2544":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"16:7782:8618":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"16:3029:8870":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"20:4136:5598":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:10589:7313":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"16:7659:8710":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:5008:7346":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"2:3103:7313":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:10723:7402":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:10058:9043":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:12043:7483":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"16:6277:8684":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"16:5303:8651":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:11489:7320":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:2397:13260":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"5:8379:8232":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:13331:50450":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:10660:45014":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"16:7355:8611":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"6:5390:5053":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:15059:51833":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:5741:7329":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"16:5745:8671":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"8:0:1972":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:12740:2115":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"2:53583:23099":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:11693:2230":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"5:2262:8343":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:13941:150":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:2793:7368":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:50219:8126":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:3178:228":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"1:3194:2116":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:52495:7876":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:10136:44794":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:23099:7344":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:1551:3617":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"20:493:2855":{"crate_id":20,"path":["libc","unix","utimbuf"],"kind":"struct"},"5:8316:8118":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:0:1331":{"crate_id":1,"path":["std"],"kind":"module"},"6:4148:5043":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"16:6980:8697":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:9587:60549":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"1:10451:9404":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:4400:7553":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:50375:8137":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"2:47796:2227":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"6:4493:41922":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:9084:2264":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:3401:7416":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"16:4716:43773":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:12282:49668":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"16:4599:43752":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:11890:49478":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:50363:7500":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"1:6104:7576":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:3279:106":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:13873:50915":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"5:6695:8288":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:1651:7395":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"6:6896:5086":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:13887:50921":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"6:4160:5044":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:5982:7614":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:2433:13271":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"6:6034:2648":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:12087:51832":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"2:4066:7372":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"1:8505:7431":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"5:0:277":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:46534:8055":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"6:5366:42113":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:47888:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"16:2937:8890":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:52465:7873":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"16:4316:43661":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:11968:49485":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:23624:7686":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:46408:7365":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:681:44777":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:50488:34597":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:46668:9375":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"20:1547:3633":{"crate_id":20,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:13495:50821":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:1446:7380":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:49845:2176":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"9:749:8382":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"5:8175:194":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:49381:8020":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:11504:8014":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"12:2040:7382":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"20:4886:3550":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:1727:3634":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:13515:50825":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"6:1600:3622":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:32469:7125":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:24209:57683":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:50008:7779":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"5:1215:8340":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:12117:49656":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:14601:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:14232:2195":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"17:9466:44789":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"5:3048:58220":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:10688:146":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"12:2072:7414":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"6:4048:5033":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:7141:15678":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:13585:52255":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"16:3340:8857":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"16:2959:8868":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"5:6771:2162":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:10988:45067":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:2934:180":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:24400:8103":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"6:5447:42120":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:9883:60561":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:49456:7694":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:9491:54298":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:9742:7560":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"2:53339:7859":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:24715:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:22963:7921":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"2:3297:7729":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"17:12527:49685":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"20:3102:4904":{"crate_id":20,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:11381:45196":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:3758:7640":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:4080:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:13404:50810":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:24030:8086":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"6:6097:3553":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:10455:8981":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:9409:7518":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"16:6141:8681":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:14122:57206":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"16:7768:8617":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:8001:7763":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"5:6659:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"6:1567:3619":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"18:857:9061":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:4510:2191":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:7465:185":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"16:2813:8884":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"12:933:7387":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"16:3129:8880":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"13:0:1970":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:900:7509":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:11769:45712":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:9651:52261":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"17:12237:49665":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:4512:2192":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:46678:13877":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:46518:8195":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"6:4474:5066":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:50176:7788":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:10068:8962":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"6:6229:6097":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"20:4225:5607":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:48056:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:49172:8215":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"5:5415:2162":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:24276:40588":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:32435:7124":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:13463:50817":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"6:4067:5036":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:14238:8077":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"5:5875:9362":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"1:4471:2195":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"16:3297:8929":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"12:2059:7412":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:3376:7751":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"5:3039:58219":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:11352:15004":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"5:3362:7413":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:16004:2012":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"16:7868:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:3287:7291":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1:7819:7485":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:53675:23103":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:1302:143":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:15465:52149":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:13232:7775":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"16:6604:8693":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:13141:2235":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:46475:8200":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:11563:45491":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:14563:52145":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:47131:2201":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:14027:7480":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:4300:2139":{"crate_id":1,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"17:542:8586":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:13215:50337":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:51435:7867":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:47727:7246":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:56442:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:5478:42121":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:12758:49828":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"20:3163:5033":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:6591:7703":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:46925:7717":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"6:3981:1856":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"16:3743:43208":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:11089:2200":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:15211:7456":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:5395:7566":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:52002:56821":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:2362:600":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:13566:13271":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"17:12482:49682":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:12660:49755":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:1482:7383":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"2:22763:57471":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:15009:7482":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:13529:50827":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:13247:50380":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"20:3120:5028":{"crate_id":20,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:1619:7392":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:3358:7744":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"20:579:2866":{"crate_id":20,"path":["libc","unix","sigval"],"kind":"struct"},"2:23089:7313":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:10571:9032":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"6:626:2869":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"12:432:8515":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:4051:7373":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"2:3516:2427":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:45991:196":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"5:1653:7384":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:53534:23096":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:2967:184":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:51781:7872":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:4277:5055":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:13271:50383":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:15986:1997":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:24225:40570":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:11174:7348":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"16:7079:8700":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:7956:52247":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"2:23823:7343":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"16:6490:8690":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:11822:45728":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:9035:7809":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:3740:7636":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"16:6050:8677":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:13612:50841":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:13430:109":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"20:5011:6095":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:12242:2261":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"16:6630:8902":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:13016:50227":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:15199:7450":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"16:5530:8662":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:10684:12252":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:5460:8660":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:2314:9013":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:3581:7736":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"20:3396:5056":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:47140:36252":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:13755:50881":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:3577:7404":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"16:6286:8530":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:46149:7641":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:13975:50966":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"5:1607:7379":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"6:6243:42160":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"17:2512:9011":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:11463:7316":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:11587:8019":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:13221:7774":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:4416:41920":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"20:3459:5063":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:6856:6098":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:9757:7561":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"5:5837:8218":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:3364:7747":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:12431:49678":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:4378:7184":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"12:940:7388":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"16:4689:43770":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"18:668:9070":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"6:513:2854":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:12250:49666":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:12170:49660":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:12742:9408":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:48395:7271":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"5:7386:7184":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"6:3933:5023":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:8313:7532":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"6:4340:41911":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"5:1011:2227":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:13539:50828":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"20:1366:3615":{"crate_id":20,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:7369:8612":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:24374:8154":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"16:6331:8529":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"12:2045:7383":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"1:10981:2187":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"16:7100:8702":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:2188:7414":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"6:5378:42114":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:12300:7495":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:2194:7121":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"6:4425:5601":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:50151:7786":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:8949:7594":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"2:2921:183":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"5:8183:8231":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"16:7051:8698":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"16:7200:8628":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:46853:7711":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"9:776:8426":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"13:120:43036":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"16:2754:8858":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:10899:45082":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"6:4218:5048":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:12262:7442":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"17:12209:49663":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:14948:9412":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"16:2733:8582":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"14:216:43090":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:12921:50225":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:10586:45011":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:11138:2171":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:4728:7764":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"16:4439:43688":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"5:8122:7184":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:8902:44778":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:10545:45009":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:56429:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"20:505:2857":{"crate_id":20,"path":["libc","unix","timespec"],"kind":"struct"},"20:4196:5603":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:6723:7020":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:10728:7823":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"5:1486:7395":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:9198:52182":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"18:152:51287":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:10461:7276":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:8543:136":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:4020:5030":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:53027:7870":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:49855:8051":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:49561:8037":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"20:2998:5019":{"crate_id":20,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:11013:44797":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"6:1680:3629":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"5:6418:223":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:24284:40606":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:11246:7353":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"16:7323:8631":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"1:1017:7532":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"12:764:7379":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:47804:7379":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:3417:7652":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"6:1704:3631":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:14401:7461":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:11607:2224":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:11031:44798":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:24388:8104":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"16:5257:43161":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"20:4833:6088":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"20:4147:5599":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:10476:9406":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"16:5427:8658":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"18:678:142":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:50342:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"16:5176:44017":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:46593:8117":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:6979:6444":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:2183:7413":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"6:6902:5087":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:23929:7313":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:12072:8031":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:13507:50824":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:49865:8052":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"20:1414:3621":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:9028:2234":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"16:6643:8903":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"12:1147:7394":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:10611:7513":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:11431:8012":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:7810:7190":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:11068:8975":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"6:4242:5050":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:11603:45528":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:9746:44792":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:10821:2114":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"6:6914:41941":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:8323:2251":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"16:3155:8871":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:6514:7702":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"6:4392:41917":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:4:979":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:11142:44801":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"12:750:2227":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"6:539:2858":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"6:4179:5045":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:53499:23093":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:46007:194":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:9885:9403":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"6:5455:59537":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:2162:7382":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"16:4628:43757":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:9529:7772":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:11439:7568":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"16:2792:8598":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:12160:7434":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"20:4935:6091":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"18:774:60578":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:15480:8541":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:52341:7881":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"5:1235:8341":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:48679:107":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"1:1501:7387":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"14:11:43081":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"14:250:43089":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:10455:7274":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"20:0:798":{"crate_id":20,"path":["libc"],"kind":"module"},"5:4215:7382":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:10304:8968":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"16:7090:8701":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:52679:7882":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"20:558:2863":{"crate_id":20,"path":["libc","unix","pollfd"],"kind":"struct"},"2:50334:8062":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:783:9403":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"1:5749:7330":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:10422:44908":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:9916:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:9064:44782":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:13037:50281":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"6:5541:5629":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:12770:49831":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:10451:7272":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"6:4055:5034":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:10440:109":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:46423:7924":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:13926:138":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:820:9403":{"crate_id":1,"path":["std","thread","local","os","Key"],"kind":"struct"},"2:46714:7693":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:9539:9000":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:39004:7730":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"18:790:9055":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"6:6671:42181":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"3:321:205":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:50087:7784":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:11666:2226":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:9031:7678":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:56403:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:14052:34598":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"20:4863:3578":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:46235:7944":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:6961:7323":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:52259:7896":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"20:4123:5597":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:53519:23095":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"20:5473:5086":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:9873:44794":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:3200:1922":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"17:12003:49532":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:13708:50843":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:7756:7481":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"6:6931:5090":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:6908:5088":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:47660:7183":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:48409:7274":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"20:3081:5025":{"crate_id":20,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"5:8210:7184":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:48098:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:12512:49684":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:10082:9037":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"16:3221:8874":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:47736:7241":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:50306:8061":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"6:4028:5031":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:10166:44865":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:9326:8969":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:13212:7772":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"5:7118:9367":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"2:3423:7655":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:12105:8032":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"20:1488:3627":{"crate_id":20,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"12:777:7184":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"6:1694:3630":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"9:809:2223":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:49491:8028":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:12257:2269":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:13202:7771":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"20:3231:5042":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"16:5238:43163":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:14624:2137":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:3411:7649":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:6483:7338":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"6:4127:41908":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"9:1075:8447":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"20:4903:3553":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:48661:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"2:46904:7716":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:46588:100":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:49549:7690":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"16:4381:43678":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:8929:44779":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"6:3920:5022":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:12557:49687":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:9561:8977":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:3519:130":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"20:5485:5088":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"5:5833:8220":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:51924:56855":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"6:0:798":{"crate_id":6,"path":["libc"],"kind":"module"},"20:1590:3638":{"crate_id":20,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:10831:2117":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"6:5582:42137":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:10449:7271":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:46723:2171":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"20:3379:5054":{"crate_id":20,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"20:543:2861":{"crate_id":20,"path":["libc","unix","hostent"],"kind":"struct"},"2:51180:56820":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"16:6504:8691":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:32831:7127":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"6:4509:5067":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"6:3960:5024":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:16005:2013":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:8250:2200":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:4741:2140":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"12:869:7382":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:9796:60563":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"6:6937:5091":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:14:2080":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:51405:7879":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"16:5348:8653":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:10394:9010":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:5522:7574":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:32535:57428":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"20:4813:2739":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:10127:7997":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:12130:49657":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:8506:7707":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"6:6120:6090":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:11286:7379":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:47113:1848":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:50039:7783":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:4740:7765":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:9004:44780":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:12228:2260":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:9636:44790":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:10913:45091":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:11148:2172":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"18:611:9066":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:10700:7397":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"1:4473:2196":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:10291:8965":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:3427:7657":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"6:6027:6088":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"12:971:7390":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:23835:57281":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"20:1559:3635":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:22740:57476":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"5:7831:9367":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"6:4088:5039":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:53636:23102":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:50199:8125":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:1518:7389":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:2166:7383":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"6:157:2543":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:14558:52147":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"17:2484:44897":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:9206:44785":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:14229:2193":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"20:4190:5602":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlmsgerr"],"kind":"struct"},"1:15990:2000":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:13779:7487":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"18:837:7774":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:14634:51822":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"18:704:60578":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:12746:44805":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:9087:2265":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"5:1441:7392":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:8434:8326":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"1:8217:9385":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"1:5085:7464":{"crate_id":1,"path":["std","net","ip","display_buffer","IpDisplayBuffer"],"kind":"struct"},"5:4443:2227":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:2866:7759":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"16:7379:8632":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"20:3371:5053":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Chdr"],"kind":"struct"},"20:1371:3616":{"crate_id":20,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:11314:8972":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"16:6310:8685":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:23287:7313":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:4394:7551":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:3169:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1:13916:7479":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"17:11494:45422":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:3561:1846":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:9790:9401":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"2:2769:579":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"16:3478:8877":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:16010:2018":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:4008:44984":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:5204:5595":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"5:8302:8303":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"5:8285:101":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:12057:7484":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:2177:7412":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"15:248:8533":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:7356:186":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:3812:7840":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:24261:7964":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:6774:57082":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"1:8714:2259":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:8748:157":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:8997:2271":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:13747:50880":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:49591:2175":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"16:5412:8657":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:3323:2123":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:12620:49752":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:11701:45590":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"20:3048:5023":{"crate_id":20,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:13602:50840":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"16:3908:43325":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"5:6264:8261":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:11579:45492":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:13660:50842":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:5982:3549":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:3269:211":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:51160:56823":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"12:399:8516":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"16:5396:8656":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"6:1537:41315":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:24979:164":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"16:5362:8654":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:51605:7888":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"}},"external_crates":{"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"20":{"name":"libc","html_root_url":null},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":18}