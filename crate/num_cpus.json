{"root":"0:0:2473","crate_version":"1.16.0","includes_private":false,"index":{"2:13220:28170":{"id":"2:13220:28170","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13221:28171"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42003:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13237:28185":{"id":"2:13237:28185","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12885:17751"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12891:9941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12891:9941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12906:17749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13198:33238":{"id":"2:13198:33238","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13251:28173":{"id":"2:13251:28173","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12885:17751"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12700:9952","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12891:9941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5632:33958":{"id":"5:5632:33958","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7645:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13227:31312":{"id":"2:13227:31312","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13226:31302"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44178:10150","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13269:28181":{"id":"2:13269:28181","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42003:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12891:9941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13244:7310":{"id":"2:13244:7310","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42005:191","prim@char":"1:12341:471","self::pattern":"2:12885:17751"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42003:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12891:9941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12891:9941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12906:17749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13263:28177":{"id":"2:13263:28177","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12885:17751","str::rsplitn":"2:13266:28179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43999:9957","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12891:9941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13287:2622":{"id":"2:13287:2622","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13307:33256":{"id":"2:13307:33256","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12885:17751"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12891:9941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12891:9941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12906:17749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13272:28182":{"id":"2:13272:28182","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42003:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12891:9941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12891:9941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12906:17749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13196:997":{"id":"2:13196:997","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12341:471"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13275:2846":{"id":"2:13275:2846","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12885:17751","`DoubleEndedIterator`":"2:8263:129","prim@char":"1:12341:471","str::rmatches":"2:13278:33247"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44099:10146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12891:9941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13301:2664":{"id":"2:13301:2664","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12885:17751"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42003:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12891:9941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:72:2346":{"id":"0:72:2346","crate_id":0,"name":"get","span":{"filename":"src/lib.rs","begin":[73,0],"end":[75,1]},"visibility":"public","docs":"Returns the number of available CPUs of the current system.\n\nThis function will get the number of logical cores. Sometimes this is different from the number\nof physical cores (See [Simultaneous multithreading on Wikipedia][smt]).\n\nThis will always return at least `1`.\n\n# Examples\n\n```\nlet cpus = num_cpus::get();\nif cpus > 1 {\n    println!(\"We are on a multicore system with {} CPUs\", cpus);\n} else {\n    println!(\"We are on a single core system\");\n}\n```\n\n# Note\n\nThis will check [sched affinity] on Linux, showing a lower number of CPUs if the current\nthread does not have access to all the computer's CPUs.\n\nThis will also check [cgroups], frequently used in containers to constrain CPU usage.\n\n[smt]: https://en.wikipedia.org/wiki/Simultaneous_multithreading\n[sched affinity]: http://www.gnu.org/software/libc/manual/html_node/CPU-Affinity.html\n[cgroups]: https://www.kernel.org/doc/Documentation/cgroup-v1/cgroups.txt","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13325:28033":{"id":"2:13325:28033","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:991:37768"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13321:27512":{"id":"2:13321:27512","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13195":{"id":"2:13195","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13196:997","2:13197:2699","2:13198:33238","2:13199:33239","2:13201:33240","2:13204:27403","2:13205:33241","2:13206:336","2:13207:2384","2:13208:2346","2:13210:28142","2:13212:28143","2:13214:28144","2:13216:33242","2:13217:33243","2:13218:28166","2:13219:28167","2:13220:28170","2:13221:28171","2:13223:9973","2:13224:10159","2:13225:7301","2:13226:31302","2:13227:31312","2:13228:2615","2:13229:33244","2:13230:31298","2:13231:28183","2:13234:28184","2:13237:28185","2:13240:2683","2:13244:7310","2:13248:2618","2:13251:28173","2:13254:28175","2:13257:33245","2:13260:33246","2:13263:28177","2:13266:28179","2:13269:28181","2:13272:28182","2:13275:2846","2:13278:33247","2:13281:33248","2:13284:33249","2:13287:2622","2:13289:33250","2:13291:33251","2:13293:33252","2:13294:33253","2:13295:33254","2:13298:33255","2:13301:2664","2:13304:28186","2:13307:33256","2:13310:33257","2:13313:33258","2:13316:2466","2:13318:27507","2:13319:28028","2:13320:27511","2:13321:27512","2:13322:27513","2:13323:28031","2:13324:28032","2:13325:28033","2:13326:33259","2:13328:12428","2:13329:33260"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:0:2473":{"id":"0:0:2473","crate_id":0,"name":"num_cpus","span":{"filename":"src/lib.rs","begin":[1,0],"end":[485,1]},"visibility":"public","docs":"A crate with utilities to determine the number of CPUs available on the\ncurrent system.\n\nSometimes the CPU will exaggerate the number of CPUs it contains, because it can use\n[processor tricks] to deliver increased performance when there are more threads. This \ncrate provides methods to get both the logical and physical numbers of cores.\n\nThis information can be used as a guide to how many tasks can be run in parallel.\nThere are many properties of the system architecture that will affect parallelism,\nfor example memory access speeds (for all the caches and RAM) and the physical\narchitecture of the processor, so the number of CPUs should be used as a rough guide\nonly.\n\n\n## Examples\n\nFetch the number of logical CPUs.\n\n```\nlet cpus = num_cpus::get();\n```\n\nSee [`rayon::Threadpool`] for an example of where the number of CPUs could be\nused when setting up parallel jobs (Where the threadpool example uses a fixed\nnumber 8, it could use the number of CPUs).\n\n[processor tricks]: https://en.wikipedia.org/wiki/Simultaneous_multithreading\n[`rayon::ThreadPool`]: https://docs.rs/rayon/1.*/rayon/struct.ThreadPool.html","links":{},"attrs":["#![deny(missing_docs)]","#![allow(non_snake_case)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:72:2346","0:73:2364"],"is_stripped":false}}},"5:5636:27510":{"id":"5:5636:27510","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13322:27513"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13199:33239":{"id":"2:13199:33239","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13224:10159":{"id":"2:13224:10159","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12341:471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43871:10140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13216:33242":{"id":"2:13216:33242","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12347:1721","str::slice_mut_unchecked":"2:13217:33243","crate::ops::Index":"2:39549:12455"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13234:28184":{"id":"2:13234:28184","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12885:17751"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12891:9941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5634:2970":{"id":"5:5634:2970","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7645:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13225:7301":{"id":"2:13225:7301","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43881:2943","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13293:33252":{"id":"2:13293:33252","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13323:28031":{"id":"2:13323:28031","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:991:37768"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5633:33959":{"id":"5:5633:33959","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:304:3171","`String`":"5:7645:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:304:3171","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13318:27507":{"id":"2:13318:27507","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13210:28142":{"id":"2:13210:28142","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42005:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42003:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10975:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10975:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13219:28167":{"id":"2:13219:28167","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13218:28166","str::split_at_mut_checked":"2:13221:28171"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13228:2615":{"id":"2:13228:2615","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44149:2940","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13204:27403":{"id":"2:13204:27403","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12432:17752"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13294:33253":{"id":"2:13294:33253","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13229:33244":{"id":"2:13229:33244","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44159:10148","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13310:33257":{"id":"2:13310:33257","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12885:17751"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12891:9941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13324:28032":{"id":"2:13324:28032","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:991:37768"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5617:33955":{"id":"5:5617:33955","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:304:3171","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:304:3171","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13260:33246":{"id":"2:13260:33246","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12885:17751","str::split":"2:13248:2618","prim@char":"1:12341:471","str::split_terminator":"2:13257:33245"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43963:10143","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12891:9941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12891:9941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12906:17749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13289:33250":{"id":"2:13289:33250","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73:2364":{"id":"0:73:2364","crate_id":0,"name":"get_physical","span":{"filename":"src/lib.rs","begin":[108,0],"end":[110,1]},"visibility":"public","docs":"Returns the number of physical cores of the current system.\n\nThis will always return at least `1`.\n\n# Note\n\nPhysical count is supported only on Linux, mac OS and Windows platforms.\nOn other platforms, or if the physical count fails on supported platforms,\nthis function returns the same as [`get()`], which is the number of logical\nCPUS.\n\n# Examples\n\n```\nlet logical_cpus = num_cpus::get();\nlet physical_cpus = num_cpus::get_physical();\nif logical_cpus > physical_cpus {\n    println!(\"We have simultaneous multithreading with about {:.2} \\\n              logical cores to 1 physical core.\", \n              (logical_cpus as f64) / (physical_cpus as f64));\n} else if logical_cpus == physical_cpus {\n    println!(\"Either we don't have simultaneous multithreading, or our \\\n              system doesn't support getting the number of physical CPUs.\");\n} else {\n    println!(\"We have less logical CPUs than physical CPUs, maybe we only have access to \\\n              some of the CPUs on our system.\");\n}\n```\n\n[`get()`]: fn.get.html","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13201:33240":{"id":"2:13201:33240","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13199:33239"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13326:33259":{"id":"2:13326:33259","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4951:33259"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44194:10054","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13322:27513":{"id":"2:13322:27513","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13320:27511":{"id":"2:13320:27511","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13230:31298":{"id":"2:13230:31298","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44187:9972","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13298:33255":{"id":"2:13298:33255","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12885:17751"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12891:9941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5618:7258":{"id":"5:5618:7258","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7645:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12891:9941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13240:2683":{"id":"2:13240:2683","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42005:191","prim@char":"1:12341:471","self::pattern":"2:12885:17751"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42003:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12891:9941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13217:33243":{"id":"2:13217:33243","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12347:1721","crate::ops::IndexMut":"2:3417:12456","str::slice_unchecked":"2:13216:33242"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13221:28171":{"id":"2:13221:28171","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13220:28170"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42003:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13329:33260":{"id":"2:13329:33260","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4949:33260"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44212:10053","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13248:2618":{"id":"2:13248:2618","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12885:17751","`DoubleEndedIterator`":"2:8263:129","prim@char":"1:12341:471","str::split_whitespace":"2:13226:31302","str::rsplit":"2:13254:28175"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43895:2944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12891:9941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13226:31302":{"id":"2:13226:31302","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13227:31312"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44169:10149","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13304:28186":{"id":"2:13304:28186","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12885:17751"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42003:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12891:9941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12891:9941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12906:17749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13319:28028":{"id":"2:13319:28028","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39904:17829","Self::is_ascii":"2:13318:27507"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42003:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39904:17829","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5616":{"id":"5:5616","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5617:33955","5:5618:7258","5:5621:33956","5:5624:33957","5:5632:33958","5:5633:33959","5:5634:2970","5:5635:27509","5:5636:27510"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13284:33249":{"id":"2:13284:33249","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12885:17751","`DoubleEndedIterator`":"2:8263:129","prim@char":"1:12341:471","str::match_indices":"2:13281:33248"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44063:10145","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12891:9941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12891:9941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12906:17749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13208:2346":{"id":"2:13208:2346","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42005:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42003:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10975:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10975:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13223:9973":{"id":"2:13223:9973","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12341:471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43865:9965","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13266:28179":{"id":"2:13266:28179","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12341:471","str::splitn":"2:13263:28177","self::pattern":"2:12885:17751"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44017:9958","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12891:9941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12891:9941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12906:17749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13257:33245":{"id":"2:13257:33245","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12885:17751","str::split":"2:13248:2618","prim@char":"1:12341:471","`DoubleEndedIterator`":"2:8263:129","str::rsplit_terminator":"2:13260:33246"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43945:10142","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12891:9941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13281:33248":{"id":"2:13281:33248","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12885:17751","`DoubleEndedIterator`":"2:8263:129","prim@char":"1:12341:471","str::rmatch_indices":"2:13284:33249"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44045:10144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12891:9941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13313:33258":{"id":"2:13313:33258","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12885:17751"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12891:9941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12891:9941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12906:17749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5624:33957":{"id":"5:5624:33957","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7645:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13207:2384":{"id":"2:13207:2384","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12360:1851"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13254:28175":{"id":"2:13254:28175","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12885:17751","`DoubleEndedIterator`":"2:8263:129","prim@char":"1:12341:471","str::split":"2:13248:2618"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43913:9955","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12891:9941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12891:9941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12906:17749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13278:33247":{"id":"2:13278:33247","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12885:17751","`DoubleEndedIterator`":"2:8263:129","prim@char":"1:12341:471","str::matches":"2:13275:2846"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44117:10147","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12891:9941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12891:9941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12906:17749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13206:336":{"id":"2:13206:336","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13207:2384","`u8`":"1:12360:1851"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13291:33251":{"id":"2:13291:33251","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13316:2466":{"id":"2:13316:2466","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12846:136","`FromStr`":"2:12845:2996"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42136:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12845:2996","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12845:2996","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5621:33956":{"id":"5:5621:33956","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7645:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12891:9941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13295:33254":{"id":"2:13295:33254","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12885:17751"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12891:9941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12891:9941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12911:17748","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13214:28144":{"id":"2:13214:28144","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10975:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10975:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13212:28143":{"id":"2:13212:28143","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10975:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10975:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13328:12428":{"id":"2:13328:12428","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4952:12428"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44203:9889","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13205:33241":{"id":"2:13205:33241","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13218:28166":{"id":"2:13218:28166","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13220:28170","str::split_at_mut":"2:13219:28167"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5635:27509":{"id":"5:5635:27509","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13321:27512"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13231:28183":{"id":"2:13231:28183","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12885:17751"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12891:9941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13197:2699":{"id":"2:13197:2699","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"6:7485:6898":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:13899:8358":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:9283:115":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:5254:2975":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"1:9202:10504":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"6:8006:7246":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"20:3147:5838":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"6:5181:5860":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:7339:11546":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:13594:8295":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"6:5502:11389":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"17:14402:8450":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:3553:2925":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"20:4042:6376":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:47254:10319":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:47201:10316":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:10530:153":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:888:7314":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:12089:8095":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:2074:11586":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:3336:2966":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:23199:10032":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"1:3297:30631":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:12845:2996":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"6:1723:4444":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:22633:12660":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"2:45877:10194":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:22824:9996":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:669:10349":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"16:6948:9043":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:12289:8112":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:11898:8057":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"16:2355:9003":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"20:4847:4384":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:13399:8249":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:22121:2909":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"12:0:2742":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:11142:7949":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"6:6491:6391":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"20:4272:6434":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:5296:977":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:43963:10143":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:40867:10083":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:14284:8432":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"5:3674:9609":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:12341:471":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:5162:12553":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:43031:7399":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:2316:2679":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:41002:9919":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:10915:34846":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"20:3160:5840":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:47059:10300":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:3181:3220":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"1:938:9610":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:47137:10306":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"5:7668:9748":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:40818:10082":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:2637:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:32295:3222":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:5252:10380":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:8177:17878":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"16:2508:9015":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"16:5781:9038":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:21850:9993":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"20:4077:6399":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"20:3308:5854":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:9469:10517":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"5:6414:12671":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:2698:134":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"16:2572:9018":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:12464:21540":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"6:5624:11415":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"11:1903:9614":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:4986:7829":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"16:2838:9030":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"5:1355:9603":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:43488:9949":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:40695:10073":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"16:6895:9295":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"5:5422:33189":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"5:4162:9609":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"20:1368:4424":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:26051:267":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"16:2303:20457":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:9171:10503":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:13116:8188":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:11648:10546":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:12659:8149":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"2:40412:10053":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:2312:2881":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:3595:17796":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:16235:8973":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"2:4367:9890":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:13723:8325":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:2374:9009":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"6:7412:4356":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"16:7727:9051":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:43945:10142":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"16:5742:9094":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"6:7359:6893":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:8797:2990":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:5911:2925":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:10721:2967":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"17:15289:8709":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:11362:9956":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"6:7561:6902":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"18:670:7772":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"16:5686:9034":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"6:4985:5843":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"20:3226:5848":{"crate_id":20,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:21838:2909":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"6:5064:5849":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:11445:9960":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:42184:9609":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:21639:31267":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"20:563:3672":{"crate_id":20,"path":["libc","unix","sigval"],"kind":"struct"},"2:3020:9758":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"2:46335:10231":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:43871:10140":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:922:9611":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"6:5277:11301":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"6:1639:4435":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:12004:17744":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:6455:10386":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:12885:17751":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"17:14298:8433":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:40756:10079":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:14025:8376":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"20:5019:6902":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:11102:7970":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"20:4870:4356":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"18:481:7740":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:12308:27494":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:10689:17978":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"17:15456:8754":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:44099:10146":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"6:5536:5869":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:12422:8128":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:45862:10193":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:39681:2871":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:8265:2958":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"15:327:20442":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:12443:8132":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"6:5290:11306":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:11443:8002":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"16:7559:9422":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:40508:10057":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:39505:17718":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"16:7061:9320":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:9350:9940":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:2863:2909":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"20:4995:6900":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:7366:3454":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"16:7823:21356":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:4842:7404":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:41216:2598":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:15151:8678":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:14079:8384":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:4580:7401":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"6:5361:6406":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"16:4062:9066":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"16:8155:9491":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:43720:10127":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"9:357:20346":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"5:7727:9702":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"6:5160:5856":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"16:6047:9135":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:10018:21395":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:5216:31373":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:21848:12578":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:44621:11675":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:46014:10206":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:11242:7981":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"20:4925:6897":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:13547:10079":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"17:15931:8201":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"6:7314:4355":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:437:7804":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:513:7805":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:43484:11671":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"6:5643:5870":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:5200:5862":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"6:8265:11558":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:41797:12496":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:44815:164":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"20:1436:4431":{"crate_id":20,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:12516:8142":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"1:8344:10428":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:44951:10185":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"11:875:9601":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:8599:10369":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"6:5436:11358":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:11354:7995":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:42729:7391":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:9916:21412":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:11743:8036":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"11:2304:9331":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"18:0:2747":{"crate_id":18,"path":["memchr"],"kind":"module"},"16:7052:9317":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:42031:2993":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:44609:11672":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"17:12342:8119":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"20:3414:5865":{"crate_id":20,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:15281:8708":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:11225:2652":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:8214:145":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:2270:9757":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"5:289:33189":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:7144:12575":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:1958:671":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:9886:21411":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:44687:10175":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"16:3475:9059":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:1853:10354":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"20:4910:6895":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:0:1002":{"crate_id":6,"path":["libc"],"kind":"module"},"2:47097:10302":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"16:4614:9074":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"6:1686:4440":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:957:12439":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:42056:7378":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"20:4781:4355":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:7723:27470":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:521:12413":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:6902:11590":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"2:3220:17715":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"17:15249:8699":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"18:680:7773":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:6084:9903":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"16:5960:9126":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:5329:11320":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"6:6609:11470":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:3661:2906":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"20:4101:6401":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:12597:8146":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"6:6460:6403":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"20:3408:5864":{"crate_id":20,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:11574:8015":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"20:3355:5858":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Chdr"],"kind":"struct"},"1:3389:2968":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:12362:8124":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:46154:10222":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:9451:2915":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:7710:31638":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:14575:8130":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"16:4531:9071":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:3614:32003":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:2489:2895":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:13972:8063":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:13308:8234":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:44327:10160":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:7646:17826":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"11:1891:9611":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"20:0:1002":{"crate_id":20,"path":["libc"],"kind":"module"},"1:9179:7314":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:12030:8090":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:32226:10036":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"17:13785:8341":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:10759:7949":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:11251:9953":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:22718:9994":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:11417:9958":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"16:3669:7837":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:32324:3221":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"1:9743:127":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"1:974:9601":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:11931:10412":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"16:4424:9068":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:10720:34839":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"6:5306:11312":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:41781:9933":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:3601:17795":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"16:7857:9441":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:13568:8290":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"9:0:2739":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"16:7604:9050":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:12863:8164":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:1781:2367":{"crate_id":2,"path":["core","mem"],"kind":"module"},"1:2699:2955":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:46253:10227":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:40378:10050":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"20:3482:5872":{"crate_id":20,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"5:1549:9610":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:15058:8655":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"20:138:3350":{"crate_id":20,"path":["libc","unix","fpos_t"],"kind":"enum"},"7:79:20324":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"16:2438:9012":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"5:3318:9617":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"20:3197:5845":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"6:6441:6401":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"20:3380:5861":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:8560:10475":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:4155:12517":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"16:6588:9231":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"16:4976:9085":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:10578:9947":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:1653:4436":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:12213:8106":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:4800:5825":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:12478:8135":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"14:160:9582":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"16:8216:9497":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:32201:10034":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:12887:8165":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"5:304:3171":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:22927:31404":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:4147:12516":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:44629:11677":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:10534:34847":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:12485:21541":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:10947:2902":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"17:13173:8200":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"6:5320:11317":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:13187:8201":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"20:1522:4438":{"crate_id":20,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"20:1350:4421":{"crate_id":20,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"20:5033:6903":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","termios2"],"kind":"struct"},"17:13877:8357":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"6:5174:5859":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"11:1883:2993":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:22911:10004":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:8093:10422":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"16:7695:9429":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:32294:3167":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:13581:8294":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:3365:17707":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"20:4817:6893":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:4002:10368":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"18:726:7785":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:4917:12524":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"20:4180:6408":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"11:1107:9606":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:12352:738":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"11:811:9702":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:11005:10422":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"5:3820:9707":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:9721:2901":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"1:1614:9702":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:40808:10081":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:2640:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:11693:11698":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:45930:10201":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:14587:8481":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:9737:21393":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"17:13146:8192":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"20:1558:4443":{"crate_id":20,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:9938:21413":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:10938:10518":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"2:9461:9941":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:40435:17822":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:13774:8338":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:11557:8010":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"11:1923:9617":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:12300:21539":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:15418:8746":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"16:7910:21357":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:41931:10100":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"9:482:20330":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:42982:11670":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"11:787:9595":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:980:9602":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:12107:7949":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:13606:8298":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:15342:8724":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:12189:8104":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:16198:8964":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"2:42459:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:4811:5826":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:1207:7809":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:38256:17895":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"16:8202:9054":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:11595:8022":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:15760:8856":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"5:6775:33189":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"5:40:12457":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:1610:9611":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:33663:17887":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:14529:8472":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"5:1559:9592":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"6:5250:5867":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"16:3614:9060":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"16:5367:21343":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:650:10346":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"6:5477:5823":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:10399:2943":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"11:2383:2993":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"20:1514:4437":{"crate_id":20,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:43023:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"17:15463:8756":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:14516:8471":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:1916:10358":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"16:4718:9076":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:14246:8427":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"6:1680:4439":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:41825:11661":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"16:7549:9421":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"20:3425:5866":{"crate_id":20,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:15376:8737":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:46139:10221":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:10612:7946":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:46861:10294":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:12347:1721":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:11513:27616":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"6:5283:11304":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:41225:9924":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:13524:9983":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"5:4451:33192":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"16:7813:9433":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"6:5112:5852":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:13553:8284":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"20:3461:5870":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"20:1377:4425":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:12808:8161":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:16151:8954":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"1:7403:27613":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"16:5802:21344":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:13272:8229":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:45815:10186":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"16:5995:9129":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:11324:7991":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:14912:8633":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:23144:10027":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"2:11963:9962":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"17:9984:21414":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:4919:12526":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:46183:10223":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"16:6385:9214":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"20:3180:5843":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:4921:12527":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:2523:672":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:38311:17896":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"20:536:3668":{"crate_id":20,"path":["libc","unix","iovec"],"kind":"struct"},"17:11853:8053":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:22507:17908":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"5:3046:33063":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:9350:25774":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"16:6120:21347":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:14212:8424":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"11:2423:7314":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"2:2735:202":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:12201:8105":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:12557:7968":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"17:10887:34844":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"16:6079:8988":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"6:4959:5839":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:44313:10157":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"20:527:3667":{"crate_id":20,"path":["libc","unix","hostent"],"kind":"struct"},"2:33462:12572":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:13325:8236":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"16:7656:21355":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:11212:9952":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"20:1543:4441":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:16187:8963":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"1:2461:2884":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:43692:10123":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"6:5515:11390":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"6:1496:11274":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:8294:5896":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:46591:10257":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:5106:12548":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:14847:8593":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"20:5473:5894":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:16165:8957":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"1:10964:10524":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"2:47009:10298":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:5773:12562":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"17:11166:7975":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:4391:109":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:13015:8130":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:6672:2598":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:11848:10368":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:3756:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"20:2976:5823":{"crate_id":20,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:42264:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:47231:10318":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"11:2231:8015":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"1:6566:186":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:22605:12659":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"17:12127:8097":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:46314:10230":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"16:4856:9081":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:11324:9955":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:44819:219":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"20:4107:6402":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:10251:7794":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"20:3348:5857":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Chdr"],"kind":"struct"},"6:8328:11569":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"16:5914:9118":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"16:6494:9226":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"16:6098:21346":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"9:392:20332":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:12824:21418":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:11605:8023":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"6:5457:11373":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:9969:32025":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:9398:3020":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"1:5509:128":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"6:8341:11573":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:42342:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"6:5296:11309":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:23020:12512":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"5:6612:33189":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:11773:8041":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:44203:9889":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:1607:7314":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"20:3006:5826":{"crate_id":20,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:23078:10021":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"18:635:7765":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:9112:10498":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"16:7355:9368":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:42225:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:494:27601":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"6:5236:5866":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"20:1550:4442":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"20:3401:5863":{"crate_id":20,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"20:614:3694":{"crate_id":20,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"6:4824:5827":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"5:7405:9611":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:12056:8093":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:11016:7961":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"5:939:12441":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"6:5466:11379":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:45947:10202":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"20:55:3273":{"crate_id":20,"path":["libc","unix","DIR"],"kind":"enum"},"6:6746:11515":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"20:4824:3454":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:4952:5838":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:8470:2972":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"16:6160:20456":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:4209:12521":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:1092:9604":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"16:542:8986":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"5:6433:12672":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"5:1570:9593":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:7944:27598":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"6:559:3672":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:14545:8474":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:12313:12435":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:11583:8018":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:968:9599":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"18:643:7742":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:42201:196":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:41240:10087":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"11:2562:11260":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:3174:3218":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:40401:10052":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:32212:10035":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"18:608:7758":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"16:7769:9431":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"6:8300:11563":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"16:5400:7933":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:15010:8646":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"20:1490:4435":{"crate_id":20,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"20:134:3349":{"crate_id":20,"path":["libc","unix","FILE"],"kind":"enum"},"16:6849:9293":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:42715:7390":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:11313:7989":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"17:15944:8215":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"16:4468:9069":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"18:573:7742":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"6:1621:4433":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:4217:12522":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"6:5472:11382":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:7933:2972":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"3:0:505":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:44807:11682":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"1:5616:10383":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:11042:7962":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"16:6480:9035":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"20:4278:2403":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:7429:4359":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:3059:226":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"16:2458:9013":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:3212:17713":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"2:749:190":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"16:2612:9020":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"16:8226:21358":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:16223:8970":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"6:5002:5845":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:4400:10370":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:44633:11678":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:10573:12489":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:4379:9891":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:14012:8375":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"20:5064:6905":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:22493:12668":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"2:22962:31408":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"6:553:3671":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"5:6072:18202":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:46462:10252":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"11:844:12439":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"20:4069:6398":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:12416:9963":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:30624:7265":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:10769:34843":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"16:4802:9079":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:10538:157":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:5022:17816":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:11360:10543":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"2:23177:10030":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"5:5470:17736":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"6:4864:5829":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:9163:2993":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:13064:8181":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:12432:17752":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:40474:10056":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:44902:10183":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"11:2554:34791":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:932:9702":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:4880:12539":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:14876:8604":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"16:6962:9044":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:666:10347":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:3480:2950":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"6:4971:5841":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:6007:2925":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"6:7516:6899":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:46352:10232":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:8187:2898":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:14341:8439":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"5:3251:2993":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"20:3370:5860":{"crate_id":20,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:1671:4438":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:40579:2943":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"17:597:7806":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:12900:8167":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"6:586:3676":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"6:6629:5857":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:44939:9622":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"20:4209:6412":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:6665:21350":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"6:1547:4427":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"9:238:2989":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:23651:236":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"11:1087:34801":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:3523:2973":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"20:4943:6898":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:13363:8242":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"11:2151:9604":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:11567:8012":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"17:14986:8644":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:6676:3021":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"11:2536:11255":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:21583:3232":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"18:589:7752":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"6:5665:11431":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:45909:10196":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"5:7582:9740":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:15624:8818":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:15678:8839":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"16:5415:9092":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:3900:10367":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"20:4151:6391":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:11108:27568":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"6:5370:6407":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:13738:8329":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:532:3668":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:2004:785":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"16:5831:9108":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"5:3805:2958":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:47038:10299":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:11524:8007":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:2708:9024":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:3671:2595":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:39711:10043":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:10323:7390":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"11:1896:9702":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1:9406:2925":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"5:7551:2878":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:9370:11685":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"16:6560:9036":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"5:6566:9611":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:9265:3019":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"16:0:2745":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:8631:10481":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"2:40686:10072":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:10317:7796":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:8689:17876":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:13473:8262":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"18:706:7778":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:39621:215":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"16:8136:9488":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:3134:117":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:11634:8027":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:373:10342":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"11:774:9594":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:21724:12577":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:5632:10384":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:3863:9611":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"1:8617:10479":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"5:7622:9745":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"20:542:3669":{"crate_id":20,"path":["libc","unix","pollfd"],"kind":"struct"},"2:22560:17908":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"6:6880:2403":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:46122:10220":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"16:8188:9495":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:12891:9941":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:43913:9955":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"20:1410:4428":{"crate_id":20,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"20:5479:5895":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:43822:10135":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"16:7633:34828":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"20:4165:6406":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlmsghdr"],"kind":"struct"},"1:11102:27610":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"6:1663:4437":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:13609:33055":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:4811:11156":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"2:22903:10003":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"5:5077:2925":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:1968:10359":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:43895:2944":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:13507:9980":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"2:8234:3170":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:42192:7314":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"5:839:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:11120:2993":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:1625:9615":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"11:396:34794":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:3417:12456":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"16:7799:9040":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"16:7741:9052":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:674:12430":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:43469:10121":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:12355:909":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:12340:1174":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"5:7645:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"16:872:7800":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"1:10922:11688":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"6:6738:11514":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"17:15222:8695":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:12700:9952":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"6:5677:11436":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:12911:17748":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"16:7755:9042":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:10957:139":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"1:12363:1845":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:43812:10134":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:44491:10169":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"20:4806:6892":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:6664:11490":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:42617:3015":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:46204:10224":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:40714:133":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"6:6621:5858":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:14189:8415":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"0:72:2346":{"crate_id":0,"path":["num_cpus","get"],"kind":"function"},"11:430:34806":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:9324:10512":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:9726:27545":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"16:7006:9306":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:40733:9902":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:39603:212":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:47178:10309":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:11764:8040":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"2:42097:12436":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"6:523:3667":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"6:7575:11547":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:10787:32291":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"17:15635:8823":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:1619:9614":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"5:2539:11580":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"20:3071:5831":{"crate_id":20,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:5831:220":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:2060:17918":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"5:4481:2925":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:45845:10190":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:15569:8799":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:22878:10002":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:8204:2899":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"5:2220:9709":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:21622:31269":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"5:2249:11575":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:13636:205":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"16:8259:9389":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:41209:9923":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:32978:9341":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"20:1398:4427":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:7645:17825":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"5:1590:9701":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"16:6246:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"16:6872:9294":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"20:4185:6409":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:46657:10259":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"5:1168:33085":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"20:3080:2605":{"crate_id":20,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:2890:163":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"6:6729:11512":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"17:13946:8364":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:10325:7391":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:39904:17829":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:40391:10051":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:14463:8465":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:3511:211":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"6:5219:5864":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"16:5700:9037":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:42965:7399":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"17:14311:8434":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"10:0:2740":{"crate_id":10,"path":["adler"],"kind":"module"},"2:32766:9344":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:8606:11683":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"5:3284:9616":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:11647:8028":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:10333:7394":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:11115:7972":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:13387:8246":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"16:4771:9078":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"6:5344:11322":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"2:5195:435":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"1:12127:27615":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"18:80:25590":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:5648:113":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:4195:12519":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"20:3471:5871":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"5:2127:9708":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"17:2234:7817":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:4766:12545":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:44344:10161":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:7331:27619":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2:746:12499":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"11:1051:9604":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"16:6532:9229":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:43780:10131":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"5:219:9691":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:4979:5842":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:14177:8413":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:14503:8470":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:12530:8144":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"16:6342:34833":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"20:489:3663":{"crate_id":20,"path":["libc","unix","timespec"],"kind":"struct"},"5:2210:12413":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:22479:2909":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"1:3387:2967":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:47163:10308":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:16121:8946":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"2:10975:239":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"16:7528:9418":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:15720:8845":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:14091:8385":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:39549:12455":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"16:5769:9104":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:12356:891":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"20:5046:6904":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:6712:3029":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"20:3174:5842":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:22455:12665":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1:10764:8061":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"2:44178:10150":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:9433:162":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:8216:139":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"17:14066:8383":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"16:4913:9083":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"16:5927:9119":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:11467:8003":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"16:2854:9031":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"5:7610:9743":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"6:5483:11384":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"2:34394:9350":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:42498:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"20:3363:5859":{"crate_id":20,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:11915:21515":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"16:2808:9029":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:43276:10119":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:11668:10409":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:9755:21391":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"16:7888:9445":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:41202:9922":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"6:5546:5871":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:40536:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"16:4882:9082":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:8498:2907":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:13922:8363":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"14:220:9590":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:15473:8761":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:6916:233":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"6:5014:5846":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"16:7618:9424":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"6:5376:6411":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:14436:8463":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:10647:27606":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"1:5986:3018":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:5952:3016":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:14599:8488":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:4327:12535":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:21637:31276":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"16:7497:9409":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:8488:2904":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:46906:10295":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:42047:7314":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:14868:8603":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"6:4942:5837":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"6:6597:11466":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:7452:6895":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:15266:8706":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:15822:8869":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:33596:17888":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:12365:966":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"16:6504:9227":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:47106:10303":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"18:651:7742":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"16:2936:20485":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:12324:25740":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:5596:10382":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:40541:10060":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:16138:8948":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"5:1184:33171":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:12368:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"17:10877:7951":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:3996:7314":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:14131:8389":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"18:563:7751":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:21671:12581":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:12408:8127":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:16212:8968":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"2:13814:9990":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1:10985:30390":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"11:710:9592":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"16:4830:9080":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:586:10345":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"18:515:7739":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"5:5230:3014":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:11089:7969":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:11341:7994":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:22989:11594":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:44891:31437":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"20:3389:5862":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"20:5455:5891":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"16:6634:9041":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:15214:8693":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"6:5415:11343":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"20:5447:7247":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"20:4773:3587":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:43730:10128":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"16:6991:34827":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"6:5314:11316":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:5046:11286":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:10755:32961":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"6:4916:5834":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"6:6636:11477":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:11286:162":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"2:39581:210":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"16:6940:9301":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:10997:7959":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:10327:7392":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"6:6698:11504":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"6:6678:11495":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:2729:195":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:47293:10335":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"11:1160:9608":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:11787:10366":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:41743:170":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:13538:8278":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:40795:9913":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"18:113:25592":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"14:187:20425":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"16:8093:9483":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"18:598:34848":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:11128:7923":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:44617:11674":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:4161:12518":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"11:2352:9604":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"5:1324:9331":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:12362:1839":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:14235:8425":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:8680:149":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"16:3029:7832":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:11923:10412":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:44470:17764":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:12358:903":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"20:1574:4444":{"crate_id":20,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:10439:7934":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:13412:8251":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:12366:1911":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:12348:1811":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:8249:10425":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:4348:12537":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"6:545:3670":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:46412:10250":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:11930:9961":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"5:1581:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"20:1531:4439":{"crate_id":20,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:7984:3620":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:46784:10293":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:15023:8651":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:45830:10189":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"11:2569:2877":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"16:7648:9427":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"11:1025:9603":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:11293:21446":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:10917:11686":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"11:328:11253":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"20:3119:5835":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"20:4298:6435":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:3291:28011":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:23089:10022":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"6:6650:11488":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:6231:9173":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:9807:21399":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:41231:2973":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:5244:11288":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:42722:7389":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:15324:8720":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"6:1526:4425":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:752:154":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:44829:227":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:11189:7976":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"16:6620:9241":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:13455:8261":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:14723:8490":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:11621:8025":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"6:7537:6900":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:47080:10301":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:3629:17716":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:40552:17955":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:878:9609":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:7988:2909":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"20:1444:4432":{"crate_id":20,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:41965:9934":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:10227:10097":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"1:909:9595":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"20:582:3675":{"crate_id":20,"path":["libc","unix","servent"],"kind":"struct"},"2:45976:10204":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:3376:3168":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"16:5817:9105":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:13509:8267":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"6:5039:11284":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:9317:10511":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"5:3754:33189":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:43767:10069":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:10419:7801":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"6:6505:11444":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:9781:21409":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:4821:7827":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"17:3597:7821":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"20:3086:5709":{"crate_id":20,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:2083:9754":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:4733:7402":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"6:8247:5891":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:11904:10547":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"6:5489:11386":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"6:517:3666":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:13292:8230":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:5770:3398":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:10495:113":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"5:7485:7314":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"6:5423:11348":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:12076:8094":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:44159:10148":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:45962:10203":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"6:497:3665":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:3388:142":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"6:6689:11498":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"20:3443:5868":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:6657:11489":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"16:2768:9027":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:14414:8452":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:16176:8962":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"6:5225:5865":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:12683:8151":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"20:557:3671":{"crate_id":20,"path":["libc","unix","linger"],"kind":"struct"},"11:1910:9615":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"6:6542:6412":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:2528:9016":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"20:1431:4430":{"crate_id":20,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:13999:8373":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:578:3675":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:11654:10408":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"5:7566:9732":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:12367:1419":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"5:1077:33189":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"15:394:20448":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"17:11547:7877":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"11:856:9599":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:14271:8430":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:12360:1851":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"11:2124:9331":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:9214:12568":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:11699:11699":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"6:1593:4432":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:1707:4443":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:8194:2902":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1:4813:11158":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"6:5031:11279":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:15596:8811":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:13791:115":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:4975:10376":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"5:6968:17782":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"2:46043:10208":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"11:1603:9613":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:3200:9345":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"6:8282:5894":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:44481:10165":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"0:0:2473":{"crate_id":0,"path":["num_cpus"],"kind":"module"},"6:7467:6897":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:8306:11564":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:10331:7393":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:40352:10047":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"6:8029:7247":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:46553:10255":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"16:150:8979":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:4789:7403":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:10044:21415":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"6:564:3673":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:40673:2941":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:22839:11591":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:44063:10145":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:13344:8241":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:8257:2956":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"5:1531:9594":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"6:6524:6409":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:10350:7797":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"18:718:7782":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:8625:10473":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:45997:10205":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:3589:146":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"16:6802:9280":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:479:3662":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:13252:8219":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:22638:12658":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"17:13844:8349":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"16:5307:9090":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"6:6417:6399":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:42136:226":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"11:800:9611":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"20:574:3674":{"crate_id":20,"path":["libc","unix","tms"],"kind":"struct"},"1:8862:2993":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:3604:2905":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"6:473:3661":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:13674:8300":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:42578:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:43641:10122":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:6896:9914":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"17:15168:8683":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"6:4870:5830":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"5:1204:33090":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"20:1386:4426":{"crate_id":20,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:3270:9346":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"6:5336:11321":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"17:10954:21426":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:4335:12536":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"20:568:3673":{"crate_id":20,"path":["libc","unix","itimerval"],"kind":"struct"},"5:7449:7314":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:16032:8219":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"17:12792:7897":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"6:5352:11323":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"2:44928:10184":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:8852:2992":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"16:6782:21351":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:10661:7947":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:30586:7263":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"16:7321:7378":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"5:6934:17780":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:2175:21473":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:46058:10209":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"6:6768:11524":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"17:12707:8153":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"6:570:3674":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:6707:9907":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:15814:8866":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"6:4885:2605":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:951:9596":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:15273:8707":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:23166:10029":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"20:3059:5829":{"crate_id":20,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:1636:9617":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:21722:2909":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:14752:8510":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"16:8175:9492":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:13832:8347":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:43854:10139":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:40607:10062":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:8078:12475":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:1069:9331":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:46951:10296":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:6447:6402":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"11:1007:9331":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:9787:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:13661:9985":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:15608:8814":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:11419:7949":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"16:7711:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"20:5461:5892":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"11:832:9610":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:8479:2974":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"5:2302:34749":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:13834:9991":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"20:5494:7248":{"crate_id":20,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:6793:3024":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"6:5260:11290":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"6:7602:6905":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:30618:7264":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:42128:9942":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:11688:8031":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"2:12662:9971":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:7993:3009":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:4290:2925":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"1:9289:10508":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:1101:9608":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"5:6693:7314":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:15769:8860":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"11:1142:9607":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"5:1540:9595":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:12364:1827":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:2693:201":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"5:3661:2993":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:261:7800":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:10772:27603":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:8339:10427":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"5:7743:9750":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"20:501:3665":{"crate_id":20,"path":["libc","unix","rusage"],"kind":"struct"},"6:8197:6903":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:14038:8378":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:9118:199":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"6:5134:5854":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:16093:8939":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"20:4797:3545":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:7360:30262":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:12278:8111":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:23041:2909":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"1:11682:10411":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:42003:194":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:8012:10415":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"20:3257:5850":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:12949:7822":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:13855:8350":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"5:1340:9604":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"6:5052:5848":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"16:8118:9486":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"11:490:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:8058:12433":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"6:6478:6405":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:40316:9889":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:10982:21427":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"1:4319:12534":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"5:3297:34309":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"6:6409:6398":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"19:0:1291":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"11:1728:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"16:7144:21353":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"6:6562:11445":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"16:6412:21348":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"20:3032:5828":{"crate_id":20,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"16:4560:9072":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:10270:2908":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"5:1493:9609":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"20:3209:5846":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:12906:17749":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:44504:10173":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"15:0:2744":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:40664:10071":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"16:7014:21352":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:10421:12564":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"1:1631:9616":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:11764:27344":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:2864:17828":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:12584:7950":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"17:15039:8654":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:1475:156":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:11702:8032":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"17:11715:8033":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"20:3137:5837":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"16:2478:9014":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:14260:8429":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:8349:2959":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"7:32:20317":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:11316:11691":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:12354:733":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"1:6861:3031":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"2:10965:2909":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:2535:2594":{"crate_id":1,"path":["std","io"],"kind":"module"},"1:12359:884":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:8727:32029":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"16:3842:9063":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"18:531:7746":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:2968:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:3334:2965":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:39661:216":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:8541:2944":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"17:15368:8734":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"5:7465:9739":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:21742:9993":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"16:6353:8993":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:11405:7998":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"9:53:20349":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:44613:11673":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:11256:7983":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"16:7085:9321":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"5:4938:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"20:483:3662":{"crate_id":20,"path":["libc","unix","timeval"],"kind":"struct"},"2:22126:12583":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"14:7:9582":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:9410:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:13926:12442":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:4666:12539":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"5:0:309":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:21730:12580":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"5:7634:9746":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"16:6456:21349":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:9393:187":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:11661:8029":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"5:4322:2993":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"16:5347:9091":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"20:4887:4359":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:46221:10225":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:11063:7967":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"16:5075:9088":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:6335:9211":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:40617:10068":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"6:1485:4421":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:8535:2943":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:11865:8054":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"16:3925:9065":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:11916:30732":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"20:5004:6901":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"5:843:9696":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"5:7132:33211":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"15:288:20437":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:11788:8045":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:11233:11681":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"20:1635:4497":{"crate_id":20,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"16:5897:9114":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"6:5212:5863":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:7540:7320":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:15356:8731":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"16:6317:9201":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:22:817":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:10288:143":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"6:7306:3587":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:43229:10110":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"16:6278:9180":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:45894:10195":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:33190:17886":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:8518:2941":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"5:4436:265":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:1755:7516":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"2:8683:12446":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:33730:17889":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:23122:10025":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"2:44419:9975":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:44522:9976":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:8611:12538":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"16:7098:9325":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"5:6176:2925":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"16:4587:9073":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"5:6019:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:8263:129":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:46574:10256":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"10:44:9624":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:12400:17968":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:8181:17877":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:10512:27547":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"2:22546:12669":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:10284:7795":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:12454:8133":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"11:673:2993":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:39718:10044":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:2309:2880":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:367:10340":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:12768:21396":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:3430:2963":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:11013:10385":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"2:3574:17898":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:10269:226":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"2:10321:7389":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:15957:8890":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"2:23100:10023":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"17:12328:8114":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:11201:10499":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:14372:8444":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:3835:12497":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"20:4193:6410":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"11:700:7314":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:4433:17798":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"6:5588:5873":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:4787:5824":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:5838:10386":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:7478:27336":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:10604:10498":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:40567:10061":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:13121:119":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:3473:7820":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:5102:5851":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:8177:2900":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"11:2498:20407":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"1:7925:27611":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"16:7509:9410":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:5845:10387":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"5:7107:33194":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"5:2116:9707":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:8230:127":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:47216:10317":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"11:351:34796":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"2:38201:17894":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:14994:8645":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:38890:17897":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:44117:10147":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:11028:25751":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:15445:8753":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:8030:8061":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"11:1566:20412":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:23155:10028":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"2:3132:3215":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"6:4837:5828":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"5:1441:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:41250:9925":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:32219:7402":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"9:178:20398":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"5:5729:17780":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:5092:12547":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"6:4909:5833":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:22771:9995":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:3432:2964":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:46441:10251":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:2979:137":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:43802:10133":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"6:1565:4429":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"20:4138:6405":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:42039:9609":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:43048:137":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:11268:11690":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"17:15992:8920":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"2:0:563":{"crate_id":2,"path":["core"],"kind":"module"},"2:32237:244":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:32235:237":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:10329:206":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"6:5636:11421":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"14:0:2743":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"5:7415:9737":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"16:3899:9064":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"20:5467:5893":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"20:3286:5852":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:40644:10069":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"6:8259:5893":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"6:6519:6408":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"6:5390:11332":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:22148:9992":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:42176:2993":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:11169:2944":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"6:4897:5832":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"16:7590:9049":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:11251:2915":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"11:2548:11257":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:21669:2909":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"20:3276:5851":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:12959:17757":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"20:1361:4423":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:15102:8667":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"6:5122:5853":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"11:2443:9611":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"9:447:20331":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:8548:2940":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:15190:8689":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:6276:27571":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"5:3410:9702":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"17:12621:8147":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"9:502:9678":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:43881:2943":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"5:883:12440":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:46268:10228":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:15176:8686":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:32236:3166":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:40992:2942":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:3586:2597":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:41943:10369":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"5:7493:7314":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"8:0:2738":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"16:2418:9011":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"5:4087:9611":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"11:299:11250":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:5283:10380":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"14:31:9582":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:10314:119":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1:10355:10525":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"5:7376:9705":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:40843:7763":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:13024:21420":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:6177:10386":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:12851:8163":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:4097:12514":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:22996:10016":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:44837:207":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"1:11642:10404":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"6:7330:3545":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:10353:10526":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"2:31024:3232":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"16:7686:9428":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"16:6927:9299":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:2735:2947":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"5:3292:9614":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"9:330:11263":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"5:1509:7314":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:12543:8145":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"16:6433:9219":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"20:3111:5834":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"16:7168:10515":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:11227:7979":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:12388:8125":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:42098:12561":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:4414:17712":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"18:623:34851":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:12586:9966":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:21605:31272":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"17:15748:8854":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"6:1699:4442":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:6874:6434":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:5702:10385":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:13089:8182":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:46285:10229":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:15078:8663":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"16:860:8995":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"2:43793:10132":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:44912:180":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:3347:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"20:4974:6899":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"16:7397:34834":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:14977:8643":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"20:3154:5839":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:4481:10371":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"6:8271:11559":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:10818:7950":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:2629:2596":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"5:1369:9608":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:3215:17714":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"2:4501:9892":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"18:689:7775":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"6:1628:4434":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:9142:10500":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"16:7306:34836":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"11:2469:9702":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"16:3014:20486":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:4654:9894":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:2037:7810":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"18:698:7776":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:15434:8749":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:22591:2909":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"1:5441:203":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"16:6466:9223":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:8726:2988":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"18:765:25601":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"11:364:34799":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"20:3320:5855":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:9337:10515":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:10155:7932":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"6:6763:11523":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"17:16050:8229":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"1:7989:10344":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"18:735:25600":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:9420:3026":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"17:14386:8446":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"20:3065:5830":{"crate_id":20,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:6503:220":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:40742:10076":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"16:7539:9047":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:12361:1833":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"14:40:8216":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"16:3196:9000":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:41016:9920":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:2149:189":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:39641:214":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:11674:8030":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:2070:197":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:12508:8140":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:34221:17892":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"16:8301:9504":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:44698:18011":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"16:6026:8982":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:5329:204":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"1:9244:12569":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:15333:8723":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:12929:8168":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:4:1256":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:9415:235":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:10994:30388":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:13235:8216":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"20:3127:5836":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:22889:31444":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:11075:7968":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"16:3810:9062":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"5:3040:34285":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"6:7348:6892":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:12494:8137":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:10137:21392":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:2307:138":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"16:6263:9178":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:1580:4430":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:12345:335":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"13:0:2736":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:46686:10260":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"1:8554:10473":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"6:5557:11391":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:3190:12573":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"6:4932:5836":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:11609:10544":{"crate_id":1,"path":["std","sys","thread_local","fast_local","Key"],"kind":"struct"},"17:15313:8716":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:0:2746":{"crate_id":17,"path":["object"],"kind":"module"},"1:9329:10513":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"6:5581:5872":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:44298:10152":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"18:581:3232":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:42119:7377":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:15400:8742":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"6:7446:6894":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:2226:128":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"11:123:11249":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:11214:7978":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"20:3433:5867":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:12150:8098":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:6031:3028":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:23009:10017":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:10524:7945":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:14968:8639":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:12371:8168":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:23188:10031":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"17:15197:8690":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"20:477:3661":{"crate_id":20,"path":["libc","unix","utimbuf"],"kind":"struct"},"5:7540:2877":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"16:6427:9218":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:8868:2994":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"20:1537:4440":{"crate_id":20,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:13814:8346":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:46236:10226":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"6:6900:6435":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"18:521:25602":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:44663:130":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"5:7059:264":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"6:5382:11327":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:8565:12495":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:43710:10126":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:43999:9957":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:40428:10054":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:15410:8745":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:11827:10367":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:3584:254":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:40322:10046":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:44149:2940":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:2896:258":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"5:743:118":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:256:7799":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"6:8288:5895":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:5407:1243":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:2067:198":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:6532:6410":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:6907:11589":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"20:2982:5824":{"crate_id":20,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:947:9593":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:5400:11338":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"16:2878:9032":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:14560:8478":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:12238:8108":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:44456:10164":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"11:1582:9612":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:11153:7950":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:10170:7933":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:13211:8215":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:44212:10053":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:16249:8974":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"16:2728:9025":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:14855:8596":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"6:485:3663":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:562:12418":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:46479:10253":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"16:4940:9084":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:42087:7379":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"16:6300:9195":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:11289:9954":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:12399:8126":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:44169:10149":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:4659:9895":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:9858:21410":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"20:469:3660":{"crate_id":20,"path":["libc","unix","group"],"kind":"struct"},"2:44625:11676":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:10622:34845":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:41765:9931":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:11493:8004":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:44187:9972":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:8654:3454":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:42381:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"18:613:34850":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:6714:11510":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"11:1917:9616":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:43069:7400":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:42022:173":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"20:4174:6407":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlmsgerr"],"kind":"struct"},"1:10976:2904":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"16:2592:9019":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:4877:12549":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:1838:696":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:6198:9905":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"6:6721:11511":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"2:3382:140":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"20:590:3676":{"crate_id":20,"path":["libc","unix","protoent"],"kind":"struct"},"2:22417:12664":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"16:2338:9001":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:10905:7952":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:1855:10355":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:10457:138":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"16:6813:9281":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:40523:10059":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:14475:8466":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"5:7457:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:39566:213":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:43245:10113":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:9714:138":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"5:3258:9615":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:15655:8826":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:9782:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:38146:17893":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"6:6471:6404":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:2887:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:9974:32044":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:13497:8266":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"11:2140:9603":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"6:1535:4426":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"20:495:3664":{"crate_id":20,"path":["libc","unix","rlimit"],"kind":"struct"},"2:22505:32101":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"17:15092:8666":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:4998:12523":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"16:7428:21354":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:2062:17919":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"1:5582:10381":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:3139:247":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:43284:10120":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"20:4120:6403":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"20:3166:5841":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:3778:9061":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"6:4891:5709":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:15:2849":{"crate_id":2,"path":["core","write"],"kind":"macro"},"5:2322:11579":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"16:7132:9330":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:403:7802":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"5:7385:7314":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"16:4641:9075":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"14:202:17765":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"6:1490:4422":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:2537:17908":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"2:21593:31272":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"2:40363:31466":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:8072:12434":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"6:5191:5861":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"16:2323:20483":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"11:837:9596":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"6:5528:5868":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"16:2636:9021":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"18:659:7766":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"20:1479:4434":{"crate_id":20,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:12623:9969":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"20:1504:4436":{"crate_id":20,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"5:3042:11576":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"6:5617:11412":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"20:4904:6894":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:2477:2889":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:15836:8872":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:3329:17717":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"20:3104:5833":{"crate_id":20,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"11:883:9602":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:15582:8805":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:2203:7814":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"16:2788:9028":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"16:5846:9110":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"5:6958:17781":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:9671:21394":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:13526:8275":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"16:2548:9017":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"6:5653:11424":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"11:742:9593":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:11537:8008":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:15138:8672":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:12344:1314":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"16:6606:9239":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:44637:11679":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:865:2993":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:43254:157":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"5:1478:2993":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:9551:10357":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"1:7885:10550":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:11269:21445":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"5:1739:33189":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"5:7393:9736":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:15301:8715":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:44645:11681":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"16:2998:9055":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:12433:8130":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:14111:8388":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"16:8073:9482":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:42955:11662":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:46072:10210":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:14489:8467":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"5:5864:251":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:40637:2903":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"18:507:7742":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:13375:8245":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:12251:8109":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:4815:11160":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"17:14051:8380":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:40827:9915":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:36270:9351":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:3294:30632":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"20:5485:5896":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:22373:12663":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"11:0:2741":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:8371:178":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:21651:31264":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"1:8676:10373":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"16:2684:9023":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"5:4252:2925":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:12351:735":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"2:8225:165":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:12339:417":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"5:7658:9747":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"11:434:34802":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"20:549:3670":{"crate_id":20,"path":["libc","unix","winsize"],"kind":"struct"},"6:6788:11532":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:32326:114":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"5:1843:9702":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"2:3360:2946":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:12175:8100":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"20:3092:5832":{"crate_id":20,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:3897:10366":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:13959:8367":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:1997:12485":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:22279:2909":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:11755:8039":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"5:956:2993":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:10724:2963":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"2:39469:17794":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"15:306:20438":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:11510:8006":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:4811:3053":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"6:5598:11398":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:8650:10483":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:15521:8798":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"20:521:3666":{"crate_id":20,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"16:5863:21345":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:6352:9990":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:16105:8941":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"1:8241:10424":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"20:4095:6400":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:9296:25747":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:41258:9927":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"6:1585:4431":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"11:687:9609":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:11812:8048":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"16:7570:9048":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:8236:10362":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"16:4352:9067":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:23111:10024":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"1:1083:9603":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:6847:3030":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"1:896:9594":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"20:1355:4422":{"crate_id":20,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:11799:8046":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:11631:25741":{"crate_id":1,"path":["std","sys","thread_local","fast_local","DtorState"],"kind":"enum"},"11:102:11248":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"16:6648:9243":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:11497:8005":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:13986:8372":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:44870:10178":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:12353:8123":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:943:9592":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"6:6811:11538":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:22160:31274":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"11:2403:9609":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"2:46029:10207":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:42994:9460":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:40857:9917":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"6:1510:4423":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:5020:5847":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:47117:10304":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:4133:12515":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:6193:220":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:39553:10039":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:4780:17806":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"5:3222:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"7:0:1901":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:11026:21428":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"2:2893:144":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"17:11392:7997":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:22947:31411":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"16:8313:137":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:14933:8638":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:44045:10144":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:13797:8343":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"5:7595:17955":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:44277:17763":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"11:1066:20411":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:2479:2890":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"13:110:34808":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:9278:10505":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"16:2660:9022":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:2900:257":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:4103:12513":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"0:73:2364":{"crate_id":0,"path":["num_cpus","get_physical"],"kind":"function"},"17:15390:8739":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:42736:7392":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"5:7425:9738":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"11:2369:9620":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"5:4117:33189":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:15646:8824":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:0:1713":{"crate_id":1,"path":["std"],"kind":"module"},"1:9155:10501":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:32205:9389":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"17:14449:8464":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:4924:5835":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:12292:10553":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"16:5107:9089":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:12900:7778":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:1692:4441":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:44194:10054":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:43865:9965":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:40786:9912":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"5:3039:7363":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:11214:10500":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:6670:11493":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:5266:11293":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:13046:8178":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:15426:8748":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:15116:8668":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"14:214:9588":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:11051:7964":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:46524:10254":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"11:2542:11256":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:40589:2455":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:4205:12520":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"6:6756:11522":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"17:10218:7793":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"5:5934:9611":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:5959:3017":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"5:4515:33192":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:44812:150":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"5:3050:33062":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"20:5439:7246":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:15126:8669":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:2539:17909":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"6:6775:11525":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"2:43237:10112":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:4555:10372":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:9129:10499":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"16:5722:9039":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"18:754:7790":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"3:234:226":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"13:229:11247":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:21620:31277":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:12695:8152":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"1:3652:30251":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:11825:8050":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:46612:10258":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"1:7875:7806":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:12346:1687":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"20:1472:4433":{"crate_id":20,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:13871:152":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:12353:754":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"6:7389:4384":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"16:6574:9053":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"6:5083:5850":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:43741:10129":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:10068:21398":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:12318:7822":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:11144:9609":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:7761:17872":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:39731:10045":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:14325:8437":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"16:2748:9026":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"16:6758:9268":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:10334:10356":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"6:7461:6896":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:11403:9957":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:8812:2991":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:15734:8847":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:426:185":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"20:3296:5853":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:10319:128":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:16269:8251":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"1:4688:12540":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"20:3215:5847":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:6915:11540":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"20:5417:3620":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"11:1887:7314":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:2713:27603":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"20:4229:6413":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:11877:8055":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:9185:10388":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:33875:17890":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:32159:11259":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"1:8182:2901":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:10114:7411":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"5:680:9693":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"16:4743:9077":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:12969:8170":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:1995:1358":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:12711:137":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:8709:12557":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:4650:221":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:15616:8817":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:16259:8246":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"20:4131:6404":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"16:7580:9423":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:14147:8394":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"6:5630:11418":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"16:6976:9303":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:40774:10080":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:4801:12518":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:8351:7248":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"5:3263:34308":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:10927:2898":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"1:4297:27343":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"6:6435:6400":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:16079:8935":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"17:12043:8091":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"16:2902:20484":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"6:1559:4428":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:43841:10136":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:11367:7968":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"5:3648:182":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"6:465:3660":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:3666:17719":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"16:2394:9010":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"16:6749:9267":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:13437:8253":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:46980:10297":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"16:5756:9099":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"6:6706:11507":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"16:7473:9146":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:22855:9997":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"16:6398:9033":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:2463:2885":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:10828:34840":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:12993:21419":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"5:2102:2958":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:8007:10413":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:4723:11588":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:15206:8691":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"5:4282:2925":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"16:7379:34835":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:8774:2989":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:3185:12571":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:42420:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:12671:8150":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"16:7111:9328":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:2884:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"16:867:7799":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"1:10718:2965":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"17:3264:7818":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"6:6821:6413":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:13424:8252":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:44392:10163":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"6:4876:5831":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"5:734:250":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"11:2326:9603":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"2:33529:12574":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:4532:9893":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:40420:9889":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:46707:10261":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:41909:31467":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:43010:31476":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"16:5037:9087":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:12225:8107":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"6:5146:5855":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:11045:10501":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"11:1676:34792":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:13485:8265":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:11431:9959":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:40724:9900":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:2659:112":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"17:13766:8336":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:30997:196":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:22281:12579":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"18:538:7749":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:11090:27569":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"18:491:7741":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:12647:8148":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"16:6066:9142":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:40515:10058":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"16:6442:9220":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:47152:10307":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:6368:27600":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"20:3334:5856":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:8317:11568":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"4:0:2737":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"16:5385:7932":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:46367:10233":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:23133:10026":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"17:1098:7807":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"6:1517:4424":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"6:4992:5844":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"20:3451:5869":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:12572:7949":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"17:10710:7948":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:3061:137":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"6:1503:11277":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:1914:10357":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"20:2995:5825":{"crate_id":20,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"6:5565:11393":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:7546:6901":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:47126:10305":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:3026:10364":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"5:7435:34307":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:3144:3216":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"6:8253:5892":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:44878:10180":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:12357:897":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"16:6543:9230":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:1882:2925":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"17:10573:34842":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:15383:8738":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:1965:7260":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"6:491:3664":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:12342:1873":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:15778:8862":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"20:4919:6896":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:3643:2908":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"20:4203:6411":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlattr"],"kind":"struct"},"20:3187:5844":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"10:36:11262":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"5:5466:17735":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:44641:11680":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"5:3885:9702":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:34048:17891":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:6379:6376":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:40704:10074":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:8879:2995":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"6:8012:11550":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:30650:31475":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"2:44017:9958":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:10898:10535":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"17:15799:8865":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:8316:3169":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"16:4502:9070":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:3385:141":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"6:538:3669":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:14356:8443":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:617:12427":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:13753:8334":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"17:15701:8840":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:42539:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:11730:8035":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"5:6051:3014":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:14788:8541":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"20:3019:5827":{"crate_id":20,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:6790:3023":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:43266:2989":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:9229:12567":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:6400:10394":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"17:10092:21416":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:46101:10219":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:12264:8110":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"20:3489:5873":{"crate_id":20,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:1891:10356":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"16:5006:9086":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:41983:9937":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"6:4965:5840":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:1603:2993":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:9425:3027":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"1:11423:9675":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"2:43701:10124":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:10185:7791":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"9:424:20333":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"20:1416:4429":{"crate_id":20,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:11841:8052":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:16069:8934":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"1:5083:12546":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"20:3238:5849":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:5671:11433":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:2774:2957":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:12646:9970":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:30639:7399":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:40765:9906":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:12724:21417":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"6:7584:6904":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"16:3329:9058":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"6:5445:11364":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:10671:34841":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"18:96:25591":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"5:2770:11583":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:42303:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"14:165:20418":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:8528:2942":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:30363:12498":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"}},"external_crates":{"20":{"name":"libc","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":29}