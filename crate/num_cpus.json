{"root":"0:0:1942","crate_version":"1.16.0","includes_private":false,"index":{"5:5544:26935":{"id":"5:5544:26935","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12838:26938"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7520:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12757:2149":{"id":"2:12757:2149","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41870:194","prim@char":"1:12026:444","self::pattern":"2:12410:17196"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41868:197","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:9928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12728:1802":{"id":"2:12728:1802","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41870:194"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41868:197","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10495:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10495:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12743:30069":{"id":"2:12743:30069","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12744:30066"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44064:10108","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12843:32397":{"id":"2:12843:32397","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4608:32397"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44107:10018","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5545:26936":{"id":"5:5545:26936","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12839:26939"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7520:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12761:6766":{"id":"2:12761:6766","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41870:194","prim@char":"1:12026:444","self::pattern":"2:12410:17196"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41868:197","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:9928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12415:9928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12430:17194","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12786:28543":{"id":"2:12786:28543","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41868:197","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:9928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12741:10118":{"id":"2:12741:10118","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12026:444"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43766:10099","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12730:28502":{"id":"2:12730:28502","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41870:194"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41868:197","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10495:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10495:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12804:2088":{"id":"2:12804:2088","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12836:28444":{"id":"2:12836:28444","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39817:28451","Self::is_ascii":"2:12835:26933"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41868:197","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39817:28451","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12716:864":{"id":"2:12716:864","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12026:444"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12837:26937":{"id":"2:12837:26937","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5543:2430":{"id":"5:5543:2430","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7520:246"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7520:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12715":{"id":"2:12715","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12716:864","2:12717:2165","2:12718:32375","2:12719:32376","2:12721:32377","2:12724:27223","2:12725:32378","2:12726:336","2:12727:1843","2:12728:1802","2:12730:28502","2:12732:28503","2:12734:28504","2:12736:32379","2:12737:32380","2:12738:28526","2:12739:28527","2:12740:9957","2:12741:10118","2:12742:6757","2:12743:30069","2:12744:30066","2:12745:2081","2:12746:32381","2:12747:30403","2:12748:28545","2:12751:27985","2:12754:27987","2:12757:2149","2:12761:6766","2:12765:2084","2:12768:28535","2:12771:28537","2:12774:32382","2:12777:32383","2:12780:28539","2:12783:28541","2:12786:28543","2:12789:28544","2:12792:2310","2:12795:32384","2:12798:32385","2:12801:32386","2:12804:2088","2:12806:32387","2:12808:32388","2:12810:32389","2:12811:32390","2:12812:32391","2:12815:32392","2:12818:2130","2:12821:28546","2:12824:32393","2:12827:32394","2:12830:32395","2:12833:1935","2:12835:26933","2:12836:28444","2:12837:26937","2:12838:26938","2:12839:26939","2:12840:32396","2:12842:11896","2:12843:32397"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:73:1820":{"id":"0:73:1820","crate_id":0,"name":"get_physical","span":{"filename":"src/lib.rs","begin":[108,0],"end":[110,1]},"visibility":"public","docs":"Returns the number of physical cores of the current system.\n\nThis will always return at least `1`.\n\n# Note\n\nPhysical count is supported only on Linux, mac OS and Windows platforms.\nOn other platforms, or if the physical count fails on supported platforms,\nthis function returns the same as [`get()`], which is the number of logical\nCPUS.\n\n# Examples\n\n```\nlet logical_cpus = num_cpus::get();\nlet physical_cpus = num_cpus::get_physical();\nif logical_cpus > physical_cpus {\n    println!(\"We have simultaneous multithreading with about {:.2} \\\n              logical cores to 1 physical core.\", \n              (logical_cpus as f64) / (physical_cpus as f64));\n} else if logical_cpus == physical_cpus {\n    println!(\"Either we don't have simultaneous multithreading, or our \\\n              system doesn't support getting the number of physical CPUs.\");\n} else {\n    println!(\"We have less logical CPUs than physical CPUs, maybe we only have access to \\\n              some of the CPUs on our system.\");\n}\n```\n\n[`get()`]: fn.get.html","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5526:33055":{"id":"5:5526:33055","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2626","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2626","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12840:32396":{"id":"2:12840:32396","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4610:32396"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44089:10019","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12830:32395":{"id":"2:12830:32395","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12026:444","self::pattern":"2:12410:17196"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:9928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12415:9928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12430:17194","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5542:33059":{"id":"5:5542:33059","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2626","`String`":"5:7520:246"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2626","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7520:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12808:32388":{"id":"2:12808:32388","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5525":{"id":"5:5525","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5526:33055","5:5527:6714","5:5530:33056","5:5533:33057","5:5541:33058","5:5542:33059","5:5543:2430","5:5544:26935","5:5545:26936"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12744:30066":{"id":"2:12744:30066","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12743:30069"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44073:10109","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12745:2081":{"id":"2:12745:2081","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44044:2401","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12815:32392":{"id":"2:12815:32392","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12026:444","self::pattern":"2:12410:17196"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:9928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12742:6757":{"id":"2:12742:6757","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43776:2404","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12801:32386":{"id":"2:12801:32386","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12410:17196","`DoubleEndedIterator`":"2:7780:124","prim@char":"1:12026:444","str::match_indices":"2:12798:32385"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43958:10104","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:9928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12415:9928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12430:17194","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12765:2084":{"id":"2:12765:2084","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12410:17196","`DoubleEndedIterator`":"2:7780:124","prim@char":"1:12026:444","str::split_whitespace":"2:12743:30069","str::rsplit":"2:12771:28537"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43790:2405","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:9928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12740:9957":{"id":"2:12740:9957","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12026:444"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43760:9949","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12748:28545":{"id":"2:12748:28545","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12026:444","self::pattern":"2:12410:17196"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:9928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12771:28537":{"id":"2:12771:28537","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12410:17196","`DoubleEndedIterator`":"2:7780:124","prim@char":"1:12026:444","str::split":"2:12765:2084"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43808:9939","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:9928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12415:9928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12430:17194","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1942":{"id":"0:0:1942","crate_id":0,"name":"num_cpus","span":{"filename":"src/lib.rs","begin":[1,0],"end":[485,1]},"visibility":"public","docs":"A crate with utilities to determine the number of CPUs available on the\ncurrent system.\n\nSometimes the CPU will exaggerate the number of CPUs it contains, because it can use\n[processor tricks] to deliver increased performance when there are more threads. This \ncrate provides methods to get both the logical and physical numbers of cores.\n\nThis information can be used as a guide to how many tasks can be run in parallel.\nThere are many properties of the system architecture that will affect parallelism,\nfor example memory access speeds (for all the caches and RAM) and the physical\narchitecture of the processor, so the number of CPUs should be used as a rough guide\nonly.\n\n\n## Examples\n\nFetch the number of logical CPUs.\n\n```\nlet cpus = num_cpus::get();\n```\n\nSee [`rayon::Threadpool`] for an example of where the number of CPUs could be\nused when setting up parallel jobs (Where the threadpool example uses a fixed\nnumber 8, it could use the number of CPUs).\n\n[processor tricks]: https://en.wikipedia.org/wiki/Simultaneous_multithreading\n[`rayon::ThreadPool`]: https://docs.rs/rayon/1.*/rayon/struct.ThreadPool.html","links":{},"attrs":["#![deny(missing_docs)]","#![allow(non_snake_case)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:72:1802","0:73:1820"],"is_stripped":false}}},"2:12725:32378":{"id":"2:12725:32378","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12839:26939":{"id":"2:12839:26939","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12824:32393":{"id":"2:12824:32393","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12026:444","self::pattern":"2:12410:17196"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:9928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12415:9928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12430:17194","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12746:32381":{"id":"2:12746:32381","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44054:10107","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12717:2165":{"id":"2:12717:2165","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12842:11896":{"id":"2:12842:11896","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4611:11896"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44098:9878","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12835:26933":{"id":"2:12835:26933","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12737:32380":{"id":"2:12737:32380","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12032:1523","crate::ops::IndexMut":"2:3116:11922","str::slice_unchecked":"2:12736:32379"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12721:32377":{"id":"2:12721:32377","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:12719:32376"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12810:32389":{"id":"2:12810:32389","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12827:32394":{"id":"2:12827:32394","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12026:444","self::pattern":"2:12410:17196"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:9928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12811:32390":{"id":"2:12811:32390","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5533:33057":{"id":"5:5533:33057","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7520:246"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7520:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5541:33058":{"id":"5:5541:33058","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7520:246"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7520:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12795:32384":{"id":"2:12795:32384","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12410:17196","`DoubleEndedIterator`":"2:7780:124","prim@char":"1:12026:444","str::matches":"2:12792:2310"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44012:10106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:9928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12415:9928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12430:17194","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12724:27223":{"id":"2:12724:27223","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11965:17197"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12818:2130":{"id":"2:12818:2130","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12026:444","self::pattern":"2:12410:17196"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41868:197","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:9928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12726:336":{"id":"2:12726:336","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12727:1843","`u8`":"1:12043:1628"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5527:6714":{"id":"5:5527:6714","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7520:246"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7520:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:9928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12734:28504":{"id":"2:12734:28504","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10495:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10495:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12754:27987":{"id":"2:12754:27987","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12026:444","self::pattern":"2:12410:17196"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:9928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12415:9928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12430:17194","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12792:2310":{"id":"2:12792:2310","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12410:17196","`DoubleEndedIterator`":"2:7780:124","prim@char":"1:12026:444","str::rmatches":"2:12795:32384"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43994:10105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:9928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12732:28503":{"id":"2:12732:28503","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10495:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10495:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12783:28541":{"id":"2:12783:28541","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12026:444","str::splitn":"2:12780:28539","self::pattern":"2:12410:17196"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43912:9942","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:9928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12415:9928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12430:17194","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12821:28546":{"id":"2:12821:28546","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12026:444","self::pattern":"2:12410:17196"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41868:197","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:9928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12415:9928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12430:17194","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12774:32382":{"id":"2:12774:32382","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12410:17196","str::split":"2:12765:2084","prim@char":"1:12026:444","`DoubleEndedIterator`":"2:7780:124","str::rsplit_terminator":"2:12777:32383"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43840:10101","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:9928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12719:32376":{"id":"2:12719:32376","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12718:32375":{"id":"2:12718:32375","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12806:32387":{"id":"2:12806:32387","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12727:1843":{"id":"2:12727:1843","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12043:1628"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:72:1802":{"id":"0:72:1802","crate_id":0,"name":"get","span":{"filename":"src/lib.rs","begin":[73,0],"end":[75,1]},"visibility":"public","docs":"Returns the number of available CPUs of the current system.\n\nThis function will get the number of logical cores. Sometimes this is different from the number\nof physical cores (See [Simultaneous multithreading on Wikipedia][smt]).\n\nThis will always return at least `1`.\n\n# Examples\n\n```\nlet cpus = num_cpus::get();\nif cpus > 1 {\n    println!(\"We are on a multicore system with {} CPUs\", cpus);\n} else {\n    println!(\"We are on a single core system\");\n}\n```\n\n# Note\n\nThis will check [sched affinity] on Linux, showing a lower number of CPUs if the current\nthread does not have access to all the computer's CPUs.\n\nThis will also check [cgroups], frequently used in containers to constrain CPU usage.\n\n[smt]: https://en.wikipedia.org/wiki/Simultaneous_multithreading\n[sched affinity]: http://www.gnu.org/software/libc/manual/html_node/CPU-Affinity.html\n[cgroups]: https://www.kernel.org/doc/Documentation/cgroup-v1/cgroups.txt","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12833:1935":{"id":"2:12833:1935","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12371:130","`FromStr`":"2:12370:2457"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42013:229","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12370:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12370:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12838:26938":{"id":"2:12838:26938","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5530:33056":{"id":"5:5530:33056","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7520:246"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7520:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:9928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12736:32379":{"id":"2:12736:32379","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12032:1523","str::slice_mut_unchecked":"2:12737:32380","crate::ops::Index":"2:3112:11921"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12739:28527":{"id":"2:12739:28527","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:12738:28526"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12768:28535":{"id":"2:12768:28535","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12026:444","self::pattern":"2:12410:17196"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12226:9936","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:9928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12789:28544":{"id":"2:12789:28544","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41868:197","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:9928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12415:9928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12430:17194","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12812:32391":{"id":"2:12812:32391","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12026:444","self::pattern":"2:12410:17196"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:9928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12415:9928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12435:17193","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12777:32383":{"id":"2:12777:32383","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12410:17196","str::split":"2:12765:2084","prim@char":"1:12026:444","str::split_terminator":"2:12774:32382"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43858:10102","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:9928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12415:9928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12430:17194","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12738:28526":{"id":"2:12738:28526","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_mut":"2:12739:28527"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12747:30403":{"id":"2:12747:30403","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44082:9956","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12751:27985":{"id":"2:12751:27985","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12026:444","self::pattern":"2:12410:17196"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:9928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12780:28539":{"id":"2:12780:28539","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12026:444","self::pattern":"2:12410:17196","str::rsplitn":"2:12783:28541"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43894:9941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:9928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12798:32385":{"id":"2:12798:32385","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12410:17196","`DoubleEndedIterator`":"2:7780:124","prim@char":"1:12026:444","str::rmatch_indices":"2:12801:32386"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43940:10103","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:9928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"17:12112:8376":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"5:5982:2474":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"16:8205:20310":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:48295:10258":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"16:6456:9253":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:4697:11991":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:46025:10154":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:641:10272":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"5:1126:32077":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:10037:8112":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:11099:8243":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:2198:2344":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:8865:10305":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:41828:9922":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:22554:9980":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"6:1501:3876":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"20:3320:5310":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"16:6352:9243":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:46055:10155":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"6:4388:5282":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"11:817:9632":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"16:7342:33184":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:40576:9889":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"20:3065:5285":{"crate_id":20,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:14119:8872":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"5:3212:9637":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:9189:11578":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:14157:8880":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:40566:10037":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:10930:8229":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:14402:8966":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"6:1521:3877":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"16:8281:9527":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:8528:2452":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:30544:6721":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:42223:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:12935:8550":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:11846:8317":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:10699:8187":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:9014:10421":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"16:8195:9520":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"6:1650:3889":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"16:6261:9235":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:22025:12046":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:21678:12035":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:1840:182":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:6047:11390":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"20:5046:6359":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:5885:5855":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:9007:10420":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"14:7:9605":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:44044:2401":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"20:4151:5846":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"20:4824:2908":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:40626:10042":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"16:7269:33182":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"6:6837:6353":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:1546:7743":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"20:3363:5314":{"crate_id":20,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:9301:81":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"6:4676:5307":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"18:538:7898":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:8139:2434":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"6:123:2804":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:48099:10246":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"20:4797:2999":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:3888:9089":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"5:261:7708":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"16:8097:9509":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:2815:240":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:14077:8863":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"6:4698:5309":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"11:1882:9638":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:14325:8944":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"16:2406:9036":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:12960:8554":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:13839:8797":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:12197:8391":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"6:7343:3074":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:40669:10044":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:12686:8497":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:9787:229":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"16:7828:9464":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:2889:12027":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:4909:12001":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"20:3433:5322":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:13275:8266":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:14470:8986":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:42106:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:43685:10091":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:40339:10022":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"20:3006:5281":{"crate_id":20,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"20:1472:3887":{"crate_id":20,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:1734:3898":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:11334:10318":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:4677:17256":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"6:588:3129":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:13299:8613":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:7287:17305":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"20:527:3121":{"crate_id":20,"path":["libc","unix","hostent"],"kind":"struct"},"2:12191:9955":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:21419:31037":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"1:12050:1232":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:13287:8606":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"20:563:3126":{"crate_id":20,"path":["libc","unix","sigval"],"kind":"struct"},"16:6792:9317":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"5:7496:9740":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"15:394:19401":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"20:3389:5317":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"6:574:3127":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:11447:7825":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:2615:2408":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"20:5455:5346":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:13011:8559":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:48154:10251":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"16:8239:9412":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:2406:205":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:1055:9625":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"5:0:310":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:1184:7956":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:14111:8871":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:4473:5288":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:5494:10303":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"20:134:2803":{"crate_id":20,"path":["libc","unix","FILE"],"kind":"enum"},"18:727:7933":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:10751:8192":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:40346:17263":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:48081:10245":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:46225:10167":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"18:548:146":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"20:5447:6702":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:6879:9323":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:46132:10159":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:7637:10267":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:10774:10446":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:850:9631":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:43384:9933":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:12137:8378":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:11453:9945":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:13923:8821":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"16:5982:9166":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:2210:17341":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"6:6898:6356":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:12699:8498":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"11:2317:2453":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"17:11662:8295":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:12577:8482":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:3317:2412":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"16:7782:9456":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:11328:8269":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:41072:2063":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"5:6857:7755":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"20:489:3117":{"crate_id":20,"path":["libc","unix","timespec"],"kind":"struct"},"17:11368:8273":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:13633:8763":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"20:4042:5831":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:10692:2405":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:14449:8980":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"13:0:2202":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:9278:7944":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:47505:10237":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"5:898:2453":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:3077:134":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:43714:10094":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:21507:12045":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:7522:7953":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"6:7702:6703":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"20:1531:3893":{"crate_id":20,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:9173:7941":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"6:6781:3813":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"16:2907:9057":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"5:7292:7720":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"6:4764:5317":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:6890:7809":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"17:12622:8488":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"11:2368:7725":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"20:1635:3951":{"crate_id":20,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:13982:8834":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:10885:9940":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:11536:8288":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:12481:17202":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"16:2832:9054":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:9103:7939":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:42620:6845":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:13245:8599":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"16:6569:9066":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:4453:6858":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"6:5111:11346":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"1:8884:10413":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:9836:123":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:12725:8501":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:48233:10256":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:2919:12028":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"20:4095:5855":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:3557:7725":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:3282:257":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"16:7792:20308":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:12466:8461":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:7533:10458":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"5:785:7711":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:47039:10201":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:43162:2449":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:23198:186":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"16:5727:9132":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:13056:8568":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:42634:6846":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"6:483:3115":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"20:1416:3883":{"crate_id":20,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"5:1019:7708":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"18:80:24322":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:11975:10461":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:40245:30176":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:10495:242":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:13260:8603":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"6:1703:3895":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"6:1570:3882":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:13149:8589":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:48005:10243":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:45924:10150":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:11574:8290":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"20:3380:5316":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"9:52:19303":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"6:5921:5859":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:6798:6349":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:44509:11563":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:39630:10009":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:45846:10147":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"11:1562:9634":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"16:7568:9075":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:6156:7804":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:40585:9891":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"5:4202:2387":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"11:693:6770":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:12370:2457":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:9608:8084":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:12738:8503":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"6:569:3126":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"20:477:3115":{"crate_id":20,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:44286:10122":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:4633:11065":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"5:1481:9617":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:10727:8190":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:44418:9960":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:46544:10177":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:42627:6844":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:1507:11219":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:14146:8879":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:2590:260":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"6:7639:5350":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:11172:11571":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"17:13668:8764":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"6:1537:3879":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:9092:237":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:10095:9932":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:10308:7784":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:8130:2432":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:10847:9939":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:9633:6866":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"17:13990:8835":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"16:7582:9447":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:8199:11912":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:13827:8794":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:14435:8973":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:4123:26045":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:21593:12036":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"17:10215:8130":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:1759:10277":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:48139:10250":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"20:4069:5853":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"9:0:2205":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:10441:8148":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"2:10954:9943":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:9868:8095":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"5:4040:7708":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:30538:6720":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:4058:9879":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"16:5995:9016":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"6:1514:11222":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:2150:20424":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"5:7467:30171":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:2931:17323":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:1744:650":{"crate_id":1,"path":["std","env"],"kind":"module"},"11:1846:6770":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:2369:128":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:11486:9946":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:44780:174":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"6:6071:5313":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"16:7503:9072":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"16:6279:9238":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"6:4496:5291":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:7747:10332":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:40224:10011":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:11599:27076":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"2:11965:17197":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:14091:8865":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"16:5634:9119":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:2400:198":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"11:1145:9630":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"5:7253:7305":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:42301:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"5:2043:2418":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"20:3461:5325":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:3083:136":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:2826:247":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"5:2978:31958":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:31106:199":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"0:0:1942":{"crate_id":0,"path":["num_cpus"],"kind":"module"},"1:8835:10410":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:46849:10198":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:46255:10168":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:8979:20365":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:22519:9978":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:12008:26177":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:40285:10017":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:44012:10106":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"16:4344:9092":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:22357:9970":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:8851:10412":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:23074:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:7738:139":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:40379:103":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:23260:9997":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"20:3104:5288":{"crate_id":20,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:46179:10160":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"6:6079:5312":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"11:1036:9626":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:42013:229":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:14084:8864":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"11:2303:9641":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"2:48218:10255":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:44525:11567":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"6:596:3130":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"5:6107:2387":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"16:6361:9244":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:10317:8138":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:46325:10170":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"5:7408:2340":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"11:2074:9625":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"6:5033:5326":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:40305:9878":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:11711:8266":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"11:1541:9633":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"5:6945:266":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:13612:8758":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:12040:788":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:44533:11569":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:4325:9884":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"5:3677:7708":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:6844:9319":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"5:3589:2453":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:13547:8718":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:22546:9979":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:12672:8199":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:21216:31374":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"16:6425:9251":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"16:4719:9101":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"15:288:19390":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"5:7483:9738":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"16:4417:9093":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"5:7604:7743":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"20:1431:3884":{"crate_id":20,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:43766:10099":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:4800:5321":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:31134:2686":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"20:5473:5349":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:6434:9902":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:40708:9905":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:10735:9936":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:40275:10016":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:6977:26822":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:12038:790":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:44822:10143":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"17:8687:20356":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:3485:27014":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:26107:269":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:11911:8340":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"6:4902:5862":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:10276:7778":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:10332:26918":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"6:6934:11440":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:13950:8825":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:3233:2427":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"16:6901:9068":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"5:1490:9632":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:7636:2372":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:10812:9938":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:7682:7818":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:3293:17238":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:8213:2401":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1:8897:12022":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"11:1051:19365":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:6658:3041":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:12173:8387":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:8555:2455":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:4792:7798":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"16:3655:7981":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:10604:8171":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"2:30277:11964":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:41847:9924":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"6:1691:3893":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:10508:8163":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:8486:2451":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:11191:2378":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"5:6341:12122":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:46447:10174":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:929:11907":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"16:3797:9087":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:1481:1826":{"crate_id":2,"path":["core","mem"],"kind":"module"},"16:5384:20296":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"20:590:3130":{"crate_id":20,"path":["libc","unix","protoent"],"kind":"struct"},"2:43150:150":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"16:3461:9084":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:10638:8176":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"6:4523:5294":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:44385:10128":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"5:7620:7747":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:10398:8143":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:22239:2372":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:41058:9910":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"5:1531:9716":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"16:2526:9041":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"16:5588:9062":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:3831:10289":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"18:113:24324":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"6:1528:3878":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"6:1718:3897":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:7831:2363":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:2579:2415":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"6:6682:2999":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:5963:9159":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:7020:7810":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:13102:8575":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"20:3215:5302":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:4755:5316":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:1644:626":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:14270:8925":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"7:0:1673":{"crate_id":7,"path":["unwind"],"kind":"module"},"5:6594:6770":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"6:6120:11417":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:10667:9631":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:10617:8172":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"2:3299:17237":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:14101:8868":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:10774:9937":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:44170:17208":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:2316:107":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:42641:6847":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:14297:8937":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:5965:7805":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:9763:33190":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"6:6889:6355":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:12115:9950":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"15:306:19391":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:32290:11204":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"1:10149:10432":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"16:6156:9197":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"6:4947:11281":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:13974:8833":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:13568:8728":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:8274:11572":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"5:1265:9354":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:8193:2403":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"6:7622:11452":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"20:4925:6352":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:40525:2402":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:22571:30175":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"5:5144:2474":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"20:4131:5859":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:11992:8355":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:10816:2367":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"16:7513:9444":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"16:4613:9099":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:40694:7911":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"6:654:3148":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:8766:20358":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:8821:10409":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"11:1092:9628":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:6805:12029":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:7780:124":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"16:4835:9105":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:8301:10390":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:47757:10239":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:1568:9638":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:3049:120":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:14537:8998":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"15:0:2210":{"crate_id":15,"path":["addr2line"],"kind":"module"},"6:5140:11355":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"5:7282:7725":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:43840:10101":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:42888:30715":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"5:1450:6770":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:482:7791":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"18:590:7901":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:8874:12015":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:40678:9903":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:12099:8374":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:10089:10431":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"5:4434:7732":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"20:4229:5868":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"20:5417:3074":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:11720:20371":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:5747:2477":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:12030:335":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:4082:104":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"6:4932:11276":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:4225:10291":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"6:4566:5300":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"16:4557:9097":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"11:1525:19366":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"6:4401:5283":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:10926:9941":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"6:6228:1862":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:8205:17309":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:12026:444":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:1749:17351":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:10789:20466":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:3504:2060":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:12032:1523":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:940:9621":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"20:4203:5866":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlattr"],"kind":"struct"},"2:4500:6859":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"20:3334:5311":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:7573:7812":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:14356:8952":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:10127:8119":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"17:8927:20363":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:10060:8113":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:9842:6846":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:14347:8950":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:904:7743":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"20:3451:5324":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"20:3370:5315":{"crate_id":20,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:9157:10427":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"2:39591:2334":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"20:5064:6360":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"5:6520:7708":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:7517:2469":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:7999:10337":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"6:4549:5298":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:2364:204":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:8243:31459":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"6:6666:3809":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:2511:2061":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"5:7420:2341":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"11:772:9617":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"2:13312:11908":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:11174:20490":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:8929:12023":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:5045:10298":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"18:582:2686":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:11997:11903":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"16:7474:9433":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:12033:1609":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"16:4641:9100":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:7656:10323":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"20:614:3148":{"crate_id":20,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:12646:8489":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"16:5017:9111":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"6:489:3116":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:9913:8098":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"20:4919:6351":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:588:11895":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"11:1010:9625":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:12889:8540":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"20:3166:5296":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:3287:140":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"5:5867:7725":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"11:1869:9636":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"20:55:2727":{"crate_id":20,"path":["libc","unix","DIR"],"kind":"enum"},"9:237:2449":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:2297:100":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:2970:17327":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"16:2670:9047":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:43533:10081":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:13555:8721":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:10548:8166":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"16:2380:9035":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:5710:9892":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:9791:33185":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:12544:8474":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"16:6929:9327":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:2823:2669":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:42145:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:9004:20366":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:10806:122":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"16:4806:9104":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:42379:92":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:22981:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:10786:2365":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"16:6467:9254":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"16:5363:9116":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:9373:8073":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"20:3086:5164":{"crate_id":20,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:12039:787":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:44089:10019":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"6:580:3128":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:12008:8359":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:10431:8146":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"17:8660:20343":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"5:5951:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:13907:8817":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"16:5403:8071":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"6:5130:5325":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"5:2970:11469":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"16:6753:9305":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:4036:11974":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:43602:10085":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:11112:8244":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:13088:9965":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:2361:2352":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:7889:172":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:48165:10252":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:12185:8390":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"6:4556:5299":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"16:5743:9134":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:3062:2407":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"5:6828:7741":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:6243:7805":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:10535:8165":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"6:4914:11265":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:40384:10027":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"16:6531:9263":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:44364:17209":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"20:3238:5304":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"16:4862:9106":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:6460:2486":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:10293:7779":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"5:2251:11472":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:41936:9631":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"6:5974:5864":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:4998:11317":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:7457:2432":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"6:4603:11229":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"5:4082:9631":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:44716:230":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:22592:30167":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:10210:7775":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"16:7554:9074":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"16:2933:19437":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:44505:11562":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"17:3565:7968":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:32438:2677":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:4320:9883":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"5:4172:2387":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"16:5612:9064":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:4153:11987":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"6:1546:3880":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"20:4806:6347":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"20:495:3118":{"crate_id":20,"path":["libc","unix","rlimit"],"kind":"struct"},"17:10521:8164":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:40261:10015":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:2911:9368":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"16:6171:209":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:21175:2686":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"5:7014:7759":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:43694:10092":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:4629:11061":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"6:5146:11357":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:3437:2368":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"16:6687:9291":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"16:6696:9292":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:14174:8887":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:646:11898":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:9446:8081":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:8446:2449":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:13036:31547":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:1073:9630":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:43141:10072":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:9468:2364":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"2:41114:9915":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"20:3160:5295":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:4783:5319":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:4628:5304":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:1874:10282":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"11:841:9621":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:12281:8419":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"6:4440:5286":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"18:707:7926":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:4563:11997":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"11:1635:7702":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"6:4860:11254":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"20:4185:5864":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:542:3122":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:9041:24489":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:5440:108":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:41986:6834":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:21626:12031":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"17:11474:8039":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:44706:222":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"5:678:253":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:8183:2402":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"6:4738:5314":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:23012:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"17:12485:8466":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"16:5419:8072":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:7916:2416":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:12025:1021":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"5:7453:9735":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:14164:8882":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:42056:2453":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:8396:2448":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"20:501:3119":{"crate_id":20,"path":["libc","unix","rusage"],"kind":"struct"},"6:4616:5303":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:13803:8792":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:11762:8306":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"11:2479:33153":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:43994:10105":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:10950:8230":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"18:652:7891":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:11024:8234":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"20:5467:5348":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:3112:11921":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"16:2321:9026":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"16:7613:9450":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"8:0:2204":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:39569:219":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"20:4107:5857":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:44529:11568":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:3982:11970":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:2905:7797":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"20:1386:3880":{"crate_id":20,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"16:6818:9318":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"6:5941:5846":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"20:1377:3879":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"20:3032:5283":{"crate_id":20,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:40426:1924":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"2:40538:10033":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:40459:7765":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"6:5969:5863":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:13852:8803":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"16:4745:9102":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:43133:10071":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"6:1664:3890":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"13:110:33163":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:21802:12041":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"5:3179:2453":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"14:160:9605":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"6:4610:11231":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:11613:10322":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"20:1514:3891":{"crate_id":20,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:42900:9483":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:2884:12025":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:43593:10083":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"5:4371:7732":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:9897:20379":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"16:7090:9353":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:4463:11991":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:44560:125":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"20:3059:5284":{"crate_id":20,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:11548:8289":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:43776:2404":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"16:6742:9304":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"16:2766:9051":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"16:8181:9079":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:11394:131":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"16:5673:9063":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"20:5019:6357":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:1961:9747":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"6:5829:5831":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:11192:7969":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"6:4922:11270":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"12:0:2208":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:3729:10288":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"16:7128:10424":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:44313:9959":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"20:1543:3895":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"16:7694:9076":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"5:207:7706":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"5:5378:17181":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"6:4428:5284":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:40608:10041":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:582:7953":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:8896:20362":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:10962:26189":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"16:7492:9441":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:11935:17405":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"6:7371:11443":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:4105:17161":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:9934:8103":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"20:3257:5305":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"16:7054:9348":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:46803:10197":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:10938:7568":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:12045:1626":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:39547:217":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:11951:9947":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"16:5816:9142":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"11:122:7696":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:10091:10430":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"2:2875:2674":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"17:13817:8793":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"11:731:9615":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:13891:8814":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"16:536:9014":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"16:7597:33178":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"6:4724:5311":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:8162:2370":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"20:4180:5863":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:11301:10314":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"16:7884:20309":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:6291:223":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:3692:6770":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"6:5004:11320":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:12438:8454":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"20:4870:3810":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:10825:27051":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"17:13694:8770":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:39366:17236":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"6:4595:11224":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:9844:6847":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:39623:10008":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"5:4994:2387":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"5:1522:213":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:41639:9921":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:9488:31461":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:10739:8191":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:9019:10422":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"16:2969:19438":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:46961:10200":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:8807:10408":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:8378:12011":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"6:7645:5351":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:533:7792":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"16:6204:9204":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"20:4101:5856":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"16:7284:6833":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"6:5104:11343":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:1651:6716":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:7710:11901":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:40320:17262":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"16:8115:9511":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:48180:10253":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"20:1550:3896":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:7592:7814":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"6:533:3121":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"16:6318:9240":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:13219:7789":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1:5565:12016":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:2586:261":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:3327:17162":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"11:703:9614":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"16:6243:9225":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:44054:10107":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:11152:8247":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"6:4841:11246":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:10371:8141":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:1535:2453":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"20:2982:5279":{"crate_id":20,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:261:7947":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:13136:8588":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:10113:8117":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:40365:10026":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"18:636:7913":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:10469:8158":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:256:7946":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:11307:8266":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"16:6226:9219":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:8219:10382":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:5774:2478":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:45994:10153":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:21203:31357":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:357:10265":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:8984:24490":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"20:3080:2071":{"crate_id":20,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:2905:17320":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:2837:2670":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:43633:10088":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"6:7610:5348":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"18:0:2213":{"crate_id":18,"path":["memchr"],"kind":"module"},"5:2057:9718":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"5:2231:31951":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"6:4516:5293":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:13877:8811":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:13163:8590":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:42340:85":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"16:2284:19410":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:2373:2358":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:8913:12021":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:10647:8177":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"5:5334:7708":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:3232:7965":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:11202:8250":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"16:5712:9129":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:4032:11973":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"6:6927:11437":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"14:187:19378":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"16:2472:9039":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:46401:10172":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:1563:9637":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"5:7361:6770":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"16:7677:213":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:910:9632":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:46077:10156":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:43734:10095":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"16:2428:9037":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:10526:2425":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:44585:10134":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"6:62:2727":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"17:434:7951":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:12047:1624":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"6:4578:5301":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:32351:10001":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"1:7373:26501":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:41106:9913":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"20:4904:6349":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:44513:11564":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"5:3246:9638":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:4:1100":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"6:5897:5857":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"14:221:9612":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:5823:9894":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:14014:8842":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:9838:6844":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"6:4745:5315":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:3031:17163":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"5:781:98":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:868:9616":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:21692:9969":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:12423:8450":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:46493:10176":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:3930:11966":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"16:7544:9446":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:9461:132":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"11:2260:9625":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"2:40718:10045":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:44064:10108":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:14461:8982":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:860:6770":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:30630:30149":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"11:829:11907":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:9062:11574":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"20:4077:5854":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:8544:2454":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:2580:156":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"20:3197:5300":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:6590:2487":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"2:23167:185":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"17:13967:8832":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:50119:12048":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:6188:10310":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:22129:31355":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"5:4401:2387":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"20:3119:5290":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:5322:9115":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"6:4893:5861":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:7833:2624":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:45780:10144":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:1903:11950":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:41081:9912":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:5955:11368":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:1604:3886":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:43760:9949":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"1:2195:2343":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"6:5075:5328":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:7692:11466":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"11:427:33158":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:9831:114":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"6:6248:5890":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"5:1419:2453":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:41944:6770":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"1:415:178":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:22670:11965":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:9306:88":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:2978:17329":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"3:0:469":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"6:5152:11360":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"6:0:869":{"crate_id":6,"path":["libc"],"kind":"module"},"16:2305:19436":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"2:9788:2371":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"5:7520:246":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:9575:33187":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:22241:12034":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"11:2487:11205":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:23105:187":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:47149:10204":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"5:35:7704":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:39452:10004":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"16:5760:20298":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"5:3743:9718":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:11296:8264":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"16:8134:9514":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"20:5479:5350":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:11245:8293":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:11935:8341":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"6:4939:1087":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"6:5009:5278":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:7661:10325":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:7751:2625":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:11228:155":{"crate_id":1,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"17:12811:8513":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:6691:11436":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:47085:10202":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:11364:10321":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"6:7679:11462":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:2927:17321":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:11236:8260":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:2538:17267":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:2822:2621":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:12046:1627":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:44517:11565":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:12424:7926":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:5992:5867":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"20:3092:5287":{"crate_id":20,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"11:1072:33157":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:7129:26046":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:2948:17325":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"20:1350:3875":{"crate_id":20,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:12044:8366":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:12877:8538":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"16:6332:9058":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:41769:30178":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:45800:10145":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:21771:2372":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"17:12555:8475":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:8319:10392":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:9946:8105":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"16:4774:9103":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"20:4847:3838":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"16:5121:9114":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"16:2788:9052":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"20:3226:5303":{"crate_id":20,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"9:177:19352":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:7731:11940":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"20:3425:5321":{"crate_id":20,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:10495:8161":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:894:7725":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:42064:9631":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"16:5830:9143":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:9351:7948":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:2583:138":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:4044:11975":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:1761:10278":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:13576:8729":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:41065:9911":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:43622:10087":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"5:1296:9625":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"5:1784:7743":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"16:2881:9056":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:2577:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"5:629:9711":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"20:574:3128":{"crate_id":20,"path":["libc","unix","tms"],"kind":"struct"},"6:1496:3875":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:6189:9202":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"5:2974:31959":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:21369:2372":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:10756:11584":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"16:8050:9505":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:9243:7943":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:3986:2387":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"1:10241:12018":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:2827:112":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1:11587:10455":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"5:7436:7734":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"16:2450:9038":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:13072:8569":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"6:4364:5280":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:42072:6770":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:46423:10173":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"6:475:3114":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:11470:10287":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:22608:30155":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:10732:10441":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:3157:26443":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:8345:10294":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:42262:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"5:3728:2418":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:32326:9999":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:44375:10124":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:14043:8850":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:8323:2908":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:8843:2453":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:11359:20492":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:1539:6770":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:11349:10319":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:43612:10086":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:5981:223":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:40556:10035":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"6:555:3124":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:7994:10336":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:43125:10069":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:10751:11582":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:39644:10010":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:9268:10280":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"20:1355:3876":{"crate_id":20,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:12984:8557":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:44073:10109":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:3073:2623":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:5819:2485":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:11039:7821":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:13203:8595":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:12971:8555":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:4174:11989":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"20:5461:5347":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:2419:2059":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:44107:10018":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"16:7862:9468":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:8977:10417":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:10643:2453":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:48119:10248":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"6:6943:6359":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:4694:12002":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:4248:6856":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"1:0:1515":{"crate_id":1,"path":["std"],"kind":"module"},"5:3576:176":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"5:2967:6819":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:13114:8577":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:47897:10241":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:1822:10281":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:2363:2353":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"13:226:11193":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:3080:135":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"6:1674:3891":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:2212:17342":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"17:12226:8400":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:12027:1644":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:8875:9927":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:39481:213":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:48256:10257":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:4444:7764":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"16:4585:9098":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:10367:8140":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"20:4887:3813":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:41087:2433":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:42965:6855":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"6:4480:5289":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:8285:10388":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"11:759:9616":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"16:6960:9330":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:11408:20367":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"5:687:113":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:9087:8072":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:13086:8571":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:6604:2488":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:8954:20364":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"6:6913:6357":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"5:1146:31915":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:46725:10181":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:952:9624":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:12049:1683":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:11992:26485":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:3924:11967":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:13063:208":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"5:6676:7708":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:1576:3883":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:22950:189":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:13677:8768":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"6:4814:5322":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:22463:9972":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:363:10266":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:11087:8242":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:4824:11235":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:22637:11485":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:11273:8262":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"20:3180:5298":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:42081:199":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:14336:8949":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:9853:20378":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"1:837:2453":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"11:1876:9637":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"18:481:7889":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:8150:2367":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:40637:9900":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:14283:8931":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"16:6376:20301":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:12063:8367":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"6:4375:5281":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"20:4943:6353":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:11390:8278":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"16:5696:20297":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:42005:9929":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:43808:9939":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:2877:109":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:22919:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:10293:8085":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"11:389:7700":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:9846:209":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:44537:11570":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"20:1436:3885":{"crate_id":20,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"9:486:19284":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:43912:9942":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"6:6107:11413":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"6:5123:11352":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:8826:20360":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"5:2139:7722":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:8004:2419":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:21804:9969":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:13724:8776":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:11317:8268":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:46591:10178":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"6:4647:5305":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:5409:10301":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:11152:10409":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"16:2574:9043":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"6:6114:11414":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:11049:8236":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:10448:8151":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:2345:2347":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:41792:10060":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:8267:10290":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"6:5928:5860":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:7899:10334":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"20:2976:5278":{"crate_id":20,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:9806:137":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"20:3137:5292":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:9840:6845":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"6:501:3118":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:14135:8875":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:1064:9626":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"5:7262:6770":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:2593:7779":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"5:5797:254":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"6:7604:5347":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:5076:10298":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:6140:7789":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"20:4193:5865":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"10:36:11207":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:43704:10093":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:2668:131":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"17:11138:8246":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:13208:110":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"20:4781:3809":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:21218:31371":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:11510:10288":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:13793:8791":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:3193:2425":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"5:3808:7743":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1:7725:11902":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"10:0:2206":{"crate_id":10,"path":["adler"],"kind":"module"},"20:582:3129":{"crate_id":20,"path":["libc","unix","servent"],"kind":"struct"},"6:5859:5853":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"11:680:9631":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:10834:27053":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:11376:11587":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:11816:8313":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:10055:150":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"16:4462:9094":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:14222:8924":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:4455:5164":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"11:2467:11201":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"20:4278:1862":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"7:78:19278":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"18:736:24333":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:3441:7967":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:10485:2372":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:12998:8558":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"16:4889:9107":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:400:7949":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"5:1472:9616":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:4174:9881":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"16:7041:9345":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:14309:8940":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"11:860:9623":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"16:8154:9515":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"6:1913:3951":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:10070:10279":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"6:7388:6702":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"18:671:7920":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"6:6136:11422":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"6:6059:11394":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:13779:8788":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:40646:9901":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:2943:17324":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:46095:10157":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:10090:11955":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:3494:2369":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"20:3482:5327":{"crate_id":20,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:2709:9748":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"17:13898:8816":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"5:1110:31917":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:21554:17341":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"16:6915:9069":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:40617:9895":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:10228:8131":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"20:4773:3041":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"6:5015:5323":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"20:3187:5299":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:40848:2403":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"6:7598:5346":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:44759:10137":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"16:6560:7695":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"6:6086:11401":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"5:3150:97":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"6:7668:11461":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:9140:10426":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"16:7436:9170":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:3312:31120":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:11282:8263":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:2209:7964":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:12226:9936":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:47959:10242":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:42916:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"11:2286:9626":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"2:44767:10139":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:9121:2378":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:7924:2418":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:5425:10302":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"17:9999:8062":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"16:6893:9325":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:15:2313":{"crate_id":2,"path":["core","write"],"kind":"macro"},"1:9179:26171":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"2:40233:10012":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"6:4776:5318":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:504:7722":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:9138:7940":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"18:507:7891":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"5:3186:9636":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:12044:1625":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:43748:10098":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:32337:10000":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"20:1574:3898":{"crate_id":20,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:12791:8510":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:14500:8991":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:11743:8303":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:9702:8086":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"16:2644:9046":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"11:483:147":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"16:6415:9250":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"6:4908:5866":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:11640:7969":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:40489:2366":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"2:44597:17443":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:9565:8083":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:44082:9956":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"9:426:19287":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"5:6847:7753":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"18:521:24335":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"16:7523:9445":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"6:1596:3885":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:12474:8463":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"18:681:7921":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"16:6968:20304":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:12037:685":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:2964:9374":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:12831:8514":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:14025:8846":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:41919:167":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"16:3915:9090":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:41996:6832":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"20:3286:5307":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"6:5982:5865":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:44724:210":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"20:1558:3897":{"crate_id":20,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:4847:11249":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:13686:8769":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"16:0:2211":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:10421:8019":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:8795:20359":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:10796:133":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:12029:1137":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:4619:11971":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"20:3276:5306":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:7888:122":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:9532:33188":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"6:5068:5327":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:12031:1491":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:1407:149":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:11688:20370":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:14034:8849":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:43180:10079":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:1551:9635":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:12532:8472":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"20:1504:3890":{"crate_id":20,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:12659:8492":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:9753:8087":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"6:7651:11456":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:11873:8325":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"6:4977:11302":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:11284:7823":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"1:622:10269":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"16:2722:9049":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:7836:2364":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:10315:108":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:12036:683":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:2825:248":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:10085:8115":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"6:4878:11261":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:12435:17193":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:7065:6776":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:9102:155":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:5302:123":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"17:13229:8597":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:21672:12033":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:11382:8276":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"11:2351:6770":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"20:469:3114":{"crate_id":20,"path":["libc","unix","group"],"kind":"struct"},"1:11382:11588":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"5:5640:7741":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"6:1591:3884":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:724:147":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"20:3489:5328":{"crate_id":20,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:9052:20344":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:13759:8780":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:7701:17311":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"11:822:9618":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:21540:12040":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:42860:11553":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:41953:6833":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:2987:17331":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:42925:6854":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:10424:10407":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"16:5088:9113":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:11227:8259":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"6:4989:11311":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"16:4986:9110":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"6:6813:6351":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"16:7621:20307":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:14002:8841":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"16:4949:9109":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"16:6583:9267":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"5:1281:9626":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"6:1558:3881":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:4968:11296":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"5:3191:32155":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:2958:9373":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:44192:10111":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"11:785:7725":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:44398:10132":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:1910:696":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"6:4535:5296":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:4473:2510":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:46371:10171":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"20:138:2804":{"crate_id":20,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:12075:8370":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"16:3764:9086":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"6:1682:3892":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:11164:2118":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"11:2165:8151":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"17:11887:8326":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:6263:11430":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"6:527:3120":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:22495:9973":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"20:3154:5294":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"20:1398:3881":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:44238:10120":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:43659:10030":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:4854:11251":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:7908:10335":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:9960:8106":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:5234:206":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"17:13175:8591":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"5:2149:9719":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"18:766:24334":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:10013:8085":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:48043:10244":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"16:4053:9091":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"11:423:33162":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:881:9617":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:2915:12026":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:3664:11963":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:11001:8233":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:3960:11968":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:42870:6854":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"17:9618:33193":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"7:31:19271":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"6:5910:5858":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:4734:11977":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"20:3174:5297":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:2657:119":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:45976:10152":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:1681:1173":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"6:5085:11329":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"6:6100:11412":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:11491:8286":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"16:6346:9242":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"6:4789:5320":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:12410:17196":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:8230:11961":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:42459:94":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:7171:17313":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:48203:10254":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:3448:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:2537:2372":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:3160:26447":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"16:2696:9048":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:2938:229":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"17:12209:8392":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"3:234:229":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:11527:17190":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"17:0:2212":{"crate_id":17,"path":["object"],"kind":"module"},"11:1842:2453":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"11:1862:9635":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"20:1368:3878":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"20:3355:5313":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Chdr"],"kind":"struct"},"16:3049:19439":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:10341:8139":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:43940:10103":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"16:3600:9085":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"20:3127:5291":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:5389:10300":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:44098:9878":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"20:4995:6355":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:7556:6358":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:10589:8169":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:42184:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:46114:10158":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:3116:11922":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"16:149:7692":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"6:507:3119":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"5:1310:9630":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:44221:10119":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:41868:197":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"16:4921:9108":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:12847:8519":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:8293:10382":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:4205:9882":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"16:3830:9088":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:21235:31373":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:10166:20397":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"17:10279:8134":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:12374:8425":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"11:2473:11202":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:915:9614":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"18:574:7891":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"19:0:1117":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:5574:9059":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:22:723":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"6:4449:2071":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"5:4855:220":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:9071:8071":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:6537:2483":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"5:2178:11468":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:10187:8125":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"2:40332:10021":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:41805:10290":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:10968:9944":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:1797:10279":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:10772:8194":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"5:5382:17182":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"16:4527:9096":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"16:7768:9065":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:10198:8127":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:43672:10090":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:4377:10293":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:9965:10057":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"2:9850:6849":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:4161:11988":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:43790:2405":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"5:3602:9631":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"6:7633:5349":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"20:542:3123":{"crate_id":20,"path":["libc","unix","pollfd"],"kind":"struct"},"1:12043:1628":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"20:3414:5320":{"crate_id":20,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:11138:10408":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:11531:10289":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:8849:20361":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:21776:12032":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"2:40396:30171":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:1041:9354":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:41599:164":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:12497:8468":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"20:3408:5319":{"crate_id":20,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:12946:8552":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"16:8294:131":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:40297:10018":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:40218:9878":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:3988:11971":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"20:1537:3894":{"crate_id":20,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:2869:2672":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:40412:10028":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:10024:8086":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"20:4910:6350":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:6083:19409":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:40872:9908":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:6128:11419":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:2655:2417":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"11:298:11195":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:3154:27937":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"5:4242:2453":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:9522:8082":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"5:2469:11473":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"16:7462:9432":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:3195:2426":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"16:5049:9112":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:23043:188":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"6:6868:6354":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:12912:8549":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"16:4497:9095":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"11:992:9354":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"5:1680:7708":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"16:8167:9518":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:9489:33189":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:9208:7942":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:21463:12044":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:5740:2476":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:4316:224":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:11045:7822":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:45870:10148":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"16:7722:9067":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:8714:20357":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:12766:8508":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:3388:2387":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"17:12268:8415":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:9824:20377":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:4022:11972":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:6248:9896":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:2178:7961":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"20:4120:5858":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:11449:20368":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"16:2548:9042":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"16:6721:20303":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"15:327:19395":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:22644:9992":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:32330:9412":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:2574:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:21233:31369":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"16:6944:33179":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:13423:8615":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:5537:2387":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"20:4138:5860":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"5:7534:9741":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:8966:10414":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"11:357:7698":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:43365:10080":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"6:119:2803":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"16:7067:9351":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:41685:11552":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"20:483:3116":{"crate_id":20,"path":["libc","unix","timeval"],"kind":"struct"},"2:40858:9907":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:638:10270":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"16:6041:20300":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:39505:215":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:39405:17164":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"2:1763:11479":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:11163:8248":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"5:7324:213":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:7841:2361":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:13711:8771":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"20:1410:3882":{"crate_id":20,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:11352:8271":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"16:6268:33181":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:42498:2475":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"18:96:24323":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"6:7365:6701":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:11216:8255":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:43380:11561":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:12042:785":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"6:4955:11286":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:10562:8167":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"6:563:3125":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:4897:2435":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"2:5632:2387":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"16:2596:9044":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"5:3338:7743":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"18:624:33200":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"16:7360:33183":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"6:4461:5287":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:13001:143":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"5:1500:9614":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"11:868:9624":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:10981:8085":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:12415:9928":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:10673:8182":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:4815:11976":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:4738:11980":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:6420:2063":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:4900:12000":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"6:4666:5306":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:3209:214":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"6:4830:11238":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:12238:8403":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:3476:2371":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"17:12155:8386":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"16:7391:20306":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"6:5023:5324":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:6445:7771":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"17:10384:8142":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"6:6819:6352":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"5:7509:7739":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:8279:11990":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:2012:7957":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"6:1710:3896":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:12087:8371":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:9887:8097":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"5:4010:7725":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"16:3065:7976":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:2347:2348":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"11:1687:149":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:13740:8779":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"18:699:7924":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:41096:7773":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"18:690:7923":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:6424:2480":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"20:5439:6701":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"16:2504:9040":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:30572:30159":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:7858:2362":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:41656:11962":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"18:609:7907":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"6:6804:6350":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:21610:2372":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"17:10917:8227":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:11125:8245":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:9329:2404":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:4859:31111":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"0:73:1820":{"crate_id":0,"path":["num_cpus","get_physical"],"kind":"function"},"11:2238:9354":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"1:10934:10332":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"17:12124:8377":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:11952:8344":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"6:4351:5279":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:11606:10322":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:6638:236":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:41928:2453":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1:4305:10292":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:8196:2456":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"5:6474:7725":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:44521:11566":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"16:5798:9138":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"6:495:3117":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"10:44:9644":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:8873:11904":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:12599:8483":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"6:6961:6360":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:11338:20491":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:7894:10285":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"2:2880:2676":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2:43958:10104":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"16:7015:9344":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"9:330:11208":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:9712:33191":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"16:2810:9053":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:8225:10384":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"6:5891:5856":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:21407:12039":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"1:11307:10454":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"20:568:3127":{"crate_id":20,"path":["libc","unix","itimerval"],"kind":"struct"},"2:48128:10249":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:7742:159":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:12253:8409":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:10047:146":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"5:2968:32168":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"5:7302:31927":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:13216:8596":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"6:4488:5290":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:12306:8423":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:14421:8971":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"18:491:7890":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:2899:9364":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:9087:180":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:12751:8505":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:9651:8085":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:11618:8293":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:11075:8241":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"14:0:2209":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:946:9623":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"11:2494:2340":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:11209:11586":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:1965:200":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:10904:8226":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"11:324:11198":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"18:614:33197":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:4485:11992":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"9:450:19285":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"20:4817:6348":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"16:7651:9451":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"16:7660:9452":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:1962:201":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:4543:5297":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:12430:17194":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:6169:5868":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:10411:8144":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:5122:207":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"1:3360:2433":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:10963:8231":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"6:6718:2908":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:12175:9954":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:10761:2361":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"17:9973:8107":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"20:3111:5289":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:10532:2423":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:1558:2387":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"17:14515:8992":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:14317:8943":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"9:357:19300":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:4958:12007":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:14523:8995":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"16:6386:9247":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"6:6159:11428":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:557:10268":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:40516:10032":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"20:5033:6358":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","termios2"],"kind":"struct"},"2:22020:12038":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:44350:10123":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:1557:9636":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:2894:9367":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:8859:6770":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:2294:99":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"1:8789:10407":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:4631:11063":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"16:5435:9117":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"16:6545:9265":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:10529:2427":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:11028:7820":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"6:4584:5302":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:21188:31357":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"17:13869:8808":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:43894:9941":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:8952:2479":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:1075:7954":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:10686:8185":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:21795:2372":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:47299:10205":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:11262:8261":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:7871:133":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"9:507:9698":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:5562:2852":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:22117:9967":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:2202:2145":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:47115:10203":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"11:666:2453":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"11:1850:7725":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:12024:395":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:22410:9971":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:3974:11969":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:44541:11571":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"18:515:7888":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"16:6600:20302":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:5648:9123":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:40594:10038":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:12514:8471":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:8595:20345":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:6534:2482":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:10662:8181":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"14:40:8341":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:4389:7763":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:5375:10299":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:46645:10180":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"20:3348:5312":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Chdr"],"kind":"struct"},"17:14479:8988":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:11789:8307":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:9848:6848":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:4736:11979":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:22531:30168":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:2832:250":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:12152:9953":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:10241:8105":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"16:6499:9078":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:2940:131":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"11:2423:19361":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"2:2200:627":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:2936:9369":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:40496:10030":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:0:524":{"crate_id":2,"path":["core"],"kind":"module"},"16:2864:9055":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"16:3032:9080":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"16:8072:9506":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"6:6222:5889":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:47835:10240":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"11:344:33154":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"2:42420:87":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:4399:6857":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:44207:10116":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:3419:2062":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:10467:7817":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"1:12051:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"20:3209:5301":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:1772:9744":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:45824:10146":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:11587:8292":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"6:4686:5308":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:9922:8100":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:9493:30808":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:43584:10082":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:11063:8240":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:40313:10019":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"6:5052:11324":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:12453:8459":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"6:4870:11257":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:40659:10043":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:44797:10142":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:10940:9942":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:9391:132":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"11:796:7743":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"11:2461:11200":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"16:5661:9128":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:10572:7818":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"16:7534:9073":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:22479:11482":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"11:2058:9354":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:44809:9643":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:13257:145":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:10266:8133":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:11810:7829":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:6440:11481":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:923:9618":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:30560:6854":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:46622:10179":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:3272:17332":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:14127:8874":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"6:6764:3810":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:12779:8509":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:10576:8168":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"6:6700:6347":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:4529:5295":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"5:2698:11476":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"16:6513:9255":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"6:7616:11451":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:30504:6719":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"6:4884:11262":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:14379:8965":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"16:6017:20299":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"20:3296:5308":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:7657:11457":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:8971:110":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"20:3401:5318":{"crate_id":20,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:40469:10029":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"20:5004:6356":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:14057:8857":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:21421:17341":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"1:7848:2365":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"6:5117:11349":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"16:7708:9077":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"20:4209:5867":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:43858:10102":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:2923:17322":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:46469:10175":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:13025:8562":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:1542:7725":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:3235:2428":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"6:6741:3838":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"20:4165:5861":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlmsghdr"],"kind":"struct"},"2:39465:216":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"16:2359:9034":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"16:6401:9060":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"20:4174:5862":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlmsgerr"],"kind":"struct"},"20:536:3122":{"crate_id":20,"path":["libc","unix","iovec"],"kind":"struct"},"20:3443:5323":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:9473:7816":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:5619:223":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:8200:2404":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:10140:20396":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"1:5633:10304":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"5:3225:32157":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:3364:17165":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"20:4272:5889":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"18:564:7900":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:9027:10424":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:13014:158":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:7235:30220":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:12712:8500":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:13452:8635":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"5:4356:267":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"16:7006:9341":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:30736:30152":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"18:644:7891":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"11:0:2207":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:3274:2424":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"18:531:7895":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:12048:839":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"20:2995:5280":{"crate_id":20,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"20:5494:6703":{"crate_id":20,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:9986:8109":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"20:1490:3889":{"crate_id":20,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:9661:33186":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"20:3147:5293":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"16:7318:9391":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:12025:8361":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:7705:17310":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:5626:7805":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:10629:8175":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"20:1522:3892":{"crate_id":20,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"11:2394:7743":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"6:1639:3888":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"4:0:2203":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:2193:132":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:8986:9928":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"11:2334:9631":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"1:8795:202":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"6:6711:6348":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"5:6989:7756":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:48108:10247":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"5:7353:6770":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:10947:10303":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:21670:2372":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"16:2339:9028":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"18:719:7930":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:3272:2423":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"20:4298:5890":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:12041:789":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:4145:11986":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"6:4808:11233":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"16:3315:9083":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2:45892:10149":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:9456:33192":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"6:1697:3894":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"5:7316:6770":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"16:7736:9454":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"9:393:19286":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"14:202:17210":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:23229:183":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:23136:184":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"20:557:3125":{"crate_id":20,"path":["libc","unix","linger"],"kind":"struct"},"2:47647:10238":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"18:755:7938":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:43172:10078":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"20:3019:5282":{"crate_id":20,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:8469:2450":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"5:1382:96":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"5:1434:9631":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"14:31:9605":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"20:5485:5351":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:919:9615":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:40547:10034":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"6:5044:11322":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"18:660:7914":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:11508:20369":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:4838:413":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"18:599:33199":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:32344:6857":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"20:1479:3888":{"crate_id":20,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"5:1511:9615":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"16:6485:9061":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:3726:10287":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"16:5905:9153":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:9097:238":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:2982:17330":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:504:7952":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:14069:8860":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:10098:8116":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"14:165:19371":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:4070:9880":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"5:7545:9742":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"11:1127:9629":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:23705:239":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:13189:8592":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"0:72:1802":{"crate_id":0,"path":["num_cpus","get"],"kind":"function"},"5:7332:9734":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"5:6003:17636":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"5:3220:9635":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"20:1444:3886":{"crate_id":20,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:10457:8154":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"6:4434:5285":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:46879:10199":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"20:0:869":{"crate_id":20,"path":["libc"],"kind":"module"},"16:2618:9045":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"16:7102:20305":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"16:3232:9025":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"11:1855:7743":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"16:5866:9150":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"11:101:11194":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:45954:10151":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"5:881:7716":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"6:1632:3887":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"20:521:3120":{"crate_id":20,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"16:5939:9010":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:22658:9993":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:6064:7800":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"5:825:7714":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:2872:2622":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:11972:8354":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:39817:28451":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"20:3308:5309":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:8538:2453":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:1820:10280":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:9781:8088":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:2953:17326":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:4710:5310":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"14:215:9610":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:41622:9919":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:13915:8819":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"6:4506:5292":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:10980:10410":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"17:13041:8564":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"20:3071:5286":{"crate_id":20,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:2974:17328":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"5:7270:9733":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:12643:114":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:6351:179":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"20:3471:5326":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"16:2744:9050":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"20:4974:6354":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:39525:218":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:42943:131":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:13488:8666":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:4938:845":{"crate_id":2,"path":["core","iter"],"kind":"module"},"5:276:2626":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:5867:5854":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"20:549:3124":{"crate_id":20,"path":["libc","unix","winsize"],"kind":"struct"},"2:21371:12037":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:10479:8159":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:8206:2405":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:46277:10169":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:10715:8189":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"11:2085:9626":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:12294:8420":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"20:1361:3877":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:6012:11369":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"6:548:3123":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"}},"external_crates":{"20":{"name":"libc","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}