{"root":"0:0:1674","crate_version":"1.7.0","includes_private":false,"index":{"0:227":{"id":"0:227","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1166,0],"end":[1174,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Target","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsMut","id":"1:3140:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Target"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsMut","id":"1:3140:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Target"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"AsMut","id":"1:3140:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Target"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}},"items":["0:231:1644"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:3701:137":{"id":"1:3701:137","crate_id":1,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3703:675"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"1:3696:213","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:121":{"id":"0:121","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[788,0],"end":[807,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"generic","inner":"T"},{"kind":"generic","inner":"L"}]}},{"type":{"kind":"tuple","inner":[{"kind":"generic","inner":"T"},{"kind":"generic","inner":"R"}]}}],"bindings":[]}},"param_names":[]}},"items":["0:125:1805"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:165:1838":{"id":"0:165:1838","crate_id":0,"name":"collect","span":{"filename":"src/lib.rs","begin":[944,4],"end":[949,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"B"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"B"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"iter::FromIterator","id":"1:8363:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"1:8565:157","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13373:55215":{"id":"1:13373:55215","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:47356:166"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3149:217":{"id":"1:3149:217","crate_id":1,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3151:127","1:3152:1395"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:74:1663":{"id":"0:74:1663","crate_id":0,"name":"map_right","span":{"filename":"src/lib.rs","begin":[310,4],"end":[318,5]},"visibility":"public","docs":"Apply the function `f` on the value in the `Right` variant if it is present rewrapping the\nresult in `Right`.\n\n```\nuse either::*;\n\nlet left: Either<_, u32> = Left(123);\nassert_eq!(left.map_right(|x| x * 2), Left(123));\n\nlet right: Either<u32, _> = Right(123);\nassert_eq!(right.map_right(|x| x * 2), Right(246));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"1:3492:132","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"R"}],"output":{"kind":"generic","inner":"S"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13437:2059":{"id":"1:13437:2059","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"prim@char":"4:15839:2033","`DoubleEndedIterator`":"1:8411:120","self::pattern":"1:12997:1588","str::matches":"4:15845:2038"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"1:49524:3150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:104:1769":{"id":"0:104:1769","crate_id":0,"name":"expect_right","span":{"filename":"src/lib.rs","begin":[687,4],"end":[695,5]},"visibility":"public","docs":"Returns the right value\n\n# Examples\n\n```\n# use either::*;\nlet right: Either<(), _> = Right(3);\nassert_eq!(right.expect_right(\"value was Left\"), 3);\n```\n\n# Panics\n\nWhen `Either` is a `Left` value\n\n```should_panic\n# use either::*;\nlet left: Either<_, ()> = Left(3);\nleft.expect_right(\"value was Right\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["msg",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"generic","inner":"R"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"core::fmt::Debug","id":"1:10255:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3308:2103":{"id":"1:3308:2103","crate_id":1,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3310:171","1:3311:254"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13396:56641":{"id":"1:13396:56641","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"1:12997:1588","prim@char":"4:15839:2033"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:105:1776":{"id":"0:105:1776","crate_id":0,"name":"either_into","span":{"filename":"src/lib.rs","begin":[709,4],"end":[718,5]},"visibility":"public","docs":"Convert the contained value into `T`\n\n# Examples\n\n```\n# use either::*;\n// Both u16 and u32 can be converted to u64.\nlet left: Either<u16, u32> = Left(3u16);\nassert_eq!(left.either_into::<u64>(), 3u64);\nlet right: Either<u16, u32> = Right(7u32);\nassert_eq!(right.either_into::<u64>(), 7u64);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"1:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"1:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3153:216":{"id":"1:3153:216","crate_id":1,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3155:127","1:3156:1394"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:281:1518":{"id":"0:281:1518","crate_id":0,"name":"0","span":{"filename":"src/lib.rs","begin":[52,10],"end":[52,11]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"generic","inner":"R"}},"b:1:3169-0:273:1560":{"id":"b:1:3169-0:273:1560","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"1:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"1:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}},"items":["1:3172:1777"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:282":{"id":"0:282","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[47,9],"end":[47,13]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"$crate::marker::Copy","id":"1:3250:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"$crate::marker::Copy","id":"1:3250:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"1:3250:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:9222:2314-0:273:1560":{"id":"a:1:9222:2314-0:273:1560","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"1:9222:2314","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"1:9222:2314","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"1:9222:2314","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:3483:2125":{"id":"1:3483:2125","crate_id":1,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3484:567"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8363:136":{"id":"1:8363:136","crate_id":1,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8365:672"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:344:294":{"id":"0:344:294","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[1150,0],"end":[1154,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"::std::ffi::CStr","id":"4:2805:100","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3388:2119":{"id":"1:3388:2119","crate_id":1,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3390:171","1:3391:1215"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10538:2497":{"id":"1:10538:2497","crate_id":1,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10539:146","1:10540:16636","1:10541:55307"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3146:135":{"id":"1:3146:135","crate_id":1,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3148:669"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13369:56149":{"id":"1:13369:56149","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12468:1899"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:6945:3360":{"id":"4:6945:3360","crate_id":4,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6946:56299"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5713:3380":{"id":"4:5713:3380","crate_id":4,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5714:4918","4:5715:56225","4:5716:56226"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:1079:3400":{"id":"4:1079:3400","crate_id":4,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:1080:3718","4:1081:3355","4:1082:56026","4:1083:56027","4:1084:56028","4:1085:56029","4:1086:56030"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:95:1730":{"id":"0:95:1730","crate_id":0,"name":"left_or_else","span":{"filename":"src/lib.rs","begin":[500,4],"end":[508,5]},"visibility":"public","docs":"Returns left value or computes it from a closure\n\n# Examples\n\n```\n# use either::*;\nlet left: Either<String, u32> = Left(\"3\".to_string());\nassert_eq!(left.left_or_else(|_| unreachable!()), \"3\");\n\nlet right: Either<String, u32> = Right(3);\nassert_eq!(right.left_or_else(|x| x.to_string()), \"3\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"generic","inner":"L"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"1:3492:132","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"R"}],"output":{"kind":"generic","inner":"L"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13455:58804":{"id":"1:13455:58804","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:155:909":{"id":"0:155:909","crate_id":0,"name":"next","span":{"filename":"src/lib.rs","begin":[910,4],"end":[912,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"1:8565:157","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13446:58800":{"id":"1:13446:58800","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"prim@char":"4:15839:2033","`DoubleEndedIterator`":"1:8411:120","self::pattern":"1:12997:1588","str::match_indices":"4:15845:2038"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"1:49488:3148","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13022:2832","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13481:56028":{"id":"1:13481:56028","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13393:53122":{"id":"1:13393:53122","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"1:12997:1588","prim@char":"4:15839:2033"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:791:53037":{"id":"5:791:53037","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:111":{"id":"0:111","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[742,0],"end":[763,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"R"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"items":["0:115:1791"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:160:1834":{"id":"0:160:1834","crate_id":0,"name":"for_each","span":{"filename":"src/lib.rs","begin":[925,4],"end":[930,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"1:3489:131","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"1:8565:157","args":null,"param_names":[]}}}}],"output":null}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:255:648":{"id":"0:255:648","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[1235,4],"end":[1237,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:10215:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:10204:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12936:2751":{"id":"1:12936:2751","crate_id":1,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:12937:126","1:12938:54936"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6849:3364":{"id":"4:6849:3364","crate_id":4,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6850:56504"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:140:669":{"id":"0:140:669","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[870,4],"end":[875,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["r",{"kind":"resolved_path","inner":{"name":"Result","id":"1:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"R"}},{"type":{"kind":"generic","inner":"L"}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3248:207":{"id":"1:3248:207","crate_id":1,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13383:56625":{"id":"1:13383:56625","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"4:15845:2038"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3526:2135":{"id":"1:3526:2135","crate_id":1,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3528:226","1:3529:196","1:3530:55112"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:278:1518":{"id":"0:278:1518","crate_id":0,"name":"0","span":{"filename":"src/lib.rs","begin":[50,9],"end":[50,10]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"generic","inner":"L"}},"1:13472:58809":{"id":"1:13472:58809","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"1:12997:1588","prim@char":"4:15839:2033"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13379:55218":{"id":"1:13379:55218","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:311:703":{"id":"0:311:703","crate_id":0,"name":"hash","span":{"filename":"src/lib.rs","begin":[47,47],"end":[47,51]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["state",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"__H"}}}]],"output":{"kind":"tuple","inner":[]},"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"$crate::hash::Hasher","id":"1:10503:146","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:145":{"id":"0:145","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[889,0],"end":[900,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Extend","id":"1:8376:1827","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Extend","id":"1:8376:1827","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["extend_one","extend_reserve"],"trait":{"kind":"resolved_path","inner":{"name":"Extend","id":"1:8376:1827","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}},"items":["0:149:1828"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:13406:1847":{"id":"1:13406:1847","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:47356:166","self::pattern":"1:12997:1588","prim@char":"4:15839:2033"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13022:2832","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:133:1816":{"id":"0:133:1816","crate_id":0,"name":"into_inner","span":{"filename":"src/lib.rs","begin":[842,4],"end":[844,5]},"visibility":"public","docs":"Extract the value of an either over two equivalent types.\n\n```\nuse either::*;\n\nlet left: Either<_, u32> = Left(123);\nassert_eq!(left.into_inner(), 123);\n\nlet right: Either<u32, _> = Right(123);\nassert_eq!(right.into_inner(), 123);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6076":{"id":"5:6076","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5896:1319","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6077:59447","5:6078:2240","5:6081:59448","5:6084:59449","5:6096:59450","5:6097:59451","5:6098:2258","5:6099:56026","5:6100:56027"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:9223:2313":{"id":"1:9223:2313","crate_id":1,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:23655:2910":{"id":"1:23655:2910","crate_id":1,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:23656:2939"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:23651:2888","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"1:3250:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:5761:3382":{"id":"4:5761:3382","crate_id":4,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5762:56166","4:5763:56167","4:5764:56168","4:5765:56169"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:68:294":{"id":"0:68:294","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[226,4],"end":[231,5]},"visibility":"public","docs":"Convert `&Either<L, R>` to `Either<&L, &R>`.\n\n```\nuse either::*;\n\nlet left: Either<_, ()> = Left(\"some value\");\nassert_eq!(left.as_ref(), Left(&\"some value\"));\n\nlet right: Either<(), _> = Right(\"some value\");\nassert_eq!(right.as_ref(), Right(&\"some value\"));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"L"}}}},{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"R"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8376:1827":{"id":"1:8376:1827","crate_id":1,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8378:1828","1:8380:2570","1:8381:2571"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6845:3361":{"id":"4:6845:3361","crate_id":4,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6846:55994"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:308":{"id":"0:308","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[47,47],"end":[47,51]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"$crate::hash::Hash","id":"1:10493:142","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"$crate::hash::Hash","id":"1:10493:142","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"kind":"resolved_path","inner":{"name":"Hash","id":"1:10493:142","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}},"items":["0:311:703"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:13425:56637":{"id":"1:13425:56637","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:15839:2033","str::rsplitn":"4:15845:2038","self::pattern":"1:12997:1588"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"1:49424:3117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:324:1644":{"id":"0:324:1644","crate_id":0,"name":"as_mut","span":{"filename":"src/lib.rs","begin":[1139,0],"end":[1139,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:172:283":{"id":"0:172:283","crate_id":0,"name":"any","span":{"filename":"src/lib.rs","begin":[966,4],"end":[971,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"1:3489:131","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"1:8565:157","args":null,"param_names":[]}}}}],"output":{"kind":"primitive","inner":"bool"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8330:2638":{"id":"1:8330:2638","crate_id":1,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8332:2606"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:1:3281:2277-0:273:1560":{"id":"a:1:3281:2277-0:273:1560","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"1:3281:2277","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"1:3281:2277","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"1:3281:2277","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:3472:1552":{"id":"1:3472:1552","crate_id":1,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3473:534"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"1:3459:116","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:71:1656":{"id":"0:71:1656","crate_id":0,"name":"map_left","span":{"filename":"src/lib.rs","begin":[288,4],"end":[296,5]},"visibility":"public","docs":"Apply the function `f` on the value in the `Left` variant if it is present rewrapping the\nresult in `Left`.\n\n```\nuse either::*;\n\nlet left: Either<_, u32> = Left(123);\nassert_eq!(left.map_left(|x| x * 2), Left(246));\n\nlet right: Either<u32, _> = Right(123);\nassert_eq!(right.map_left(|x| x * 2), Right(123));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"M"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"M","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"1:3492:132","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"L"}],"output":{"kind":"generic","inner":"M"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:222":{"id":"0:222","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1156,0],"end":[1164,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Target","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"1:3137:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"Target"}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"1:3137:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"Target"}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"1:3137:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"Target"}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}},"items":["0:226:294"],"negative":false,"synthetic":false,"blanket_impl":null}},"4:6423:3359":{"id":"4:6423:3359","crate_id":4,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6424:3645","4:6425:3646","4:6426:7677","4:6427:58327","4:6429:58331","4:6431:58328","4:6432:58329","4:6434:58330"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10545:2888","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13362:2569":{"id":"1:13362:2569","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:321":{"id":"0:321","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1139,0],"end":[1139,32]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsMut","id":"1:3140:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsMut","id":"1:3140:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"AsMut","id":"1:3140:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}},"items":["0:324:1644"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:296":{"id":"0:296","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[47,26],"end":[47,28]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"$crate::cmp::Eq","id":"1:2897:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"$crate::cmp::Eq","id":"1:2897:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"1:2897:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:99:1745":{"id":"0:99:1745","crate_id":0,"name":"right_or_else","span":{"filename":"src/lib.rs","begin":[569,4],"end":[577,5]},"visibility":"public","docs":"Returns right value or computes it from a closure\n\n# Examples\n\n```\n# use either::*;\nlet left: Either<String, u32> = Left(\"3\".to_string());\nassert_eq!(left.right_or_else(|x| x.parse().unwrap()), 3);\n\nlet right: Either<String, u32> = Right(3);\nassert_eq!(right.right_or_else(|_| unreachable!()), 3);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"generic","inner":"R"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"1:3492:132","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"L"}],"output":{"kind":"generic","inner":"R"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6100:56027":{"id":"5:6100:56027","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"4:15845:2038"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13371:293":{"id":"1:13371:293","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"4:15845:2038","`u8`":"4:15856:2047"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8411:120":{"id":"1:8411:120","crate_id":1,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8412:1845","1:8413:2566","1:8414:2567","1:8415:2568","1:8419:1846","1:8422:1847"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"1:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:303:984":{"id":"0:303:984","crate_id":0,"name":"partial_cmp","span":{"filename":"src/lib.rs","begin":[47,30],"end":[47,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::option::Option","id":"1:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"$crate::cmp::Ordering","id":"1:37488:168","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:337":{"id":"0:337","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1145,0],"end":[1149,1]},"visibility":"crate","docs":"Requires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsMut","id":"1:3140:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"::std::ffi::OsStr","id":"4:2923:169","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsMut","id":"1:3140:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"::std::ffi::OsStr","id":"4:2923:169","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"AsMut","id":"1:3140:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"4:2923:169","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}},"items":["0:340:1644"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:336:294":{"id":"0:336:294","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[1145,0],"end":[1149,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"::std::ffi::OsStr","id":"4:2923:169","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:86:1694":{"id":"0:86:1694","crate_id":0,"name":"left_and_then","span":{"filename":"src/lib.rs","begin":[388,4],"end":[396,5]},"visibility":"public","docs":"Apply the function `f` on the value in the `Left` variant if it is present.\n\n```\nuse either::*;\n\nlet left: Either<_, u32> = Left(123);\nassert_eq!(left.left_and_then::<_,()>(|x| Right(x * 2)), Right(246));\n\nlet right: Either<u32, _> = Right(123);\nassert_eq!(right.left_and_then(|x| Right::<(), _>(x * 2)), Right(123));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"1:3492:132","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"L"}],"output":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:220:294":{"id":"0:220:294","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[1112,4],"end":[1114,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Target"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3313:2108":{"id":"1:3313:2108","crate_id":1,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3315:171","1:3316:1334"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3318:2105":{"id":"1:3318:2105","crate_id":1,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3320:171","1:3321:879"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13480:3355":{"id":"1:13480:3355","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:333":{"id":"0:333","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1145,0],"end":[1149,1]},"visibility":"crate","docs":"Requires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"1:3137:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"::std::ffi::OsStr","id":"4:2923:169","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"1:3137:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"::std::ffi::OsStr","id":"4:2923:169","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"1:3137:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"4:2923:169","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}},"items":["0:336:294"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:3335:2106":{"id":"1:3335:2106","crate_id":1,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3336:171","1:3337:900"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:188:1847":{"id":"0:188:1847","crate_id":0,"name":"rfind","span":{"filename":"src/lib.rs","begin":[1016,4],"end":[1021,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["predicate",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"1:8565:157","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"1:3489:131","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"1:8565:157","args":null,"param_names":[]}}}}}}],"output":{"kind":"primitive","inner":"bool"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:5633:3404":{"id":"4:5633:3404","crate_id":4,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5634:56184","4:5635:3767"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10545:2888","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:66:1622":{"id":"0:66:1622","crate_id":0,"name":"left","span":{"filename":"src/lib.rs","begin":[190,4],"end":[195,5]},"visibility":"public","docs":"Convert the left side of `Either<L, R>` to an `Option<L>`.\n\n```\nuse either::*;\n\nlet left: Either<_, ()> = Left(\"some value\");\nassert_eq!(left.left(),  Some(\"some value\"));\n\nlet right: Either<(), _> = Right(321);\nassert_eq!(right.left(), None);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:341":{"id":"0:341","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1150,0],"end":[1154,1]},"visibility":"crate","docs":"Requires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"1:3137:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"::std::ffi::CStr","id":"4:2805:100","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"1:3137:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"::std::ffi::CStr","id":"4:2805:100","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"1:3137:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CStr","id":"1:46329:100","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}},"items":["0:344:294"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:3355:2112":{"id":"1:3355:2112","crate_id":1,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3357:1090"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13382:58792":{"id":"1:13382:58792","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"str::slice_unchecked":"4:15845:2038","`str`":"4:15845:2038","crate::ops::IndexMut":"1:3548:2127"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:59:397":{"id":"0:59:397","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[133,4],"end":[138,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3489:131":{"id":"1:3489:131","crate_id":1,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3491:366"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"1:3492:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6097:59451":{"id":"5:6097:59451","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`String`":"5:8352:205","`Box<str>`":"5:432:2706"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2706","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8090:2705","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13384:56626":{"id":"1:13384:56626","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"4:15845:2038"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:53:1586":{"id":"0:53:1586","crate_id":0,"name":"for_both","span":{"filename":"src/lib.rs","begin":[80,0],"end":[87,1]},"visibility":"public","docs":"Evaluate the provided expression for both [`Either::Left`] and [`Either::Right`].\n\nThis macro is useful in cases where both sides of [`Either`] can be interacted with\nin the same way even though the don't share the same type.\n\nSyntax: `either::for_both!(` *expression* `,` *pattern* `=>` *expression* `)`\n\n# Example\n\n```\nuse either::Either;\n\nfn length(owned_or_borrowed: Either<String, &'static str>) -> usize {\n    either::for_both!(owned_or_borrowed, s => s.len())\n}\n\nfn main() {\n    let borrowed = Either::Right(\"Hello world!\");\n    let owned = Either::Left(\"Hello world!\".to_owned());\n\n    assert_eq!(length(borrowed), 12);\n    assert_eq!(length(owned), 12);\n}\n```","links":{"`Either::Right`":"0:273:1560","`Either::Left`":"0:273:1560","`Either`":"0:273:1560"},"attrs":["#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! for_both {\n    ($value:expr, $pattern:pat => $result:expr) => { ... };\n}"},"0:345":{"id":"0:345","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1150,0],"end":[1154,1]},"visibility":"crate","docs":"Requires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsMut","id":"1:3140:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"::std::ffi::CStr","id":"4:2805:100","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsMut","id":"1:3140:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"::std::ffi::CStr","id":"4:2805:100","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"AsMut","id":"1:3140:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CStr","id":"1:46329:100","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}},"items":["0:348:1644"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:154:1706":{"id":"0:154:1706","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[908,4],"end":[908,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"L"},"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"1:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}},"0:69:1644":{"id":"0:69:1644","crate_id":0,"name":"as_mut","span":{"filename":"src/lib.rs","begin":[251,4],"end":[256,5]},"visibility":"public","docs":"Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.\n\n```\nuse either::*;\n\nfn mutate_left(value: &mut Either<u32, u32>) {\n    if let Some(l) = value.as_mut().left() {\n        *l = 999;\n    }\n}\n\nlet mut left = Left(123);\nlet mut right = Right(123);\nmutate_left(&mut left);\nmutate_left(&mut right);\nassert_eq!(left, Left(999));\nassert_eq!(right, Right(123));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"L"}}}},{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"R"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3281:2277":{"id":"1:3281:2277","crate_id":1,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:197":{"id":"0:197","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1045,0],"end":[1057,1]},"visibility":"crate","docs":"`Either<L, R>` implements `Read` if both `L` and `R` do.\n\nRequires crate feature `\"use_std\"`","links":{},"attrs":["#[cfg(any(test, feature = \"use_std\"))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"4:4612:1556","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"4:4612:1556","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["take","by_ref","read_to_string","read_exact","read_to_end","bytes","read_buf","read_vectored","chain","read_buf_exact","is_read_vectored"],"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"4:4612:1556","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}},"items":["0:200:1852","0:201:1854"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:789:3718":{"id":"5:789:3718","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"5:6098:2258":{"id":"5:6098:2258","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8352:205"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:190":{"id":"0:190","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1024,0],"end":[1032,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ExactSizeIterator","id":"1:8436:1848","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ExactSizeIterator","id":"1:8436:1848","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"L"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"1:8565:157","args":null,"param_names":[]}}}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["len","is_empty"],"trait":{"kind":"resolved_path","inner":{"name":"ExactSizeIterator","id":"1:8436:1848","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}},"items":["0:193:780"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:13413:16846":{"id":"1:13413:16846","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"1:12997:1588","prim@char":"4:15839:2033"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"1:12789:3111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10255:109":{"id":"1:10255:109","crate_id":1,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10256:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:1:3969-0:273:1560":{"id":"b:1:3969-0:273:1560","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3245:2276","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"1:3967:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}},"items":["1:3971:1408"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:8850:2637":{"id":"1:8850:2637","crate_id":1,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"1:7891:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:10276:2513":{"id":"1:10276:2513","crate_id":1,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10277:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3967:68":{"id":"1:3967:68","crate_id":1,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3968:1408"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"1:3779:2138":{"id":"1:3779:2138","crate_id":1,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3742:2137":{"id":"1:3742:2137","crate_id":1,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3245:2276","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:181":{"id":"0:181","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[995,0],"end":[1022,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedIterator","id":"1:8411:120","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedIterator","id":"1:8411:120","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"L"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"1:8565:157","args":null,"param_names":[]}}}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["try_rfold","nth_back","rfind","advance_back_by","rfold"],"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedIterator","id":"1:8411:120","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}},"items":["0:184:1845","0:185:1846","0:188:1847"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:13399:56642":{"id":"1:13399:56642","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"1:12997:1588","prim@char":"4:15839:2033"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13022:2832","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13375:55216":{"id":"1:13375:55216","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:47356:166"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:6776:3359":{"id":"4:6776:3359","crate_id":4,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6777:7678"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10545:2888","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3343:2113":{"id":"1:3343:2113","crate_id":1,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3345:1335"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:93:1718":{"id":"0:93:1718","crate_id":0,"name":"left_or","span":{"filename":"src/lib.rs","begin":[459,4],"end":[464,5]},"visibility":"public","docs":"Return left value or given value\n\nArguments passed to `left_or` are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use [`left_or_else`],\nwhich is lazily evaluated.\n\n[`left_or_else`]: #method.left_or_else\n\n# Examples\n\n```\n# use either::*;\nlet left: Either<&str, &str> = Left(\"left\");\nassert_eq!(left.left_or(\"foo\"), \"left\");\n\nlet right: Either<&str, &str> = Right(\"right\");\nassert_eq!(right.left_or(\"left\"), \"left\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"L"}]],"output":{"kind":"generic","inner":"L"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13710:138":{"id":"1:13710:138","crate_id":1,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:13711:171","1:13712:1000"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13725:150":{"id":"1:13725:150","crate_id":1,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:13726:171","1:13727:150","1:13728:754"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2840:2789":{"id":"1:2840:2789","crate_id":1,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2842:53035"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3245:2276","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"1:2837:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13372:56606":{"id":"1:13372:56606","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:15856:2047"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:317":{"id":"0:317","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1139,0],"end":[1139,32]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"1:3137:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"1:3137:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"1:3137:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}},"items":["0:320:294"],"negative":false,"synthetic":false,"blanket_impl":null}},"4:4694:1555":{"id":"4:4694:1555","crate_id":4,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4695:1858","4:4696:1859","4:4697:2545","4:4699:2234","4:4700:2546","4:4702:2547","4:4703:2548"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"4:4612:1556","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3707:2132":{"id":"1:3707:2132","crate_id":1,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3709:54297"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:107":{"id":"0:107","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[721,0],"end":[740,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}}],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"items":["0:110:1783"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:3459:116":{"id":"1:3459:116","crate_id":1,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3460:210","1:3461:532"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3137:75":{"id":"1:3137:75","crate_id":1,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3139:294"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3245:2276","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:126":{"id":"0:126","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[809,0],"end":[828,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"generic","inner":"L"},{"kind":"generic","inner":"T"}]}},{"type":{"kind":"tuple","inner":[{"kind":"generic","inner":"R"},{"kind":"generic","inner":"T"}]}}],"bindings":[]}},"param_names":[]}},"items":["0:130:1812"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:340:1644":{"id":"0:340:1644","crate_id":0,"name":"as_mut","span":{"filename":"src/lib.rs","begin":[1145,0],"end":[1149,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"::std::ffi::OsStr","id":"4:2923:169","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2897:124":{"id":"1:2897:124","crate_id":1,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"1:2892:173","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:5721:3381":{"id":"4:5721:3381","crate_id":4,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5722:4918","4:5723:7684"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:9222:2314":{"id":"1:9222:2314","crate_id":1,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3143:149":{"id":"1:3143:149","crate_id":1,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3145:1777"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5783:3378":{"id":"4:5783:3378","crate_id":4,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5784:4918"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:170:265":{"id":"0:170:265","crate_id":0,"name":"all","span":{"filename":"src/lib.rs","begin":[959,4],"end":[964,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"1:3489:131","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"1:8565:157","args":null,"param_names":[]}}}}],"output":{"kind":"primitive","inner":"bool"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:149:1828":{"id":"0:149:1828","crate_id":0,"name":"extend","span":{"filename":"src/lib.rs","begin":[894,4],"end":[899,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["iter",{"kind":"generic","inner":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"1:8367:151","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"A"}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13478:1900":{"id":"1:13478:1900","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"1:12936:2751","FromStr::Err":"1:12936:2751"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"1:12936:2751","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"1:12936:2751","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:328:294":{"id":"0:328:294","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[1140,0],"end":[1144,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"::std::path::Path","id":"4:7427:175","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:201:1854":{"id":"0:201:1854","crate_id":0,"name":"read_to_end","span":{"filename":"src/lib.rs","begin":[1054,4],"end":[1056,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"std::vec::Vec","id":"5:7764:223","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"4:4026:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:137":{"id":"0:137","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[869,0],"end":[876,1]},"visibility":"crate","docs":"Convert from `Result` to `Either` with `Ok => Right` and `Err => Left`.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"1:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"R"}},{"type":{"kind":"generic","inner":"L"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}},"items":["0:140:669"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:6081:59448":{"id":"5:6081:59448","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8352:205"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3402:2122":{"id":"1:3402:2122","crate_id":1,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3404:346"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13402:1841":{"id":"1:13402:1841","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:47356:166","self::pattern":"1:12997:1588","prim@char":"4:15839:2033"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13361:780":{"id":"1:13361:780","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:15839:2033"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:162:484":{"id":"0:162:484","crate_id":0,"name":"count","span":{"filename":"src/lib.rs","begin":[932,4],"end":[934,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:236:1644":{"id":"0:236:1644","crate_id":0,"name":"as_mut","span":{"filename":"src/lib.rs","begin":[1181,4],"end":[1183,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"generic","inner":"Target"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2846-0:273:1560":{"id":"b:1:2846-0:273:1560","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3245:2276","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"1:2840:2789","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}},"items":["1:2848:53035"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:10493:142":{"id":"1:10493:142","crate_id":1,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10494:703","1:10496:2502"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:332:1644":{"id":"0:332:1644","crate_id":0,"name":"as_mut","span":{"filename":"src/lib.rs","begin":[1140,0],"end":[1144,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"::std::path::Path","id":"4:7427:175","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3492:132":{"id":"1:3492:132","crate_id":1,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3494:171","1:3495:367"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3360:2117":{"id":"1:3360:2117","crate_id":1,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3361:171","1:3362:939"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:102:1760":{"id":"0:102:1760","crate_id":0,"name":"unwrap_right","span":{"filename":"src/lib.rs","begin":[629,4],"end":[637,5]},"visibility":"public","docs":"Returns the right value\n\n# Examples\n\n```\n# use either::*;\nlet right: Either<(), _> = Right(3);\nassert_eq!(right.unwrap_right(), 3);\n```\n\n# Panics\n\nWhen `Either` is a `Left` value\n\n```should_panic\n# use either::*;\nlet left: Either<_, ()> = Left(3);\nleft.unwrap_right();\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"R"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"core::fmt::Debug","id":"1:10255:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:325":{"id":"0:325","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1140,0],"end":[1144,1]},"visibility":"crate","docs":"Requires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"1:3137:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"::std::path::Path","id":"4:7427:175","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"1:3137:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"::std::path::Path","id":"4:7427:175","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"1:3137:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Path","id":"4:7427:175","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}},"items":["0:328:294"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:174:1841":{"id":"0:174:1841","crate_id":0,"name":"find","span":{"filename":"src/lib.rs","begin":[973,4],"end":[978,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["predicate",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"1:8565:157","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"1:3489:131","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"1:8565:157","args":null,"param_names":[]}}}}}}],"output":{"kind":"primitive","inner":"bool"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13469:58808":{"id":"1:13469:58808","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:15839:2033","self::pattern":"1:12997:1588"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13022:2832","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13410:2547":{"id":"1:13410:2547","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"prim@char":"4:15839:2033","str::split_whitespace":"4:15845:2038","`DoubleEndedIterator`":"1:8411:120","self::pattern":"1:12997:1588","str::rsplit":"4:15845:2038"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"1:49320:2238","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:210:1859":{"id":"0:210:1859","crate_id":0,"name":"consume","span":{"filename":"src/lib.rs","begin":[1084,4],"end":[1086,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["amt",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:273:1560":{"id":"0:273:1560","crate_id":0,"name":"Either","span":{"filename":"src/lib.rs","begin":[48,0],"end":[53,1]},"visibility":"public","docs":"The enum `Either` with variants `Left` and `Right` is a general purpose\nsum type with two cases.\n\nThe `Either` type is symmetric and treats its variants the same way, without\npreference.\n(For representing success or error, use the regular `Result` enum instead.)","links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"variants_stripped":false,"variants":["0:276:159","0:279:197"],"impls":["0:61","0:107","0:111","0:116","0:121","0:126","0:131","a:1:9222:2314-0:273:1560","a:1:3252:209-0:273:1560","a:1:3240:200-0:273:1560","a:1:9223:2313-0:273:1560","a:1:3281:2277-0:273:1560","b:1:2843-0:273:1560","b:1:3169-0:273:1560","b:1:3173-0:273:1560","b:1:3184-0:273:1560","b:1:3969-0:273:1560","b:1:8371-0:273:1560","b:1:2846-0:273:1560","b:1:3179-0:273:1560","b:5:6406-0:273:1560","b:5:787-0:273:1560","0:282","0:285","0:288","0:293","0:296","0:300","0:304","0:308","0:313","0:56","0:137","0:141","0:145","0:151","0:181","0:190","0:194","0:197","0:202","0:206","0:211","0:216","0:317","0:321","0:325","0:329","0:333","0:337","0:341","0:345","0:222","0:227","0:232","0:237","0:242","0:246","0:252"]}},"1:10274:2512":{"id":"1:10274:2512","crate_id":1,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10275:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:307:404":{"id":"0:307:404","crate_id":0,"name":"cmp","span":{"filename":"src/lib.rs","begin":[47,42],"end":[47,45]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::cmp::Ordering","id":"1:37488:168","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:232":{"id":"0:232","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1176,0],"end":[1184,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Target","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsMut","id":"1:3140:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"Target"}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsMut","id":"1:3140:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"Target"}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"AsMut","id":"1:3140:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"Target"}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}},"items":["0:236:1644"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:13377:55217":{"id":"1:13377:55217","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:251:1868":{"id":"0:251:1868","crate_id":0,"name":"cause","span":{"filename":"src/lib.rs","begin":[1225,4],"end":[1227,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Error","id":"4:2576:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:5705:3379":{"id":"4:5705:3379","crate_id":4,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5706:58501","4:5707:58503","4:5708:58502","4:5709:58504"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:209:1858":{"id":"0:209:1858","crate_id":0,"name":"fill_buf","span":{"filename":"src/lib.rs","begin":[1080,4],"end":[1082,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"4:4026:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2845:2021":{"id":"1:2845:2021","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3351:2110":{"id":"1:3351:2110","crate_id":1,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3353:548"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13456:58805":{"id":"1:13456:58805","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3252:209":{"id":"1:3252:209","crate_id":1,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:60:399":{"id":"0:60:399","crate_id":0,"name":"clone_from","span":{"filename":"src/lib.rs","begin":[140,4],"end":[146,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["source",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10270:2511":{"id":"1:10270:2511","crate_id":1,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10271:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:163:1835":{"id":"0:163:1835","crate_id":0,"name":"last","span":{"filename":"src/lib.rs","begin":[936,4],"end":[938,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"1:8565:157","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:241:532":{"id":"0:241:532","crate_id":0,"name":"deref","span":{"filename":"src/lib.rs","begin":[1193,4],"end":[1195,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"1:3459:116","args":null,"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:6445:3396":{"id":"4:6445:3396","crate_id":4,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6446:56276","4:6447:6791","4:6448:56277","4:6449:56278","4:6450:56279","4:6451:56280"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10545:2888","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6099:56026":{"id":"5:6099:56026","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"4:15845:2038"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:167:1840":{"id":"0:167:1840","crate_id":0,"name":"partition","span":{"filename":"src/lib.rs","begin":[951,4],"end":[957,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"tuple","inner":[{"kind":"generic","inner":"B"},{"kind":"generic","inner":"B"}]},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"B"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"1:3218:115","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Extend","id":"1:8376:1827","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"1:8565:157","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"1:3489:131","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"1:8565:157","args":null,"param_names":[]}}}}}}],"output":{"kind":"primitive","inner":"bool"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:200:1852":{"id":"0:200:1852","crate_id":0,"name":"read","span":{"filename":"src/lib.rs","begin":[1050,4],"end":[1052,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"4:4026:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:205:1856":{"id":"0:205:1856","crate_id":0,"name":"seek","span":{"filename":"src/lib.rs","begin":[1068,4],"end":[1070,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["pos",{"kind":"resolved_path","inner":{"name":"SeekFrom","id":"4:11060:1558","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"4:4026:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3394:2120":{"id":"1:3394:2120","crate_id":1,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3396:341"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:329":{"id":"0:329","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1140,0],"end":[1144,1]},"visibility":"crate","docs":"Requires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsMut","id":"1:3140:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"::std::path::Path","id":"4:7427:175","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsMut","id":"1:3140:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"::std::path::Path","id":"4:7427:175","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"AsMut","id":"1:3140:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Path","id":"4:7427:175","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}},"items":["0:332:1644"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:3075:2096":{"id":"1:3075:2096","crate_id":1,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:3074:2888","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:176:1844":{"id":"0:176:1844","crate_id":0,"name":"find_map","span":{"filename":"src/lib.rs","begin":[980,4],"end":[985,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"1:3489:131","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"1:8565:157","args":null,"param_names":[]}}}}],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}},"param_names":[]}}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13466:56643":{"id":"1:13466:56643","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"1:12997:1588","prim@char":"4:15839:2033"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13022:2832","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6408:1376":{"id":"5:6408:1376","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3179-0:273:1560":{"id":"b:1:3179-0:273:1560","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"1:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"1:3149:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}},"items":["1:3182:127","1:3183:1395"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:13392:17237":{"id":"1:13392:17237","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"1:49612:3155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:156:1830":{"id":"0:156:1830","crate_id":0,"name":"size_hint","span":{"filename":"src/lib.rs","begin":[914,4],"end":[916,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"1:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:231:1644":{"id":"0:231:1644","crate_id":0,"name":"as_mut","span":{"filename":"src/lib.rs","begin":[1171,4],"end":[1173,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Target"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:55:1603":{"id":"0:55:1603","crate_id":0,"name":"try_right","span":{"filename":"src/lib.rs","begin":[123,0],"end":[130,1]},"visibility":"public","docs":"Dual to `try_left!`, see its documentation for more information.","links":{},"attrs":["#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! try_right {\n    ($expr:expr) => { ... };\n}"},"b:5:787-0:273:1560":{"id":"b:5:787-0:273:1560","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"1:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:783:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}},"items":["5:789:3718","5:790:53036","5:791:53037"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:3240:200-0:273:1560":{"id":"a:1:3240:200-0:273:1560","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"1:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"1:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"1:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:783:211":{"id":"5:783:211","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:784:3718","5:785:53036","5:786:53037"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:9323:3356":{"id":"4:9323:3356","crate_id":4,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:9324:56390","4:9325:56391","4:9326:56392","4:9327:56393","4:9328:3188","4:9329:31635","4:9330:56389"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10545:2888","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:8565:157":{"id":"1:8565:157","crate_id":1,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8566:1706","1:8567:909","1:8568:2572","1:8571:1830","1:8572:484","1:8574:1835","1:8577:2573","1:8578:1836","1:8579:2574","1:8580:2556","1:8582:2575","1:8584:2576","1:8585:2577","1:8587:828","1:8590:1834","1:8597:2578","1:8599:2579","1:8602:2580","1:8603:2581","1:8604:2582","1:8606:2583","1:8608:2584","1:8611:1287","1:8612:2557","1:8613:2585","1:8617:2586","1:8620:2587","1:8621:2588","1:8622:2589","1:8624:2554","1:8625:1838","1:8627:2590","1:8630:2591","1:8632:1840","1:8642:2592","1:8657:2593","1:8659:2594","1:8663:2595","1:8672:1831","1:8675:2596","1:8677:2597","1:8680:265","1:8687:283","1:8694:1841","1:8701:1844","1:8710:2598","1:8720:1001","1:8727:2599","1:8734:2349","1:8735:2346","1:8736:2351","1:8748:2350","1:8755:2348","1:8767:2347","1:8774:2600","1:8775:2601","1:8780:2602","1:8783:2603","1:8786:2604","1:8787:2605","1:8789:2606","1:8791:404","1:8794:2607","1:8797:984","1:8800:2608","1:8803:593","1:8806:2609","1:8809:894","1:8811:813","1:8813:779","1:8815:701","1:8817:684","1:8819:2610","1:8820:2611","1:8828:2612"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:313":{"id":"0:313","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[47,53],"end":[47,58]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Debug","id":"1:10255:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Debug","id":"1:10255:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"1:10255:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}},"items":["0:316:648"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:13391:58793":{"id":"1:13391:58793","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"1:49584:3152","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:14183:2704":{"id":"1:14183:2704","crate_id":1,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:14184:55869","1:14185:55870","1:14186:55871","1:14187:55872","1:14188:55873","1:14189:55874","1:14190:2554"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:7781:3521":{"id":"4:7781:3521","crate_id":4,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:7782:56410"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3544:2126":{"id":"1:3544:2126","crate_id":1,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3546:171","1:3547:740"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3245:2276","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:89:1698":{"id":"0:89:1698","crate_id":0,"name":"right_and_then","span":{"filename":"src/lib.rs","begin":[409,4],"end":[417,5]},"visibility":"public","docs":"Apply the function `f` on the value in the `Right` variant if it is present.\n\n```\nuse either::*;\n\nlet left: Either<_, u32> = Left(123);\nassert_eq!(left.right_and_then(|x| Right(x * 2)), Left(123));\n\nlet right: Either<u32, _> = Right(123);\nassert_eq!(right.right_and_then(|x| Right(x * 2)), Right(246));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"1:3492:132","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"R"}],"output":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}},"param_names":[]}}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8326:2639":{"id":"1:8326:2639","crate_id":1,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8328:2605"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:242":{"id":"0:242","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1198,0],"end":[1206,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DerefMut","id":"1:3472:1552","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DerefMut","id":"1:3472:1552","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"qualified_path","inner":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"L"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"1:3459:116","args":null,"param_names":[]}}}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"DerefMut","id":"1:3472:1552","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}},"items":["0:245:534"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:215:1863":{"id":"0:215:1863","crate_id":0,"name":"flush","span":{"filename":"src/lib.rs","begin":[1102,4],"end":[1104,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"4:4026:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:226:294":{"id":"0:226:294","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[1161,4],"end":[1163,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"Target"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:141":{"id":"0:141","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[880,0],"end":[887,1]},"visibility":"crate","docs":"Convert from `Either` to `Result` with `Right => Ok` and `Left => Err`.","links":{},"attrs":["#[allow(clippy :: from_over_into)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"1:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"R"}},{"type":{"kind":"generic","inner":"L"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}},"items":["0:144:1777"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:116":{"id":"0:116","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[765,0],"end":[786,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"L"}}],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"items":["0:120:1797"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:3250:106":{"id":"1:3250:106","crate_id":1,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"1:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13386:2858":{"id":"1:13386:2858","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:15839:2033"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"1:49296:3139","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3398:2121":{"id":"1:3398:2121","crate_id":1,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3400:343"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10503:146":{"id":"1:10503:146","crate_id":1,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10504:640","1:10505:1862","1:10506:53387","1:10507:53388","1:10508:53389","1:10509:53390","1:10510:53391","1:10511:53392","1:10512:53393","1:10513:53394","1:10514:53395","1:10515:53396","1:10516:53397","1:10517:53398","1:10518:53399","1:10519:1509"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:92:755":{"id":"0:92:755","crate_id":0,"name":"into_iter","span":{"filename":"src/lib.rs","begin":[430,4],"end":[439,5]},"visibility":"public","docs":"Convert the inner value to an iterator.\n\n```\nuse either::*;\n\nlet left: Either<_, Vec<u32>> = Left(vec![1, 2, 3, 4, 5]);\nlet mut right: Either<Vec<u32>, _> = Right(vec![]);\nright.extend(left.into_iter());\nassert_eq!(right, Right(vec![1, 2, 3, 4, 5]));\n```","links":{},"attrs":["#[allow(clippy :: should_implement_trait)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"L"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"1:8367:151","args":null,"param_names":[]}}}}},{"type":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"R"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"1:8367:151","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"1:8367:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"1:8367:151","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"L"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"1:8367:151","args":null,"param_names":[]}}}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:320:294":{"id":"0:320:294","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[1139,0],"end":[1139,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13022:2832":{"id":"1:13022:2832","crate_id":1,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:13024:1845","1:13025:55058","1:13026:55059"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"1:13016:2829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:10272:179":{"id":"1:10272:179","crate_id":1,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10273:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13422:58795":{"id":"1:13422:58795","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"str::split":"4:15845:2038","self::pattern":"1:12997:1588","prim@char":"4:15839:2033","str::split_terminator":"4:15845:2038"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"1:49388:3144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13022:2832","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6078:2240":{"id":"5:6078:2240","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8352:205"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3382:2118":{"id":"1:3382:2118","crate_id":1,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3384:171","1:3385:1212"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:246":{"id":"0:246","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1210,0],"end":[1228,1]},"visibility":"crate","docs":"`Either` implements `Error` if *both* `L` and `R` implement it.","links":{},"attrs":["#[cfg(any(test, feature = \"use_std\"))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Error","id":"4:2576:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Error","id":"4:2576:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["type_id","source","backtrace","provide","cause","description"],"trait":{"kind":"resolved_path","inner":{"name":"Error","id":"4:2576:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}},"items":["0:249:1605","0:250:1867","0:251:1868"],"negative":false,"synthetic":false,"blanket_impl":null}},"4:5639:3403":{"id":"4:5639:3403","crate_id":4,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5640:4470","4:5641:56149"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10545:2888","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13428:56639":{"id":"1:13428:56639","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:15839:2033","str::splitn":"4:15845:2038","self::pattern":"1:12997:1588"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"1:49442:3118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13022:2832","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:67:1627":{"id":"0:67:1627","crate_id":0,"name":"right","span":{"filename":"src/lib.rs","begin":[208,4],"end":[213,5]},"visibility":"public","docs":"Convert the right side of `Either<L, R>` to an `Option<R>`.\n\n```\nuse either::*;\n\nlet left: Either<_, ()> = Left(\"some value\");\nassert_eq!(left.right(),  None);\n\nlet right: Either<(), _> = Right(321);\nassert_eq!(right.right(), Some(321));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:245:534":{"id":"0:245:534","crate_id":0,"name":"deref_mut","span":{"filename":"src/lib.rs","begin":[1203,4],"end":[1205,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"1:3459:116","args":null,"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:164:1836":{"id":"0:164:1836","crate_id":0,"name":"nth","span":{"filename":"src/lib.rs","begin":[940,4],"end":[942,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"1:8565:157","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13389:17246":{"id":"1:13389:17246","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"4:15845:2038"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"1:49603:3154","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:70:1649":{"id":"0:70:1649","crate_id":0,"name":"flip","span":{"filename":"src/lib.rs","begin":[269,4],"end":[274,5]},"visibility":"public","docs":"Convert `Either<L, R>` to `Either<R, L>`.\n\n```\nuse either::*;\n\nlet left: Either<_, ()> = Left(123);\nassert_eq!(left.flip(), Right(123));\n\nlet right: Either<(), _> = Right(\"some value\");\nassert_eq!(right.flip(), Left(\"some value\"));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"R"}},{"type":{"kind":"generic","inner":"L"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:50":{"id":"0:50","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[38,30],"end":[38,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::Either::Right","name":"Right","id":"0:279:197","glob":false}},"1:3249:206":{"id":"1:3249:206","crate_id":1,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3367:2114":{"id":"1:3367:2114","crate_id":1,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3369:171","1:3370:340"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13483:56030":{"id":"1:13483:56030","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13363:58788":{"id":"1:13363:58788","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:7891:2625":{"id":"1:7891:2625","crate_id":1,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7892:55761","1:7893:55762","1:7894:55759","1:7895:55757","1:7896:55763","1:7897:55760","1:7898:55758"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"1:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"1:2938:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:2938:174":{"id":"1:2938:174","crate_id":1,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2940:984","1:2941:813","1:2942:779","1:2943:701","1:2944:684"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3245:2276","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"1:2892:173","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:5832:3702":{"id":"5:5832:3702","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5834:171","5:5835:17332"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:22961:31232":{"id":"1:22961:31232","crate_id":1,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:22962:5869","1:22963:53084","1:22964:53085"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:22954:2888","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:1:8371-0:273:1560":{"id":"b:1:8371-0:273:1560","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"1:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"1:8367:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}},"items":["1:8373:1706","1:8374:1705","1:8375:755"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"4:6543:3392":{"id":"4:6543:3392","crate_id":4,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6544:56363","4:6545:56364"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:157:1831":{"id":"0:157:1831","crate_id":0,"name":"fold","span":{"filename":"src/lib.rs","begin":[918,4],"end":[923,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["init",{"kind":"generic","inner":"Acc"}],["f",{"kind":"generic","inner":"G"}]],"output":{"kind":"generic","inner":"Acc"},"c_variadic":false},"generics":{"params":[{"name":"Acc","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"G"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"1:3489:131","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"Acc"},{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"1:8565:157","args":null,"param_names":[]}}}}],"output":{"kind":"generic","inner":"Acc"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13027:2833":{"id":"1:13027:2833","crate_id":1,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13022:2832","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:6773:3357":{"id":"4:6773:3357","crate_id":4,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6774:55977","4:6775:56207"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10545:2888","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:8375:755":{"id":"1:8375:755","crate_id":1,"name":"into_iter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"I"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4750:2868":{"id":"1:4750:2868","crate_id":1,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4751:1706","1:4752:55609","1:4753:1830"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13451:58802":{"id":"1:13451:58802","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3347:2111":{"id":"1:3347:2111","crate_id":1,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3349:880"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13482:56029":{"id":"1:13482:56029","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3696:213":{"id":"1:3696:213","crate_id":1,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3697:171","1:3698:2132","1:3699:674","1:3700:358"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"1:3701:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"1:3696:213","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3172:1777":{"id":"1:3172:1777","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:3146:135"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:237":{"id":"0:237","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1186,0],"end":[1196,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"1:3459:116","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"1:3459:116","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"qualified_path","inner":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"L"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"1:3459:116","args":null,"param_names":[]}}}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"1:3459:116","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}},"items":["0:240:210","0:241:532"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:8373:1706":{"id":"1:8373:1706","crate_id":1,"name":"Item","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"1:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}},"4:5727:3375":{"id":"4:5727:3375","crate_id":4,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5728:6367","4:5729:56414","4:5730:4918","4:5731:56415","4:5732:3645","4:5733:3646","4:5734:56416","4:5735:1283","4:5736:56417","4:5737:56418","4:5738:56419","4:5739:56420","4:5740:56421","4:5741:56422","4:5742:56423","4:5743:56424"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2892:173":{"id":"1:2892:173","crate_id":1,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2894:593","1:2895:894"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3245:2276","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:13416:56635":{"id":"1:13416:56635","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"prim@char":"4:15839:2033","str::split":"4:15845:2038","self::pattern":"1:12997:1588","`DoubleEndedIterator`":"1:8411:120"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"1:49338:3114","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13022:2832","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:279:197":{"id":"0:279:197","crate_id":0,"name":"Right","span":{"filename":"src/lib.rs","begin":[52,4],"end":[52,12]},"visibility":"default","docs":"A value of type `R`.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"generic","inner":"R"}]}},"4:4972:3406":{"id":"4:4972:3406","crate_id":4,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4973:2491","4:4974:56531"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10262:119":{"id":"1:10262:119","crate_id":1,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10263:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:14109:141":{"id":"1:14109:141","crate_id":1,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:14110:266","1:14111:507","1:14112:269","1:14113:1066"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10266:2509":{"id":"1:10266:2509","crate_id":1,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10267:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:193:780":{"id":"0:193:780","crate_id":0,"name":"len","span":{"filename":"src/lib.rs","begin":[1029,4],"end":[1031,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12444:3348":{"id":"1:12444:3348","crate_id":1,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:12445:1706","1:12446:55753"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3971:1408":{"id":"1:3971:1408","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"1:45892:2210","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:216":{"id":"0:216","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1107,0],"end":[1115,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Target","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"1:3137:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Target"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"1:3137:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Target"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"1:3137:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Target"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}},"items":["0:220:294"],"negative":false,"synthetic":false,"blanket_impl":null}},"4:5775:3384":{"id":"4:5775:3384","crate_id":4,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5776:56370"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10545:2888","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:304":{"id":"0:304","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[47,42],"end":[47,45]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"$crate::cmp::Ord","id":"1:2928:167","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"$crate::cmp::Ord","id":"1:2928:167","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["max","min","clamp"],"trait":{"kind":"resolved_path","inner":{"name":"Ord","id":"1:2928:167","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}},"items":["0:307:404"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:10264:2508":{"id":"1:10264:2508","crate_id":1,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10265:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:56":{"id":"0:56","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[132,0],"end":[147,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"1:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"1:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"1:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}},"items":["0:59:397","0:60:399"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:288":{"id":"0:288","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[47,15],"end":[47,24]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"$crate::cmp::PartialEq","id":"1:2892:173","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"$crate::cmp::PartialEq","id":"1:2892:173","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"1:2892:173","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}},"items":["0:291:593","0:292:894"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:13387:2555":{"id":"1:13387:2555","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"1:49306:2236","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8436:1848":{"id":"1:8436:1848","crate_id":1,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8437:780","1:8438:2569"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"1:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3188:1394":{"id":"1:3188:1394","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"1:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:293":{"id":"0:293","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[47,26],"end":[47,28]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralEq","id":"1:3249:206","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"1:3183:1395":{"id":"1:3183:1395","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"1:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:144:1777":{"id":"0:144:1777","crate_id":0,"name":"into","span":{"filename":"src/lib.rs","begin":[881,4],"end":[886,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"R"}},{"type":{"kind":"generic","inner":"L"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3411:2124":{"id":"1:3411:2124","crate_id":1,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3413:1216"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3187:127":{"id":"1:3187:127","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"1:38669:2095","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"1:10268:2510":{"id":"1:10268:2510","crate_id":1,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10269:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6077:59447":{"id":"5:6077:59447","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2706","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8090:2705","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2706","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8090:2705","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:9223:2313-0:273:1560":{"id":"a:1:9223:2313-0:273:1560","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"1:9223:2313","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"1:9223:2313","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"1:9223:2313","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:13381:3432":{"id":"1:13381:3432","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:15845:2038","str::slice_mut_unchecked":"4:15845:2038","crate::ops::Index":"1:3544:2126"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:13360":{"id":"1:13360","crate_id":1,"name":null,"span":null,"visibility":{"restricted":{"parent":"1:12457:1319","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["1:13361:780","1:13362:2569","1:13363:58788","1:13364:58789","1:13366:58790","1:13369:56149","1:13370:58791","1:13371:293","1:13372:56606","1:13373:55215","1:13375:55216","1:13377:55217","1:13379:55218","1:13381:3432","1:13382:58792","1:13383:56625","1:13384:56626","1:13385:3176","1:13386:2858","1:13387:2555","1:13388:17208","1:13389:17246","1:13390:2548","1:13391:58793","1:13392:17237","1:13393:53122","1:13396:56641","1:13399:56642","1:13402:1841","1:13406:1847","1:13410:2547","1:13413:16846","1:13416:56635","1:13419:58794","1:13422:58795","1:13425:56637","1:13428:56639","1:13431:58796","1:13434:58797","1:13437:2059","1:13440:58798","1:13443:58799","1:13446:58800","1:13449:58801","1:13451:58802","1:13453:58803","1:13455:58804","1:13456:58805","1:13457:58806","1:13460:58807","1:13463:36413","1:13466:56643","1:13469:58808","1:13472:58809","1:13475:58810","1:13478:1900","1:13480:3355","1:13481:56028","1:13482:56029","1:13483:56030","1:13484:58811","1:13486:3402","1:13487:58812"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:13453:58803":{"id":"1:13453:58803","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:252":{"id":"0:252","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1230,0],"end":[1238,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"fmt::Display","id":"1:10262:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"fmt::Display","id":"1:10262:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"1:10262:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}},"items":["0:255:648"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:13486:3402":{"id":"1:13486:3402","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"4:15839:2033"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"1:49628:3157","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8367:151":{"id":"1:8367:151","crate_id":1,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8368:1706","1:8369:1705","1:8370:755"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:54:1600":{"id":"0:54:1600","crate_id":0,"name":"try_left","span":{"filename":"src/lib.rs","begin":[112,0],"end":[119,1]},"visibility":"public","docs":"Macro for unwrapping the left side of an `Either`, which fails early\nwith the opposite side. Can only be used in functions that return\n`Either` because of the early return of `Right` that it provides.\n\nSee also `try_right!` for its dual, which applies the same just to the\nright side.\n\n# Example\n\n```\nuse either::{Either, Left, Right};\n\nfn twice(wrapper: Either<u32, &str>) -> Either<u32, &str> {\n    let value = either::try_left!(wrapper);\n    Left(value * 2)\n}\n\nfn main() {\n    assert_eq!(twice(Left(2)), Left(4));\n    assert_eq!(twice(Right(\"ups\")), Right(\"ups\"));\n}\n```","links":{},"attrs":["#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! try_left {\n    ($expr:expr) => { ... };\n}"},"1:13484:58811":{"id":"1:13484:58811","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"4:15839:2033"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"1:49619:3156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:348:1644":{"id":"0:348:1644","crate_id":0,"name":"as_mut","span":{"filename":"src/lib.rs","begin":[1150,0],"end":[1154,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"::std::ffi::CStr","id":"4:2805:100","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3486:130":{"id":"1:3486:130","crate_id":1,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3488:365"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"1:3489:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:77:1674":{"id":"0:77:1674","crate_id":0,"name":"either","span":{"filename":"src/lib.rs","begin":[336,4],"end":[345,5]},"visibility":"public","docs":"Apply one of two functions depending on contents, unifying their result. If the value is\n`Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second\nfunction `g` is applied.\n\n```\nuse either::*;\n\nfn square(n: u32) -> i32 { (n * n) as i32 }\nfn negate(n: i32) -> i32 { -n }\n\nlet left: Either<u32, i32> = Left(4);\nassert_eq!(left.either(square, negate), 16);\n\nlet right: Either<u32, i32> = Right(-4);\nassert_eq!(right.either(square, negate), 4);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}],["g",{"kind":"generic","inner":"G"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"1:3492:132","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"L"}],"output":{"kind":"generic","inner":"T"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"G"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"1:3492:132","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"R"}],"output":{"kind":"generic","inner":"T"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6096:59450":{"id":"5:6096:59450","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8352:205"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:98:1741":{"id":"0:98:1741","crate_id":0,"name":"right_or_default","span":{"filename":"src/lib.rs","begin":[547,4],"end":[555,5]},"visibility":"public","docs":"Return right or a default\n\n# Examples\n\n```\n# use either::*;\nlet left: Either<String, u32> = Left(\"left\".to_string());\nassert_eq!(left.right_or_default(), u32::default());\n\nlet right: Either<String, u32> = Right(42);\nassert_eq!(right.right_or_default(), 42);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"R"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"1:3218:115","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3377:2116":{"id":"1:3377:2116","crate_id":1,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3379:171","1:3380:345"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:4612:1556":{"id":"4:4612:1556","crate_id":4,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4613:1852","4:4614:2549","4:4616:2550","4:4617:1854","4:4618:2231","4:4619:2551","4:4620:2552","4:4622:2553","4:4623:2554","4:4624:2555","4:4625:2556","4:4627:2557"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8843:1849":{"id":"1:8843:1849","crate_id":1,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"1:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:2862:104":{"id":"1:2862:104","crate_id":1,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2863:397","1:2864:399"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3615:2129":{"id":"1:3615:2129","crate_id":1,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3617:53120","1:3618:53121","1:3619:53122"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3245:2276","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:151":{"id":"0:151","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[903,0],"end":[993,1]},"visibility":"crate","docs":"`Either<L, R>` is an iterator if both `L` and `R` are iterators.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"1:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"1:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"L"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"1:8565:157","args":null,"param_names":[]}}}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["gt","by_ref","find","eq_by","last","min_by","try_reduce","cloned","collect_into","scan","filter_map","advance_by","skip","is_sorted","nth","position","size_hint","try_find","partition_in_place","min_by_key","flat_map","cycle","enumerate","cmp","step_by","eq","ge","chain","is_sorted_by","max","sum","rposition","fold","count","is_partitioned","flatten","any","peekable","partial_cmp","zip","lt","all","take","find_map","is_sorted_by_key","collect","max_by","rev","product","try_fold","fuse","skip_while","intersperse","ne","__iterator_get_unchecked","max_by_key","cmp_by","unzip","try_for_each","inspect","take_while","intersperse_with","le","map","partition","partial_cmp_by","min","copied","for_each","reduce","try_collect","map_while","filter","next_chunk"],"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"1:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}},"items":["0:154:1706","0:155:909","0:156:1830","0:157:1831","0:160:1834","0:162:484","0:163:1835","0:164:1836","0:165:1838","0:167:1840","0:170:265","0:172:283","0:174:1841","0:176:1844","0:179:1001"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:3245:2276":{"id":"1:3245:2276","crate_id":1,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10897:203":{"id":"1:10897:203","crate_id":1,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:10899:171","1:10900:55215","1:10901:55216","1:10902:55217","1:10903:55218","1:10904:740","1:10905:741"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3245:2276","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10888:2888","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"a:1:3252:209-0:273:1560":{"id":"a:1:3252:209-0:273:1560","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"1:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"1:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"1:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:249:1605":{"id":"0:249:1605","crate_id":0,"name":"source","span":{"filename":"src/lib.rs","begin":[1215,4],"end":[1217,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Error","id":"4:2576:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[{"outlives":"'static"}]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:130:1812":{"id":"0:130:1812","crate_id":0,"name":"factor_second","span":{"filename":"src/lib.rs","begin":[822,4],"end":[827,5]},"visibility":"public","docs":"Factor out a homogeneous type from an either of pairs.\n\nHere, the homogeneous type is the second element of the pairs.\n\n```\nuse either::*;\nlet left: Either<_, (String, u32)> = Left((vec![0], 123));\nassert_eq!(left.factor_second().1, 123);\n\nlet right: Either<(Vec<u8>, u32), _> = Right((String::new(), 123));\nassert_eq!(right.factor_second().1, 123);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}},{"kind":"generic","inner":"T"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2843-0:273:1560":{"id":"b:1:2843-0:273:1560","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3245:2276","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"1:2837:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}},"items":["1:2845:2021"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:13007:2830":{"id":"1:13007:2830","crate_id":1,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:13009:2829","1:13010:55437","1:13011:55442","1:13012:55438","1:13013:55440","1:13014:55439","1:13015:55441"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:65:1616":{"id":"0:65:1616","crate_id":0,"name":"is_right","span":{"filename":"src/lib.rs","begin":[175,4],"end":[177,5]},"visibility":"public","docs":"Return true if the value is the `Right` variant.\n\n```\nuse either::*;\n\nlet values = [Left(1), Right(\"the right value\")];\nassert_eq!(values[0].is_right(), false);\nassert_eq!(values[1].is_right(), true);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3323:2104":{"id":"1:3323:2104","crate_id":1,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3325:171","1:3326:547"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6084:59449":{"id":"5:6084:59449","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8352:205"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:131":{"id":"0:131","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[830,0],"end":[866,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:133:1816","0:134:828"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:120:1797":{"id":"0:120:1797","crate_id":0,"name":"factor_ok","span":{"filename":"src/lib.rs","begin":[780,4],"end":[785,5]},"visibility":"public","docs":"Factors out a homogenous type from an `Either` of [`Result`].\n\nHere, the homogeneous type is the `Ok` type of the [`Result`].\n\n```\nuse either::*;\nlet left: Either<_, Result<u32, String>> = Left(Err(vec![0]));\nassert_eq!(left.factor_ok(), Err(Left(vec![0])));\n\nlet right: Either<Result<u32, Vec<u8>>, _> = Right(Err(String::new()));\nassert_eq!(right.factor_ok(), Err(Right(String::new())));\n```","links":{"`Result`":"1:47483:195"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:61":{"id":"0:61","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[149,0],"end":[719,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}},"items":["0:64:1612","0:65:1616","0:66:1622","0:67:1627","0:68:294","0:69:1644","0:70:1649","0:71:1656","0:74:1663","0:77:1674","0:81:1688","0:86:1694","0:89:1698","0:92:755","0:93:1718","0:94:1724","0:95:1730","0:97:1737","0:98:1741","0:99:1745","0:101:1754","0:102:1760","0:103:1764","0:104:1769","0:105:1776"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:3184-0:273:1560":{"id":"b:1:3184-0:273:1560","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"1:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"1:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}},"items":["1:3187:127","1:3188:1394"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:94:1724":{"id":"0:94:1724","crate_id":0,"name":"left_or_default","span":{"filename":"src/lib.rs","begin":[478,4],"end":[486,5]},"visibility":"public","docs":"Return left or a default\n\n# Examples\n\n```\n# use either::*;\nlet left: Either<String, u32> = Left(\"left\".to_string());\nassert_eq!(left.left_or_default(), \"left\");\n\nlet right: Either<String, u32> = Right(42);\nassert_eq!(right.left_or_default(), String::default());\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"L"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"1:3218:115","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3548:2127":{"id":"1:3548:2127","crate_id":1,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3550:741"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3245:2276","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"1:3544:2126","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:23006:2940":{"id":"1:23006:2940","crate_id":1,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"1:23655:2910","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:22997:2888","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13366:58790":{"id":"1:13366:58790","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"4:15845:2038"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1674":{"id":"0:0:1674","crate_id":0,"name":"either","span":{"filename":"src/lib.rs","begin":[1,0],"end":[1400,1]},"visibility":"public","docs":"The enum [`Either`] with variants `Left` and `Right` is a general purpose\nsum type with two cases.\n\n[`Either`]: enum.Either.html\n\n**Crate features:**\n\n* `\"use_std\"`\nEnabled by default. Disable to make the library `#![no_std]`.\n\n* `\"serde\"`\nDisabled by default. Enable to `#[derive(Serialize, Deserialize)]` for `Either`\n","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/either/1/\")]","#![no_std]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:47","0:50","0:273:1560","0:53:1586","0:54:1600","0:55:1603"]}},"1:13440:58798":{"id":"1:13440:58798","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"`DoubleEndedIterator`":"1:8411:120","prim@char":"4:15839:2033","self::pattern":"1:12997:1588","str::matches":"4:15845:2038"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"1:49542:3151","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13022:2832","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:97:1737":{"id":"0:97:1737","crate_id":0,"name":"right_or","span":{"filename":"src/lib.rs","begin":[528,4],"end":[533,5]},"visibility":"public","docs":"Return right value or given value\n\nArguments passed to `right_or` are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use [`right_or_else`],\nwhich is lazily evaluated.\n\n[`right_or_else`]: #method.right_or_else\n\n# Examples\n\n```\n# use either::*;\nlet right: Either<&str, &str> = Right(\"right\");\nassert_eq!(right.right_or(\"foo\"), \"right\");\n\nlet left: Either<&str, &str> = Left(\"left\");\nassert_eq!(left.right_or(\"right\"), \"right\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"R"}]],"output":{"kind":"generic","inner":"R"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:47":{"id":"0:47","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[38,24],"end":[38,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::Either::Left","name":"Left","id":"0:276:159","glob":false}},"1:13460:58807":{"id":"1:13460:58807","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:15839:2033","self::pattern":"1:12997:1588"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2928:167":{"id":"1:2928:167","crate_id":1,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2929:404","1:2930:2349","1:2931:2346","1:2932:2495"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"1:2897:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"1:2938:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:292:894":{"id":"0:292:894","crate_id":0,"name":"ne","span":{"filename":"src/lib.rs","begin":[47,15],"end":[47,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13434:58797":{"id":"1:13434:58797","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13022:2832","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:211":{"id":"0:211","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1093,0],"end":[1105,1]},"visibility":"crate","docs":"`Either<L, R>` implements `Write` if both `L` and `R` do.\n\nRequires crate feature `\"use_std\"`","links":{},"attrs":["#[cfg(any(test, feature = \"use_std\"))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Write","id":"4:4669:1559","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Write","id":"4:4669:1559","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["write_fmt","is_write_vectored","by_ref","write_all_vectored","write_vectored","write_all"],"trait":{"kind":"resolved_path","inner":{"name":"Write","id":"4:4669:1559","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}},"items":["0:214:1862","0:215:1863"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:64:1612":{"id":"0:64:1612","crate_id":0,"name":"is_left","span":{"filename":"src/lib.rs","begin":[159,4],"end":[164,5]},"visibility":"public","docs":"Return true if the value is the `Left` variant.\n\n```\nuse either::*;\n\nlet values = [Left(1), Right(\"the right value\")];\nassert_eq!(values[0].is_left(), true);\nassert_eq!(values[1].is_left(), false);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:110:1783":{"id":"0:110:1783","crate_id":0,"name":"factor_none","span":{"filename":"src/lib.rs","begin":[734,4],"end":[739,5]},"visibility":"public","docs":"Factors out `None` from an `Either` of [`Option`].\n\n```\nuse either::*;\nlet left: Either<_, Option<String>> = Left(Some(vec![0]));\nassert_eq!(left.factor_none(), Some(Left(vec![0])));\n\nlet right: Either<Option<Vec<u8>>, _> = Right(Some(String::new()));\nassert_eq!(right.factor_none(), Some(Right(String::new())));\n```","links":{"`Option`":"1:47356:166"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3218:115":{"id":"1:3218:115","crate_id":1,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3219:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5771:3383":{"id":"4:5771:3383","crate_id":4,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5772:56414"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:202":{"id":"0:202","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1063,0],"end":[1071,1]},"visibility":"crate","docs":"`Either<L, R>` implements `Seek` if both `L` and `R` do.\n\nRequires crate feature `\"use_std\"`","links":{},"attrs":["#[cfg(any(test, feature = \"use_std\"))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Seek","id":"4:4687:1557","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Seek","id":"4:4687:1557","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["stream_position","rewind","stream_len"],"trait":{"kind":"resolved_path","inner":{"name":"Seek","id":"4:4687:1557","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}},"items":["0:205:1856"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:206":{"id":"0:206","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1075,0],"end":[1087,1]},"visibility":"crate","docs":"Requires crate feature `\"use_std\"`","links":{},"attrs":["#[cfg(any(test, feature = \"use_std\"))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"BufRead","id":"4:4694:1555","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"BufRead","id":"4:4694:1555","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["read_until","read_line","lines","has_data_left","split"],"trait":{"kind":"resolved_path","inner":{"name":"BufRead","id":"4:4694:1555","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}},"items":["0:209:1858","0:210:1859"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:13364:58789":{"id":"1:13364:58789","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:81:1688":{"id":"0:81:1688","crate_id":0,"name":"either_with","span":{"filename":"src/lib.rs","begin":[366,4],"end":[375,5]},"visibility":"public","docs":"Like `either`, but provide some context to whichever of the\nfunctions ends up being called.\n\n```\n// In this example, the context is a mutable reference\nuse either::*;\n\nlet mut result = Vec::new();\n\nlet values = vec![Left(2), Right(2.7)];\n\nfor value in values {\n    value.either_with(&mut result,\n                      |ctx, integer| ctx.push(integer),\n                      |ctx, real| ctx.push(f64::round(real) as i32));\n}\n\nassert_eq!(result, vec![2, 3]);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["ctx",{"kind":"generic","inner":"Ctx"}],["f",{"kind":"generic","inner":"F"}],["g",{"kind":"generic","inner":"G"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[{"name":"Ctx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"1:3492:132","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"Ctx"},{"kind":"generic","inner":"L"}],"output":{"kind":"generic","inner":"T"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"G"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"1:3492:132","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"Ctx"},{"kind":"generic","inner":"R"}],"output":{"kind":"generic","inner":"T"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3406:2123":{"id":"1:3406:2123","crate_id":1,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3408:1213"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:790:53036":{"id":"5:790:53036","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:4669:1559":{"id":"4:4669:1559","crate_id":4,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4670:1862","4:4671:2561","4:4673:2562","4:4674:1863","4:4675:2563","4:4676:2564","4:4677:2565","4:4686:2554"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13463:36413":{"id":"1:13463:36413","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"1:12997:1588","prim@char":"4:15839:2033"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:185:1846":{"id":"0:185:1846","crate_id":0,"name":"rfold","span":{"filename":"src/lib.rs","begin":[1009,4],"end":[1014,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["init",{"kind":"generic","inner":"Acc"}],["f",{"kind":"generic","inner":"G"}]],"output":{"kind":"generic","inner":"Acc"},"c_variadic":false},"generics":{"params":[{"name":"Acc","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"G"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"1:3489:131","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"Acc"},{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"1:8565:157","args":null,"param_names":[]}}}}],"output":{"kind":"generic","inner":"Acc"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:115:1791":{"id":"0:115:1791","crate_id":0,"name":"factor_err","span":{"filename":"src/lib.rs","begin":[757,4],"end":[762,5]},"visibility":"public","docs":"Factors out a homogenous type from an `Either` of [`Result`].\n\nHere, the homogeneous type is the `Err` type of the [`Result`].\n\n```\nuse either::*;\nlet left: Either<_, Result<String, u32>> = Left(Ok(vec![0]));\nassert_eq!(left.factor_err(), Ok(Left(vec![0])));\n\nlet right: Either<Result<Vec<u8>, u32>, _> = Right(Ok(String::new()));\nassert_eq!(right.factor_err(), Ok(Right(String::new())));\n```","links":{"`Result`":"1:47483:195"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3684:2130":{"id":"1:3684:2130","crate_id":1,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3245:2276","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"1:3615:2129","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:6671:3375":{"id":"4:6671:3375","crate_id":4,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6672:56314","4:6673:6713","4:6674:6714","4:6675:6716","4:6676:6715","4:6677:6717","4:6678:6718","4:6679:6720","4:6680:4960","4:6681:6723","4:6682:6724","4:6683:6725","4:6684:6726","4:6685:6727","4:6686:6728","4:6687:6721","4:6688:6722"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13475:58810":{"id":"1:13475:58810","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"1:12997:1588","prim@char":"4:15839:2033"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13022:2832","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13457:58806":{"id":"1:13457:58806","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"1:12997:1588","prim@char":"4:15839:2033"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"1:13027:2833","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3175:669":{"id":"1:3175:669","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3372:2115":{"id":"1:3372:2115","crate_id":1,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3374:171","1:3375:342"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13419:58794":{"id":"1:13419:58794","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12997:1588","prim@char":"4:15839:2033","`DoubleEndedIterator`":"1:8411:120","str::rsplit_terminator":"4:15845:2038","str::split":"4:15845:2038"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"1:49370:3143","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13443:58799":{"id":"1:13443:58799","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"str::rmatch_indices":"4:15845:2038","`DoubleEndedIterator`":"1:8411:120","self::pattern":"1:12997:1588","prim@char":"4:15839:2033"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"1:49470:3147","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:214:1862":{"id":"0:214:1862","crate_id":0,"name":"write","span":{"filename":"src/lib.rs","begin":[1098,4],"end":[1100,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"4:4026:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:2576:127":{"id":"4:2576:127","crate_id":4,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:2577:1605","4:2579:2141","4:2580:1867","4:2581:1868","4:2582:2544"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"1:10255:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"1:10262:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:103:1764":{"id":"0:103:1764","crate_id":0,"name":"expect_left","span":{"filename":"src/lib.rs","begin":[658,4],"end":[666,5]},"visibility":"public","docs":"Returns the left value\n\n# Examples\n\n```\n# use either::*;\nlet left: Either<_, ()> = Left(3);\nassert_eq!(left.expect_left(\"value was Right\"), 3);\n```\n\n# Panics\n\nWhen `Either` is a `Right` value\n\n```should_panic\n# use either::*;\nlet right: Either<(), _> = Right(3);\nright.expect_left(\"value was Right\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["msg",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"generic","inner":"L"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"core::fmt::Debug","id":"1:10255:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2848:53035":{"id":"1:2848:53035","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13390:2548":{"id":"1:13390:2548","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"1:49574:2239","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4018:2209":{"id":"1:4018:2209","crate_id":1,"name":"Provider","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4019:2544"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:184:1845":{"id":"0:184:1845","crate_id":0,"name":"next_back","span":{"filename":"src/lib.rs","begin":[1000,4],"end":[1002,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"1:8565:157","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:300":{"id":"0:300","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[47,30],"end":[47,40]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"$crate::cmp::PartialOrd","id":"1:2938:174","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"$crate::cmp::PartialOrd","id":"1:2938:174","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["lt","gt","ge","le"],"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"1:2938:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}},"items":["0:303:984"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:8374:1705":{"id":"1:8374:1705","crate_id":1,"name":"IntoIter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"I"}}},"b:5:6406-0:273:1560":{"id":"b:5:6406-0:273:1560","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"1:10262:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3245:2276","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"ToString","id":"5:6404:212","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}},"items":["5:6408:1376"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:13487:58812":{"id":"1:13487:58812","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"4:15839:2033"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"1:49637:3158","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:125:1805":{"id":"0:125:1805","crate_id":0,"name":"factor_first","span":{"filename":"src/lib.rs","begin":[801,4],"end":[806,5]},"visibility":"public","docs":"Factor out a homogeneous type from an either of pairs.\n\nHere, the homogeneous type is the first element of the pairs.\n\n```\nuse either::*;\nlet left: Either<_, (u32, String)> = Left((123, vec![0]));\nassert_eq!(left.factor_first().0, 123);\n\nlet right: Either<(u32, Vec<u8>), _> = Right((123, String::new()));\nassert_eq!(right.factor_first().0, 123);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"tuple","inner":[{"kind":"generic","inner":"T"},{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:291:593":{"id":"0:291:593","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[47,15],"end":[47,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13016:2829":{"id":"1:13016:2829","crate_id":1,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:13018:2851","1:13019:909","1:13020:55691","1:13021:55692"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13370:58791":{"id":"1:13370:58791","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:8846:2493":{"id":"1:8846:2493","crate_id":1,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"1:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:194":{"id":"0:194","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1034,0],"end":[1039,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"iter::FusedIterator","id":"1:8843:1849","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"iter::FusedIterator","id":"1:8843:1849","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"L"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"1:8565:157","args":null,"param_names":[]}}}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"FusedIterator","id":"1:8843:1849","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"1:13449:58801":{"id":"1:13449:58801","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3173-0:273:1560":{"id":"b:1:3173-0:273:1560","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"1:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}},"items":["1:3175:669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:3240:200":{"id":"1:3240:200","crate_id":1,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:316:648":{"id":"0:316:648","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[47,53],"end":[47,58]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"1:10215:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"1:10204:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:250:1867":{"id":"0:250:1867","crate_id":0,"name":"description","span":{"filename":"src/lib.rs","begin":[1220,4],"end":[1222,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3182:127":{"id":"1:3182:127","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"1:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}}}},"0:134:828":{"id":"0:134:828","crate_id":0,"name":"map","span":{"filename":"src/lib.rs","begin":[857,4],"end":[865,5]},"visibility":"public","docs":"Map `f` over the contained value and return the result in the\ncorresponding variant.\n\n```\nuse either::*;\n\nlet value: Either<_, i32> = Right(42);\n\nlet other = value.map(|x| x * 2);\nassert_eq!(other, Right(84));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"M"}},{"type":{"kind":"generic","inner":"M"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"M","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"1:3492:132","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"T"}],"output":{"kind":"generic","inner":"M"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6404:212":{"id":"5:6404:212","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6405:1376"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:276:159":{"id":"0:276:159","crate_id":0,"name":"Left","span":{"filename":"src/lib.rs","begin":[50,4],"end":[50,11]},"visibility":"default","docs":"A value of type `L`.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"generic","inner":"L"}]}},"5:5828:3700":{"id":"5:5828:3700","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5830:171","5:5831:421"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3245:2276","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:3339:2109":{"id":"1:3339:2109","crate_id":1,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3341:255"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:101:1754":{"id":"0:101:1754","crate_id":0,"name":"unwrap_left","span":{"filename":"src/lib.rs","begin":[598,4],"end":[608,5]},"visibility":"public","docs":"Returns the left value\n\n# Examples\n\n```\n# use either::*;\nlet left: Either<_, ()> = Left(3);\nassert_eq!(left.unwrap_left(), 3);\n```\n\n# Panics\n\nWhen `Either` is a `Right` value\n\n```should_panic\n# use either::*;\nlet right: Either<(), _> = Right(3);\nright.unwrap_left();\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"L"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"core::fmt::Debug","id":"1:10255:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10205:1559":{"id":"1:10205:1559","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10206:1509","1:10207:55577","1:10209:2565"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3140:74":{"id":"1:3140:74","crate_id":1,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3142:1644"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3245:2276","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:13385:3176":{"id":"1:13385:3176","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:15839:2033"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"1:49290:3138","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13431:58796":{"id":"1:13431:58796","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:22812:2911":{"id":"1:22812:2911","crate_id":1,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:22802:2888","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:285":{"id":"0:285","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[47,15],"end":[47,24]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralPartialEq","id":"1:3248:207","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:273:1560","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:179:1001":{"id":"0:179:1001","crate_id":0,"name":"position","span":{"filename":"src/lib.rs","begin":[987,4],"end":[992,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["predicate",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"1:3489:131","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"1:8565:157","args":null,"param_names":[]}}}}],"output":{"kind":"primitive","inner":"bool"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:6847:3363":{"id":"4:6847:3363","crate_id":4,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6848:56253"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:4687:1557":{"id":"4:4687:1557","crate_id":4,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4688:1856","4:4689:2558","4:4690:2559","4:4691:2560"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:240:210":{"id":"0:240:210","crate_id":0,"name":"Target","span":{"filename":"src/lib.rs","begin":[1191,4],"end":[1191,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"L"},"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"1:3459:116","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}},"1:2837:97":{"id":"1:2837:97","crate_id":1,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2839:2021"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3245:2276","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:13388:17208":{"id":"1:13388:17208","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"4:15845:2038"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"1:49594:3153","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3329:2107":{"id":"1:3329:2107","crate_id":1,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3331:171","1:3332:1089"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}}},"paths":{"6:0:785":{"crate_id":6,"path":["libc"],"kind":"module"},"16:6644:4202":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"4:10546:3543":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"6:5197:6508":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:10844:4442":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"16:2991:4327":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"4:2181:3438":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"12:2331:2707":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:50040:3168":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"6:5414:6620":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:9210:46075":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"6:1547:6041":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:37512:2345":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"4:4419:2256":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:45829:189":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:10052:7577":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:52296:2943":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"4:11338:3624":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"4:3317:3587":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"18:790:4503":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:46451:2203":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"5:5310:190":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"4:5357:3622":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:14022:3181":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"17:12142:5069":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"6:605:6012":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"4:14669:3518":{"crate_id":4,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"4:12645:128":{"crate_id":4,"path":["std","sys","unix","fs","File"],"kind":"struct"},"4:13317:3637":{"crate_id":4,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"16:6807:4205":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"4:1432:2492":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"6:5563:6672":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:46473:2642":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:32212:2702":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"4:14932:3472":{"crate_id":4,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"1:0:477":{"crate_id":1,"path":["core"],"kind":"module"},"4:9614:4645":{"crate_id":4,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"16:6126:4187":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"4:2805:100":{"crate_id":4,"path":["std","ffi","CStr"],"kind":"typedef"},"1:47543:1705":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:4033:2208":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"6:4511:6456":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"16:6518:4198":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:13836:7698":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"5:8363:3712":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"6:4387:6405":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"4:10788:3391":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"17:9133:46074":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:52104:2966":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:45783:188":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:47483:195":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"17:9759:7570":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"6:4395:6409":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:10458:4807":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"5:1235:3786":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"12:1180:3959":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"5:3034:58713":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:4888:3057":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:22802:2888":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:23655:2910":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"5:5828:3700":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:13348:5397":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:46204:3335":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:50064:121":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"17:13296:5382":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:46235:3330":{"crate_id":1,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"4:5761:3382":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"4:15853:2044":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"16:7843:4221":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:57291:7112":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"4:15864:2055":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"4:10924:2249":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"4:2920:170":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:4033:6276":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"6:1690:6141":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"5:3483:2709":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"4:13834:56249":{"crate_id":4,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:11159:4909":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:9799:7571":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:51943:2974":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"16:7303:4218":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:52908:2975":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:49061:3116":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:12385:5122":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:12480:5139":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"6:4227:6340":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:11147:7613":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"5:7626:2716":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:3472:1552":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"4:3301:2915":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"4:3607:4628":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"18:620:7555":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"5:8346:6852":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"10:0:2086":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:10599:7594":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"16:6569:4347":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"7:0:1459":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:6591:4201":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"4:4417:2255":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:46563:2656":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:11246:3113":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:10081:4440":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:5547:2778":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:46543:2655":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:49488:3148":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:10962:7607":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"4:15333:3989":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:2753:568":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:51143:2964":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:11231:4416":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:23971:3027":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"6:6068:6733":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:5407:6619":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:22582:55535":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:13547:5450":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"16:5360:4028":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"4:14806:4657":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"4:13482:7961":{"crate_id":4,"path":["std","sys","unix","os","Env"],"kind":"struct"},"4:11986:56076":{"crate_id":4,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"17:12610:5160":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:10268:2510":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:11030:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"4:4378:2253":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:3258:2338":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"4:14141:2251":{"crate_id":4,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"4:4630:2232":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"16:5421:4031":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"6:4095:6308":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"16:4852:5623":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:9971:59995":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:49817:2842":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"18:650:4513":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:10262:119":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"18:667:4518":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"4:14424:3367":{"crate_id":4,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:24649:3209":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"17:11100:4419":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:53338:7100":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:47398:2491":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"17:11199:4910":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:12073:5060":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"6:5191:6507":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"12:812:3451":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:45920:2935":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"1:46600:2659":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"4:5721:3381":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:13041:5302":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"18:720:4759":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:32378:55558":{"crate_id":1,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"6:4377:6402":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:11277:4911":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:4997:2524":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"1:49738:2837":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:57312:7113":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"17:14000:5583":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"4:7918:56250":{"crate_id":4,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"4:2598:7668":{"crate_id":4,"path":["std","error","from","StringError"],"kind":"struct"},"1:46329:100":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"6:4272:6349":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:13154:5347":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"4:1442:1705":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"5:8375:3713":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"6:599:6009":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:48907:3352":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:2512:4426":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:12537:5147":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:3074:2888":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"12:2005:2491":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:2837:97":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"17:10211:7581":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:2492:2869":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"4:1153:7656":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:3367:2114":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:50220:180":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"1:4707:2890":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"6:6812:6831":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:22865:2939":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:5006:3059":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:45852:2128":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1:10493:142":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:45892:2210":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"6:4073:6295":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"12:2323:5871":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"0:273:1560":{"crate_id":0,"path":["either","Either"],"kind":"enum"},"1:49388:3144":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"16:6464:4156":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"5:3877:1886":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:49139:3124":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:46412:2780":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:3339:2109":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:13564:5454":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"6:1630:6093":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:1527:6033":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"5:2305:3807":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"4:14652:7673":{"crate_id":4,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"5:4237:4607":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:5568:2989":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"4:9841:4648":{"crate_id":4,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"16:6682:4157":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"16:547:4050":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"5:5410:2223":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:23999:6938":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:3492:132":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:3696:213":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:48422:127":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:2840:2789":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:13733:5511":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:45673:2136":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:47535:2492":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"5:1441:3457":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"16:4641:5616":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"16:7870:4150":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:13022:2832":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"4:3981:3535":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"16:6949:4358":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"16:5505:4038":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"6:6200:6806":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"4:12081:3491":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"14:194:44417":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:510:7564":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"4:15056:3428":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:46173:3004":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"4:786:4648":{"crate_id":4,"path":["std","thread","local","fast","Key"],"kind":"struct"},"1:13073:2836":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"5:4694:4612":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"16:7804:4153":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:11726:4987":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"4:11175:3416":{"crate_id":4,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"6:6124:6756":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"5:3754:2491":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"4:1419:2491":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"4:15855:2046":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"6:1596:6072":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"12:1688:3973":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:5132:2525":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"5:6645:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"0:279:197":{"crate_id":0,"path":["either","Either","Right"],"kind":"variant"},"17:12051:5051":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"4:11434:2731":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"12:377:3965":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"6:5359:6597":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:45972:3043":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:11304:46078":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"12:2045:3440":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"16:6691:4203":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"4:699:3542":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:49263:3240":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"12:976:3456":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"5:6757:2223":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"16:2968:4316":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"5:4638:4612":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"6:5274:6543":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:49524:3150":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"4:10545:2888":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"17:13119:5346":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:49881:2844":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"4:1497:3450":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"6:1584:6064":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:11186:7614":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:13685:5510":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"4:1021:3570":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"1:9726:79":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"4:5484:3630":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:49121:3122":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"6:1717:6154":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"18:644:4516":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"6:584:6001":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"4:5713:3380":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"9:1020:3895":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:1760:6169":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"0:54:1600":{"crate_id":0,"path":["either","try_left"],"kind":"macro"},"16:4955:5626":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"4:12042:1705":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"14:0:2089":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:10140:4442":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"4:11172:3415":{"crate_id":4,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"1:47787:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:4695:2889":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"16:5790:4054":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"4:6847:3363":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:13799:5534":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"14:244:7645":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"5:3324:2491":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"4:4553:2261":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"1:50036:3169":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"4:12113:3493":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"16:3549:5601":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:3684:2130":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:46572:2644":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:2484:46160":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"16:7195:4212":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"16:6636:4160":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"5:7604:2715":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"4:11118:3408":{"crate_id":4,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"4:7427:175":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"1:46868:2633":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:11208:3112":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"6:5953:6684":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"5:1486:3460":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"16:5346:4142":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:6597:55608":{"crate_id":1,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"5:8144:1705":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"16:7514:4163":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"4:15234:3623":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"4:1492:3449":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:9942:3098":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:10502:7585":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"5:783:211":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:5815:4055":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:9440:4850":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:24093:7759":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:10975:7608":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:48410:107":{"crate_id":1,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"6:1665:6122":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:10266:4429":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"5:3331:3438":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:9224:2312":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:10827:4385":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:49929:7191":{"crate_id":1,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"9:776:3875":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"4:6683:6725":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:2274:2921":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:53266:7094":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"4:10820:118":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"16:6605:4158":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"16:7467:4145":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:21:660":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"16:3772:5603":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"4:1450:3447":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:24411:3203":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:2169:567":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"6:5228:6521":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"4:7649:3512":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"4:2166:2711":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:50957:2971":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"4:15858:2049":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"1:6474:2643":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:11378:4388":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"4:1534:3456":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"4:10407:4649":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"6:6923:6847":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:3701:137":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"4:6685:6727":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"5:1613:1705":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:49752:2840":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:50982:2963":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:10571:7592":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:48672:2499":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"5:2213:3743":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"4:2751:2204":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"5:3965:4607":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:3153:216":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:46252:3157":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"4:3303:3583":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:10543:4899":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"6:3978:6249":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"7:38:44038":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:22603:55532":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"4:903:3547":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"4:8676:3652":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:11962:5037":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"16:4790:5621":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:9280:4846":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"4:1623:3457":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"4:11975:56215":{"crate_id":4,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"5:4438:2491":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:12118:5067":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:13172:5352":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"6:4145:6334":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"4:4246:2263":{"crate_id":4,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"12:1118:3458":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"16:3392:4330":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:12195:5077":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"4:4678:56388":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"0:53:1586":{"crate_id":0,"path":["either","for_both"],"kind":"macro"},"1:49594:3153":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"12:877:2709":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"17:11118:46077":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:47406:2492":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"1:46879:2635":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"6:5436:6627":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"5:8430:2709":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"16:2945:4338":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:46632:2646":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"4:2576:127":{"crate_id":4,"path":["std","error","Error"],"kind":"trait"},"4:12097:3492":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:48703:7713":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"4:14499:2233":{"crate_id":4,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"4:11367:6712":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"16:7549:4152":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:10635:4860":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"4:7913:3569":{"crate_id":4,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"1:8326:2639":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:13477:5428":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"6:4317:6371":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"12:1651:3971":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:9896:60001":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"4:14462:7186":{"crate_id":4,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:2060:2223":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"4:5916:3691":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"18:729:60005":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"16:6072:4126":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"6:6887:6840":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"16:2912:4315":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"4:15041:3427":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"4:14439:7751":{"crate_id":4,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"5:8352:205":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:4494:6448":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:13978:5577":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"6:6881:6839":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"5:3767:2492":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"6:1572:6055":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:22565:55336":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"6:4046:6281":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"0:0:1674":{"crate_id":0,"path":["either"],"kind":"module"},"1:46520:7708":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"4:10572:3568":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"6:5978:6702":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"4:15174:3417":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"6:5312:6571":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:11809:5012":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"6:5347:6592":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:46288:3333":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"6:5528:6647":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:23820:3199":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"16:5295:44493":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"5:4594:4610":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"16:3714:5602":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:11406:4916":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"5:1658:3450":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:11126:2238":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"1:49278:2894":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"14:216:44423":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"4:12172:3472":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"16:5736:4049":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:49769:2841":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"16:6780:4204":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"5:3743:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:10204:195":{"crate_id":1,"path":["core","fmt","Result"],"kind":"typedef"},"16:7174:4210":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:11653:4972":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"4:14216:3553":{"crate_id":4,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"4:12654:4653":{"crate_id":4,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"6:563:5989":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:10272:179":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:3483:2125":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:4300:6362":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:2265:2920":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"4:7241:7669":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:12373:5120":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"4:11082:2203":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"1:51069:2972":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"16:4386:5609":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:8846:2493":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"4:11363:3358":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"16:5273:4070":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"4:823:4648":{"crate_id":4,"path":["std","thread","local","os","Key"],"kind":"struct"},"16:6110:4181":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:7884:4151":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:46274:3156":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:46663:2663":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"4:10781:3390":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"18:849:4508":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:13370:5402":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:1311:4492":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"6:543:5972":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"16:7279:4363":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"18:636:4757":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"16:4477:5612":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"9:686:3826":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"12:2303:5868":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:10264:2508":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"12:1200:3960":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:24547:3054":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"16:7378:4148":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"4:2923:169":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"16:6014:4186":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:8127:7962":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"6:4325:6375":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:50297:2207":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:4013:6267":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"16:3241:4322":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"6:1708:6148":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:11604:4963":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:12442:5134":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"4:14444:7753":{"crate_id":4,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"1:9882:648":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"1:50028:3164":{"crate_id":1,"path":["core","str","LinesAnyMap"],"kind":"struct"},"1:3486:130":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"6:5241:6530":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"4:5771:3383":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"16:7295:4161":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:3382:2118":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:3252:209":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"4:10828:3600":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"6:4425:6420":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:3544:2126":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"6:4215:6339":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:13627:5468":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:49296:3139":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:12208:5079":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"9:996:3894":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:13506:5436":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"4:5938:3693":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"5:1215:3785":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:10377:4431":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"4:11948:3517":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"4:9160:7670":{"crate_id":4,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"12:866:2711":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"6:4052:6284":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"5:5832:3702":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:12598:5158":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"4:5639:3403":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:3862:6175":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"3:0:2080":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"16:6391:4195":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"5:8247:3464":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"5:7366:1705":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"4:10590:3553":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"1:9937:3097":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:8436:1848":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"6:4203:6338":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:3945:6236":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:46258:3331":{"crate_id":1,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"17:13386:5405":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"12:747:2491":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:49637:3158":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"4:8460:192":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:46534:2654":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"12:1235:3961":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:46653:2662":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"6:4040:6279":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:38669:2095":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"16:4506:5613":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:2176:6930":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:47661:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"4:11416:36156":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:13906:55606":{"crate_id":1,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"1:3355:2112":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:11360:3117":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"4:1486:2709":{"crate_id":4,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"1:2928:167":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"4:10357:7689":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"16:4704:5618":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:13205:5363":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:47913:85":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"4:2163:1705":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:49844:2843":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:3615:2129":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:37488:168":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"1:4750:2868":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:3250:106":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:3323:2104":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"4:15318:56516":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"17:12262:5087":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"16:5707:4046":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"1:6856:2665":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"4:1505:3452":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"4:10844:1886":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:11871:3133":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"4:7318:176":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"17:13258:5375":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"4:7961:4630":{"crate_id":4,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"4:6845:3361":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:4133:6325":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:52230:2958":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:10788:7597":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:48119:2509":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"5:5868:4616":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"1:53297:7097":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:10128:4488":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:47466:2614":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"6:6910:6846":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"5:3043:58712":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:56055:225":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:12756:5186":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"6:5130:6465":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:51255:7038":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"6:4478:6443":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"16:7264:4159":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"6:1676:6130":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"4:6773:3357":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:11015:7611":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:9476:4851":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:2543:4459":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:56003:225":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:6681:3722":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"4:15846:2039":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"5:920:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:14109:141":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"6:4066:6292":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:13016:2829":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"5:3391:3440":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:24025:8920":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:51174:2952":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"16:6964:2310":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:12741:5182":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"4:5705:3379":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"19:0:981":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"4:4026:195":{"crate_id":4,"path":["std","io","error","Result"],"kind":"typedef"},"17:13062:5311":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"4:4669:1559":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"1:10270:2511":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"6:3881:6185":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:48903:3353":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:11616:4966":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:49159:3126":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"16:7226:4215":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"12:354:7746":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"16:2794:4067":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"16:7477:4165":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"5:374:3748":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"5:2195:4609":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:13865:5551":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"16:6136:4182":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"6:5167:6491":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:12275:5088":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"16:7786:4154":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"5:4623:224":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"4:10919:3533":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"1:24063:8921":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"4:2192:3440":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:300:195":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"4:12652:3579":{"crate_id":4,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"6:632:6027":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:51579:2942":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"16:6357:4194":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"4:12137:3657":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"16:4922:5625":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:10200:7580":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"16:5753:4052":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"16:6219:4191":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:3137:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"1:8411:120":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"4:15838:2032":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"4:4028:127":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"1:24007:6939":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"16:7146:4208":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:10801:7599":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"16:5314:4845":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:49306:2236":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"4:5844:3688":{"crate_id":4,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"17:12010:5047":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"4:15075:3434":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"4:6776:3359":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:46334:2763":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:50099:3250":{"crate_id":1,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"5:8160:3711":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"4:11485:2741":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"16:2816:4332":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"18:712:2345":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"4:14784:4655":{"crate_id":4,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:13725:150":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:11714:4984":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"4:11920:171":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"18:169:7952":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"12:429:3963":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:4183:6336":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:8143:2628":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"1:53113:2944":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:11358:4389":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"4:3344:1554":{"crate_id":4,"path":["std","io"],"kind":"module"},"1:8843:1849":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:10420:4424":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"12:1762:4605":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:11555:4955":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"6:3990:6258":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:616:6017":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:3343:2113":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:23891:6932":{"crate_id":1,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"18:0:2093":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:47356:166":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"1:3548:2127":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"12:930:3452":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:10407:4425":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:51092:2976":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"4:15849:2040":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"1:46364:3237":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:13924:5567":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"12:1855:145":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:53050:2979":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:22605:55534":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"19:117:4753":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"1:51111:7036":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"6:5185:6504":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:10205:1559":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"9:157:3845":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"16:2866:4314":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"6:4164:6335":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"16:5456:4033":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:46492:2650":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"16:6252:4192":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:51759:7046":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"16:4304:5607":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"0:276:159":{"crate_id":0,"path":["either","Either","Left"],"kind":"variant"},"1:50212:7033":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"16:3064:4375":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:24377:3202":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:13446:5420":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:10149:7572":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"4:1194:33118":{"crate_id":4,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"5:792:108":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"16:4350:5608":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"4:1045:3395":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:9245:4386":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:46581:2657":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:24100:3270":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:3218:115":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"6:4347:6386":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"4:13681:3523":{"crate_id":4,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"5:6250:2715":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"16:5561:4041":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"4:7601:3509":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"4:15856:2047":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"4:12167:3539":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:49603:3154":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"18:739:7556":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:9943:60002":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"12:469:7956":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"18:896:4512":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:46850:2631":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:47997:3239":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"18:694:4519":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"14:189:7642":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:38732:2341":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:45927:2523":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"16:7205:4213":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"6:4364:6397":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"4:14475:129":{"crate_id":4,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"4:8632:3651":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:11794:5006":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:10558:7589":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"5:3033:3718":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:9719:7569":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"4:10776:3579":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"8:0:2084":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"6:6100:6744":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:9162:4415":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:47829:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:3972:6246":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"4:11584:2746":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"5:432:2706":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:46482:2649":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:3347:2111":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:13180:5353":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"4:11142:3409":{"crate_id":4,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"17:11696:4983":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"4:9713:3617":{"crate_id":4,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"14:11:7642":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:22806:2908":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:52021:2981":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:56016:225":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:11254:4414":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:49612:3155":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:13402:5409":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:607:7565":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"15:269:3985":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"16:7185:4211":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"4:11207:6905":{"crate_id":4,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"15:248:3981":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"4:10836:2247":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"6:5998:6708":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:4401:6410":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:9659:59997":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"4:11227:56074":{"crate_id":4,"path":["std","net","parser","AddrKind"],"kind":"enum"},"1:5375:3327":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"6:1522:6031":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"6:591:6004":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:11588:4962":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"4:15821:56214":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:14:1862":{"crate_id":1,"path":["core","write"],"kind":"macro"},"1:4932:2522":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"4:11145:3410":{"crate_id":4,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"17:9849:59998":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"4:11250:7183":{"crate_id":4,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"17:13746:5517":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:13598:5461":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:48693:2741":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"17:9005:46070":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:53238:2947":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:12671:5174":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"6:5210:6509":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:8849:4412":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:13394:5407":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"4:9751:4647":{"crate_id":4,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"4:8366:3570":{"crate_id":4,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"1:3459:116":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"6:519:5961":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:12659:5173":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:11402:3120":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:11499:4940":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:9809:60000":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"4:14492:118":{"crate_id":4,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:47703:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:13819:5537":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:12982:5250":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"4:9698:3616":{"crate_id":4,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"1:3246:2337":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"17:10950:7606":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:10274:2512":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"6:6091:6740":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"4:11105:2238":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"5:8181:1705":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"6:5379:6605":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:12771:5187":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:47552:168":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:45913:2934":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"1:24479:3205":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"16:7333:4162":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"6:4410:6413":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"16:6424:4196":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:12552:5151":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:50265:3180":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:610:6014":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"6:6858:6833":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"4:11993:6922":{"crate_id":4,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"16:3338:4063":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"4:8013:3570":{"crate_id":4,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"4:15069:3433":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"18:136:7948":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:3489:131":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"6:5522:6646":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"9:0:2085":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"5:4510:3757":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"1:48133:2510":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:10988:7609":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:9332:4457":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:11847:5020":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:11678:4974":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:9961:7574":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"4:7718:3515":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"4:14867:3516":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"5:8234:2707":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:11077:2491":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"4:12315:7666":{"crate_id":4,"path":["std","sys","unix","args","Args"],"kind":"struct"},"4:7781:3521":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"4:3184:2231":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"17:10095:4485":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:12678:3142":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"4:2460:7666":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"5:1648:3449":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"4:897:3546":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"4:13818:3513":{"crate_id":4,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:3335:2106":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:4719:102":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"6:4101:6311":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"4:1511:3453":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:49470:3147":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:24047:8912":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"6:5987:6703":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:9223:2313":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:53286:7096":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:12234:5082":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:23930:7756":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:8070:2260":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:12247:5084":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"6:1533:6036":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"16:6413:3977":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:5282:6548":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:5292:6555":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:32278:55559":{"crate_id":1,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"4:15852:2043":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"17:11082:4394":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:46612:2660":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:2381:2703":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"4:7103:36155":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"1:14012:2870":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"6:4523:6461":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:12028:5048":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:48126:2508":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:9729:59996":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:5001:3058":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"1:55990:225":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:3402:2122":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:49229:3131":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"16:7420:4164":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"1:3329:2107":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:12444:3348":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"6:4120:6321":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:48444:71":{"crate_id":1,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"16:5927:4059":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:0:419":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"12:761:2492":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"16:5231:5629":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:10061:7578":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:47619:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:10477:4460":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:9404:4849":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:12456:5136":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:5960:4061":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"12:463:7955":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"4:11595:2747":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:46314:3008":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:10489:4463":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:12095:5061":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:11932:5028":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"5:8314:2760":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"4:11963:3518":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"1:14183:2704":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"5:8114:2711":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:13532:5446":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"4:15863:2054":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"4:3597:2246":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"5:3365:3437":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:22961:31232":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"6:4358:6394":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"4:10771:3376":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"1:7719:2648":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"4:11525:2743":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"17:9186:4393":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:12632:5171":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:11750:4989":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"4:14880:3517":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"12:2009:1705":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"4:9619:58444":{"crate_id":4,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"4:15844:2037":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"1:3411:2124":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:53312:7098":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"16:7216:4214":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"4:15843:2036":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"17:13465:5427":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"13:0:2083":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:3146:135":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"17:12507:5142":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"5:1472:3458":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:48480:2507":{"crate_id":1,"path":["core","fmt","FlagV1"],"kind":"enum"},"16:6032:4072":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"4:9323:3356":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:48711:7714":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:53277:7095":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:13884:5556":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:13098:5341":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:49220:3130":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"5:5882:4618":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"17:10435:7583":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:10117:4487":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:10673:46260":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"5:5531:3721":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:46859:2261":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"12:2039:3439":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"9:963:3893":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"16:6176:4189":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:1236:7566":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:53376:7102":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:542:4076":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"4:8911:3671":{"crate_id":4,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"17:13497:5435":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:11281:3114":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"5:1630:3447":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:50052:3171":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"16:6166:4188":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"6:578:5998":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"6:4127:6323":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"16:3091:4376":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:46151:7699":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:52183:2954":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:51453:2965":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"12:1253:3460":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:13227:7963":{"crate_id":1,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"18:152:7949":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"16:5975:4184":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:10623:7596":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:3149:217":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"16:5996:4185":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"4:10567:3551":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"4:11060:1558":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"16:3195:4320":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:48681:146":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"16:2773:4339":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"4:8894:2629":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"18:866:4510":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"4:6305:3642":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:3351:2110":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"4:15255:3630":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"4:4340:3607":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:10611:7595":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"5:1689:3783":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:0:2092":{"crate_id":17,"path":["object"],"kind":"module"},"6:6614:6827":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:3318:2105":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"9:722:3829":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"1:46502:2651":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:5152:2344":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:51554:2960":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:51005:2951":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"4:1501:3451":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:6051:6731":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:53391:7103":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"6:6155:6782":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:6028:6730":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:13620:5466":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"6:5255:6541":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:1563:6049":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"4:5954:3696":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:13221:5366":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"6:1622:6088":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:11458:4934":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"4:11099:2236":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"4:1637:3458":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"4:5360:3623":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:8330:2638":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:4637:2223":{"crate_id":1,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"12:853:3448":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"4:15196:3622":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"12:784:3450":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:12221:5080":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"4:2366:589":{"crate_id":4,"path":["std","env"],"kind":"module"},"6:6005:6712":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:4306:6365":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"4:9049:3506":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"16:4890:5624":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:13272:5380":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:22997:2888":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"5:1592:2491":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"4:11914:3514":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"1:10897:203":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"5:3370:3741":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:3743:4381":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:50048:3170":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"6:6852:6832":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"14:56:4935":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"16:4614:5615":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"18:820:4506":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"4:2437:7665":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"1:50056:3165":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"4:1136:2211":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"5:4210:2711":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:52447:2967":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:51381:2977":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"9:900:5923":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"4:15851:2042":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"17:10656:4862":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:12917:5199":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:3313:2108":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"6:157:39204":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"17:12521:5145":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:12699:5178":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"6:6221:6818":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"4:1528:3455":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"4:11508:2742":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"4:15025:3426":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:11319:3115":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"6:4293:6361":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"12:1159:3958":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:51216:7037":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:51864:2986":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"11:46:5873":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"1:8376:1827":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"6:1617:6086":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"4:15840:2034":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"1:3140:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"4:14962:7685":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"16:0:2091":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:13986:5580":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:1540:6039":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:10887:4896":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"6:3997:6262":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"16:7971:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"5:8099:1705":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"4:14656:3405":{"crate_id":4,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"17:9839:4442":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"6:5548:6661":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"16:7024:4361":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:51303:2985":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:12754:3149":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:47414:1705":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"4:15850:2041":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"4:1463:3448":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"6:1554:6044":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:13192:5358":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"4:14449:3390":{"crate_id":4,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"17:9551:4413":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:3249:206":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"4:11032:2260":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"4:12026:2491":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"4:13929:3514":{"crate_id":4,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"12:840:3447":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:52261:2961":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:51531:2957":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:49338:3114":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"5:1669:3451":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"16:5580:4042":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"4:1156:7658":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:7633:2575":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"6:5221:6517":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"16:5672:4045":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"16:4995:5627":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"4:14970:3525":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"6:531:5967":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:13488:5432":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"16:3365:4064":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"6:4459:6435":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"6:3918:6213":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:49906:2846":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:52654:2987":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"16:4417:5610":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:51500:2953":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:3713:2134":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:49916:2847":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"16:3506:4325":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"5:3946:2709":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"6:4005:6264":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:7392:4149":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"16:4762:5620":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:3360:2117":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"5:1602:2492":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"5:1091:4607":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"4:11148:3414":{"crate_id":4,"path":["std","net","ip","IpAddr"],"kind":"enum"},"6:3966:6244":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"4:12162:3538":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:55897:2904":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"18:754:60006":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"12:774:1705":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"5:8152:184":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"14:231:3715":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"16:6087:4141":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"18:774:4757":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"4:1655:3460":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:8363:136":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"4:6671:3375":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:23913:3032":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"4:12192:3473":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"17:11915:5022":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:12712:5179":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"4:7663:3513":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"6:4331:6377":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"4:2187:3439":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"4:3176:128":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"4:9125:3537":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:49628:3157":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"18:660:4517":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"12:160:3962":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"16:3287:4324":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:51038:2984":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:51404:2980":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:3394:2120":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"6:5459:6633":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:47389:1706":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"6:4193:6337":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:12168:4867":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"6:537:5969":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:48383:133":{"crate_id":1,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"17:12408:5131":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"4:3631:2241":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"4:14138:2255":{"crate_id":4,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"17:12685:5175":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:11026:7612":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"16:3264:4323":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"5:2325:3787":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:50202:191":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"9:27:3877":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"1:24717:3211":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"5:7808:4620":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:9592:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"17:12431:5132":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"6:4112:6316":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:13240:5367":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:13027:2833":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"16:7856:4222":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"5:1639:3448":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:13163:5351":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:11767:4997":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:47955:92":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:11337:4458":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:12155:5072":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"4:13463:7665":{"crate_id":4,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"17:13282:5381":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"4:2399:7663":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"1:2862:104":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1:9222:2314":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"5:7250:4607":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:49700:2831":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"4:9447:8339":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:9769:59999":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:45645:2139":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"4:11578:2491":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"4:15862:2053":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"17:11835:5017":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"5:1457:3459":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"6:4449:6434":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:5941:179":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:13429:5413":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:49320:2238":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"5:1838:4607":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:51627:2946":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:3268:2340":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"17:12040:5050":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:49584:3152":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:11572:4957":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:46145:3157":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"4:11319:3692":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:13377:5404":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:48140:2511":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"4:13554:3499":{"crate_id":4,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"4:15839:2033":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"17:13609:5465":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:14073:191":{"crate_id":1,"path":["core","task","ready","Ready"],"kind":"struct"},"1:47423:2310":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"1:10538:2497":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:50256:3179":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"5:4301:2492":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:10331:4442":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"12:181:3966":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"4:8625:3649":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"6:6185:6799":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"16:2754:4065":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"6:5469:6635":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"16:7928:2934":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"16:5855:4056":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:47457:2311":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"16:6021:4312":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"4:11275:3626":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"16:5433:4032":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"4:11092:2235":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"1:48664:7711":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"6:6893:6841":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"4:1522:3454":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"16:2889:4333":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:23946:6934":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"4:14800:4656":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:3406:2123":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"4:11568:2744":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"4:15589:4658":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"12:1100:3457":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"4:2793:2205":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"6:1700:6147":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"16:3488:4326":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"12:949:3454":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"12:2018:2709":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"9:927:44142":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:12307:5095":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:4255:3643":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"4:8467:3487":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"5:8264:101":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:23651:2888":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"4:10346:4914":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:46841:2629":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"5:7437:4607":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:10215:134":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"17:10224:7582":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:12568:5152":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"4:6945:3360":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"5:923:3775":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"4:15860:2051":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"4:10677:3794":{"crate_id":4,"path":["std","error","private","Internal"],"kind":"struct"},"1:8850:2637":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"12:892:3950":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"17:11665:4973":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"6:3957:6239":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:53323:7099":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"4:13856:3515":{"crate_id":4,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"1:32037:3265":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"6:4470:6441":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:4431:6423":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:13520:5443":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:48359:67":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"4:10802:129":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"4:10639:3443":{"crate_id":4,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"1:12004:4661":{"crate_id":1,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"4:3508:2245":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:569:5992":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:3308:2103":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"4:14912:6926":{"crate_id":4,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"4:3178:3580":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"12:0:2088":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"16:6491:4197":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:25121:3010":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:11328:5187":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:8367:151":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:13318:5386":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"16:7571:4140":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:24445:3204":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"4:6543:3392":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:13554:5451":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"5:2257:3788":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"16:3172:4319":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"5:2772:3790":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:51727:7045":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"16:3429:4068":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"18:811:4505":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"12:2013:2711":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"4:5633:3404":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:22954:2888":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:46160:3003":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:10071:4491":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"16:7453:4144":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:9528:2236":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:2938:174":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"4:6068:3632":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:9368:4848":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"16:6731:4351":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:46552:2664":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:8929:46069":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"16:5522:4039":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:13942:5573":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"4:10914:3532":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"16:6208:4190":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:9574:4418":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:3248:207":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:46347:3236":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"4:4612:1556":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"12:1667:3972":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:23008:2939":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:13772:5526":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:11628:4967":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"4:10557:56515":{"crate_id":4,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"1:45762:185":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"16:5632:4044":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"16:3939:5605":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"4:1476:2711":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:49424:3117":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:46464:2641":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:10938:7605":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:11640:4970":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:10236:4411":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:23749:3196":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"4:15805:56194":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"6:4083:6302":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:3075:2096":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:24683:3210":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"16:7894:4179":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:11101:2492":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"4:8825:7670":{"crate_id":4,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"18:829:4507":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:299:7563":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"5:2548:3791":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"9:1056:3888":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"6:624:6022":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"16:3145:4328":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"6:4371:6399":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"16:7823:4155":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:13933:5571":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"4:7635:3511":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"17:11045:46076":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:46281:3332":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"4:11270:3625":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:51602:2945":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"18:744:60003":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:10160:4857":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:3143:149":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"1:53414:7104":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:4060:6289":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:9065:46072":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:5123:3065":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"4:15845:2038":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"6:6106:6745":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"16:5384:4029":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:46227:3158":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"5:994:3776":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:32218:3255":{"crate_id":1,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"17:9933:7573":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"6:4023:6273":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"16:4448:5611":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"5:3834:4607":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"12:112:7954":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"4:12157:3663":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:49239:3132":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"4:2401:7664":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"1:3398:2121":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:49112:3121":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:51783:7047":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"16:5766:4053":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:45721:186":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:50279:158":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"4:6185:3641":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"4:11344:3644":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:10353:4433":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:51990:2978":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:48496:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"6:525:5964":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:9649:7568":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:22537:2345":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"16:2843:4313":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"4:2031:145":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"9:234:3853":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"17:13963:5576":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:22584:55530":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"15:230:3980":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:11822:5016":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"4:7272:7669":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:2892:173":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:50934:2983":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"4:3329:3593":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"6:3951:6237":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"18:885:4511":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"5:6468:2711":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:10001:46122":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"5:3357:3439":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"4:2170:2709":{"crate_id":4,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"4:15857:2048":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"1:2897:124":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"1:50309:2206":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"17:11001:7610":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:10543:2498":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:12287:5089":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:13898:5558":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:47475:178":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:12468:1899":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:9296:4847":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:13331:5392":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:50032:3167":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:46422:2779":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"6:5386:6606":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:10912:7600":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"0:55:1603":{"crate_id":0,"path":["either","try_right"],"kind":"macro"},"17:11539:4951":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"5:3295:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:32177:2701":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"6:6870:6835":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"4:14893:3473":{"crate_id":4,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:3245:2276":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"4:15842:2035":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"17:681:4914":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:7891:2625":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"4:0:1310":{"crate_id":4,"path":["std"],"kind":"module"},"17:11947:5032":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"4:10682:2203":{"crate_id":4,"path":["std","error","Chain"],"kind":"struct"},"17:13356:5400":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"12:2025:3437":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"4:11312:3408":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"4:6681:6723":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"6:6176:6796":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"9:1075:3896":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"5:8447:2710":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"4:9607:58445":{"crate_id":4,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"1:11904:3134":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"17:10253:4430":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"6:5371:6604":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:8565:157":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:22812:2911":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:13760:55682":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"4:5946:3694":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:24513:3206":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:6401:2653":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:5078:2523":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"7:85:44045":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"12:937:3453":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"6:5969:6696":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:51236:2941":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"5:8105:3777":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"16:6101:4139":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"9:809:2741":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:3725:2872":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"4:15859:2050":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"1:49211:3129":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"16:7738:4219":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"4:4380:2254":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"6:4439:6428":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:3905:6203":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:12795:5197":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"4:8118:3570":{"crate_id":4,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"14:250:5822":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"4:1646:3459":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"16:4230:5606":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"6:1736:6160":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:13780:5529":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"4:5967:3697":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:10276:2513":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:10403:4438":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:11519:4950":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"4:4585:2223":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"1:46442:2640":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:13222:7696":{"crate_id":1,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"1:49723:2834":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"11:0:2087":{"crate_id":11,"path":["adler"],"kind":"module"},"17:11993:5044":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"6:5945:6679":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"9:41:3878":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"4:2462:7667":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"1:24581:3207":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:50888:7034":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:3742:2137":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"16:3118:4329":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:10255:109":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"17:10448:4462":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:49149:3125":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:11738:4988":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:10317:4427":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"6:1658:6118":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:46214:3336":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"4:7615:3510":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"17:13306:5383":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"4:3319:3588":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"4:4456:2251":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"4:8374:2741":{"crate_id":4,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"16:5029:5628":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"4:9046:3658":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"16:7761:4220":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"5:69:2708":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:12343:5101":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"16:2733:4066":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:52987:2959":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:161:39205":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"18:610:4514":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"6:6644:6830":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:6744:4352":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"4:5727:3375":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"16:5717:4048":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:3707:2132":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"4:14135:2253":{"crate_id":4,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"1:46591:2658":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"18:782:4757":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"4:7778:3519":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"17:11779:5000":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:3967:68":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"16:7158:4209":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"16:4535:5614":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"5:8282:2762":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:9600:59994":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"5:1011:2491":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:12738:3146":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:56042:225":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:4:966":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"17:10926:7604":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:49130:3123":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:12789:3111":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"12:2309:5869":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"12:1144:3459":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"16:6238:4146":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"4:8396:3770":{"crate_id":4,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"1:32226:55561":{"crate_id":1,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"1:45885:2131":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"18:766:4768":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"5:8122:3778":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:51350:2973":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"5:1680:184":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"12:2032:3438":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:50044:3172":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"5:1195:7960":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"4:1079:3400":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"16:7119:4073":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"16:5595:4043":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:49198:3128":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"4:3685:2248":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"4:4972:3406":{"crate_id":4,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"6:3868:6176":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"13:232:5867":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"6:3892:6193":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"16:7236:4216":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"6:4281:6354":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"16:6620:4345":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:3779:2138":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:10468:4461":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:45737:184":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"16:7406:4147":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"15:0:2090":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:3240:200":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"6:511:5956":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"16:5330:4846":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"4:15810:33119":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:1744:6164":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"9:692:3828":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"4:1161:33117":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"4:6423:3359":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"4:4687:1557":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"9:469:44148":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:4345:1705":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"6:6899:6842":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:13810:5535":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"16:6999:4206":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:55977:225":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:9344:2830":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"4:9746:4646":{"crate_id":4,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"6:5420:6623":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"4:1306:143":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"16:5488:4037":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:45806:187":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:10888:2888":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"18:801:4504":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"16:7342:4176":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:10106:4486":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:49574:2239":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"4:7493:119":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"17:8954:4395":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:12645:5172":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:9088:46073":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:13842:5550":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:46295:3334":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"18:857:4509":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"4:8179:4630":{"crate_id":4,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"5:0:266":{"crate_id":5,"path":["alloc"],"kind":"module"},"16:6718:4350":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:13710:138":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:4852:3056":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:24751:3212":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:10258:109":{"crate_id":1,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"1:53361:7101":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"16:3041:4318":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"16:7042:4362":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"4:15837:2031":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"1:46189:3006":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:53199:2982":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:12997:1588":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"4:11048:2233":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"1:48392:67":{"crate_id":1,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"6:1908:40507":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:11970:5039":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:53453:7105":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:50086:3249":{"crate_id":1,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"1:5594:766":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:10503:146":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"4:3181:1852":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"5:6665:3721":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:12582:5154":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:5175:2526":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:12946:5219":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:3526:2135":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"17:10179:4859":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:9689:59993":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"4:4458:2252":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"5:1560:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"16:6366:3978":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:23984:3028":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:4157:4398":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"6:4517:6458":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:24115:3226":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:10864:4895":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:13788:5530":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"4:11330:3635":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"4:8724:3661":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:10028:7575":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"5:7764:223":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:2314:4432":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"13:120:44389":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:23006:2940":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"5:8297:3236":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:53160:2962":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"4:8275:3570":{"crate_id":4,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"1:11169:3111":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:13590:5460":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"6:4262:6342":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:670:39535":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:10304:4428":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:13054:5309":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:12725:5180":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:8902:46068":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:13582:5458":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"5:8328:2761":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"5:7205:2711":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:10584:4397":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"4:11039:2262":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"5:1934:2709":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"1:2201:1037":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"1:49542:3151":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:13912:5565":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"5:3336:3740":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:47577:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:294:7562":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:13801:177":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"1:52797:2955":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"5:7833:4626":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:47871:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"4:14509:56223":{"crate_id":4,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:50060:3166":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:10529:7586":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:49895:2845":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:49185:3127":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:46834:2627":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"16:6152:4143":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:13574:5457":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"12:2315:59990":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"4:11971:7750":{"crate_id":4,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"4:2175:3437":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"6:4419:6419":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:6935:6849":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:10266:2509":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:53257:7093":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:24615:3208":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"17:12783:5190":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"16:4734:5619":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"6:5269:6542":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"4:10656:34082":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"5:8090:2705":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:49370:3143":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"6:6085:6738":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:46643:2235":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"16:4671:5617":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"16:7250:4217":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:46511:2652":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"16:3218:4321":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"4:15854:2045":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"4:8474:3488":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:11434:4920":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"12:925:3449":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:12715:3145":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:24128:3225":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"5:3889:3771":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"16:4823:5622":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"4:11933:3516":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"4:6849:3364":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:3388:2119":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"16:3320:4377":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"11:54:3948":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"1:3377:2116":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:6214:6815":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"16:6577:4200":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:10814:4384":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"12:396:3964":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:4018:2209":{"crate_id":1,"path":["core","any","Provider"],"kind":"trait"},"4:6445:3396":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"6:5159:6489":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:88:39138":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"4:10633:33116":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:27932:2813":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:11388:3119":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"4:11178:3528":{"crate_id":4,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"4:10432:4651":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"6:5428:6625":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"16:6768:4354":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"4:15861:2052":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"6:4241:6341":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:12494:5141":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:56029:225":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"4:11389:3362":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"6:1729:3636":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"16:3018:4317":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"18:837:2829":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"6:6864:6834":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"5:5783:4607":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:4008:7567":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:22550:55336":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:9731:86":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"16:5407:4030":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:11482:4935":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"4:5783:3378":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"16:7360:184":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:10279:4440":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"5:6404:212":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"16:6269:4193":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:9264:4845":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"5:8187:1705":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:47745:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"5:6947:3706":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"4:11264:3624":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:10410:7695":{"crate_id":1,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"1:49442:3118":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"9:749:3830":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"17:9886:7572":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"12:968:3455":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:51679:7044":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"4:15309:6927":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"17:10041:7576":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:23556:2909":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:2251:2916":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:13637:5473":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:48377:70":{"crate_id":1,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"4:9574:4644":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"4:12048:3489":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"14:47:7642":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:49290:3138":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"1:5068:3064":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"4:12212:3474":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"12:556:143":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"4:5775:3384":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"6:1723:6157":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:1602:6074":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"6:5400:6617":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"4:4694:1555":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"17:12182:5076":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"4:11112:2239":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"4:6923:3365":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:13007:2830":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:11981:5042":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:3372:2115":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:3281:2277":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"16:6554:4199":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:11374:3118":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:12467:5137":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:13453:5421":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"5:7104:4620":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"5:8130:58579":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"4:4346:3609":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:10516:4464":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:47527:2491":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"4:8789:162":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"16:7073:4207":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:13540:5449":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"6:4501:6451":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"4:11324:3695":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:13760:5523":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:46622:2661":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"4:4343:3608":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:50909:7035":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"16:5472:4036":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"16:3604:4774":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"6:4341:6383":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"4:10618:33114":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"4:12034:3486":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"16:3800:5604":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"4:12152:3501":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"18:677:142":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"4:8959:3470":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"16:3522:4770":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:51197:2956":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"9:603:44217":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"5:3035:6851":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"4:2159:2491":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"5:3039:58710":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"4:12068:3490":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:49619:3156":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:9034:46071":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"4:15344:3989":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:7821:2937":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"4:10673:7673":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"4:14002:4654":{"crate_id":4,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"18:704:4757":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"6:6239:6821":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"4:10649:3461":{"crate_id":4,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"17:12327:5096":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"6:6636:6828":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:12936:2751":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:48656:2500":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"}},"external_crates":{"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":15}