{"root":"0:0:1821","crate_version":"1.9.0","includes_private":false,"index":{"0:84:1887":{"id":"0:84:1887","crate_id":0,"name":"right_or_else","span":{"filename":"src/lib.rs","begin":[659,4],"end":[667,5]},"visibility":"public","docs":"Returns right value or computes it from a closure\n\n# Examples\n\n```\n# use either::*;\nlet left: Either<String, u32> = Left(\"3\".to_string());\nassert_eq!(left.right_or_else(|x| x.parse().unwrap()), 3);\n\nlet right: Either<String, u32> = Right(3);\nassert_eq!(right.right_or_else(|_| unreachable!()), 3);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"generic":"R"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2935:1778","args":{"parenthesized":{"inputs":[{"generic":"L"}],"output":{"generic":"R"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62:1821":{"id":"0:62:1821","crate_id":0,"name":"either","span":{"filename":"src/lib.rs","begin":[426,4],"end":[435,5]},"visibility":"public","docs":"Apply one of two functions depending on contents, unifying their result. If the value is\n`Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second\nfunction `g` is applied.\n\n```\nuse either::*;\n\nfn square(n: u32) -> i32 { (n * n) as i32 }\nfn negate(n: i32) -> i32 { -n }\n\nlet left: Either<u32, i32> = Left(4);\nassert_eq!(left.either(square, negate), 16);\n\nlet right: Either<u32, i32> = Right(-4);\nassert_eq!(right.either(square, negate), 4);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}],["g",{"generic":"G"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2935:1778","args":{"parenthesized":{"inputs":[{"generic":"L"}],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"G"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2935:1778","args":{"parenthesized":{"inputs":[{"generic":"R"}],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:202:2008":{"id":"0:202:2008","crate_id":0,"name":"consume","span":{"filename":"src/lib.rs","begin":[1198,4],"end":[1200,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["amt",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:312":{"id":"0:312","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1269,0],"end":[1269,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2511:75","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2511:75","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2511:75","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:315:317"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:323:317":{"id":"0:323:317","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[1270,0],"end":[1274,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"::std::path::Path","id":"4:5238:190","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2553-0:269:1672":{"id":"b:1:2553-0:269:1672","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2527:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2523:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:2556:128","1:2557:1501"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12230:31926":{"id":"1:12230:31926","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:11852:1700","`DoubleEndedIterator`":"1:7310:121","prim@char":"4:12030:421","str::matches":"1:12227:2225"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:43854:7285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:2837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11857:2837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11872:8334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:320":{"id":"0:320","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1270,0],"end":[1274,1]},"visibility":"default","docs":"Requires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2511:75","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"::std::path::Path","id":"4:5238:190","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2511:75","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"::std::path::Path","id":"4:5238:190","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2511:75","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"4:5238:190","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:323:317"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:212":{"id":"0:212","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1237,0],"end":[1245,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Target","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2511:75","args":{"angle_bracketed":{"args":[{"type":{"generic":"Target"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2511:75","args":{"angle_bracketed":{"args":[{"type":{"generic":"Target"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2511:75","args":{"angle_bracketed":{"args":[{"type":{"generic":"Target"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:216:317"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5528:28330":{"id":"5:5528:28330","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:12273:28333"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:170:1989":{"id":"0:170:1989","crate_id":0,"name":"rfold","span":{"filename":"src/lib.rs","begin":[1099,4],"end":[1104,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["init",{"generic":"Acc"}],["f",{"generic":"G"}]],"output":{"generic":"Acc"},"c_variadic":false},"generics":{"params":[{"name":"Acc","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"G"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2932:1976","args":{"parenthesized":{"inputs":[{"generic":"Acc"},{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:7418:159","args":null}}}],"output":{"generic":"Acc"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12182:24512":{"id":"1:12182:24512","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:43924:7234","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12265:31938":{"id":"1:12265:31938","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12030:421","self::pattern":"1:11852:1700"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:2837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11857:2837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11872:8334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:31:425":{"id":"0:31:425","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[135,4],"end":[140,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1821":{"id":"0:0:1821","crate_id":0,"name":"either","span":{"filename":"src/lib.rs","begin":[1,0],"end":[1530,1]},"visibility":"public","docs":"The enum [`Either`] with variants `Left` and `Right` is a general purpose\nsum type with two cases.\n\n[`Either`]: enum.Either.html\n\n**Crate features:**\n\n* `\"use_std\"`\nEnabled by default. Disable to make the library `#![no_std]`.\n\n* `\"serde\"`\nDisabled by default. Enable to `#[derive(Serialize, Deserialize)]` for `Either`\n","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/either/1/\")]","#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:23-0:272:162","0:24-0:275:213","0:269:1672","0:25:1698","0:26:1712","0:27:1715"],"is_stripped":false}}},"1:12152:2682":{"id":"1:12152:2682","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:100:1933":{"id":"0:100:1933","crate_id":0,"name":"factor_err","span":{"filename":"src/lib.rs","begin":[847,4],"end":[852,5]},"visibility":"public","docs":"Factors out a homogenous type from an `Either` of [`Result`].\n\nHere, the homogeneous type is the `Err` type of the [`Result`].\n\n```\nuse either::*;\nlet left: Either<_, Result<String, u32>> = Left(Ok(vec![0]));\nassert_eq!(left.factor_err(), Ok(Left(vec![0])));\n\nlet right: Either<Result<Vec<u8>, u32>, _> = Right(Ok(String::new()));\nassert_eq!(right.factor_err(), Ok(Right(String::new())));\n```","links":{"`Result`":"1:41815:210"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41815:210","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}}},{"type":{"generic":"E"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2562:1500":{"id":"1:2562:1500","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:41815:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2527:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:306:737":{"id":"0:306:737","crate_id":0,"name":"hash","span":{"filename":"src/lib.rs","begin":[49,47],"end":[49,51]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:9505:145","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:145:1977":{"id":"0:145:1977","crate_id":0,"name":"for_each","span":{"filename":"src/lib.rs","begin":[1015,4],"end":[1020,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2932:1976","args":{"parenthesized":{"inputs":[{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:7418:159","args":null}}}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2687:220-0:269:1672":{"id":"a:1:2687:220-0:269:1672","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2687:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2687:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2687:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:7280:794":{"id":"1:7280:794","crate_id":1,"name":"into_iter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"I"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:227:1756":{"id":"0:227:1756","crate_id":0,"name":"as_mut","span":{"filename":"src/lib.rs","begin":[1301,4],"end":[1303,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Target"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12169:1763":{"id":"1:12169:1763","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9946:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9946:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:242":{"id":"0:242","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1340,0],"end":[1358,1]},"visibility":"default","docs":"`Either` implements `Error` if *both* `L` and `R` implement it.","links":{},"attrs":["#[cfg(any(test, feature = \"use_std\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"1:2606:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"1:2606:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["source","type_id","description","cause","provide"],"trait":{"name":"Error","id":"1:2606:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:245:1717","0:246:2021","0:247:397"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:8387:2466-0:269:1672":{"id":"a:1:8387:2466-0:269:1672","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:8387:2466","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:8387:2466","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8387:2466","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:2546:1919":{"id":"1:2546:1919","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2520:133"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:169:1988":{"id":"0:169:1988","crate_id":0,"name":"next_back","span":{"filename":"src/lib.rs","begin":[1090,4],"end":[1092,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41671:181","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:7418:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:311:676":{"id":"0:311:676","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[49,53],"end":[49,58]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9256:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9245:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12233:31927":{"id":"1:12233:31927","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:11852:1700","`DoubleEndedIterator`":"1:7310:121","prim@char":"4:12030:421","str::rmatch_indices":"1:12236:31928"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:43782:7282","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:2837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:682:6448":{"id":"5:682:6448","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:7279:1847":{"id":"1:7279:1847","crate_id":1,"name":"IntoIter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"I"}}}},"1:12209:31922":{"id":"1:12209:31922","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:11852:1700","str::split":"1:12200:2664","prim@char":"4:12030:421","`DoubleEndedIterator`":"1:7310:121","str::rsplit_terminator":"1:12212:31923"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43682:7280","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:2837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12274:28334":{"id":"1:12274:28334","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5509":{"id":"5:5509","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5510:32596","5:5511:8172","5:5514:32597","5:5517:32598","5:5525:32599","5:5526:32600","5:5527:2421","5:5528:28330","5:5529:28331"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:82:1879":{"id":"0:82:1879","crate_id":0,"name":"right_or","span":{"filename":"src/lib.rs","begin":[618,4],"end":[623,5]},"visibility":"public","docs":"Return right value or given value\n\nArguments passed to `right_or` are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use [`right_or_else`],\nwhich is lazily evaluated.\n\n[`right_or_else`]: #method.right_or_else\n\n# Examples\n\n```\n# use either::*;\nlet right: Either<&str, &str> = Right(\"right\");\nassert_eq!(right.right_or(\"foo\"), \"right\");\n\nlet left: Either<&str, &str> = Left(\"left\");\nassert_eq!(left.right_or(\"right\"), \"right\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["other",{"generic":"R"}]],"output":{"generic":"R"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:92":{"id":"0:92","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[811,0],"end":[830,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"1:41671:181","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Option","id":"1:41671:181","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:95:1925"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:28":{"id":"0:28","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[134,0],"end":[149,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2269:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2269:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2269:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:31:425","0:32:427"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2704:228-0:269:1672":{"id":"a:1:2704:228-0:269:1672","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2704:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2704:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2704:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:118:1958":{"id":"0:118:1958","crate_id":0,"name":"into_inner","span":{"filename":"src/lib.rs","begin":[932,4],"end":[934,5]},"visibility":"public","docs":"Extract the value of an either over two equivalent types.\n\n```\nuse either::*;\n\nlet left: Either<_, u32> = Left(123);\nassert_eq!(left.into_inner(), 123);\n\nlet right: Either<u32, _> = Right(123);\nassert_eq!(right.into_inner(), 123);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2543-0:269:1672":{"id":"b:1:2543-0:269:1672","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2520:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2517:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:2546:1919"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:71:1836":{"id":"0:71:1836","crate_id":0,"name":"left_and_then","span":{"filename":"src/lib.rs","begin":[478,4],"end":[486,5]},"visibility":"public","docs":"Apply the function `f` on the value in the `Left` variant if it is present.\n\n```\nuse either::*;\n\nlet left: Either<_, u32> = Left(123);\nassert_eq!(left.left_and_then::<_,()>(|x| Right(x * 2)), Right(246));\n\nlet right: Either<u32, _> = Right(123);\nassert_eq!(right.left_and_then(|x| Right::<(), _>(x * 2)), Right(123));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2935:1778","args":{"parenthesized":{"inputs":[{"generic":"L"}],"output":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}},{"type":{"generic":"R"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:129:1919":{"id":"0:129:1919","crate_id":0,"name":"into","span":{"filename":"src/lib.rs","begin":[971,4],"end":[976,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41815:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"L"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:42:1759":{"id":"0:42:1759","crate_id":0,"name":"as_pin_ref","span":{"filename":"src/lib.rs","begin":[262,4],"end":[271,5]},"visibility":"public","docs":"Convert `Pin<&Either<L, R>>` to `Either<Pin<&L>, Pin<&R>>`,\npinned projections of the inner variants.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"1:41807:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Pin","id":"1:41807:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"L"}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Pin","id":"1:41807:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"R"}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:119:871":{"id":"0:119:871","crate_id":0,"name":"map","span":{"filename":"src/lib.rs","begin":[947,4],"end":[955,5]},"visibility":"public","docs":"Map `f` over the contained value and return the result in the\ncorresponding variant.\n\n```\nuse either::*;\n\nlet value: Either<_, i32> = Right(42);\n\nlet other = value.map(|x| x * 2);\nassert_eq!(other, Right(84));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"M"}},{"type":{"generic":"M"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"M","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2935:1778","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":{"generic":"M"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:139:1848":{"id":"0:139:1848","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[998,4],"end":[998,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"L"},"trait":{"name":"Iterator","id":"1:7418:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"b:1:2613-0:269:1672":{"id":"b:1:2613-0:269:1672","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"1:2606:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2694:2311","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Provider","id":"1:3377:8201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:2615:2662"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"E"}}}},"0:26:1712":{"id":"0:26:1712","crate_id":0,"name":"try_left","span":{"filename":"src/lib.rs","begin":[114,0],"end":[121,1]},"visibility":"public","docs":"Macro for unwrapping the left side of an `Either`, which fails early\nwith the opposite side. Can only be used in functions that return\n`Either` because of the early return of `Right` that it provides.\n\nSee also `try_right!` for its dual, which applies the same just to the\nright side.\n\n# Example\n\n```\nuse either::{Either, Left, Right};\n\nfn twice(wrapper: Either<u32, &str>) -> Either<u32, &str> {\n    let value = either::try_left!(wrapper);\n    Left(value * 2)\n}\n\nfn main() {\n    assert_eq!(twice(Left(2)), Left(4));\n    assert_eq!(twice(Right(\"ups\")), Right(\"ups\"));\n}\n```","links":{},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! try_left {\n    ($expr:expr) => { ... };\n}"}},"1:12165:27745":{"id":"1:12165:27745","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:41673:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41671:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9946:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9946:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:12452-0:269:1672":{"id":"b:1:12452-0:269:1672","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Future","id":"1:12435:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoFuture","id":"1:12448:151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:12454:186","1:12455:151","1:12456:793"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"F"}}}},"0:223":{"id":"0:223","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1296,0],"end":[1304,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Target","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2514:74","args":{"angle_bracketed":{"args":[{"type":{"generic":"Target"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2514:74","args":{"angle_bracketed":{"args":[{"type":{"generic":"Target"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsMut","id":"1:2514:74","args":{"angle_bracketed":{"args":[{"type":{"generic":"Target"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:227:1756"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12250:31935":{"id":"1:12250:31935","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12030:421","self::pattern":"1:11852:1700"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:2837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5510:32596":{"id":"5:5510:32596","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2816","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:2815","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2816","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:2815","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:173:1990":{"id":"0:173:1990","crate_id":0,"name":"rfind","span":{"filename":"src/lib.rs","begin":[1106,4],"end":[1111,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["predicate",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41671:181","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:7418:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2932:1976","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:7418:159","args":null}}}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:208:2014":{"id":"0:208:2014","crate_id":0,"name":"write","span":{"filename":"src/lib.rs","begin":[1220,4],"end":[1222,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"4:2917:210","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:32:427":{"id":"0:32:427","crate_id":0,"name":"clone_from","span":{"filename":"src/lib.rs","begin":[142,4],"end":[148,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["source",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:79:1866":{"id":"0:79:1866","crate_id":0,"name":"left_or_default","span":{"filename":"src/lib.rs","begin":[568,4],"end":[576,5]},"visibility":"public","docs":"Return left or a default\n\n# Examples\n\n```\n# use either::*;\nlet left: Either<String, u32> = Left(\"left\".to_string());\nassert_eq!(left.left_or_default(), \"left\");\n\nlet right: Either<String, u32> = Right(42);\nassert_eq!(right.left_or_default(), String::default());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"L"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:2594:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12162:315":{"id":"1:12162:315","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:12047:1523"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12259:31936":{"id":"1:12259:31936","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12030:421","self::pattern":"1:11852:1700"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:2837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11857:2837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11872:8334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2557:1501":{"id":"1:2557:1501","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41815:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2527:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:251:676":{"id":"0:251:676","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[1365,4],"end":[1367,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9256:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9245:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:179":{"id":"0:179","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1124,0],"end":[1129,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"iter::FusedIterator","id":"1:7718:1992","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"iter::FusedIterator","id":"1:7718:1992","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"L"},"trait":{"name":"","id":"1:7418:159","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7718:1992","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12218:29450":{"id":"1:12218:29450","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:12030:421","str::splitn":"1:12215:29448","self::pattern":"1:11852:1700"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:43754:7221","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:2837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11857:2837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11872:8334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:247:397":{"id":"0:247:397","crate_id":0,"name":"cause","span":{"filename":"src/lib.rs","begin":[1355,4],"end":[1357,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41671:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"1:2606:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12256:29454":{"id":"1:12256:29454","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12030:421","self::pattern":"1:11852:1700"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41671:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:2837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11857:2837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11872:8334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:190:1998":{"id":"0:190:1998","crate_id":0,"name":"read","span":{"filename":"src/lib.rs","begin":[1156,4],"end":[1158,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"4:2917:210","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12278:31940":{"id":"1:12278:31940","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4540:31940"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:43949:7243","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:284":{"id":"0:284","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,15],"end":[49,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::PartialEq","id":"1:2317:188","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::PartialEq","id":"1:2317:188","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2317:188","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:287:618"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:77:794":{"id":"0:77:794","crate_id":0,"name":"into_iter","span":{"filename":"src/lib.rs","begin":[520,4],"end":[529,5]},"visibility":"public","docs":"Convert the inner value to an iterator.\n\n```\nuse either::*;\n\nlet left: Either<_, Vec<u32>> = Left(vec![1, 2, 3, 4, 5]);\nlet mut right: Either<Vec<u32>, _> = Right(vec![]);\nright.extend(left.into_iter());\nassert_eq!(right, Right(vec![1, 2, 3, 4, 5]));\n```","links":{},"attrs":["#[allow(clippy :: should_implement_trait)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"L"},"trait":{"name":"","id":"1:7272:152","args":null}}}},{"type":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"1:7272:152","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7272:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7272:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"L"},"trait":{"name":"","id":"1:7272:152","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12454:186":{"id":"1:12454:186","crate_id":1,"name":"Output","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"Future","id":"1:12435:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"5:5773:1478":{"id":"5:5773:1478","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:340":{"id":"0:340","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1280,0],"end":[1284,1]},"visibility":"default","docs":"Requires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2514:74","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"::std::ffi::CStr","id":"1:40266:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2514:74","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"::std::ffi::CStr","id":"1:40266:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsMut","id":"1:2514:74","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"CStr","id":"1:40266:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:343:1756"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12167:27746":{"id":"1:12167:27746","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9946:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9946:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12172:31920":{"id":"1:12172:31920","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:12036:1420","crate::ops::IndexMut":"1:2988:2297","str::slice_unchecked":"1:12171:31919"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:237:555":{"id":"0:237:555","crate_id":0,"name":"deref","span":{"filename":"src/lib.rs","begin":[1323,4],"end":[1325,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:2901:117","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2744:2312-0:269:1672":{"id":"a:1:2744:2312-0:269:1672","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2744:2312","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2744:2312","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2744:2312","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:89:1911":{"id":"0:89:1911","crate_id":0,"name":"expect_right","span":{"filename":"src/lib.rs","begin":[777,4],"end":[785,5]},"visibility":"public","docs":"Returns the right value\n\n# Examples\n\n```\n# use either::*;\nlet right: Either<(), _> = Right(3);\nassert_eq!(right.expect_right(\"value was Left\"), 3);\n```\n\n# Panics\n\nWhen `Either` is a `Left` value\n\n```should_panic\n# use either::*;\nlet left: Either<_, ()> = Left(3);\nleft.expect_right(\"value was Right\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["msg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"generic":"R"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"core::fmt::Debug","id":"1:9281:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:90:1918":{"id":"0:90:1918","crate_id":0,"name":"either_into","span":{"filename":"src/lib.rs","begin":[799,4],"end":[808,5]},"visibility":"public","docs":"Convert the contained value into `T`\n\n# Examples\n\n```\n# use either::*;\n// Both u16 and u32 can be converted to u64.\nlet left: Either<u16, u32> = Left(3u16);\nassert_eq!(left.either_into::<u64>(), 3u64);\nlet right: Either<u16, u32> = Right(7u32);\nassert_eq!(right.either_into::<u64>(), 7u64);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2517:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2517:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:205":{"id":"0:205","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1215,0],"end":[1235,1]},"visibility":"default","docs":"`Either<L, R>` implements `Write` if both `L` and `R` do.\n\nRequires crate feature `\"use_std\"`","links":{},"attrs":["#[cfg(any(test, feature = \"use_std\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Write","id":"4:3499:1671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Write","id":"4:3499:1671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["write_fmt","is_write_vectored","write_all","write_vectored","write_all_vectored","by_ref"],"trait":{"name":"Write","id":"4:3499:1671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:208:2014","0:209:2015","0:210:2016","0:211:2017"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:36:1724":{"id":"0:36:1724","crate_id":0,"name":"is_left","span":{"filename":"src/lib.rs","begin":[161,4],"end":[166,5]},"visibility":"public","docs":"Return true if the value is the `Left` variant.\n\n```\nuse either::*;\n\nlet values = [Left(1), Right(\"the right value\")];\nassert_eq!(values[0].is_left(), true);\nassert_eq!(values[1].is_left(), false);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:203:2010":{"id":"0:203:2010","crate_id":0,"name":"read_until","span":{"filename":"src/lib.rs","begin":[1202,4],"end":[1204,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["byte",{"primitive":"u8"}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"std::vec::Vec","id":"5:6886:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"4:2917:210","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:287:618":{"id":"0:287:618","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[49,15],"end":[49,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5526:32600":{"id":"5:5526:32600","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2816","`String`":"5:7449:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2816","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:2815","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2558-0:269:1672":{"id":"b:1:2558-0:269:1672","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2517:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2527:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:2561:128","1:2562:1500"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:332":{"id":"0:332","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1275,0],"end":[1279,1]},"visibility":"default","docs":"Requires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2514:74","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"::std::ffi::OsStr","id":"4:1979:184","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2514:74","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"::std::ffi::OsStr","id":"4:1979:184","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsMut","id":"1:2514:74","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"4:1979:184","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:335:1756"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12177:2671":{"id":"1:12177:2671","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43618:2398","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2253-0:269:1672":{"id":"b:1:2253-0:269:1672","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2694:2311","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2247:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:2255:2186"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12268:2052":{"id":"1:12268:2052","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:11813:127","`FromStr`":"1:11812:2843"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41815:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:11812:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:11812:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12239:31929":{"id":"1:12239:31929","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:185:186":{"id":"0:185:186","crate_id":0,"name":"Output","span":{"filename":"src/lib.rs","begin":[1137,4],"end":[1137,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"L"},"trait":{"name":"Future","id":"1:12435:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"0:56:1809":{"id":"0:56:1809","crate_id":0,"name":"map_either_with","span":{"filename":"src/lib.rs","begin":[399,4],"end":[408,5]},"visibility":"public","docs":"Similar to [`map_either`], with an added context `ctx` accessible to\nboth functions.\n\n```\nuse either::*;\n\nlet mut sum = 0;\n\n// Both closures want to update the same value, so pass it as context.\nlet mut f = |sum: &mut usize, s: String| { *sum += s.len(); s.to_uppercase() };\nlet mut g = |sum: &mut usize, u: usize| { *sum += u; u.to_string() };\n\nlet left: Either<String, usize> = Left(\"loopy\".into());\nassert_eq!(left.map_either_with(&mut sum, &mut f, &mut g), Left(\"LOOPY\".into()));\n\nlet right: Either<String, usize> = Right(42);\nassert_eq!(right.map_either_with(&mut sum, &mut f, &mut g), Right(\"42\".into()));\n\nassert_eq!(sum, 47);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["ctx",{"generic":"Ctx"}],["f",{"generic":"F"}],["g",{"generic":"G"}]],"output":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"M"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Ctx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"M","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2935:1778","args":{"parenthesized":{"inputs":[{"generic":"Ctx"},{"generic":"L"}],"output":{"generic":"M"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"G"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2935:1778","args":{"parenthesized":{"inputs":[{"generic":"Ctx"},{"generic":"R"}],"output":{"generic":"S"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:198":{"id":"0:198","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1189,0],"end":[1209,1]},"visibility":"default","docs":"Requires crate feature `\"use_std\"`","links":{},"attrs":["#[cfg(any(test, feature = \"use_std\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"BufRead","id":"4:3524:1667","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"BufRead","id":"4:3524:1667","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["split","read_until","has_data_left","read_line","lines"],"trait":{"name":"BufRead","id":"4:3524:1667","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:201:2007","0:202:2008","0:203:2010","0:204:2012"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:106":{"id":"0:106","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[878,0],"end":[897,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"generic":"T"},{"generic":"L"}]}},{"type":{"tuple":[{"generic":"T"},{"generic":"R"}]}}],"bindings":[]}}}},"items":["0:110:1947"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12270:28328":{"id":"1:12270:28328","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:299":{"id":"0:299","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,42],"end":[49,45]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::Ord","id":"1:2353:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::Ord","id":"1:2353:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clamp","max","min"],"trait":{"name":"Ord","id":"1:2353:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:302:432"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:210:2016":{"id":"0:210:2016","crate_id":0,"name":"write_fmt","span":{"filename":"src/lib.rs","begin":[1228,4],"end":[1230,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["fmt",{"resolved_path":{"name":"fmt::Arguments","id":"1:42767:73","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"4:2917:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:295":{"id":"0:295","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,30],"end":[49,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::PartialOrd","id":"1:2359:189","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::PartialOrd","id":"1:2359:189","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["lt","ge","le","gt"],"trait":{"name":"PartialOrd","id":"1:2359:189","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:298:1047"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12161:316":{"id":"1:12161:316","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:12162:315","`u8`":"4:12047:1523"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:218":{"id":"0:218","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1286,0],"end":[1294,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Target","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2511:75","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"Target"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2511:75","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"Target"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2511:75","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"Target"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:222:317"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12247:31934":{"id":"1:12247:31934","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:12030:421","self::pattern":"1:11852:1700"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:2837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11857:2837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:11877:8333","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12236:31928":{"id":"1:12236:31928","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:11852:1700","`DoubleEndedIterator`":"1:7310:121","prim@char":"4:12030:421","str::match_indices":"1:12233:31927"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:43800:7283","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:2837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11857:2837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11872:8334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:204:2012":{"id":"0:204:2012","crate_id":0,"name":"read_line","span":{"filename":"src/lib.rs","begin":[1206,4],"end":[1208,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"std::string::String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"4:2917:210","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:101":{"id":"0:101","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[855,0],"end":[876,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Result","id":"1:41815:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"L"}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Result","id":"1:41815:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"R"}}],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:105:1939"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:7278:1848":{"id":"1:7278:1848","crate_id":1,"name":"Item","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"Iterator","id":"1:7418:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"1:12273:28333":{"id":"1:12273:28333","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:186:1063":{"id":"0:186:1063","crate_id":0,"name":"poll","span":{"filename":"src/lib.rs","begin":[1139,4],"end":[1144,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"1:41807:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}],["cx",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"core::task::Context","id":"1:12642:107","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"core::task::Poll","id":"1:44566:195","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:12435:136","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:147:507":{"id":"0:147:507","crate_id":0,"name":"count","span":{"filename":"src/lib.rs","begin":[1022,4],"end":[1024,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12151:823":{"id":"1:12151:823","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:12030:421"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12150":{"id":"1:12150","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:12151:823","1:12152:2682","1:12153:31915","1:12154:31916","1:12156:31917","1:12159:28787","1:12160:31918","1:12161:316","1:12162:315","1:12163:27744","1:12165:27745","1:12167:27746","1:12169:1763","1:12171:31919","1:12172:31920","1:12173:29436","1:12174:29437","1:12175:7235","1:12176:7296","1:12177:2671","1:12178:24522","1:12179:24492","1:12180:2665","1:12181:31921","1:12182:24512","1:12183:27542","1:12186:29452","1:12189:29453","1:12192:1984","1:12196:1990","1:12200:2664","1:12203:24510","1:12206:29446","1:12209:31922","1:12212:31923","1:12215:29448","1:12218:29450","1:12221:31924","1:12224:31925","1:12227:2225","1:12230:31926","1:12233:31927","1:12236:31928","1:12239:31929","1:12241:31930","1:12243:31931","1:12245:31932","1:12246:31933","1:12247:31934","1:12250:31935","1:12253:28522","1:12256:29454","1:12259:31936","1:12262:31937","1:12265:31938","1:12268:2052","1:12270:28328","1:12271:30543","1:12272:28332","1:12273:28333","1:12274:28334","1:12275:31939","1:12277:8219","1:12278:31940"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:105:1939":{"id":"0:105:1939","crate_id":0,"name":"factor_ok","span":{"filename":"src/lib.rs","begin":[870,4],"end":[875,5]},"visibility":"public","docs":"Factors out a homogenous type from an `Either` of [`Result`].\n\nHere, the homogeneous type is the `Ok` type of the [`Result`].\n\n```\nuse either::*;\nlet left: Either<_, Result<u32, String>> = Left(Err(vec![0]));\nassert_eq!(left.factor_ok(), Err(Left(vec![0])));\n\nlet right: Either<Result<u32, Vec<u8>>, _> = Right(Err(String::new()));\nassert_eq!(right.factor_ok(), Err(Right(String::new())));\n```","links":{"`Result`":"1:41815:210"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41815:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2258:24316":{"id":"1:2258:24316","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:192:2001":{"id":"0:192:2001","crate_id":0,"name":"read_to_end","span":{"filename":"src/lib.rs","begin":[1164,4],"end":[1166,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"std::vec::Vec","id":"5:6886:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"4:2917:210","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86:1896":{"id":"0:86:1896","crate_id":0,"name":"unwrap_left","span":{"filename":"src/lib.rs","begin":[688,4],"end":[698,5]},"visibility":"public","docs":"Returns the left value\n\n# Examples\n\n```\n# use either::*;\nlet left: Either<_, ()> = Left(3);\nassert_eq!(left.unwrap_left(), 3);\n```\n\n# Panics\n\nWhen `Either` is a `Right` value\n\n```should_panic\n# use either::*;\nlet right: Either<(), _> = Right(3);\nright.unwrap_left();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"L"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"core::fmt::Debug","id":"1:9281:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2561:128":{"id":"1:2561:128","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32173:2257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:241:557":{"id":"0:241:557","crate_id":0,"name":"deref_mut","span":{"filename":"src/lib.rs","begin":[1333,4],"end":[1335,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:2901:117","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12455:151":{"id":"1:12455:151","crate_id":1,"name":"IntoFuture","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"F"}}}},"0:116":{"id":"0:116","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[920,0],"end":[956,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:118:1958","0:119:871"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:161:1987":{"id":"0:161:1987","crate_id":0,"name":"find_map","span":{"filename":"src/lib.rs","begin":[1070,4],"end":[1075,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Option","id":"1:41671:181","args":{"angle_bracketed":{"args":[{"type":{"generic":"B"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2932:1976","args":{"parenthesized":{"inputs":[{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:7418:159","args":null}}}],"output":{"resolved_path":{"name":"Option","id":"1:41671:181","args":{"angle_bracketed":{"args":[{"type":{"generic":"B"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:328":{"id":"0:328","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1275,0],"end":[1279,1]},"visibility":"default","docs":"Requires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2511:75","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"::std::ffi::OsStr","id":"4:1979:184","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2511:75","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"::std::ffi::OsStr","id":"4:1979:184","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2511:75","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"4:1979:184","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:331:317"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12200:2664":{"id":"1:12200:2664","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:11852:1700","`DoubleEndedIterator`":"1:7310:121","prim@char":"4:12030:421","str::split_whitespace":"1:12178:24522","str::rsplit":"1:12206:29446"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43632:2399","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:2837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:245:1717":{"id":"0:245:1717","crate_id":0,"name":"source","span":{"filename":"src/lib.rs","begin":[1345,4],"end":[1347,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41671:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"1:2606:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:228":{"id":"0:228","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1306,0],"end":[1314,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Target","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2514:74","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"Target"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2514:74","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"Target"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsMut","id":"1:2514:74","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"Target"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:232:1756"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12215:29448":{"id":"1:12215:29448","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:12030:421","self::pattern":"1:11852:1700","str::rsplitn":"1:12218:29450"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43736:7220","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:2837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:336":{"id":"0:336","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1280,0],"end":[1284,1]},"visibility":"default","docs":"Requires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2511:75","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"::std::ffi::CStr","id":"1:40266:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2511:75","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"::std::ffi::CStr","id":"1:40266:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2511:75","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"CStr","id":"1:40266:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:339:317"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:80:1872":{"id":"0:80:1872","crate_id":0,"name":"left_or_else","span":{"filename":"src/lib.rs","begin":[590,4],"end":[598,5]},"visibility":"public","docs":"Returns left value or computes it from a closure\n\n# Examples\n\n```\n# use either::*;\nlet left: Either<String, u32> = Left(\"3\".to_string());\nassert_eq!(left.left_or_else(|_| unreachable!()), \"3\");\n\nlet right: Either<String, u32> = Right(3);\nassert_eq!(right.left_or_else(|x| x.to_string()), \"3\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"generic":"L"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2935:1778","args":{"parenthesized":{"inputs":[{"generic":"R"}],"output":{"generic":"L"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:193:2002":{"id":"0:193:2002","crate_id":0,"name":"read_to_string","span":{"filename":"src/lib.rs","begin":[1168,4],"end":[1170,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"std::string::String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"4:2917:210","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:39:1739":{"id":"0:39:1739","crate_id":0,"name":"right","span":{"filename":"src/lib.rs","begin":[210,4],"end":[215,5]},"visibility":"public","docs":"Convert the right side of `Either<L, R>` to an `Option<R>`.\n\n```\nuse either::*;\n\nlet left: Either<_, ()> = Left(\"some value\");\nassert_eq!(left.right(),  None);\n\nlet right: Either<(), _> = Right(321);\nassert_eq!(right.right(), Some(321));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"1:41671:181","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:191:2000":{"id":"0:191:2000","crate_id":0,"name":"read_exact","span":{"filename":"src/lib.rs","begin":[1160,4],"end":[1162,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"4:2917:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12212:31923":{"id":"1:12212:31923","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:11852:1700","str::split":"1:12200:2664","prim@char":"4:12030:421","str::split_terminator":"1:12209:31922"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43700:7281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:2837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11857:2837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11872:8334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:194":{"id":"0:194","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1177,0],"end":[1185,1]},"visibility":"default","docs":"`Either<L, R>` implements `Seek` if both `L` and `R` do.\n\nRequires crate feature `\"use_std\"`","links":{},"attrs":["#[cfg(any(test, feature = \"use_std\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Seek","id":"4:3517:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Seek","id":"4:3517:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["rewind","stream_len","stream_position"],"trait":{"name":"Seek","id":"4:3517:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:197:2005"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12221:31924":{"id":"1:12221:31924","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41671:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:2837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:291":{"id":"0:291","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,26],"end":[49,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::Eq","id":"1:2322:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::Eq","id":"1:2322:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2322:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5517:32598":{"id":"5:5517:32598","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7449:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:209:2015":{"id":"0:209:2015","crate_id":0,"name":"write_all","span":{"filename":"src/lib.rs","begin":[1224,4],"end":[1226,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"4:2917:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:78:1860":{"id":"0:78:1860","crate_id":0,"name":"left_or","span":{"filename":"src/lib.rs","begin":[549,4],"end":[554,5]},"visibility":"public","docs":"Return left value or given value\n\nArguments passed to `left_or` are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use [`left_or_else`],\nwhich is lazily evaluated.\n\n[`left_or_else`]: #method.left_or_else\n\n# Examples\n\n```\n# use either::*;\nlet left: Either<&str, &str> = Left(\"left\");\nassert_eq!(left.left_or(\"foo\"), \"left\");\n\nlet right: Either<&str, &str> = Right(\"right\");\nassert_eq!(right.left_or(\"left\"), \"left\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["other",{"generic":"L"}]],"output":{"generic":"L"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:48:1783":{"id":"0:48:1783","crate_id":0,"name":"map_right","span":{"filename":"src/lib.rs","begin":[341,4],"end":[349,5]},"visibility":"public","docs":"Apply the function `f` on the value in the `Right` variant if it is present rewrapping the\nresult in `Right`.\n\n```\nuse either::*;\n\nlet left: Either<_, u32> = Left(123);\nassert_eq!(left.map_right(|x| x * 2), Left(123));\n\nlet right: Either<u32, _> = Right(123);\nassert_eq!(right.map_right(|x| x * 2), Right(246));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2935:1778","args":{"parenthesized":{"inputs":[{"generic":"R"}],"output":{"generic":"S"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12272:28332":{"id":"1:12272:28332","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:303":{"id":"0:303","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,47],"end":[49,51]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hash","id":"1:9497:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hash","id":"1:9497:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:9497:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:306:737"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5511:8172":{"id":"5:5511:8172","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7449:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:2837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12456:793":{"id":"1:12456:793","crate_id":1,"name":"into_future","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoFuture","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"IntoFuture","id":"1:12448:151","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:45:1775":{"id":"0:45:1775","crate_id":0,"name":"map_left","span":{"filename":"src/lib.rs","begin":[319,4],"end":[327,5]},"visibility":"public","docs":"Apply the function `f` on the value in the `Left` variant if it is present rewrapping the\nresult in `Left`.\n\n```\nuse either::*;\n\nlet left: Either<_, u32> = Left(123);\nassert_eq!(left.map_left(|x| x * 2), Left(246));\n\nlet right: Either<u32, _> = Right(123);\nassert_eq!(right.map_left(|x| x * 2), Right(123));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"M"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"M","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2935:1778","args":{"parenthesized":{"inputs":[{"generic":"L"}],"output":{"generic":"M"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:319:1756":{"id":"0:319:1756","crate_id":0,"name":"as_mut","span":{"filename":"src/lib.rs","begin":[1269,0],"end":[1269,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:684:24323":{"id":"5:684:24323","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:343:1756":{"id":"0:343:1756","crate_id":0,"name":"as_mut","span":{"filename":"src/lib.rs","begin":[1280,0],"end":[1284,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"::std::ffi::CStr","id":"1:40266:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:327:1756":{"id":"0:327:1756","crate_id":0,"name":"as_mut","span":{"filename":"src/lib.rs","begin":[1270,0],"end":[1274,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"::std::path::Path","id":"4:5238:190","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:324":{"id":"0:324","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1270,0],"end":[1274,1]},"visibility":"default","docs":"Requires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2514:74","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"::std::path::Path","id":"4:5238:190","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2514:74","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"::std::path::Path","id":"4:5238:190","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsMut","id":"1:2514:74","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"4:5238:190","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:327:1756"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:308":{"id":"0:308","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,53],"end":[49,58]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"1:9281:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"1:9281:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9281:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:311:676"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12160:31918":{"id":"1:12160:31918","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:96":{"id":"0:96","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[832,0],"end":[853,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Result","id":"1:41815:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"E"}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Result","id":"1:41815:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"E"}}],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:100:1933"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:236:230":{"id":"0:236:230","crate_id":0,"name":"Target","span":{"filename":"src/lib.rs","begin":[1321,4],"end":[1321,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"L"},"trait":{"name":"Deref","id":"1:2901:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"0:316":{"id":"0:316","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1269,0],"end":[1269,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2514:74","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2514:74","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsMut","id":"1:2514:74","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:319:1756"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5529:28331":{"id":"5:5529:28331","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:12274:28334"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12159:28787":{"id":"1:12159:28787","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11412:2051"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:44:1768":{"id":"0:44:1768","crate_id":0,"name":"flip","span":{"filename":"src/lib.rs","begin":[300,4],"end":[305,5]},"visibility":"public","docs":"Convert `Either<L, R>` to `Either<R, L>`.\n\n```\nuse either::*;\n\nlet left: Either<_, ()> = Left(123);\nassert_eq!(left.flip(), Right(123));\n\nlet right: Either<(), _> = Right(\"some value\");\nassert_eq!(right.flip(), Left(\"some value\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"L"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:315:317":{"id":"0:315:317","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[1269,0],"end":[1269,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3325:1514":{"id":"1:3325:1514","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:39494:5907","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12175:7235":{"id":"1:12175:7235","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:12030:421"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43602:2840","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:232:1756":{"id":"0:232:1756","crate_id":0,"name":"as_mut","span":{"filename":"src/lib.rs","begin":[1311,4],"end":[1313,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"generic":"Target"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:66:1832":{"id":"0:66:1832","crate_id":0,"name":"either_with","span":{"filename":"src/lib.rs","begin":[456,4],"end":[465,5]},"visibility":"public","docs":"Like `either`, but provide some context to whichever of the\nfunctions ends up being called.\n\n```\n// In this example, the context is a mutable reference\nuse either::*;\n\nlet mut result = Vec::new();\n\nlet values = vec![Left(2), Right(2.7)];\n\nfor value in values {\n    value.either_with(&mut result,\n                      |ctx, integer| ctx.push(integer),\n                      |ctx, real| ctx.push(f64::round(real) as i32));\n}\n\nassert_eq!(result, vec![2, 3]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["ctx",{"generic":"Ctx"}],["f",{"generic":"F"}],["g",{"generic":"G"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[{"name":"Ctx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2935:1778","args":{"parenthesized":{"inputs":[{"generic":"Ctx"},{"generic":"L"}],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"G"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2935:1778","args":{"parenthesized":{"inputs":[{"generic":"Ctx"},{"generic":"R"}],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12246:31933":{"id":"1:12246:31933","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:197:2005":{"id":"0:197:2005","crate_id":0,"name":"seek","span":{"filename":"src/lib.rs","begin":[1182,4],"end":[1184,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["pos",{"resolved_path":{"name":"SeekFrom","id":"4:8173:1670","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"4:2917:210","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12186:29452":{"id":"1:12186:29452","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"4:12030:421","self::pattern":"1:11852:1700"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:2837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12271:30543":{"id":"1:12271:30543","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39702:24399","Self::is_ascii":"1:12270:28328"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41671:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39702:24399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:233":{"id":"0:233","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1316,0],"end":[1326,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Deref","id":"1:2901:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Deref","id":"1:2901:117","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"L"},"trait":{"name":"","id":"1:2901:117","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:2901:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:236:230","0:237:555"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:126":{"id":"0:126","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[970,0],"end":[977,1]},"visibility":"default","docs":"Convert from `Either` to `Result` with `Right => Ok` and `Left => Err`.","links":{},"attrs":["#[allow(clippy :: from_over_into)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2517:149","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Result","id":"1:41815:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"L"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:129:1919"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12180:2665":{"id":"1:12180:2665","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:43886:2395","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12156:31917":{"id":"1:12156:31917","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:12154:31916"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:130":{"id":"0:130","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[979,0],"end":[990,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Extend","id":"1:7281:1969","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Extend","id":"1:7281:1969","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["extend_reserve","extend_one"],"trait":{"name":"Extend","id":"1:7281:1969","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:134:1970"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:157:305":{"id":"0:157:305","crate_id":0,"name":"any","span":{"filename":"src/lib.rs","begin":[1056,4],"end":[1061,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2932:1976","args":{"parenthesized":{"inputs":[{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:7418:159","args":null}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:222:317":{"id":"0:222:317","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[1291,4],"end":[1293,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"Target"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:269:1672":{"id":"0:269:1672","crate_id":0,"name":"Either","span":{"filename":"src/lib.rs","begin":[50,0],"end":[55,1]},"visibility":"public","docs":"The enum `Either` with variants `Left` and `Right` is a general purpose\nsum type with two cases.\n\nThe `Either` type is symmetric and treats its variants the same way, without\npreference.\n(For representing success or error, use the regular `Result` enum instead.)","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"variants_stripped":false,"variants":["0:272:162","0:275:213"],"impls":["0:33","0:92","0:96","0:101","0:106","0:111","0:116","a:1:2704:228-0:269:1672","a:1:8388:2465-0:269:1672","a:1:2687:220-0:269:1672","a:1:2744:2312-0:269:1672","a:1:8387:2466-0:269:1672","b:1:2256-0:269:1672","b:1:2253-0:269:1672","b:1:2558-0:269:1672","b:1:2613-0:269:1672","b:1:12452-0:269:1672","b:1:2543-0:269:1672","b:1:7276-0:269:1672","b:1:2547-0:269:1672","b:1:3323-0:269:1672","b:1:2553-0:269:1672","b:5:5771-0:269:1672","b:5:680-0:269:1672","0:182","0:238","0:233","0:299","0:312","0:281","0:336","0:248","0:303","0:130","0:212","0:332","0:187","0:340","0:136","0:242","0:328","0:295","0:291","0:198","0:324","0:166","0:205","0:320","0:308","0:284","0:122","0:126","0:175","0:223","0:28","0:194","0:288","0:218","0:228","0:278","0:316","0:179"]}}},"0:201:2007":{"id":"0:201:2007","crate_id":0,"name":"fill_buf","span":{"filename":"src/lib.rs","begin":[1194,4],"end":[1196,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"4:2917:210","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:37:1728":{"id":"0:37:1728","crate_id":0,"name":"is_right","span":{"filename":"src/lib.rs","begin":[177,4],"end":[179,5]},"visibility":"public","docs":"Return true if the value is the `Right` variant.\n\n```\nuse either::*;\n\nlet values = [Left(1), Right(\"the right value\")];\nassert_eq!(values[0].is_right(), false);\nassert_eq!(values[1].is_right(), true);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:150:1981":{"id":"0:150:1981","crate_id":0,"name":"collect","span":{"filename":"src/lib.rs","begin":[1034,4],"end":[1039,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"B"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"B"},"bounds":[{"trait_bound":{"trait":{"name":"iter::FromIterator","id":"1:7268:134","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:7418:159","args":null}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:238":{"id":"0:238","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1328,0],"end":[1336,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"DerefMut","id":"1:2914:1664","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"DerefMut","id":"1:2914:1664","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"L"},"trait":{"name":"","id":"1:2901:117","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"1:2914:1664","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:241:557"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:175":{"id":"0:175","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1114,0],"end":[1122,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"ExactSizeIterator","id":"1:7363:1991","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"ExactSizeIterator","id":"1:7363:1991","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"L"},"trait":{"name":"","id":"1:7418:159","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:7363:1991","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:178:823"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:33":{"id":"0:33","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[151,0],"end":[809,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:36:1724","0:37:1728","0:38:1734","0:39:1739","0:40:317","0:41:1756","0:42:1759","0:43:1762","0:44:1768","0:45:1775","0:48:1783","0:51:1795","0:56:1809","0:62:1821","0:66:1832","0:71:1836","0:74:1840","0:77:794","0:78:1860","0:79:1866","0:80:1872","0:82:1879","0:83:1883","0:84:1887","0:86:1896","0:87:1902","0:88:1906","0:89:1911","0:90:1918"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12174:29437":{"id":"1:12174:29437","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:12173:29436"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12241:31930":{"id":"1:12241:31930","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:298:1047":{"id":"0:298:1047","crate_id":0,"name":"partial_cmp","span":{"filename":"src/lib.rs","begin":[49,30],"end":[49,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"1:41671:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"1:30989:183","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2547-0:269:1672":{"id":"b:1:2547-0:269:1672","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2520:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:2549:702"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:680-0:269:1672":{"id":"b:5:680-0:269:1672","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2269:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["5:682:6448","5:683:24322","5:684:24323"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12189:29453":{"id":"1:12189:29453","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:12030:421","self::pattern":"1:11852:1700"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:2837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11857:2837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11872:8334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:136":{"id":"0:136","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[993,0],"end":[1083,1]},"visibility":"default","docs":"`Either<L, R>` is an iterator if both `L` and `R` are iterators.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7418:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7418:159","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"L"},"trait":{"name":"","id":"1:7418:159","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["zip","collect","max_by_key","any","by_ref","is_sorted_by","sum","rev","try_fold","fuse","skip_while","intersperse","min","count","is_sorted_by_key","product","unzip","try_for_each","inspect","take_while","intersperse_with","partition","min_by","for_each","chain","eq","__iterator_get_unchecked","cmp_by","gt","copied","lt","reduce","try_collect","ge","map_while","filter","find","next_chunk","last","min_by_key","size_hint","position","partial_cmp_by","cloned","try_reduce","collect_into","scan","filter_map","max","advance_by","nth","fold","ne","eq_by","take","cycle","try_find","partial_cmp","partition_in_place","flat_map","enumerate","max_by","step_by","le","cmp","skip","map","is_sorted","all","array_chunks","rposition","is_partitioned","flatten","peekable","find_map"],"trait":{"name":"Iterator","id":"1:7418:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:139:1848","0:140:965","0:141:1972","0:142:1973","0:145:1977","0:147:507","0:148:1978","0:149:1979","0:150:1981","0:152:1983","0:155:286","0:157:305","0:159:1984","0:161:1987","0:164:1064"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2615:2662":{"id":"1:2615:2662","crate_id":1,"name":"provide","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["demand",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Demand","id":"1:3389:7194","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:41:1756":{"id":"0:41:1756","crate_id":0,"name":"as_mut","span":{"filename":"src/lib.rs","begin":[253,4],"end":[258,5]},"visibility":"public","docs":"Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.\n\n```\nuse either::*;\n\nfn mutate_left(value: &mut Either<u32, u32>) {\n    if let Some(l) = value.as_mut().left() {\n        *l = 999;\n    }\n}\n\nlet mut left = Left(123);\nlet mut right = Right(123);\nmutate_left(&mut left);\nmutate_left(&mut right);\nassert_eq!(left, Left(999));\nassert_eq!(right, Right(123));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"L"}}}},{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"R"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3323-0:269:1672":{"id":"b:1:3323-0:269:1672","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2694:2311","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3321:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:3325:1514"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12179:24492":{"id":"1:12179:24492","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:12178:24522"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:43915:7288","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12253:28522":{"id":"1:12253:28522","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12030:421","self::pattern":"1:11852:1700"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41671:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:2837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12173:29436":{"id":"1:12173:29436","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:12174:29437"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2556:128":{"id":"1:2556:128","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2527:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:248":{"id":"0:248","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1360,0],"end":[1368,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"1:9286:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"1:9286:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:9286:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:251:676"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:43:1762":{"id":"0:43:1762","crate_id":0,"name":"as_pin_mut","span":{"filename":"src/lib.rs","begin":[275,4],"end":[287,5]},"visibility":"public","docs":"Convert `Pin<&mut Either<L, R>>` to `Either<Pin<&mut L>, Pin<&mut R>>`,\npinned projections of the inner variants.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"1:41807:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Pin","id":"1:41807:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"L"}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Pin","id":"1:41807:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"R"}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:164:1064":{"id":"0:164:1064","crate_id":0,"name":"position","span":{"filename":"src/lib.rs","begin":[1077,4],"end":[1082,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["predicate",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41671:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2932:1976","args":{"parenthesized":{"inputs":[{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:7418:159","args":null}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5514:32597":{"id":"5:5514:32597","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7449:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:2837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8388:2465-0:269:1672":{"id":"a:1:8388:2465-0:269:1672","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8388:2465","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8388:2465","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8388:2465","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12227:2225":{"id":"1:12227:2225","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:11852:1700","`DoubleEndedIterator`":"1:7310:121","prim@char":"4:12030:421","str::rmatches":"1:12230:31926"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:43836:7284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:2837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:216:317":{"id":"0:216:317","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[1242,4],"end":[1244,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Target"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:27:1715":{"id":"0:27:1715","crate_id":0,"name":"try_right","span":{"filename":"src/lib.rs","begin":[125,0],"end":[132,1]},"visibility":"public","docs":"Dual to `try_left!`, see its documentation for more information.","links":{},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! try_right {\n    ($expr:expr) => { ... };\n}"}},"0:142:1973":{"id":"0:142:1973","crate_id":0,"name":"fold","span":{"filename":"src/lib.rs","begin":[1008,4],"end":[1013,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["init",{"generic":"Acc"}],["f",{"generic":"G"}]],"output":{"generic":"Acc"},"c_variadic":false},"generics":{"params":[{"name":"Acc","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"G"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2932:1976","args":{"parenthesized":{"inputs":[{"generic":"Acc"},{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:7418:159","args":null}}}],"output":{"generic":"Acc"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12163:27744":{"id":"1:12163:27744","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:41673:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41671:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9946:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9946:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12154:31916":{"id":"1:12154:31916","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:274:1630":{"id":"0:274:1630","crate_id":0,"name":"0","span":{"filename":"src/lib.rs","begin":[52,9],"end":[52,10]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"generic":"L"}}},"1:12243:31931":{"id":"1:12243:31931","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:148:1978":{"id":"0:148:1978","crate_id":0,"name":"last","span":{"filename":"src/lib.rs","begin":[1026,4],"end":[1028,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"1:41671:181","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:7418:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:40:317":{"id":"0:40:317","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[228,4],"end":[233,5]},"visibility":"public","docs":"Convert `&Either<L, R>` to `Either<&L, &R>`.\n\n```\nuse either::*;\n\nlet left: Either<_, ()> = Left(\"some value\");\nassert_eq!(left.as_ref(), Left(&\"some value\"));\n\nlet right: Either<(), _> = Right(\"some value\");\nassert_eq!(right.as_ref(), Right(&\"some value\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"L"}}}},{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"R"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:140:965":{"id":"0:140:965","crate_id":0,"name":"next","span":{"filename":"src/lib.rs","begin":[1000,4],"end":[1002,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41671:181","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:7418:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2549:702":{"id":"1:2549:702","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:88:1906":{"id":"0:88:1906","crate_id":0,"name":"expect_left","span":{"filename":"src/lib.rs","begin":[748,4],"end":[756,5]},"visibility":"public","docs":"Returns the left value\n\n# Examples\n\n```\n# use either::*;\nlet left: Either<_, ()> = Left(3);\nassert_eq!(left.expect_left(\"value was Right\"), 3);\n```\n\n# Panics\n\nWhen `Either` is a `Right` value\n\n```should_panic\n# use either::*;\nlet right: Either<(), _> = Right(3);\nright.expect_left(\"value was Right\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["msg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"generic":"L"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"core::fmt::Debug","id":"1:9281:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:38:1734":{"id":"0:38:1734","crate_id":0,"name":"left","span":{"filename":"src/lib.rs","begin":[192,4],"end":[197,5]},"visibility":"public","docs":"Convert the left side of `Either<L, R>` to an `Option<L>`.\n\n```\nuse either::*;\n\nlet left: Either<_, ()> = Left(\"some value\");\nassert_eq!(left.left(),  Some(\"some value\"));\n\nlet right: Either<(), _> = Right(321);\nassert_eq!(right.left(), None);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"1:41671:181","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2256-0:269:1672":{"id":"b:1:2256-0:269:1672","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2694:2311","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2250:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:2258:24316"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:149:1979":{"id":"0:149:1979","crate_id":0,"name":"nth","span":{"filename":"src/lib.rs","begin":[1030,4],"end":[1032,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:41671:181","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:7418:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:152:1983":{"id":"0:152:1983","crate_id":0,"name":"partition","span":{"filename":"src/lib.rs","begin":[1041,4],"end":[1047,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"tuple":[{"generic":"B"},{"generic":"B"}]},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"B"},"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:2594:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Extend","id":"1:7281:1969","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:7418:159","args":null}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2932:1976","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:7418:159","args":null}}}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:246:2021":{"id":"0:246:2021","crate_id":0,"name":"description","span":{"filename":"src/lib.rs","begin":[1350,4],"end":[1352,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:122":{"id":"0:122","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[959,0],"end":[966,1]},"visibility":"default","docs":"Convert from `Result` to `Either` with `Ok => Right` and `Err => Left`.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2520:133","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Result","id":"1:41815:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"L"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:125:702"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:278":{"id":"0:278","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,9],"end":[49,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::marker::Copy","id":"1:2699:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::marker::Copy","id":"1:2699:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2699:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12153:31915":{"id":"1:12153:31915","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12206:29446":{"id":"1:12206:29446","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:11852:1700","`DoubleEndedIterator`":"1:7310:121","prim@char":"4:12030:421","str::split":"1:12200:2664"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43650:7218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:2837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11857:2837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11872:8334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5525:32599":{"id":"5:5525:32599","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7449:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12245:31932":{"id":"1:12245:31932","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:275:213":{"id":"0:275:213","crate_id":0,"name":"Right","span":{"filename":"src/lib.rs","begin":[54,4],"end":[54,12]},"visibility":"default","docs":"A value of type `R`.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:277:1630"]},"discriminant":null}}},"0:110:1947":{"id":"0:110:1947","crate_id":0,"name":"factor_first","span":{"filename":"src/lib.rs","begin":[891,4],"end":[896,5]},"visibility":"public","docs":"Factor out a homogeneous type from an either of pairs.\n\nHere, the homogeneous type is the first element of the pairs.\n\n```\nuse either::*;\nlet left: Either<_, (u32, String)> = Left((123, vec![0]));\nassert_eq!(left.factor_first().0, 123);\n\nlet right: Either<(u32, Vec<u8>), _> = Right((123, String::new()));\nassert_eq!(right.factor_first().0, 123);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"tuple":[{"generic":"T"},{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:182":{"id":"0:182","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1132,0],"end":[1145,1]},"visibility":"default","docs":"`Either<L, R>` is a future if both `L` and `R` are futures.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Future","id":"1:12435:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Future","id":"1:12435:136","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"L"},"trait":{"name":"","id":"1:12435:136","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Future","id":"1:12435:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:185:186","0:186:1063"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:302:432":{"id":"0:302:432","crate_id":0,"name":"cmp","span":{"filename":"src/lib.rs","begin":[49,42],"end":[49,45]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"1:30989:183","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:125:702":{"id":"0:125:702","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[960,4],"end":[965,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["r",{"resolved_path":{"name":"Result","id":"1:41815:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"L"}}],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12196:1990":{"id":"1:12196:1990","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:41673:179","prim@char":"4:12030:421","self::pattern":"1:11852:1700"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41671:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:2837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11857:2837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11872:8334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12262:31937":{"id":"1:12262:31937","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12030:421","self::pattern":"1:11852:1700"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:2837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:211:2017":{"id":"0:211:2017","crate_id":0,"name":"flush","span":{"filename":"src/lib.rs","begin":[1232,4],"end":[1234,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"4:2917:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12171:31919":{"id":"1:12171:31919","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:12036:1420","str::slice_mut_unchecked":"1:12172:31920","crate::ops::Index":"1:2984:2296"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:25:1698":{"id":"0:25:1698","crate_id":0,"name":"for_both","span":{"filename":"src/lib.rs","begin":[82,0],"end":[89,1]},"visibility":"public","docs":"Evaluate the provided expression for both [`Either::Left`] and [`Either::Right`].\n\nThis macro is useful in cases where both sides of [`Either`] can be interacted with\nin the same way even though the don't share the same type.\n\nSyntax: `either::for_both!(` *expression* `,` *pattern* `=>` *expression* `)`\n\n# Example\n\n```\nuse either::Either;\n\nfn length(owned_or_borrowed: Either<String, &'static str>) -> usize {\n    either::for_both!(owned_or_borrowed, s => s.len())\n}\n\nfn main() {\n    let borrowed = Either::Right(\"Hello world!\");\n    let owned = Either::Left(\"Hello world!\".to_owned());\n\n    assert_eq!(length(borrowed), 12);\n    assert_eq!(length(owned), 12);\n}\n```","links":{"`Either::Right`":"0:275:213","`Either`":"0:269:1672","`Either::Left`":"0:272:162"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! for_both {\n    ($value:expr, $pattern:pat => $result:expr) => { ... };\n}"}},"0:87:1902":{"id":"0:87:1902","crate_id":0,"name":"unwrap_right","span":{"filename":"src/lib.rs","begin":[719,4],"end":[727,5]},"visibility":"public","docs":"Returns the right value\n\n# Examples\n\n```\n# use either::*;\nlet right: Either<(), _> = Right(3);\nassert_eq!(right.unwrap_right(), 3);\n```\n\n# Panics\n\nWhen `Either` is a `Left` value\n\n```should_panic\n# use either::*;\nlet left: Either<_, ()> = Left(3);\nleft.unwrap_right();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"R"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"core::fmt::Debug","id":"1:9281:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:7276-0:269:1672":{"id":"b:1:7276-0:269:1672","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7418:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7272:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:7278:1848","1:7279:1847","1:7280:794"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:24-0:275:213":{"id":"0:24-0:275:213","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[40,30],"end":[40,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::Either::Right","name":"Right","id":"0:275:213","glob":false}}},"0:339:317":{"id":"0:339:317","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[1280,0],"end":[1284,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"::std::ffi::CStr","id":"1:40266:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:187":{"id":"0:187","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1151,0],"end":[1171,1]},"visibility":"default","docs":"`Either<L, R>` implements `Read` if both `L` and `R` do.\n\nRequires crate feature `\"use_std\"`","links":{},"attrs":["#[cfg(any(test, feature = \"use_std\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Read","id":"4:3442:1668","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Read","id":"4:3442:1668","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["read_exact","read_buf_exact","read_vectored","chain","take","read_to_end","by_ref","is_read_vectored","read_to_string","bytes","read_buf"],"trait":{"name":"Read","id":"4:3442:1668","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:190:1998","0:191:2000","0:192:2001","0:193:2002"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:288":{"id":"0:288","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,26],"end":[49,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"1:2698:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12192:1984":{"id":"1:12192:1984","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:41673:179","prim@char":"4:12030:421","self::pattern":"1:11852:1700"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41671:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:2837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:335:1756":{"id":"0:335:1756","crate_id":0,"name":"as_mut","span":{"filename":"src/lib.rs","begin":[1275,0],"end":[1279,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"::std::ffi::OsStr","id":"4:1979:184","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12224:31925":{"id":"1:12224:31925","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41671:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:2837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11857:2837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11872:8334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:83:1883":{"id":"0:83:1883","crate_id":0,"name":"right_or_default","span":{"filename":"src/lib.rs","begin":[637,4],"end":[645,5]},"visibility":"public","docs":"Return right or a default\n\n# Examples\n\n```\n# use either::*;\nlet left: Either<String, u32> = Left(\"left\".to_string());\nassert_eq!(left.right_or_default(), u32::default());\n\nlet right: Either<String, u32> = Right(42);\nassert_eq!(right.right_or_default(), 42);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"R"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:2594:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12277:8219":{"id":"1:12277:8219","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4543:8219"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:43940:7195","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:95:1925":{"id":"0:95:1925","crate_id":0,"name":"factor_none","span":{"filename":"src/lib.rs","begin":[824,4],"end":[829,5]},"visibility":"public","docs":"Factors out `None` from an `Either` of [`Option`].\n\n```\nuse either::*;\nlet left: Either<_, Option<String>> = Left(Some(vec![0]));\nassert_eq!(left.factor_none(), Some(Left(vec![0])));\n\nlet right: Either<Option<Vec<u8>>, _> = Right(Some(String::new()));\nassert_eq!(right.factor_none(), Some(Right(String::new())));\n```","links":{"`Option`":"1:41671:181"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"1:41671:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74:1840":{"id":"0:74:1840","crate_id":0,"name":"right_and_then","span":{"filename":"src/lib.rs","begin":[499,4],"end":[507,5]},"visibility":"public","docs":"Apply the function `f` on the value in the `Right` variant if it is present.\n\n```\nuse either::*;\n\nlet left: Either<_, u32> = Left(123);\nassert_eq!(left.right_and_then(|x| Right(x * 2)), Left(123));\n\nlet right: Either<u32, _> = Right(123);\nassert_eq!(right.right_and_then(|x| Right(x * 2)), Right(246));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2935:1778","args":{"parenthesized":{"inputs":[{"generic":"R"}],"output":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12183:27542":{"id":"1:12183:27542","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:12030:421","self::pattern":"1:11852:1700"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:2837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:166":{"id":"0:166","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1085,0],"end":[1112,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedIterator","id":"1:7310:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedIterator","id":"1:7310:121","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"L"},"trait":{"name":"","id":"1:7418:159","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["nth_back","rfold","advance_back_by","try_rfold","rfind"],"trait":{"name":"DoubleEndedIterator","id":"1:7310:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:169:1988","0:170:1989","0:173:1990"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:159:1984":{"id":"0:159:1984","crate_id":0,"name":"find","span":{"filename":"src/lib.rs","begin":[1063,4],"end":[1068,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["predicate",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41671:181","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:7418:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2932:1976","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:7418:159","args":null}}}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12178:24522":{"id":"1:12178:24522","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:12179:24492"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:43906:7287","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12275:31939":{"id":"1:12275:31939","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4542:31939"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:43931:7244","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5527:2421":{"id":"5:5527:2421","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7449:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:141:1972":{"id":"0:141:1972","crate_id":0,"name":"size_hint","span":{"filename":"src/lib.rs","begin":[1004,4],"end":[1006,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41671:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:23-0:272:162":{"id":"0:23-0:272:162","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[40,24],"end":[40,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::Either::Left","name":"Left","id":"0:272:162","glob":false}}},"0:155:286":{"id":"0:155:286","crate_id":0,"name":"all","span":{"filename":"src/lib.rs","begin":[1049,4],"end":[1054,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2932:1976","args":{"parenthesized":{"inputs":[{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:7418:159","args":null}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:178:823":{"id":"0:178:823","crate_id":0,"name":"len","span":{"filename":"src/lib.rs","begin":[1119,4],"end":[1121,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:277:1630":{"id":"0:277:1630","crate_id":0,"name":"0","span":{"filename":"src/lib.rs","begin":[54,10],"end":[54,11]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"generic":"R"}}},"5:683:24322":{"id":"5:683:24322","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:51:1795":{"id":"0:51:1795","crate_id":0,"name":"map_either","span":{"filename":"src/lib.rs","begin":[368,4],"end":[377,5]},"visibility":"public","docs":"Apply the functions `f` and `g` to the `Left` and `Right` variants\nrespectively. This is equivalent to\n[bimap](https://hackage.haskell.org/package/bifunctors-5/docs/Data-Bifunctor.html)\nin functional programming.\n\n```\nuse either::*;\n\nlet f = |s: String| s.len();\nlet g = |u: u8| u.to_string();\n\nlet left: Either<String, u8> = Left(\"loopy\".into());\nassert_eq!(left.map_either(f, g), Left(5));\n\nlet right: Either<String, u8> = Right(42);\nassert_eq!(right.map_either(f, g), Right(\"42\".into()));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}],["g",{"generic":"G"}]],"output":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"M"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"M","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2935:1778","args":{"parenthesized":{"inputs":[{"generic":"L"}],"output":{"generic":"M"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"G"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2935:1778","args":{"parenthesized":{"inputs":[{"generic":"R"}],"output":{"generic":"S"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:281":{"id":"0:281","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,15],"end":[49,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:2697:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2255:2186":{"id":"1:2255:2186","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:272:162":{"id":"0:272:162","crate_id":0,"name":"Left","span":{"filename":"src/lib.rs","begin":[52,4],"end":[52,11]},"visibility":"default","docs":"A value of type `L`.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:274:1630"]},"discriminant":null}}},"b:5:5771-0:269:1672":{"id":"b:5:5771-0:269:1672","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:9286:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2694:2311","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5769:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["5:5773:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12181:31921":{"id":"1:12181:31921","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:43896:7286","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:111":{"id":"0:111","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[899,0],"end":[918,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"generic":"L"},{"generic":"T"}]}},{"type":{"tuple":[{"generic":"R"},{"generic":"T"}]}}],"bindings":[]}}}},"items":["0:115:1954"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:134:1970":{"id":"0:134:1970","crate_id":0,"name":"extend","span":{"filename":"src/lib.rs","begin":[984,4],"end":[989,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7272:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"A"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12203:24510":{"id":"1:12203:24510","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:12030:421","self::pattern":"1:11852:1700"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:11668:7215","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:2837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:115:1954":{"id":"0:115:1954","crate_id":0,"name":"factor_second","span":{"filename":"src/lib.rs","begin":[912,4],"end":[917,5]},"visibility":"public","docs":"Factor out a homogeneous type from an either of pairs.\n\nHere, the homogeneous type is the second element of the pairs.\n\n```\nuse either::*;\nlet left: Either<_, (String, u32)> = Left((vec![0], 123));\nassert_eq!(left.factor_second().1, 123);\n\nlet right: Either<(Vec<u8>, u32), _> = Right((String::new(), 123));\nassert_eq!(right.factor_second().1, 123);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"tuple":[{"resolved_path":{"name":"Either","id":"0:269:1672","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},{"generic":"T"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12176:7296":{"id":"1:12176:7296","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:12030:421"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43608:7278","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:331:317":{"id":"0:331:317","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[1275,0],"end":[1279,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"::std::ffi::OsStr","id":"4:1979:184","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"5:5318:3038":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:4148:6458":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"4:11175:5796":{"crate_id":4,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"17:13957:4063":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"6:4770:5137":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:4339:2651":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"16:6724:6278":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:43167:6069":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"11:667:7034":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"11:403:7571":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:14015:4075":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:14236:4152":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"6:1663:4888":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"4:3183:7780":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:10597:6856":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:10298:7218":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"19:0:1043":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:47847:6177":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:4815:805":{"crate_id":1,"path":["core","iter"],"kind":"module"},"16:8125:7024":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"4:6538:7122":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:13882:4041":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:14189:4140":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"6:5863:5373":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:7558:5690":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:9118:3377":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"16:4441:4281":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:14177:4137":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"4:2917:210":{"crate_id":4,"path":["std","io","error","Result"],"kind":"typedef"},"1:2854:2292":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:6130:5480":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:1513:4786":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:2704:228":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"16:2519:4227":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:12840:3751":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"4:10535:2414":{"crate_id":4,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"4:8290:13765":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:21637:24962":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:22659:170":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:43186:7212":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"16:3777:4274":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"18:766:24308":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:4506:5050":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:13719:3996":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:10633:3411":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"5:6079:2384":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:13096:3793":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:9545:2635":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:1733:8199":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"9:426:19277":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:2474:13730":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"14:7:7029":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"4:9282:2893":{"crate_id":4,"path":["std","sys","unix","args","Args"],"kind":"struct"},"17:9296:3382":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"16:6815:4356":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"4:12042:754":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"17:9274:2398":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"16:4965:4297":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"11:1048:32867":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:11416:6893":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:12711:3711":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"6:5051:5283":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"6:1500:4780":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:11568:20357":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"15:394:19390":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"4:7661:5711":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"16:4814:4292":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"6:62:13905":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"6:1638:4869":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"18:590:3255":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:41520:6045":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"4:6978:8088":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"11:1831:2819":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1:22593:5832":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"17:10458:6838":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"1:7718:1992":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"6:6834:5648":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"16:6018:20287":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"11:695:7035":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"4:5622:3098":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:8924:20352":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"16:6986:4370":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"5:7474:2833":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:44084:7298":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"16:6427:6953":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:22179:8138":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"15:306:7566":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"5:4074:2630":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:11388:20356":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:10097:6812":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"4:2212:1998":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"4:1558:1847":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"16:3810:4275":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"5:1426:2630":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:2846:2290":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"16:2465:4225":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:10013:3397":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"4:11514:7102":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:10377:7220":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"16:7739:4251":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:11118:6884":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"5:2960:32836":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"4:5379:7109":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"1:42142:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:46991:6138":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"11:97:7357":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:44210:8347":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:13639:3978":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"4:3984:13742":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:45642:6081":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:40456:2772":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:41731:2629":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"6:0:828":{"crate_id":6,"path":["libc"],"kind":"module"},"6:5025:5266":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:5535:2774":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:1637:5802":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"4:12029:948":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"1:45836:6089":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"4:946:7043":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:40252:6039":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"3:0:2244":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"17:12133:3604":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:20971:13406":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"4:6145:2794":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:9300:2645":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"5:3183:31531":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"4:11473:7101":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"16:8210:4421":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"4:8457:2855":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"16:4928:4296":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:13659:3986":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"4:10986:5773":{"crate_id":4,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"4:4155:7580":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"16:2663:4233":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:2168:8184":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"4:12030:421":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"1:40446:2771":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:46243:6107":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"16:7474:4258":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:9821:3390":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"16:3220:4269":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"6:6820:5639":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:4949:5233":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"4:10161:7171":{"crate_id":4,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"16:2825:4240":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:40539:2778":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:21919:6461":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"4:11155:5772":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"4:8161:2394":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"1:9936:13730":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:44221:7301":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"4:11379:7371":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"18:515:3250":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"16:3441:4271":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"6:5737:5296":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:49943:13410":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"17:8740:20346":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"15:327:19384":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"4:8356:5754":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:43650:7218":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:41739:2630":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"11:1611:3034":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"4:8334:5546":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:12522:2264":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"4:7636:13730":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"17:11098:6879":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"6:5044:5280":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"4:4387:7107":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:5100:4301":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:4908:5207":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"5:7365:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:9475:6791":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:9977:6794":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:40946:7207":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"17:12303:3647":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:7433:4423":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:9887:6800":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"11:2033:6990":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"4:860:1847":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"6:4842:5171":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:13778:4015":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"6:4787:5148":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"6:4556:5073":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:6136:5481":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"4:11385:7372":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"16:4698:4288":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"6:5829:5349":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:6022:5452":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:44067:7297":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:4393:2652":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"16:4620:4287":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"6:1681:4895":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"4:8230:7146":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"5:4348:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:10266:6818":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"5:1411:2629":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"4:5049:7108":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:6648:5564":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:4014:7197":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:9571:32885":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"4:10968:28515":{"crate_id":4,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"14:215:7032":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"4:4904:13791":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"16:4564:4285":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:0:446":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"18:481:6750":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:20927:24588":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"4:2555:2409":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"6:6044:5460":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:2752:2490":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"1:43359:7266":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:2836:2288":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:14044:4082":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"4:3221:2417":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"5:7349:13685":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:10405:7222":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"16:3580:4272":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"18:644:3247":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"6:4626:5086":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:46213:6106":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:9256:132":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"5:1523:7061":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"11:760:2819":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"6:1696:4904":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:10419:7223":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:41858:2629":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"1:8814:86":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"4:8217:2399":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"1:42767:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"18:582:2500":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:11623:3498":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"4:4473:13766":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:2247:97":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"5:3568:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:12605:3698":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:46167:6105":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"4:8897:5775":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:9939:6804":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"4:837:2629":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"5:7382:2868":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"16:530:6443":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:11241:20476":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:40465:2773":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:44375:7389":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:22692:171":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"6:5849:5362":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"16:2962:19426":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"16:2314:4212":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:2850:2291":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"6:1603:4840":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:13830:4024":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"5:6788:2826":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"11:836:7043":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"16:5737:20285":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:9614:32884":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"11:1818:2629":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"6:562:4756":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:10555:6849":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:39433:203":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:43782:7282":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:40184:7243":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"11:2174:4619":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"4:5824:3100":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"6:4436:5015":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"4:9100:167":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:41756:2462":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"4:10795:5712":{"crate_id":4,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"6:5967:5429":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"5:1503:7035":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"4:5970:3098":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:14197:4143":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:11888:3554":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:43590:6343":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:44159:7237":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:1821:2263":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"11:644:2630":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"4:2631:2411":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"5:3581:2629":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"6:1717:4912":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:10883:3450":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"5:7449:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:3938:2384":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"16:4476:4282":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"6:4568:5082":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:43700:7281":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"4:1917:2375":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"4:8497:2857":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"1:23238:5834":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"16:7584:7011":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:41807:193":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"17:10161:6815":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:11832:3539":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"4:11044:3124":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:11250:3468":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:45818:6088":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:10225:7216":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"16:6232:6947":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:40148:6038":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"4:10947:4681":{"crate_id":4,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"17:12952:3766":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:45688:6083":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:12497:192":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"5:1776:2819":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:40192:7195":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"6:7505:5679":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"4:1888:2374":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"5:1492:7034":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:11943:3562":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"6:4341:4960":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"4:8878:5774":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"4:868:7036":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:4440:2653":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"6:4496:5043":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:12118:3598":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:44439:8353":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"4:619:2376":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:12921:3761":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"4:9134:5784":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"1:40271:2870":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"4:9105:218":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:12148:3610":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"4:5126:191":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"1:40396:2761":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:44639:6350":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:10845:3448":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"16:2781:4238":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"4:1055:7045":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"5:782:3041":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:10080:6809":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"4:12034:313":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"5:1374:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"9:330:4661":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"18:80:7554":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:9290:2641":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:5387:2384":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"4:481:3087":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:11164:3462":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"16:2497:4226":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:8872:20350":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"4:3508:28904":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"4:362:7081":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"4:923:7038":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:1702:4905":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:3389:7194":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"11:2060:7047":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:40120:6334":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"6:7599:5700":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"6:488:4711":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"4:6642:217":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"16:3894:4277":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:46487:6115":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:9913:6802":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:13179:3810":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:39487:2302":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:9288:2640":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"16:6571:20289":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"11:723:7036":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:44387:5796":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"4:0:1412":{"crate_id":4,"path":["std"],"kind":"module"},"1:12435:136":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:32300:2491":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"16:6692:20290":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"16:8176:20297":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:1649:4877":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:10654:3413":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:4026:103":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"16:2737:4236":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:45622:6080":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:8659:20344":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"4:6069:3101":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"16:4841:4293":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"16:7038:6293":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:2820:2284":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:7250:5663":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"6:7278:5666":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"4:8910:13825":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"16:6484:6954":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:43800:7283":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"4:7523:3370":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"16:3744:4273":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"4:5615:206":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"5:5128:3070":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:10361:3409":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"6:653:14316":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"5:6955:3086":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"16:8152:4265":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"16:5882:6235":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"4:8566:2860":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:10223:3407":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"4:7710:13674":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:7231:2759":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"4:11212:5797":{"crate_id":4,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"17:10390:6833":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:13914:4049":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"16:7484:7008":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:11815:3536":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"4:3219:2416":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"5:2170:7363":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"16:7833:7014":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:20696:24958":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"17:256:6776":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"5:0:287":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:45897:6091":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"4:8480:2856":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:12318:3651":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"4:5986:206":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"17:12566:3694":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"6:4489:5040":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:10303:3318":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"4:8330:7151":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"4:6465:3109":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"4:3524:1667":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"1:44264:2838":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:11220:20475":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:40558:2780":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"5:3212:7054":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:3145:2301":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:44351:7383":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"11:736:7037":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"4:8997:28527":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:11398:7226":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"16:5651:4249":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:40226:7247":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"1:22117:24937":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"17:11178:6887":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:11127:3491":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:11852:1700":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"16:6175:6920":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:500:4716":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"6:1911:15307":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:10175:3400":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:9048:3375":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"16:5301:4302":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:13167:3803":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"11:119:3028":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"16:4592:4286":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"14:221:4570":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"9:177:19342":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:43754:7221":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"16:5382:3373":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:40200:7244":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"4:10843:28786":{"crate_id":4,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"4:9482:7135":{"crate_id":4,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"4:2492:2408":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:2787:2278":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"6:1545:4802":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:40105:7195":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:11276:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:9990:3395":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"4:8296:7149":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:9665:32882":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"6:4729:5115":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"4:12051:1519":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"4:1814:7095":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"5:5975:13879":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:44558:211":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"5:1442:1847":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:587:4769":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"4:2359:5805":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"17:13566:3967":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:47677:6174":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:21180:13395":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"4:2569:3091":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"16:7073:20292":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:12435:3672":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"6:5058:5286":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:2421:4223":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:40283:24926":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:3155:234":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"16:6357:4318":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:12982:3772":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"4:8150:2425":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"6:7463:5678":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:9706:6795":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"4:3386:2424":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"1:2523:238":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:20877:13730":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"4:4701:13766":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:39314:2298":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:9153:3378":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"18:599:32890":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"4:10805:130":{"crate_id":4,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"16:7553:4425":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:2133:6783":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:30455:24918":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"16:6502:6962":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:9840:6797":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"16:7362:20293":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:47950:6181":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"6:4291:4923":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"4:12048:1520":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"17:10377:6831":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:46289:6109":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"6:579:4764":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"16:5994:20286":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:8997:20331":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:10520:6844":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:39529:5908":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"6:4748:5126":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"4:11194:5784":{"crate_id":4,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:48007:6186":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:45712:6084":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"4:6248:3098":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:13697:3992":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:13492:3956":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"4:1073:7050":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"5:629:7058":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:9245:210":{"crate_id":1,"path":["core","fmt","Result"],"kind":"typedef"},"1:12745:2814":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"17:9518:6792":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:11428:3489":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:44359:7385":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"6:4428:5012":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:6531:3027":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"1:1667:1099":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"6:5799:5339":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"14:202:2831":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"6:4543:5069":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:40497:2776":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"4:7852:7135":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"4:8407:2854":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"1:47347:6171":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:20683:2500":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"16:4396:4280":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:47801:6176":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"5:4985:2384":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:11520:3458":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:41480:155":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"6:4854:5175":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:48060:6189":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:554:4751":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:541:4745":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"16:5398:3374":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:13707:3993":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"6:7295:5677":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:39522:2651":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"1:2766:2274":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:47599:6173":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"4:1837:2893":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"4:10082:7095":{"crate_id":4,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"1:39515:7240":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"4:10532:2418":{"crate_id":4,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:46881:6135":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:4973:5245":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:22063:5819":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"6:573:4761":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:42662:6058":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:10094:2629":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:40313:2871":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"typedef"},"1:21200:5810":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"4:3940:13739":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"11:817:7041":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:41622:7104":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"4:7128:7583":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"4:6429:7121":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"4:5629:3099":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:12815:3747":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"6:4879:1013":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"4:4171:13764":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:9032:3374":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"4:10760:7368":{"crate_id":4,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"4:11591:5799":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"1:46067:6102":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:12826:3749":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"4:2361:13717":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:2988:2297":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"4:6594:13821":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:9727:3146":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"4:1561:2821":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:12878:3755":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"16:6900:4365":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:11979:3569":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:20879:13399":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"5:1102:7577":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"11:2194:4622":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:9806:20365":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"6:6688:5566":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:13971:4065":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"5:6558:1847":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:11767:3521":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:11669:3502":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"4:12052:799":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"1:9296:194":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:43530:7276":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:46335:6111":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"4:3841:7103":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:13854:4033":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:14315:4173":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"5:5362:13862":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"5:3669:3038":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"4:4698:13793":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"13:0:2245":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:4117:7198":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:44601:2792":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:13749:4007":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"6:4446:5021":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:40427:2763":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:14205:4144":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:12346:3658":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"4:12012:28514":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"5:7396:24926":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:14037:4080":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:20724:25110":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"18:727:3270":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:12377:3665":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"6:4944:5231":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"5:3142:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:9336:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"16:7568:32874":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"6:4304:4932":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:2709:2484":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"4:8278:7104":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"16:6317:6950":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"17:9016:3373":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:22101:24936":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"16:6347:20288":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"4:8848:5773":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"5:878:3046":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:9485:32886":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:12905:3759":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"16:6142:194":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:46386:6112":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:42727:68":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1:2250:98":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:21988:7376":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"16:55:4469":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"1:2932:1976":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"4:7920:2410":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"4:12031:1539":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"1:43836:7284":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"17:8949:20353":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:12646:3705":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:8389:2464":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:6171:5506":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:13683:3991":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"4:881:7037":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"4:7998:7139":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"4:7874:6317":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"4:7763:7134":{"crate_id":4,"path":["std","error","private","Internal"],"kind":"struct"},"1:11382:8298":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"16:7693:4253":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"16:6057:19398":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"9:52:19293":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"11:657:1847":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"5:3594:2630":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"5:6306:13829":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:11034:6874":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"4:8984:107":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"4:5413:7111":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"1:44355:7384":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"6:1590:4833":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"4:8204:2397":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"17:14403:4195":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"16:6438:6277":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"5:3204:7056":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"16:7061:6989":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:7725:2757":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:48022:6187":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:10444:6837":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:6987:2423":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:40588:2782":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:22055:5818":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"16:5807:6225":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:12539:3689":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:12004:3572":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"18:755:6775":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"6:4955:5234":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"4:2207:129":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"17:12659:3706":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:10945:6867":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:40995:2755":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"6:7552:5689":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"4:7534:7191":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"11:968:6990":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:9505:145":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:11557:7228":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"6:4810:5157":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:43906:7287":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"4:11617:7129":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"9:237:2855":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:10832:6862":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"4:9153:7165":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"4:3739:7102":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:12592:3697":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:43931:7244":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"6:4664:5089":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"16:7240:32877":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:4049:8220":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"9:393:19276":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"4:12043:751":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"17:14026:4079":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"6:482:4708":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"4:4633:5557":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"16:8043:4480":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:48098:6191":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:8977:25147":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"7:79:19268":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"5:7261:6309":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:5994:2786":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:12653:2794":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"4:9054:28519":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"4:894:2821":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"4:1570:7054":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:10186:7215":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"4:8389:13802":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"5:2690:5708":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:22527:177":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"4:9040:5779":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"4:635:7083":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:12891:3756":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"5:7438:3071":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:21178:13730":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:40574:2781":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"4:8141:2423":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"1:2984:2296":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"17:13029:3786":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:13332:3832":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:21747:13730":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:13862:4034":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"4:8555:2859":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"4:8241:13737":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"5:2966:32831":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"11:1027:19356":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:11467:3490":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:42943:2636":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:42422:2641":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:4609:8235":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"6:1709:4908":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:7575:5695":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"5:6485:3038":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:10486:6840":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"17:10799:6860":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"5:7412:2866":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"4:12054:1143":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"4:12047:1523":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"4:10765:7370":{"crate_id":4,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"17:1973:6782":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:2929:2295":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"17:12671:3707":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:11852:3549":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:46433:6113":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:11234:3467":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"4:10825:2394":{"crate_id":4,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:11857:2837":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:9223:3380":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"6:4524:5059":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"9:507:4684":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"4:919:7035":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"11:1501:19357":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:21101:13398":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"18:707:6768":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:12479:3680":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"11:1068:7048":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:2269:105":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"4:1979:184":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:44427:6346":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:30194:8106":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"1:2695:2483":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"17:13620:3977":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"11:1538:7053":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"16:5704:6219":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:10280:6819":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:11199:3466":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:42300:7211":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"4:929:13686":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:42261:92":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:9946:222":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"6:4650:5088":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"4:8312:5753":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"16:6540:4252":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:13140:3800":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"18:538:3252":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:4868:4294":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:11872:8334":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:0:2254":{"crate_id":17,"path":["object"],"kind":"module"},"16:6516:4321":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:2511:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"4:3998:13744":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:12526:3686":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"9:450:19275":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:4469:5029":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:47885:6178":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:11155:6886":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:13055:3788":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:12161:3614":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"16:2926:19425":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"6:5994:5438":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:506:4719":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"16:7592:20294":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"4:5752:7118":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:10904:7224":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"4:7731:7090":{"crate_id":4,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"5:7337:2817":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:11189:3463":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"6:5008:5258":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:20726:25112":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:2925:2294":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:10148:6814":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"4:1554:2629":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"5:7290:1847":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"5:7211:2821":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:13427:3915":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"5:7182:2815":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:9281:112":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"1:43924:7234":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:3377:8201":{"crate_id":1,"path":["core","any","Provider"],"kind":"trait"},"1:2697:226":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"4:5561:13806":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"17:12792:3746":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"4:3259:2418":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"4:5779:7119":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:13732:4002":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"6:5955:5424":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:6805:5632":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"16:2637:4232":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:3186:6787":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:10544:6848":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:10568:6852":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:10253:6817":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"6:5068:5287":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"4:9202:5788":{"crate_id":4,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:43448:7272":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:45956:6094":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"16:5775:4306":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"16:7753:7013":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"5:6798:2827":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"17:13368:3863":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"4:2591:2401":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:1733:4917":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"15:0:2252":{"crate_id":15,"path":["addr2line"],"kind":"module"},"16:7099:5779":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:11791:3535":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"18:507:3247":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:2808:2286":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"16:2611:4231":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"18:719:3267":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:13083:3792":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"6:547:4748":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:9294:2643":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:7235:2758":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"16:3635:3278":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"4:531:3088":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"1:40598:2767":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"16:6303:4244":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:12457:3679":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"4:7637:5710":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:43886:2395":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"17:14054:4087":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"6:4740:5122":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:5015:5261":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:2322:125":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"6:6598:5536":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"11:2049:7045":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:41671:181":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"6:5979:5436":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:11668:7215":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"4:2919:128":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"17:10957:6868":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:44379:7390":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"6:4794:5150":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"6:1557:4811":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"4:3300:2415":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"6:4872:5186":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"4:12050:1522":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"1:12448:151":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"4:3460:2392":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"16:5720:6906":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"16:8252:4492":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:21284:13394":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"6:6067:5466":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"6:4695:5099":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"11:1838:7054":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"4:8003:7140":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"4:4315:7106":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"4:7864:5712":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"5:5839:2821":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"5:7231:31513":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:47996:6185":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"18:521:24309":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:1527:4791":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:9926:6803":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:0:500":{"crate_id":1,"path":["core"],"kind":"module"},"17:13964:4064":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"4:7656:7130":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"6:7517:5681":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:14380:4191":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:9292:2642":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"14:160:7029":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"4:3343:2405":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:9561:6793":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:22791:5833":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"5:35:2818":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:43438:7271":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"4:10770:7136":{"crate_id":4,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"12:0:2250":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"5:4846:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"5:6930:3082":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"16:3867:4276":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"16:5414:4304":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:46464:6114":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:13771:4013":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:43618:2398":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"5:2959:6448":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:40376:2760":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"5:1118:31491":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:6705:5571":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"4:12045:753":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"16:7763:20295":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:11753:3520":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:47970:6183":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:43428:7270":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:2156:593":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:13435:3918":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"4:940:7041":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"16:6658:6968":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:30513:24928":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"6:5818:5341":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:2687:220":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"17:11924:3561":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"4:9978:6339":{"crate_id":4,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"16:4323:4279":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"5:1473:7037":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"4:10339:28902":{"crate_id":4,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:12017:3573":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"6:5767:5321":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:13894:4042":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"16:8086:7020":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:4463:5027":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"4:10103:7169":{"crate_id":4,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"4:11996:28646":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:11642:3501":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"5:2962:5707":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"4:11337:5798":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:9716:32889":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:45919:6092":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"4:8236:7148":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:48045:6188":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"4:9170:7166":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"4:3499:1671":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"18:652:3247":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:32209:7134":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"17:12966:3768":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"4:3992:13743":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"4:4054:13749":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:2699:109":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"4:3442:1668":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"1:32213:7239":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"5:5954:3070":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"9:0:2247":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:13937:4057":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"16:6250:4313":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"6:7540:5687":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"4:5238:190":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"0:0:1821":{"crate_id":0,"path":["either"],"kind":"module"},"16:2857:4241":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:4:1026":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"17:14163:4131":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:12078:112":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:40549:2779":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:45666:6082":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"5:1273:7047":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:48075:6190":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:40266:101":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:11542:3493":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:10511:6843":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"17:13787:4016":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"4:7372:28648":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"1:2514:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"5:7245:1847":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:3517:2821":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"1:47739:6175":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:20711:24958":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"6:4754:5128":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"16:5342:4303":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:8542:20332":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:14329:4180":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"4:5444:7113":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"16:7515:7010":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"18:96:7555":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"4:5393:7110":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"1:42222:85":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"5:1302:7050":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:10969:6869":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:7418:159":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:2317:188":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:14102:4124":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:40742:2783":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:43498:7273":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"6:6625:5546":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"4:11287:3126":{"crate_id":4,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"5:676:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:46567:6116":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:9952:3363":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:13548:3962":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"4:10251:7446":{"crate_id":4,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"16:6939:20291":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"6:4678:5090":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:10123:3393":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:44651:6079":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:30385:2811":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:14150:4125":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"6:5074:5289":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"5:1288:7045":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:9497:141":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"17:12089:3587":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:21528:13400":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"5:1464:7036":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:13795:4018":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:21303:13730":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:2749:106":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:22428:178":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"4:7904:119":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:13803:4020":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"6:4389:4991":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:2825:2285":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:4587:5083":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"4:6608:3110":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:44371:7388":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:10812:3445":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"6:6077:5469":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"5:7253:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:43485:2760":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:44132:7299":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"4:1776:7093":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"4:3110:2426":{"crate_id":4,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"17:10621:6858":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:3200:2308":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"16:2399:4222":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"4:9032:7163":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:14341:4182":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:13448:3925":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"4:11367:6324":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"4:1924:661":{"crate_id":4,"path":["std","ffi"],"kind":"module"},"6:4368:4983":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:11056:20474":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"5:2049:7063":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:30619:24929":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"5:4426:3064":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"5:1482:7051":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:10339:6829":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"16:6872:4254":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:11498:3491":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"16:5959:6913":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"16:7665:4262":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:12065:3585":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"16:6239:32878":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:9850:20366":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:21015:13407":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:1747:5803":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:26048:5835":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"4:12044:752":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"17:11967:3566":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:11866:6768":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"16:5673:20284":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"11:805:13686":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:14227:4150":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:6655:2688":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"6:1506:4783":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:42702:4456":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"16:5689:6216":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:44383:7391":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"16:7331:32876":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:9875:6799":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:123:13960":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:7310:121":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:7529:5683":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"16:8068:7018":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"16:2900:4243":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"6:119:13959":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"16:5363:20283":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"5:685:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"16:5067:4300":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"4:1041:6990":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:11329:20355":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"4:4962:13798":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"1:6744:2769":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"4:8965:5778":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:44406:122":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"13:226:4617":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:10263:7217":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"4:1426:144":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:11074:3458":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"6:4420:5009":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:20743:25113":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:2901:117":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:22004:5814":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"6:4606:5084":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"5:6769:2825":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:13513:3961":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:2783:2275":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"4:12028:374":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"4:4623:13744":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:2698:225":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"6:474:4703":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"5:7282:1847":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:46957:6137":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:41747:1847":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"1:2520:133":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:40418:2762":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"16:2759:4237":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:43520:7275":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:11594:7231":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"0:269:1672":{"crate_id":0,"path":["either","Either"],"kind":"enum"},"16:8105:7023":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:8794:20348":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"16:7025:6986":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"11:793:7051":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"11:311:7361":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"16:3058:3274":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:41947:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:11109:6883":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"4:3186:7781":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"16:2352:4220":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"18:624:32892":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:40728:2397":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:41566:6052":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"16:2293:19399":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"6:4938:5228":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:10671:20449":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"6:1673:4894":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:12757:3735":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:43410:7267":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:2105:20407":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:13949:4060":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:21866:6460":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:40219:7246":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:40299:2869":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:10499:6841":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"4:2216:2002":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"16:7799:4441":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:9655:6794":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"16:7539:4261":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:44016:8346":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:45734:6085":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"16:5612:6898":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"4:6193:7120":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"6:4917:5213":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"4:9110:219":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:12365:3663":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"16:5916:6241":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:42436:2642":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"16:7407:4422":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"16:3025:4266":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"4:11450:3128":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:40172:6335":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"4:850:2630":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:9734:6796":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"18:574:3247":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:10471:6839":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"1:2830:2287":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"16:6763:6290":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"16:7707:4432":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"5:5923:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:40111:7241":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:12412:3669":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"5:4234:2629":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:41866:2630":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"17:10323:6823":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"16:5639:6905":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:7363:1991":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"4:638:7085":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"4:8194:2396":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"6:6841:5651":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:41883:183":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"5:4002:2821":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:8711:20345":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"6:6868:5657":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"16:2541:4228":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:2359:189":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"5:2131:3055":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"11:285:7358":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:7047:2746":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"16:7445:6998":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:10313:6822":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"1:3321:69":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"4:4163:7581":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"5:778:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:42429:2640":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"18:671:6762":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:11371:3487":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"4:4637:5561":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:40962:2749":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:5793:5336":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:5900:5387":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:4833:5165":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"4:10470:3120":{"crate_id":4,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"16:7622:7012":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"16:2332:4214":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"4:4913:13792":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:11020:6873":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:43182:7382":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"13:110:32868":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"5:1011:3038":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:32173:2257":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"11:2180:4620":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:11600:20358":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"11:1121:7050":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:12579:3695":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"4:4796:3096":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:43854:7285":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"16:6713:6969":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:46021:6096":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:13923:4050":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:8771:20347":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"4:8285:7367":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:41657:6054":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"11:986:7045":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:14350:4186":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"16:5940:6907":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"16:6667:4344":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"5:1514:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"4:11141:5771":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"4:12035:1390":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"1:44367:7387":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"5:2223:31512":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:3172:2305":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:12642:107":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"4:3736:7101":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"5:3217:31530":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"4:2402:1666":{"crate_id":4,"path":["std","io"],"kind":"module"},"1:43540:7277":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"11:798:7038":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"6:1536:4796":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:4267:7200":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:6720:5577":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"4:8211:2398":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"1:2815:2283":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"5:1138:7578":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:1495:4778":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:8387:2466":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"4:10741:7179":{"crate_id":4,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"6:4824:5162":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:40405:2396":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:20929:8183":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"16:7855:20296":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:4002:7196":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"18:636:3266":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:44609:2793":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"16:6931:6970":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:45766:6086":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"16:6789:6292":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:20741:25108":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"4:12036:1420":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"17:11272:6892":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"16:7255:2462":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"5:3330:2819":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"17:400:6778":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:9318:3383":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"4:8872:1847":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"18:614:32891":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"16:7679:4263":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"16:6128:6915":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:44566:195":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"5:3238:7057":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"4:10834:28782":{"crate_id":4,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"1:5593:2764":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"4:4495:13767":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"6:4704:5104":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:43511:7274":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"5:261:3038":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"17:11905:3556":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:14359:4188":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"6:595:4774":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"4:4235:7105":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:12851:3752":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:14259:4165":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"4:1064:7047":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"4:10815:119":{"crate_id":4,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"4:2882:3095":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:41645:6053":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"6:4380:4986":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"6:532:4739":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:234:210":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"5:4393:2384":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"18:531:6752":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:4781:5145":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:12502:3685":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:41908:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"6:4929:5222":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:43576:2841":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:1756:5806":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:46265:6108":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:9759:3151":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"16:5626:6902":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:10199:3405":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"16:2803:4239":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:44622:161":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"4:8818:5771":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"1:2594:116":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"11:0:2249":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"6:4401:4996":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:12691:3710":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"4:3261:2419":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:40939:2745":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"4:9020:7161":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"11:2201:2817":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"5:3178:7055":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"6:1520:4788":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:12994:3774":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:43608:7278":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"16:7525:4260":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:14216:4149":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:12864:3754":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"6:6744:5589":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"6:4963:5239":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"4:1587:7057":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:7762:25148":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"4:6541:13819":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"6:4328:4950":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"11:332:3030":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:2164:6786":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:40968:2424":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:46803:6134":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:13016:3785":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"4:3970:13741":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:14:2014":{"crate_id":1,"path":["core","write"],"kind":"macro"},"17:9188:3379":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:42025:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"4:11813:3132":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"5:5366:13863":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:3160:135":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:8494:2837":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:30441:68":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"4:7743:13705":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"17:12254:3622":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"16:4536:4284":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:4887:5192":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:4329:3136":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:2803:2281":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"18:681:6763":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"16:8021:4479":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:3082:2300":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:11354:3340":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"16:6396:6275":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:39345:198":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"17:11872:3550":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"6:4374:4984":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:1690:4901":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:40488:2775":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"6:5805:5340":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"16:149:3025":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"4:12040:648":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"5:5612:2825":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"5:5769:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"16:4900:4295":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:3395:6788":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:43940:7195":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"14:31:7029":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:1630:592":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"10:44:4625":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"4:1576:7055":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"4:3414:2384":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"1:5475:2384":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:45974:6095":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"11:1012:7047":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"4:10322:7113":{"crate_id":4,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:47941:6180":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:526:4736":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:13870:4035":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"6:5920:5403":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"4:9192:28792":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"17:13155:3463":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"11:1852:7056":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"6:6607:5537":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:2842:2289":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:9604:3400":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"8:0:2246":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"16:6470:4264":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:42935:7262":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:4384:3137":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"4:8113:2427":{"crate_id":4,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"1:21062:8183":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"6:6671:5565":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"0:27:1715":{"crate_id":0,"path":["either","try_right"],"kind":"macro"},"1:43915:7288":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:40207:8241":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:12936:3765":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:2166:8183":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"17:10403:6834":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"4:6809:13828":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"16:7648:198":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:41789:2463":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"16:5567:4248":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:12424:3671":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:12727:3716":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:13999:4072":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:47489:6172":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:10978:8197":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"18:690:6765":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:434:3326":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"6:494:4714":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:9344:32881":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"5:2243:7366":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:13604:3974":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:9528:32883":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"4:2375:13721":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"5:1672:3038":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:39369:199":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:40346:2885":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"6:6156:5495":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:44664:7309":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:42964:2855":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:22494:176":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"4:12049:1521":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"6:7523:5682":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:46721:6133":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:41722:1848":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"4:7912:7138":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:40132:24921":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:47981:6184":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:46691:6132":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:21972:5813":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:42745:128":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"17:14282:4166":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"0:272:162":{"crate_id":0,"path":["either","Either","Left"],"kind":"variant"},"4:4819:13754":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"6:4984:5251":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"14:187:19369":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:10336:7219":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"4:12046:749":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"4:4738:13755":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:10293:6820":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"4:9487:3119":{"crate_id":4,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"17:11084:6875":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:11633:7233":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"16:4753:4290":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:14301:4171":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:7272:152":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"6:5987:5437":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"4:3517:1669":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"1:40506:2785":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"4:5558:5467":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"18:699:6766":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"6:6618:5542":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:45796:6087":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"16:3042:19427":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:13905:4046":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"16:6214:6938":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"6:4723:5112":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"4:12001:13676":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"4:12041:650":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"4:4042:13746":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"18:491:6751":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:4518:5056":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"4:7847:3319":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"16:5028:4299":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:22146:7379":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:7546:5688":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:10994:6871":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:2747:2488":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"6:1575:4821":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:39411:201":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:11412:2051":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:42181:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"4:5306:120":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"6:6711:5573":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:4616:5085":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"4:1839:7096":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"17:14007:4074":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:3237:2309":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"5:4164:2384":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:13069:3789":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:2771:2273":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:44196:7300":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:13043:3787":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"6:6008:5449":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:7313:32879":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"6:4413:5005":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:21048:13402":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:20915:13401":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"1:4262:7199":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"1:22028:6328":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"11:1845:7055":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:39494:5907":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"4:8173:1670":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"1:22758:169":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:2777:2276":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"4:952:7044":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:47923:6179":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:46097:6103":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"10:36:4624":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:42103:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:40356:2884":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"4:11231:5783":{"crate_id":4,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"1:31017:2500":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"4:8549:2629":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"4:4567:13784":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"16:6386:6952":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"5:7545:2820":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:42064:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:5882:5375":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"11:1517:7052":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"4:7928:2038":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"4:7759:7133":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"16:5553:4245":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:10863:3400":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:3519:6789":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"6:4475:5032":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"4:8224:2395":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"1:1918:5809":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"5:7425:2867":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:21312:5810":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:8899:20351":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"6:7564:5691":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"4:8008:2412":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:12077:3586":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"4:9027:7162":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:2741:2486":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"6:1595:4835":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:7721:2631":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"16:6332:6272":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:6289:4316":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:8982:27274":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:40977:2751":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:39228:2310":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:11726:3512":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"5:822:3044":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"4:11610:7129":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"4:7020:3113":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"5:4194:2384":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:11877:8333":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"11:1103:7049":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:5890:5380":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"4:11352:6322":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:22080:24934":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:3651:1847":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"4:7725:13675":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:582:3370":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"9:486:19274":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:7281:1969":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:6791:7585":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"4:4032:13745":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:42974:7264":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"4:7857:7136":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:41798:2735":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:39508:4421":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"6:5775:5323":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:261:6777":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"4:1565:2819":{"crate_id":4,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"4:8304:7146":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:21186:13397":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:22725:172":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:40474:7253":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:9286:120":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"4:3180:7729":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"4:1582:7056":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"6:6775:5615":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:14417:4198":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:9866:6798":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:43459:6070":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"16:5793:6224":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:10051:6807":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"6:4800:5153":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"4:8942:13826":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"4:2209:7099":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"4:9075:5782":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"4:7574:3115":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"5:2461:5704":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"11:2186:32866":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"16:7463:7005":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:2475:2258":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"4:586:13669":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"5:7463:2832":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:11045:3453":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:41986:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"6:7272:5664":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:4483:5037":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:10066:6808":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"16:6886:4255":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"16:6554:6964":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"4:915:7034":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:10249:6816":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"5:6439:2821":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:10430:6836":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:1184:6781":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:4258:207":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"1:21279:13730":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"17:12769:3737":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:4395:4993":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:11454:6894":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"16:7012:6983":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"5:7191:1847":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:11923:8340":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"16:6323:6951":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:2914:1664":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"16:4506:4283":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"6:4535:5064":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:13847:4032":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:2517:149":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"14:40:3536":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:8956:676":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"18:564:3254":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:9399:6790":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"6:6015:5451":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:4768:391":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:22040:24933":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"18:660:6756":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:3166:2303":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"16:8265:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:21625:5812":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"16:2689:4234":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"16:7505:4259":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:43949:7243":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"4:3298:2414":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"4:8800:7152":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"16:6850:4360":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:10931:6863":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:13109:3794":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:42952:145":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:42982:7265":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"6:6850:5654":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"4:11304:7125":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"5:2141:7064":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:2761:2277":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:14395:4192":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"5:276:2816":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:2694:2311":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"4:9475:129":{"crate_id":4,"path":["std","sys","unix","fs","File"],"kind":"struct"},"17:9083:3376":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"6:4550:5071":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:48137:6192":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:2859:2293":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"6:4848:5172":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"4:8926:13824":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:12552:3418":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:13757:4010":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"4:414:165":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:43632:2399":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"1:10143:2399":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"4:8834:5772":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"4:10956:7114":{"crate_id":4,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"16:4724:4289":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:2606:128":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"4:8856:2629":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:41815:210":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"0:275:213":{"crate_id":0,"path":["either","Either","Right"],"kind":"variant"},"1:1544:2384":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"4:643:13671":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:9966:3400":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:30419:2812":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:10110:6813":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"16:6456:4247":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:10906:3451":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"0:25:1698":{"crate_id":0,"path":["either","for_both"],"kind":"macro"},"4:4635:5559":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:21134:13393":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"6:4456:5024":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"5:207:3037":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"4:7736:7132":{"crate_id":4,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"7:32:19261":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:6838:2743":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"4:12037:1504":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"16:6372:4246":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:43419:7268":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:44363:7386":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:22626:173":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"4:5498:7114":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"5:4032:3038":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"4:1778:7094":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"1:40526:2765":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:47141:6139":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"6:7609:5702":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"18:0:2255":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:12394:3668":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:42927:2637":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:4638:5087":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:2353:182":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"16:4032:4278":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"5:1257:6990":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"6:4315:4940":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"4:11310:7188":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"4:724:142":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"4:9115:5783":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"1:8809:79":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:40756:2784":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"16:6160:6918":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:4818:5161":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:10609:6857":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"4:3674:13738":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"18:609:6755":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:9246:1671":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"4:1976:185":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"4:4046:13747":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"4:7593:3117":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:10786:6859":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:2935:1778":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"16:8166:7028":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:21:689":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"17:9409:32887":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:13125:3796":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"7:0:1567":{"crate_id":7,"path":["unwind"],"kind":"module"},"4:4742:13758":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:11264:3471":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:12618:3700":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"6:6036:5457":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:9777:20364":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"5:3735:7063":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:9661:3144":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"11:2168:4618":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:46645:6131":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:10351:3408":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"4:904:2819":{"crate_id":4,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:44038:7289":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:42443:2643":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:11591:3463":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:2966:2306":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"5:7529:2819":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:39702:24399":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:39329:200":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"0:26:1712":{"crate_id":0,"path":["either","try_left"],"kind":"macro"},"16:6864:4362":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:11007:6872":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:12354:3660":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:13456:3926":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:10581:6854":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:2799:2279":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:9899:3393":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"16:4785:4291":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"4:8979:7155":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:9298:2644":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"4:7887:130":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"17:9744:32888":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"4:5080:7108":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"4:2377:13722":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"4:1761:615":{"crate_id":4,"path":["std","env"],"kind":"module"},"4:910:7051":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"16:0:2253":{"crate_id":16,"path":["gimli"],"kind":"module"},"11:1826:2821":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:46311:6110":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:42718:71":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:4190:2650":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"1:44231:7305":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:40953:2747":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"18:113:7558":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:4789:25182":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:4413:2492":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:11696:3508":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"6:6028:5455":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:41609:6342":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"4:10783:6318":{"crate_id":4,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:12174:3615":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"5:6886:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"6:6726:5578":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"4:8864:7154":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"4:6894:3112":{"crate_id":4,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:22560:174":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"17:11992:3571":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:12053:3582":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"4:5429:7112":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"17:13981:4068":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:11617:7232":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:13303:3812":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"14:0:2251":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:40233:8242":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:10937:7225":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"17:10981:6870":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:43896:7286":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:10118:2630":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:2744:2312":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"16:5590:4250":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:43682:7280":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:41874:1847":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"17:10038:6806":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:41503:6043":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"16:7494:7009":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"16:2373:4221":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"4:6296:206":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:40987:2753":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"11:1822:1847":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"6:5877:5374":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:13673:3990":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"5:895:2629":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"11:1858:7057":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:11290:20354":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:46119:6104":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"16:2567:4229":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"4:2387:13727":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"6:6565:5513":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:5972:6244":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:43602:2840":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"16:5843:6231":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:4862:5180":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"4:8990:7157":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"4:12033:1061":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"4:6425:2747":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"16:6197:6935":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"18:736:24307":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"10:0:2248":{"crate_id":10,"path":["adler"],"kind":"module"},"1:40436:2770":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:10330:6826":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:44244:6344":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"16:7631:4429":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"16:4996:4298":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:44548:205":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"16:6977:6980":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:9540:2634":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:10417:6835":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"5:7199:7079":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"4:502:3055":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"4:10943:7133":{"crate_id":4,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"1:21749:13396":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:39267:2307":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:47961:6182":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:21533:13408":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:46927:6136":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"15:288:7562":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"16:2874:4242":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"5:2970:32832":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:40517:2777":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:13591:3969":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"4:11535:7103":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"5:2035:2038":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"16:2589:4230":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:22167:6329":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"11:399:7570":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"14:165:19362":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:12186:3618":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"16:2715:4235":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"4:11979:6325":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"4:356:7080":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:45867:6090":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"5:3800:2819":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1:22461:175":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:12035:3581":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"11:2130:19351":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"16:2443:4224":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:10391:7221":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"4:12053:1577":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"17:8605:20330":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:45937:6093":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:11144:6885":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"17:13991:4071":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:6796:5629":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:8841:20349":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"16:8138:7027":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:13574:3968":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"4:10101:7170":{"crate_id":4,"path":["std","sys","unix","os","Env"],"kind":"struct"},"16:7289:4403":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:10529:3475":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:7268:134":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"4:11033:3123":{"crate_id":4,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"6:6573:5518":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:12470:26622":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:39389:202":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"6:1569:4819":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:12106:3595":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:11210:6889":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"4:10529:2416":{"crate_id":4,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"16:6915:32873":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:41586:24941":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:12631:3702":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"4:12055:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"11:749:2821":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:21118:13730":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"6:7586:5696":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:41537:8267":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"6:6589:5530":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:504:6779":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"5:3720:2038":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:2756:2272":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"1:11812:2843":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"5:3171:2629":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:22153:5831":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"6:5080:5292":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:21310:13403":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"6:4764:5134":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"4:11167:28784":{"crate_id":4,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"4:4740:13757":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"4:6356:166":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:30425:5838":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:1075:6780":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"11:630:2629":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"4:8539:2858":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"17:9442:32880":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"4:555:7082":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:8632:20343":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:12690:140":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"16:3295:4270":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"5:4363:3064":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:11955:3565":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:40162:7242":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"5:6637:3038":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:7511:5680":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"6:4895:5197":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"4:4184:7582":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"6:568:4759":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:2791:2282":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"4:7682:3121":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"6:4716:5111":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"4:11603:28956":{"crate_id":4,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"9:357:19290":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:3185:26896":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"6:4685:5092":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:5836:5353":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:2795:2280":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"4:5745:7115":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"4:8806:186":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"4:6161:3105":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"6:1631:4865":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:39455:2299":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"17:13557:3966":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"4:4133:7579":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"4:11050:3125":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"6:4992:5253":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:42672:68":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"17:12333:3656":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:42690:110":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"11:365:3032":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:30989:183":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"1:8388:2465":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"4:3934:13740":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:43736:7220":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"4:10427:7152":{"crate_id":4,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"4:10575:3121":{"crate_id":4,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:44053:7294":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"11:844:7044":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"5:7221:3049":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:2527:237":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:9744:3091":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}