{"root":"0:0:1731","crate_version":"1.8.1","includes_private":false,"index":{"0:231":{"id":"0:231","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1281,0],"end":[1299,1]},"visibility":"crate","docs":"`Either` implements `Error` if *both* `L` and `R` implement it.","links":{},"attrs":["#[cfg(any(test, feature = \"use_std\"))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"1:2593:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"1:2593:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["cause","provide","description","source","type_id"],"trait":{"name":"Error","id":"1:2593:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:234:1654","0:235:1935","0:236:387"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:2241:23928":{"id":"1:2241:23928","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:130:1886":{"id":"0:130:1886","crate_id":0,"name":"size_hint","span":{"filename":"src/lib.rs","begin":[945,4],"end":[947,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"1:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:221:1693":{"id":"0:221:1693","crate_id":0,"name":"as_mut","span":{"filename":"src/lib.rs","begin":[1252,4],"end":[1254,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"generic","inner":"Target"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:76:1816":{"id":"0:76:1816","crate_id":0,"name":"unwrap_right","span":{"filename":"src/lib.rs","begin":[660,4],"end":[668,5]},"visibility":"public","docs":"Returns the right value\n\n# Examples\n\n```\n# use either::*;\nlet right: Either<(), _> = Right(3);\nassert_eq!(right.unwrap_right(), 3);\n```\n\n# Panics\n\nWhen `Either` is a `Left` value\n\n```should_panic\n# use either::*;\nlet left: Either<_, ()> = Left(3);\nleft.unwrap_right();\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"R"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"core::fmt::Debug","id":"1:9006:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11840:32995":{"id":"1:11840:32995","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:11846:1366","crate::ops::IndexMut":"1:2996:2206","str::slice_unchecked":"1:11839:32994"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:146:300":{"id":"0:146:300","crate_id":0,"name":"any","span":{"filename":"src/lib.rs","begin":[997,4],"end":[1002,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2940:1890","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:7202:156","args":null}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5304:29873":{"id":"5:5304:29873","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:11940:29876"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7156:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:45:1712":{"id":"0:45:1712","crate_id":0,"name":"map_left","span":{"filename":"src/lib.rs","begin":[319,4],"end":[327,5]},"visibility":"public","docs":"Apply the function `f` on the value in the `Left` variant if it is present rewrapping the\nresult in `Left`.\n\n```\nuse either::*;\n\nlet left: Either<_, u32> = Left(123);\nassert_eq!(left.map_left(|x| x * 2), Left(246));\n\nlet right: Either<u32, _> = Right(123);\nassert_eq!(right.map_left(|x| x * 2), Right(123));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"M"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"M","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2943:1715","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"L"}],"output":{"kind":"generic","inner":"M"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:212":{"id":"0:212","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1237,0],"end":[1245,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Target","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2499:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Target"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2499:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Target"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsMut","id":"1:2499:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Target"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:216:1693"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:136:493":{"id":"0:136:493","crate_id":0,"name":"count","span":{"filename":"src/lib.rs","begin":[963,4],"end":[965,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11864:1904":{"id":"1:11864:1904","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:48736:176","prim@char":"4:11840:409","self::pattern":"1:11520:1637"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11525:2818","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11525:2818","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11540:8145","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11938:29872":{"id":"1:11938:29872","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11921:29225":{"id":"1:11921:29225","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:11840:409","self::pattern":"1:11520:1637"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11525:2818","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:72:1797":{"id":"0:72:1797","crate_id":0,"name":"right_or_default","span":{"filename":"src/lib.rs","begin":[578,4],"end":[586,5]},"visibility":"public","docs":"Return right or a default\n\n# Examples\n\n```\n# use either::*;\nlet left: Either<String, u32> = Left(\"left\".to_string());\nassert_eq!(left.right_or_default(), u32::default());\n\nlet right: Either<String, u32> = Right(42);\nassert_eq!(right.right_or_default(), 42);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"R"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:2579:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:148:1898":{"id":"0:148:1898","crate_id":0,"name":"find","span":{"filename":"src/lib.rs","begin":[1004,4],"end":[1009,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["predicate",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:7202:156","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2940:1890","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:7202:156","args":null}}}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11895:2127":{"id":"1:11895:2127","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:11520:1637","`DoubleEndedIterator`":"1:7125:120","prim@char":"4:11840:409","str::matches":"1:11895:2127"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"1:50930:6942","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11525:2818","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:309":{"id":"0:309","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1211,0],"end":[1215,1]},"visibility":"crate","docs":"Requires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2496:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"::std::path::Path","id":"4:5207:187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2496:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"::std::path::Path","id":"4:5207:187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2496:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Path","id":"4:5207:187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:312:311"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:325":{"id":"0:325","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1221,0],"end":[1225,1]},"visibility":"crate","docs":"Requires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2496:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"::std::ffi::CStr","id":"1:47456:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2496:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"::std::ffi::CStr","id":"1:47456:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2496:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CStr","id":"1:47456:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:328:311"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:217":{"id":"0:217","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1247,0],"end":[1255,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Target","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2499:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"Target"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2499:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"Target"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsMut","id":"1:2499:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"Target"}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:221:1693"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2532-0:258:1609":{"id":"b:1:2532-0:258:1609","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2505:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["1:2534:680"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:237":{"id":"0:237","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1301,0],"end":[1309,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"1:9011:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"1:9011:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:9011:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:240:656"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11933:33013":{"id":"1:11933:33013","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:11840:409","self::pattern":"1:11520:1637"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11525:2818","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11525:2818","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11540:8145","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:216:1693":{"id":"0:216:1693","crate_id":0,"name":"as_mut","span":{"filename":"src/lib.rs","begin":[1242,4],"end":[1244,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Target"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5285":{"id":"5:5285","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5196:1366","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5286:33664","5:5287:2313","5:5290:33665","5:5293:33666","5:5301:33667","5:5302:33668","5:5303:2334","5:5304:29873","5:5305:29874"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:227":{"id":"0:227","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1269,0],"end":[1277,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"DerefMut","id":"1:2922:1601","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"DerefMut","id":"1:2922:1601","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"qualified_path","inner":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"L"},"trait":{"name":"","id":"1:2909:116","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"1:2922:1601","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:230:543"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:2541:127":{"id":"1:2541:127","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"1:2512:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"0:205:311":{"id":"0:205:311","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[1183,4],"end":[1185,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Target"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:332:1693":{"id":"0:332:1693","crate_id":0,"name":"as_mut","span":{"filename":"src/lib.rs","begin":[1221,0],"end":[1225,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"::std::ffi::CStr","id":"1:47456:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11915:33009":{"id":"1:11915:33009","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:11840:409","self::pattern":"1:11520:1637"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11525:2818","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11525:2818","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:11545:8144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:31:413":{"id":"0:31:413","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[135,4],"end":[140,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:155":{"id":"0:155","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1026,0],"end":[1053,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedIterator","id":"1:7125:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedIterator","id":"1:7125:120","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"L"},"trait":{"name":"","id":"1:7202:156","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["rfind","nth_back","rfold","advance_back_by","try_rfold"],"trait":{"name":"DoubleEndedIterator","id":"1:7125:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:158:1902","0:159:1903","0:162:1904"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:125":{"id":"0:125","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[934,0],"end":[1024,1]},"visibility":"crate","docs":"`Either<L, R>` is an iterator if both `L` and `R` are iterators.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7202:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7202:156","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"L"},"trait":{"name":"","id":"1:7202:156","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["take","skip","max_by","ge","cmp_by","__iterator_get_unchecked","copied","reduce","try_collect","map_while","filter","next_chunk","position","lt","max_by_key","partial_cmp_by","any","partition","cloned","for_each","try_reduce","collect_into","all","scan","filter_map","advance_by","partial_cmp","min","eq_by","find","cycle","last","try_find","size_hint","partition_in_place","flat_map","enumerate","ne","step_by","by_ref","min_by","is_sorted","array_chunks","nth","rposition","is_partitioned","fold","flatten","eq","peekable","le","zip","map","min_by_key","is_sorted_by","sum","rev","try_fold","fuse","skip_while","intersperse","gt","chain","max","is_sorted_by_key","count","find_map","unzip","collect","try_for_each","product","inspect","cmp","take_while","intersperse_with"],"trait":{"name":"Iterator","id":"1:7202:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:128:1762","0:129:937","0:130:1886","0:131:1887","0:134:1891","0:136:493","0:137:1892","0:138:1893","0:139:1895","0:141:1897","0:144:282","0:146:300","0:148:1898","0:150:1901","0:153:1031"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:191:1922":{"id":"0:191:1922","crate_id":0,"name":"consume","span":{"filename":"src/lib.rs","begin":[1139,4],"end":[1141,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["amt",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5287:2313":{"id":"5:5287:2313","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7156:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7156:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11525:2818","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:317":{"id":"0:317","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1216,0],"end":[1220,1]},"visibility":"crate","docs":"Requires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2496:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"::std::ffi::OsStr","id":"4:2031:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2496:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"::std::ffi::OsStr","id":"4:2031:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2496:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"4:2031:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:320:311"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11945:33015":{"id":"1:11945:33015","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4498:33015"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"1:51043:6903","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2239-0:258:1609":{"id":"b:1:2239-0:258:1609","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2680:2221","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2233:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["1:2241:23928"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:263:1567":{"id":"0:263:1567","crate_id":0,"name":"0","span":{"filename":"src/lib.rs","begin":[52,9],"end":[52,10]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"generic","inner":"L"}},"1:11936:1966":{"id":"1:11936:1966","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:11482:126","`FromStr`":"1:11481:2824"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48878:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"1:11481:2824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:11481:2824","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:28":{"id":"0:28","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[134,0],"end":[149,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2253:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2253:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2253:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:31:413","0:32:415"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11841:30044":{"id":"1:11841:30044","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:11842:30045"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:73:1801":{"id":"0:73:1801","crate_id":0,"name":"right_or_else","span":{"filename":"src/lib.rs","begin":[600,4],"end":[608,5]},"visibility":"public","docs":"Returns right value or computes it from a closure\n\n# Examples\n\n```\n# use either::*;\nlet left: Either<String, u32> = Left(\"3\".to_string());\nassert_eq!(left.right_or_else(|x| x.parse().unwrap()), 3);\n\nlet right: Either<String, u32> = Right(3);\nassert_eq!(right.right_or_else(|_| unreachable!()), 3);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"generic","inner":"R"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2943:1715","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"L"}],"output":{"kind":"generic","inner":"R"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:24-0:264:210":{"id":"0:24-0:264:210","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[40,30],"end":[40,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::Either::Right","name":"Right","id":"0:264:210","glob":false}},"0:176":{"id":"0:176","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1092,0],"end":[1112,1]},"visibility":"crate","docs":"`Either<L, R>` implements `Read` if both `L` and `R` do.\n\nRequires crate feature `\"use_std\"`","links":{},"attrs":["#[cfg(any(test, feature = \"use_std\"))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Read","id":"4:3411:1605","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Read","id":"4:3411:1605","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["take","read_exact","is_read_vectored","by_ref","read_to_end","read_buf","bytes","read_to_string","read_buf_exact","read_vectored","chain"],"trait":{"name":"Read","id":"4:3411:1605","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:179:1912","0:180:1914","0:181:1915","0:182:1916"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11845:2619":{"id":"1:11845:2619","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"1:50712:2309","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:7096:770":{"id":"1:7096:770","crate_id":1,"name":"into_iter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"I"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:138:1893":{"id":"0:138:1893","crate_id":0,"name":"nth","span":{"filename":"src/lib.rs","begin":[971,4],"end":[973,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:7202:156","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2538-0:258:1609":{"id":"b:1:2538-0:258:1609","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2512:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2508:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["1:2541:127","1:2542:1441"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11913:33007":{"id":"1:11913:33007","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:175:1030":{"id":"0:175:1030","crate_id":0,"name":"poll","span":{"filename":"src/lib.rs","begin":[1080,4],"end":[1085,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"1:48870:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"core::task::Context","id":"1:12312:106","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"core::task::Poll","id":"1:51652:192","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:12102:135","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:305":{"id":"0:305","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1210,0],"end":[1210,32]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2499:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2499:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsMut","id":"1:2499:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:308:1693"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:321":{"id":"0:321","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1216,0],"end":[1220,1]},"visibility":"crate","docs":"Requires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2499:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"::std::ffi::OsStr","id":"4:2031:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2499:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"::std::ffi::OsStr","id":"4:2031:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsMut","id":"1:2499:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"4:2031:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:324:1693"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11820:2631":{"id":"1:11820:2631","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:81":{"id":"0:81","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[752,0],"end":[771,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:84:1839"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:277":{"id":"0:277","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,26],"end":[49,28]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"1:2684:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:8140:2383-0:258:1609":{"id":"a:1:8140:2383-0:258:1609","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8140:2383","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8140:2383","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8140:2383","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:11839:32994":{"id":"1:11839:32994","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:11846:1366","str::slice_mut_unchecked":"1:11840:32995","crate::ops::Index":"1:2992:2205"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:90":{"id":"0:90","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[796,0],"end":[817,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48878:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"L"}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48878:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:94:1853"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:2531:1833":{"id":"1:2531:1833","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2505:132"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:129:937":{"id":"0:129:937","crate_id":0,"name":"next","span":{"filename":"src/lib.rs","begin":[941,4],"end":[943,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:7202:156","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:270":{"id":"0:270","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,15],"end":[49,24]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:2683:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5286:33664":{"id":"5:5286:33664","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:2783","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6907:2782","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:2783","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6907:2782","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11833:25097":{"id":"1:11833:25097","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:48736:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9701:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9701:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:141:1897":{"id":"0:141:1897","crate_id":0,"name":"partition","span":{"filename":"src/lib.rs","begin":[982,4],"end":[988,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"tuple","inner":[{"kind":"generic","inner":"B"},{"kind":"generic","inner":"B"}]},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"B"},"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:2579:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Extend","id":"1:7097:1883","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:7202:156","args":null}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2940:1890","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:7202:156","args":null}}}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2673:217-0:258:1609":{"id":"a:1:2673:217-0:258:1609","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2673:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2673:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2673:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:11886:30058":{"id":"1:11886:30058","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:11840:409","str::splitn":"1:11883:30056","self::pattern":"1:11520:1637"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"1:50848:6883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11525:2818","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11525:2818","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11540:8145","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2534:680":{"id":"1:2534:680","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:32:415":{"id":"0:32:415","crate_id":0,"name":"clone_from","span":{"filename":"src/lib.rs","begin":[142,4],"end":[148,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["source",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:7095:1761":{"id":"1:7095:1761","crate_id":1,"name":"IntoIter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"I"}}},"0:60:1750":{"id":"0:60:1750","crate_id":0,"name":"left_and_then","span":{"filename":"src/lib.rs","begin":[419,4],"end":[427,5]},"visibility":"public","docs":"Apply the function `f` on the value in the `Left` variant if it is present.\n\n```\nuse either::*;\n\nlet left: Either<_, u32> = Left(123);\nassert_eq!(left.left_and_then::<_,()>(|x| Right(x * 2)), Right(246));\n\nlet right: Either<u32, _> = Right(123);\nassert_eq!(right.left_and_then(|x| Right::<(), _>(x * 2)), Right(123));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2943:1715","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"L"}],"output":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:183":{"id":"0:183","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1118,0],"end":[1126,1]},"visibility":"crate","docs":"`Either<L, R>` implements `Seek` if both `L` and `R` do.\n\nRequires crate feature `\"use_std\"`","links":{},"attrs":["#[cfg(any(test, feature = \"use_std\"))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Seek","id":"4:3486:1606","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Seek","id":"4:3486:1606","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["stream_position","rewind","stream_len"],"trait":{"name":"Seek","id":"4:3486:1606","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:186:1919"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:266:1567":{"id":"0:266:1567","crate_id":0,"name":"0","span":{"filename":"src/lib.rs","begin":[54,10],"end":[54,11]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"generic","inner":"R"}},"5:5293:33666":{"id":"5:5293:33666","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7156:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7156:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11848:2613":{"id":"1:11848:2613","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"1:50980:2312","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:26:1649":{"id":"0:26:1649","crate_id":0,"name":"try_left","span":{"filename":"src/lib.rs","begin":[114,0],"end":[121,1]},"visibility":"public","docs":"Macro for unwrapping the left side of an `Either`, which fails early\nwith the opposite side. Can only be used in functions that return\n`Either` because of the early return of `Right` that it provides.\n\nSee also `try_right!` for its dual, which applies the same just to the\nright side.\n\n# Example\n\n```\nuse either::{Either, Left, Right};\n\nfn twice(wrapper: Either<u32, &str>) -> Either<u32, &str> {\n    let value = either::try_left!(wrapper);\n    Left(value * 2)\n}\n\nfn main() {\n    assert_eq!(twice(Left(2)), Left(4));\n    assert_eq!(twice(Right(\"ups\")), Right(\"ups\"));\n}\n```","links":{},"attrs":["#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! try_left {\n    ($expr:expr) => { ... };\n}"},"0:284":{"id":"0:284","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,30],"end":[49,40]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::PartialOrd","id":"1:2344:186","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::PartialOrd","id":"1:2344:186","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["gt","ge","le","lt"],"trait":{"name":"PartialOrd","id":"1:2344:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:287:1014"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:7094:1762":{"id":"1:7094:1762","crate_id":1,"name":"Item","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"Iterator","id":"1:7202:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"1:11828:32993":{"id":"1:11828:32993","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:236:387":{"id":"0:236:387","crate_id":0,"name":"cause","span":{"filename":"src/lib.rs","begin":[1296,4],"end":[1298,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"1:2593:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11819:797":{"id":"1:11819:797","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:11840:409"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5552:1420":{"id":"5:5552:1420","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7156:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2543-0:258:1609":{"id":"b:1:2543-0:258:1609","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2502:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2512:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["1:2546:127","1:2547:1440"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:320:311":{"id":"0:320:311","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[1216,0],"end":[1220,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"::std::ffi::OsStr","id":"4:2031:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:134:1891":{"id":"0:134:1891","crate_id":0,"name":"for_each","span":{"filename":"src/lib.rs","begin":[956,4],"end":[961,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2940:1890","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:7202:156","args":null}}}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:686:23933":{"id":"5:686:23933","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:267":{"id":"0:267","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,9],"end":[49,13]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::marker::Copy","id":"1:2685:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::marker::Copy","id":"1:2685:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2685:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:258:1609":{"id":"0:258:1609","crate_id":0,"name":"Either","span":{"filename":"src/lib.rs","begin":[50,0],"end":[55,1]},"visibility":"public","docs":"The enum `Either` with variants `Left` and `Right` is a general purpose\nsum type with two cases.\n\nThe `Either` type is symmetric and treats its variants the same way, without\npreference.\n(For representing success or error, use the regular `Result` enum instead.)","links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"variants_stripped":false,"variants":["0:261:159","0:264:210"],"impls":["0:33","0:81","0:85","0:90","0:95","0:100","0:105","a:1:2673:217-0:258:1609","a:1:8140:2383-0:258:1609","a:1:8139:2384-0:258:1609","a:1:2687:225-0:258:1609","a:1:2737:2222-0:258:1609","b:1:3328-0:258:1609","b:1:7092-0:258:1609","b:1:2532-0:258:1609","b:1:2543-0:258:1609","b:1:2239-0:258:1609","b:1:2600-0:258:1609","b:1:2528-0:258:1609","b:1:2236-0:258:1609","b:1:12119-0:258:1609","b:1:2538-0:258:1609","b:5:683-0:258:1609","b:5:5550-0:258:1609","0:183","0:119","0:201","0:28","0:288","0:237","0:317","0:227","0:111","0:171","0:212","0:207","0:313","0:194","0:273","0:168","0:309","0:155","0:297","0:125","0:187","0:231","0:292","0:325","0:280","0:270","0:217","0:305","0:301","0:267","0:115","0:164","0:329","0:176","0:284","0:277","0:321","0:222"]}},"0:137:1892":{"id":"0:137:1892","crate_id":0,"name":"last","span":{"filename":"src/lib.rs","begin":[967,4],"end":[969,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:7202:156","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:186:1919":{"id":"0:186:1919","crate_id":0,"name":"seek","span":{"filename":"src/lib.rs","begin":[1123,4],"end":[1125,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["pos",{"kind":"resolved_path","inner":{"name":"SeekFrom","id":"4:8116:1607","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"4:2909:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11837:1700":{"id":"1:11837:1700","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9701:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9701:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:5303:2334":{"id":"5:5303:2334","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7156:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7156:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2542:1441":{"id":"1:2542:1441","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48878:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"1:2512:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11907:33004":{"id":"1:11907:33004","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:291:420":{"id":"0:291:420","crate_id":0,"name":"cmp","span":{"filename":"src/lib.rs","begin":[49,42],"end":[49,45]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::cmp::Ordering","id":"1:38660:180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:225:227":{"id":"0:225:227","crate_id":0,"name":"Target","span":{"filename":"src/lib.rs","begin":[1262,4],"end":[1262,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"L"},"trait":{"name":"Deref","id":"1:2909:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:324:1693":{"id":"0:324:1693","crate_id":0,"name":"as_mut","span":{"filename":"src/lib.rs","begin":[1216,0],"end":[1220,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"::std::ffi::OsStr","id":"4:2031:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:193:1926":{"id":"0:193:1926","crate_id":0,"name":"read_line","span":{"filename":"src/lib.rs","begin":[1147,4],"end":[1149,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"std::string::String","id":"5:7156:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"4:2909:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:78:1825":{"id":"0:78:1825","crate_id":0,"name":"expect_right","span":{"filename":"src/lib.rs","begin":[718,4],"end":[726,5]},"visibility":"public","docs":"Returns the right value\n\n# Examples\n\n```\n# use either::*;\nlet right: Either<(), _> = Right(3);\nassert_eq!(right.expect_right(\"value was Left\"), 3);\n```\n\n# Panics\n\nWhen `Either` is a `Left` value\n\n```should_panic\n# use either::*;\nlet left: Either<_, ()> = Left(3);\nleft.expect_right(\"value was Right\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["msg",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"generic","inner":"R"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"core::fmt::Debug","id":"1:9006:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11824:32992":{"id":"1:11824:32992","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:11822:32991"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:63:1754":{"id":"0:63:1754","crate_id":0,"name":"right_and_then","span":{"filename":"src/lib.rs","begin":[440,4],"end":[448,5]},"visibility":"public","docs":"Apply the function `f` on the value in the `Right` variant if it is present.\n\n```\nuse either::*;\n\nlet left: Either<_, u32> = Left(123);\nassert_eq!(left.right_and_then(|x| Right(x * 2)), Left(123));\n\nlet right: Either<u32, _> = Right(123);\nassert_eq!(right.right_and_then(|x| Right(x * 2)), Right(246));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2943:1715","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"R"}],"output":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:316:1693":{"id":"0:316:1693","crate_id":0,"name":"as_mut","span":{"filename":"src/lib.rs","begin":[1211,0],"end":[1215,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"::std::path::Path","id":"4:5207:187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2528-0:258:1609":{"id":"b:1:2528-0:258:1609","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2505:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2502:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["1:2531:1833"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:687:23934":{"id":"5:687:23934","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11918:33010":{"id":"1:11918:33010","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:11840:409","self::pattern":"1:11520:1637"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11525:2818","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2547:1440":{"id":"1:2547:1440","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48878:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"1:2512:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11842:30045":{"id":"1:11842:30045","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:11841:30044"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:197:1928":{"id":"0:197:1928","crate_id":0,"name":"write","span":{"filename":"src/lib.rs","begin":[1161,4],"end":[1163,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"4:2909:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:68:1780":{"id":"0:68:1780","crate_id":0,"name":"left_or_default","span":{"filename":"src/lib.rs","begin":[509,4],"end":[517,5]},"visibility":"public","docs":"Return left or a default\n\n# Examples\n\n```\n# use either::*;\nlet left: Either<String, u32> = Left(\"left\".to_string());\nassert_eq!(left.left_or_default(), \"left\");\n\nlet right: Either<String, u32> = Right(42);\nassert_eq!(right.left_or_default(), String::default());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"L"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:2579:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:118:1833":{"id":"0:118:1833","crate_id":0,"name":"into","span":{"filename":"src/lib.rs","begin":[912,4],"end":[917,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48878:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"R"}},{"type":{"kind":"generic","inner":"L"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:39:1676":{"id":"0:39:1676","crate_id":0,"name":"right","span":{"filename":"src/lib.rs","begin":[210,4],"end":[215,5]},"visibility":"public","docs":"Convert the right side of `Either<L, R>` to an `Option<R>`.\n\n```\nuse either::*;\n\nlet left: Either<_, ()> = Left(\"some value\");\nassert_eq!(left.right(),  None);\n\nlet right: Either<(), _> = Right(321);\nassert_eq!(right.right(), Some(321));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:292":{"id":"0:292","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,47],"end":[49,51]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hash","id":"1:9229:140","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hash","id":"1:9229:140","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:9229:140","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:295:715"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2600-0:258:1609":{"id":"b:1:2600-0:258:1609","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"1:2593:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2680:2221","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Provider","id":"1:3377:7998","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["1:2602:2610"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"E"}}},"0:200:1931":{"id":"0:200:1931","crate_id":0,"name":"flush","span":{"filename":"src/lib.rs","begin":[1173,4],"end":[1175,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"4:2909:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:280":{"id":"0:280","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,26],"end":[49,28]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::Eq","id":"1:2307:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::Eq","id":"1:2307:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2307:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:40:311":{"id":"0:40:311","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[228,4],"end":[233,5]},"visibility":"public","docs":"Convert `&Either<L, R>` to `Either<&L, &R>`.\n\n```\nuse either::*;\n\nlet left: Either<_, ()> = Left(\"some value\");\nassert_eq!(left.as_ref(), Left(&\"some value\"));\n\nlet right: Either<(), _> = Right(\"some value\");\nassert_eq!(right.as_ref(), Right(&\"some value\"));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"L"}}}},{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"R"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:66:770":{"id":"0:66:770","crate_id":0,"name":"into_iter","span":{"filename":"src/lib.rs","begin":[461,4],"end":[470,5]},"visibility":"public","docs":"Convert the inner value to an iterator.\n\n```\nuse either::*;\n\nlet left: Either<_, Vec<u32>> = Left(vec![1, 2, 3, 4, 5]);\nlet mut right: Either<Vec<u32>, _> = Right(vec![]);\nright.extend(left.into_iter());\nassert_eq!(right, Right(vec![1, 2, 3, 4, 5]));\n```","links":{},"attrs":["#[allow(clippy :: should_implement_trait)]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"L"},"trait":{"name":"","id":"1:7088:149","args":null}}}},{"type":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"R"},"trait":{"name":"","id":"1:7088:149","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7088:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7088:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"L"},"trait":{"name":"","id":"1:7088:149","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:128:1762":{"id":"0:128:1762","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[939,4],"end":[939,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"L"},"trait":{"name":"Iterator","id":"1:7202:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"a:1:2737:2222-0:258:1609":{"id":"a:1:2737:2222-0:258:1609","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2737:2222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2737:2222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2737:2222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:43:1699":{"id":"0:43:1699","crate_id":0,"name":"as_pin_mut","span":{"filename":"src/lib.rs","begin":[275,4],"end":[287,5]},"visibility":"public","docs":"Convert `Pin<&mut Either<L, R>>` to `Either<Pin<&mut L>, Pin<&mut R>>`,\npinned projections of the inner variants.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"1:48870:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Pin","id":"1:48870:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"L"}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"Pin","id":"1:48870:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"R"}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11874:30054":{"id":"1:11874:30054","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:11520:1637","`DoubleEndedIterator`":"1:7125:120","prim@char":"4:11840:409","str::split":"1:11868:2612"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"1:50744:6880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11525:2818","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11525:2818","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11540:8145","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12123:769":{"id":"1:12123:769","crate_id":1,"name":"into_future","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"IntoFuture","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"IntoFuture","id":"1:12115:2168","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:683-0:258:1609":{"id":"b:5:683-0:258:1609","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2253:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:679:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["5:685:6150","5:686:23933","5:687:23934"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11835:25098":{"id":"1:11835:25098","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9701:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9701:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:11850:25392":{"id":"1:11850:25392","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"1:51018:6895","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:37:1665":{"id":"0:37:1665","crate_id":0,"name":"is_right","span":{"filename":"src/lib.rs","begin":[177,4],"end":[179,5]},"visibility":"public","docs":"Return true if the value is the `Right` variant.\n\n```\nuse either::*;\n\nlet values = [Left(1), Right(\"the right value\")];\nassert_eq!(values[0].is_right(), false);\nassert_eq!(values[1].is_right(), true);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11889:32999":{"id":"1:11889:32999","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11525:2818","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11868:2612":{"id":"1:11868:2612","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:11520:1637","`DoubleEndedIterator`":"1:7125:120","prim@char":"4:11840:409","str::split_whitespace":"1:11846:25379","str::rsplit":"1:11874:30054"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"1:50726:2311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11525:2818","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:261:159":{"id":"0:261:159","crate_id":0,"name":"Left","span":{"filename":"src/lib.rs","begin":[52,4],"end":[52,11]},"visibility":"default","docs":"A value of type `L`.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":{"tuple":["0:263:1567"]},"discriminant":null}},"1:11904:33003":{"id":"1:11904:33003","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:11520:1637","`DoubleEndedIterator`":"1:7125:120","prim@char":"4:11840:409","str::match_indices":"1:11901:33002"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"1:50894:6941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11525:2818","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11525:2818","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11540:8145","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:198:1929":{"id":"0:198:1929","crate_id":0,"name":"write_all","span":{"filename":"src/lib.rs","begin":[1165,4],"end":[1167,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"4:2909:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:297":{"id":"0:297","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,53],"end":[49,58]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"1:9006:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"1:9006:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9006:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:300:656"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:201":{"id":"0:201","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1178,0],"end":[1186,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Target","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2496:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Target"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2496:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Target"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2496:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Target"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:205:311"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:99:1861":{"id":"0:99:1861","crate_id":0,"name":"factor_first","span":{"filename":"src/lib.rs","begin":[832,4],"end":[837,5]},"visibility":"public","docs":"Factor out a homogeneous type from an either of pairs.\n\nHere, the homogeneous type is the first element of the pairs.\n\n```\nuse either::*;\nlet left: Either<_, (u32, String)> = Left((123, vec![0]));\nassert_eq!(left.factor_first().0, 123);\n\nlet right: Either<(u32, Vec<u8>), _> = Right((123, String::new()));\nassert_eq!(right.factor_first().0, 123);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"tuple","inner":[{"kind":"generic","inner":"T"},{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11880:32998":{"id":"1:11880:32998","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:11520:1637","str::split":"1:11868:2612","prim@char":"4:11840:409","str::split_terminator":"1:11877:32997"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"1:50794:6939","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11525:2818","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11525:2818","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11540:8145","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:308:1693":{"id":"0:308:1693","crate_id":0,"name":"as_mut","span":{"filename":"src/lib.rs","begin":[1210,0],"end":[1210,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:123:1884":{"id":"0:123:1884","crate_id":0,"name":"extend","span":{"filename":"src/lib.rs","begin":[925,4],"end":[930,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["iter",{"kind":"generic","inner":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7088:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"A"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:194":{"id":"0:194","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1156,0],"end":[1176,1]},"visibility":"crate","docs":"`Either<L, R>` implements `Write` if both `L` and `R` do.\n\nRequires crate feature `\"use_std\"`","links":{},"attrs":["#[cfg(any(test, feature = \"use_std\"))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Write","id":"4:3468:1608","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Write","id":"4:3468:1608","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["is_write_vectored","write_fmt","by_ref","write_vectored","write_all","write_all_vectored"],"trait":{"name":"Write","id":"4:3468:1608","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:197:1928","0:198:1929","0:199:1930","0:200:1931"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:162:1904":{"id":"0:162:1904","crate_id":0,"name":"rfind","span":{"filename":"src/lib.rs","begin":[1047,4],"end":[1052,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["predicate",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:7202:156","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2940:1890","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:7202:156","args":null}}}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11844:6954":{"id":"1:11844:6954","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:11840:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"1:50702:6936","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5305:29874":{"id":"5:5305:29874","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:11941:29877"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7156:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:89:1847":{"id":"0:89:1847","crate_id":0,"name":"factor_err","span":{"filename":"src/lib.rs","begin":[788,4],"end":[793,5]},"visibility":"public","docs":"Factors out a homogenous type from an `Either` of [`Result`].\n\nHere, the homogeneous type is the `Err` type of the [`Result`].\n\n```\nuse either::*;\nlet left: Either<_, Result<String, u32>> = Left(Ok(vec![0]));\nassert_eq!(left.factor_err(), Ok(Left(vec![0])));\n\nlet right: Either<Result<Vec<u8>, u32>, _> = Right(Ok(String::new()));\nassert_eq!(right.factor_err(), Ok(Right(String::new())));\n```","links":{"`Result`":"1:48878:207"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48878:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:44:1705":{"id":"0:44:1705","crate_id":0,"name":"flip","span":{"filename":"src/lib.rs","begin":[300,4],"end":[305,5]},"visibility":"public","docs":"Convert `Either<L, R>` to `Either<R, L>`.\n\n```\nuse either::*;\n\nlet left: Either<_, ()> = Left(123);\nassert_eq!(left.flip(), Right(123));\n\nlet right: Either<(), _> = Right(\"some value\");\nassert_eq!(right.flip(), Left(\"some value\"));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"R"}},{"type":{"kind":"generic","inner":"L"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2687:225-0:258:1609":{"id":"a:1:2687:225-0:258:1609","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2687:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2687:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2687:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:2546:127":{"id":"1:2546:127","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"1:39833:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:150:1901":{"id":"0:150:1901","crate_id":0,"name":"find_map","span":{"filename":"src/lib.rs","begin":[1011,4],"end":[1016,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2940:1890","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:7202:156","args":null}}}],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:174:183":{"id":"0:174:183","crate_id":0,"name":"Output","span":{"filename":"src/lib.rs","begin":[1078,4],"end":[1078,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"L"},"trait":{"name":"Future","id":"1:12102:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"1:11927:33011":{"id":"1:11927:33011","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:11840:409","self::pattern":"1:11520:1637"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11525:2818","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11525:2818","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11540:8145","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:313":{"id":"0:313","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1211,0],"end":[1215,1]},"visibility":"crate","docs":"Requires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2499:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"::std::path::Path","id":"4:5207:187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2499:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"::std::path::Path","id":"4:5207:187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsMut","id":"1:2499:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Path","id":"4:5207:187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:316:1693"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:119":{"id":"0:119","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[920,0],"end":[931,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Extend","id":"1:7097:1883","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Extend","id":"1:7097:1883","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["extend_one","extend_reserve"],"trait":{"name":"Extend","id":"1:7097:1883","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:123:1884"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:144:282":{"id":"0:144:282","crate_id":0,"name":"all","span":{"filename":"src/lib.rs","begin":[990,4],"end":[995,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2940:1890","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:7202:156","args":null}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2238:2089":{"id":"1:2238:2089","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:104:1868":{"id":"0:104:1868","crate_id":0,"name":"factor_second","span":{"filename":"src/lib.rs","begin":[853,4],"end":[858,5]},"visibility":"public","docs":"Factor out a homogeneous type from an either of pairs.\n\nHere, the homogeneous type is the second element of the pairs.\n\n```\nuse either::*;\nlet left: Either<_, (String, u32)> = Left((vec![0], 123));\nassert_eq!(left.factor_second().1, 123);\n\nlet right: Either<(Vec<u8>, u32), _> = Right((String::new(), 123));\nassert_eq!(right.factor_second().1, 123);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},{"kind":"generic","inner":"T"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:685:6150":{"id":"5:685:6150","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"1:11941:29877":{"id":"1:11941:29877","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:276:601":{"id":"0:276:601","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[49,15],"end":[49,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:312:311":{"id":"0:312:311","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[1211,0],"end":[1215,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"::std::path::Path","id":"4:5207:187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11940:29876":{"id":"1:11940:29876","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:301":{"id":"0:301","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1210,0],"end":[1210,32]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2496:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2496:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2496:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:304:311"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:12122:2168":{"id":"1:12122:2168","crate_id":1,"name":"IntoFuture","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"F"}}},"0:139:1895":{"id":"0:139:1895","crate_id":0,"name":"collect","span":{"filename":"src/lib.rs","begin":[975,4],"end":[980,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"B"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"B"},"bounds":[{"trait_bound":{"trait":{"name":"iter::FromIterator","id":"1:7084:133","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:7202:156","args":null}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11847:25359":{"id":"1:11847:25359","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:11846:25379"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"1:51009:6946","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:158:1902":{"id":"0:158:1902","crate_id":0,"name":"next_back","span":{"filename":"src/lib.rs","begin":[1031,4],"end":[1033,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:7202:156","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:273":{"id":"0:273","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,15],"end":[49,24]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::PartialEq","id":"1:2302:185","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::PartialEq","id":"1:2302:185","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2302:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:276:601"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:7092-0:258:1609":{"id":"b:1:7092-0:258:1609","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7202:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7088:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["1:7094:1762","1:7095:1761","1:7096:770"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"0:85":{"id":"0:85","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[773,0],"end":[794,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48878:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48878:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"R"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:89:1847"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:179:1912":{"id":"0:179:1912","crate_id":0,"name":"read","span":{"filename":"src/lib.rs","begin":[1097,4],"end":[1099,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"4:2909:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11914:33008":{"id":"1:11914:33008","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5290:33665":{"id":"5:5290:33665","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7156:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7156:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11525:2818","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:167:797":{"id":"0:167:797","crate_id":0,"name":"len","span":{"filename":"src/lib.rs","begin":[1060,4],"end":[1062,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:199:1930":{"id":"0:199:1930","crate_id":0,"name":"write_fmt","span":{"filename":"src/lib.rs","begin":[1169,4],"end":[1171,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["fmt",{"kind":"resolved_path","inner":{"name":"fmt::Arguments","id":"1:49870:73","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"4:2909:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:300:656":{"id":"0:300:656","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[49,53],"end":[49,58]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"1:8966:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"1:8955:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5301:33667":{"id":"5:5301:33667","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7156:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7156:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:5550-0:258:1609":{"id":"b:5:5550-0:258:1609","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:9011:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2680:2221","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5548:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["5:5552:1420"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:192:1924":{"id":"0:192:1924","crate_id":0,"name":"read_until","span":{"filename":"src/lib.rs","begin":[1143,4],"end":[1145,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["byte",{"kind":"primitive","inner":"u8"}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"std::vec::Vec","id":"5:6599:241","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"4:2909:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:33":{"id":"0:33","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[151,0],"end":[750,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:36:1661","0:37:1665","0:38:1671","0:39:1676","0:40:311","0:41:1693","0:42:1696","0:43:1699","0:44:1705","0:45:1712","0:48:1720","0:51:1731","0:55:1744","0:60:1750","0:63:1754","0:66:770","0:67:1774","0:68:1780","0:69:1786","0:71:1793","0:72:1797","0:73:1801","0:75:1810","0:76:1816","0:77:1820","0:78:1825","0:79:1832"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:95":{"id":"0:95","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[819,0],"end":[838,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"generic","inner":"T"},{"kind":"generic","inner":"L"}]}},{"type":{"kind":"tuple","inner":[{"kind":"generic","inner":"T"},{"kind":"generic","inner":"R"}]}}],"bindings":[]}}}},"items":["0:99:1861"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:41:1693":{"id":"0:41:1693","crate_id":0,"name":"as_mut","span":{"filename":"src/lib.rs","begin":[253,4],"end":[258,5]},"visibility":"public","docs":"Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.\n\n```\nuse either::*;\n\nfn mutate_left(value: &mut Either<u32, u32>) {\n    if let Some(l) = value.as_mut().left() {\n        *l = 999;\n    }\n}\n\nlet mut left = Left(123);\nlet mut right = Right(123);\nmutate_left(&mut left);\nmutate_left(&mut right);\nassert_eq!(left, Left(999));\nassert_eq!(right, Right(123));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"L"}}}},{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"R"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:240:656":{"id":"0:240:656","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[1306,4],"end":[1308,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8966:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8955:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11829:310":{"id":"1:11829:310","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:11830:30025","`u8`":"4:11857:1462"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11877:32997":{"id":"1:11877:32997","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:11520:1637","str::split":"1:11868:2612","prim@char":"4:11840:409","`DoubleEndedIterator`":"1:7125:120","str::rsplit_terminator":"1:11880:32998"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"1:50776:6938","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11525:2818","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:107:1872":{"id":"0:107:1872","crate_id":0,"name":"into_inner","span":{"filename":"src/lib.rs","begin":[873,4],"end":[875,5]},"visibility":"public","docs":"Extract the value of an either over two equivalent types.\n\n```\nuse either::*;\n\nlet left: Either<_, u32> = Left(123);\nassert_eq!(left.into_inner(), 123);\n\nlet right: Either<u32, _> = Right(123);\nassert_eq!(right.into_inner(), 123);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11849:32996":{"id":"1:11849:32996","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"1:50990:6944","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:67:1774":{"id":"0:67:1774","crate_id":0,"name":"left_or","span":{"filename":"src/lib.rs","begin":[490,4],"end":[495,5]},"visibility":"public","docs":"Return left value or given value\n\nArguments passed to `left_or` are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use [`left_or_else`],\nwhich is lazily evaluated.\n\n[`left_or_else`]: #method.left_or_else\n\n# Examples\n\n```\n# use either::*;\nlet left: Either<&str, &str> = Left(\"left\");\nassert_eq!(left.left_or(\"foo\"), \"left\");\n\nlet right: Either<&str, &str> = Right(\"right\");\nassert_eq!(right.left_or(\"left\"), \"left\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"L"}]],"output":{"kind":"generic","inner":"L"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:230:543":{"id":"0:230:543","crate_id":0,"name":"deref_mut","span":{"filename":"src/lib.rs","begin":[1274,4],"end":[1276,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:2909:116","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:234:1654":{"id":"0:234:1654","crate_id":0,"name":"source","span":{"filename":"src/lib.rs","begin":[1286,4],"end":[1288,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"1:2593:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11898:33001":{"id":"1:11898:33001","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:11520:1637","`DoubleEndedIterator`":"1:7125:120","prim@char":"4:11840:409","str::matches":"1:11895:2127"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"1:50948:6943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11525:2818","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11525:2818","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11540:8145","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11909:33005":{"id":"1:11909:33005","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11821:32990":{"id":"1:11821:32990","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11939:29875":{"id":"1:11939:29875","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:114:680":{"id":"0:114:680","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[901,4],"end":[906,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["r",{"kind":"resolved_path","inner":{"name":"Result","id":"1:48878:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"R"}},{"type":{"kind":"generic","inner":"L"}}],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:304:311":{"id":"0:304:311","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[1210,0],"end":[1210,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:55:1744":{"id":"0:55:1744","crate_id":0,"name":"either_with","span":{"filename":"src/lib.rs","begin":[397,4],"end":[406,5]},"visibility":"public","docs":"Like `either`, but provide some context to whichever of the\nfunctions ends up being called.\n\n```\n// In this example, the context is a mutable reference\nuse either::*;\n\nlet mut result = Vec::new();\n\nlet values = vec![Left(2), Right(2.7)];\n\nfor value in values {\n    value.either_with(&mut result,\n                      |ctx, integer| ctx.push(integer),\n                      |ctx, real| ctx.push(f64::round(real) as i32));\n}\n\nassert_eq!(result, vec![2, 3]);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["ctx",{"kind":"generic","inner":"Ctx"}],["f",{"kind":"generic","inner":"F"}],["g",{"kind":"generic","inner":"G"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[{"name":"Ctx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2943:1715","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"Ctx"},{"kind":"generic","inner":"L"}],"output":{"kind":"generic","inner":"T"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"G"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2943:1715","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"Ctx"},{"kind":"generic","inner":"R"}],"output":{"kind":"generic","inner":"T"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11822:32991":{"id":"1:11822:32991","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11831:25096":{"id":"1:11831:25096","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:48736:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9701:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9701:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:27:1652":{"id":"0:27:1652","crate_id":0,"name":"try_right","span":{"filename":"src/lib.rs","begin":[125,0],"end":[132,1]},"visibility":"public","docs":"Dual to `try_left!`, see its documentation for more information.","links":{},"attrs":["#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! try_right {\n    ($expr:expr) => { ... };\n}"},"0:190:1921":{"id":"0:190:1921","crate_id":0,"name":"fill_buf","span":{"filename":"src/lib.rs","begin":[1135,4],"end":[1137,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"4:2909:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5302:33668":{"id":"5:5302:33668","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:288:2783","`String`":"5:7156:221"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:2783","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6907:2782","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7156:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:94:1853":{"id":"0:94:1853","crate_id":0,"name":"factor_ok","span":{"filename":"src/lib.rs","begin":[811,4],"end":[816,5]},"visibility":"public","docs":"Factors out a homogenous type from an `Either` of [`Result`].\n\nHere, the homogeneous type is the `Ok` type of the [`Result`].\n\n```\nuse either::*;\nlet left: Either<_, Result<u32, String>> = Left(Err(vec![0]));\nassert_eq!(left.factor_ok(), Err(Left(vec![0])));\n\nlet right: Either<Result<u32, Vec<u8>>, _> = Right(Err(String::new()));\nassert_eq!(right.factor_ok(), Err(Right(String::new())));\n```","links":{"`Result`":"1:48878:207"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48878:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:108:845":{"id":"0:108:845","crate_id":0,"name":"map","span":{"filename":"src/lib.rs","begin":[888,4],"end":[896,5]},"visibility":"public","docs":"Map `f` over the contained value and return the result in the\ncorresponding variant.\n\n```\nuse either::*;\n\nlet value: Either<_, i32> = Right(42);\n\nlet other = value.map(|x| x * 2);\nassert_eq!(other, Right(84));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"M"}},{"type":{"kind":"generic","inner":"M"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"M","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2943:1715","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"T"}],"output":{"kind":"generic","inner":"M"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:77:1820":{"id":"0:77:1820","crate_id":0,"name":"expect_left","span":{"filename":"src/lib.rs","begin":[689,4],"end":[697,5]},"visibility":"public","docs":"Returns the left value\n\n# Examples\n\n```\n# use either::*;\nlet left: Either<_, ()> = Left(3);\nassert_eq!(left.expect_left(\"value was Right\"), 3);\n```\n\n# Panics\n\nWhen `Either` is a `Right` value\n\n```should_panic\n# use either::*;\nlet right: Either<(), _> = Right(3);\nright.expect_left(\"value was Right\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["msg",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"generic","inner":"L"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"core::fmt::Debug","id":"1:9006:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:211:311":{"id":"0:211:311","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[1232,4],"end":[1234,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"Target"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3330:1454":{"id":"1:3330:1454","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"1:47073:5750","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:171":{"id":"0:171","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1073,0],"end":[1086,1]},"visibility":"crate","docs":"`Either<L, R>` is a future if both `L` and `R` are futures.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Future","id":"1:12102:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Future","id":"1:12102:135","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"L"},"trait":{"name":"","id":"1:12102:135","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Future","id":"1:12102:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:174:183","0:175:1030"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:38:1671":{"id":"0:38:1671","crate_id":0,"name":"left","span":{"filename":"src/lib.rs","begin":[192,4],"end":[197,5]},"visibility":"public","docs":"Convert the left side of `Either<L, R>` to an `Option<L>`.\n\n```\nuse either::*;\n\nlet left: Either<_, ()> = Left(\"some value\");\nassert_eq!(left.left(),  Some(\"some value\"));\n\nlet right: Either<(), _> = Right(321);\nassert_eq!(right.left(), None);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:287:1014":{"id":"0:287:1014","crate_id":0,"name":"partial_cmp","span":{"filename":"src/lib.rs","begin":[49,30],"end":[49,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::option::Option","id":"1:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"$crate::cmp::Ordering","id":"1:38660:180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:164":{"id":"0:164","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1055,0],"end":[1063,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"ExactSizeIterator","id":"1:7148:1905","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"ExactSizeIterator","id":"1:7148:1905","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"L"},"trait":{"name":"","id":"1:7202:156","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["len","is_empty"],"trait":{"name":"ExactSizeIterator","id":"1:7148:1905","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:167:797"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:168":{"id":"0:168","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1065,0],"end":[1070,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"iter::FusedIterator","id":"1:7472:1906","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"iter::FusedIterator","id":"1:7472:1906","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"L"},"trait":{"name":"","id":"1:7202:156","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7472:1906","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:187":{"id":"0:187","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1130,0],"end":[1150,1]},"visibility":"crate","docs":"Requires crate feature `\"use_std\"`","links":{},"attrs":["#[cfg(any(test, feature = \"use_std\"))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"BufRead","id":"4:3493:1604","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"BufRead","id":"4:3493:1604","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["lines","read_until","split","read_line","has_data_left"],"trait":{"name":"BufRead","id":"4:3493:1604","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:190:1921","0:191:1922","0:192:1924","0:193:1926"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:115":{"id":"0:115","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[911,0],"end":[918,1]},"visibility":"crate","docs":"Convert from `Either` to `Result` with `Right => Ok` and `Left => Err`.","links":{},"attrs":["#[allow(clippy :: from_over_into)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2502:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48878:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"R"}},{"type":{"kind":"generic","inner":"L"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:118:1833"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:288":{"id":"0:288","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,42],"end":[49,45]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::Ord","id":"1:2338:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::Ord","id":"1:2338:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["min","clamp","max"],"trait":{"name":"Ord","id":"1:2338:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:291:420"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11871:25371":{"id":"1:11871:25371","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:11840:409","self::pattern":"1:11520:1637"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"1:11344:6877","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11525:2818","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:79:1832":{"id":"0:79:1832","crate_id":0,"name":"either_into","span":{"filename":"src/lib.rs","begin":[740,4],"end":[749,5]},"visibility":"public","docs":"Convert the contained value into `T`\n\n# Examples\n\n```\n# use either::*;\n// Both u16 and u32 can be converted to u64.\nlet left: Either<u16, u32> = Left(3u16);\nassert_eq!(left.either_into::<u64>(), 3u64);\nlet right: Either<u16, u32> = Right(7u32);\nassert_eq!(right.either_into::<u64>(), 7u64);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2502:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2502:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:84:1839":{"id":"0:84:1839","crate_id":0,"name":"factor_none","span":{"filename":"src/lib.rs","begin":[765,4],"end":[770,5]},"visibility":"public","docs":"Factors out `None` from an `Either` of [`Option`].\n\n```\nuse either::*;\nlet left: Either<_, Option<String>> = Left(Some(vec![0]));\nassert_eq!(left.factor_none(), Some(Left(vec![0])));\n\nlet right: Either<Option<Vec<u8>>, _> = Right(Some(String::new()));\nassert_eq!(right.factor_none(), Some(Right(String::new())));\n```","links":{"`Option`":"1:48734:178"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11846:25379":{"id":"1:11846:25379","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:11847:25359"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"1:51000:6945","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:295:715":{"id":"0:295:715","crate_id":0,"name":"hash","span":{"filename":"src/lib.rs","begin":[49,47],"end":[49,51]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["state",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"__H"}}}]],"output":{"kind":"tuple","inner":[]},"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:9243:144","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:235:1935":{"id":"0:235:1935","crate_id":0,"name":"description","span":{"filename":"src/lib.rs","begin":[1291,4],"end":[1293,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11911:33006":{"id":"1:11911:33006","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:75:1810":{"id":"0:75:1810","crate_id":0,"name":"unwrap_left","span":{"filename":"src/lib.rs","begin":[629,4],"end":[639,5]},"visibility":"public","docs":"Returns the left value\n\n# Examples\n\n```\n# use either::*;\nlet left: Either<_, ()> = Left(3);\nassert_eq!(left.unwrap_left(), 3);\n```\n\n# Panics\n\nWhen `Either` is a `Right` value\n\n```should_panic\n# use either::*;\nlet right: Either<(), _> = Right(3);\nright.unwrap_left();\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"L"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"core::fmt::Debug","id":"1:9006:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11901:33002":{"id":"1:11901:33002","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:11520:1637","`DoubleEndedIterator`":"1:7125:120","prim@char":"4:11840:409","str::rmatch_indices":"1:11904:33003"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"1:50876:6940","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11525:2818","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11944:8016":{"id":"1:11944:8016","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4501:8016"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"1:51034:6862","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11854:30060":{"id":"1:11854:30060","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"4:11840:409","self::pattern":"1:11520:1637"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11525:2818","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:100":{"id":"0:100","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[840,0],"end":[859,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"generic","inner":"L"},{"kind":"generic","inner":"T"}]}},{"type":{"kind":"tuple","inner":[{"kind":"generic","inner":"R"},{"kind":"generic","inner":"T"}]}}],"bindings":[]}}}},"items":["0:104:1868"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:3328-0:258:1609":{"id":"b:1:3328-0:258:1609","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2680:2221","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3326:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["1:3330:1454"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:2602:2610":{"id":"1:2602:2610","crate_id":1,"name":"provide","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["demand",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Demand","id":"1:3389:6861","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2236-0:258:1609":{"id":"b:1:2236-0:258:1609","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2680:2221","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2230:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["1:2238:2089"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11860:1898":{"id":"1:11860:1898","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:48736:176","prim@char":"4:11840:409","self::pattern":"1:11520:1637"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11525:2818","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11830:30025":{"id":"1:11830:30025","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:11857:1462"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:180:1914":{"id":"0:180:1914","crate_id":0,"name":"read_exact","span":{"filename":"src/lib.rs","begin":[1101,4],"end":[1103,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"4:2909:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12121:183":{"id":"1:12121:183","crate_id":1,"name":"Output","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"Future","id":"1:12102:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"1:11883:30056":{"id":"1:11883:30056","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:11840:409","self::pattern":"1:11520:1637","str::rsplitn":"1:11886:30058"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"1:50830:6882","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11525:2818","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:36:1661":{"id":"0:36:1661","crate_id":0,"name":"is_left","span":{"filename":"src/lib.rs","begin":[161,4],"end":[166,5]},"visibility":"public","docs":"Return true if the value is the `Left` variant.\n\n```\nuse either::*;\n\nlet values = [Left(1), Right(\"the right value\")];\nassert_eq!(values[0].is_left(), true);\nassert_eq!(values[1].is_left(), false);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:51:1731":{"id":"0:51:1731","crate_id":0,"name":"either","span":{"filename":"src/lib.rs","begin":[367,4],"end":[376,5]},"visibility":"public","docs":"Apply one of two functions depending on contents, unifying their result. If the value is\n`Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second\nfunction `g` is applied.\n\n```\nuse either::*;\n\nfn square(n: u32) -> i32 { (n * n) as i32 }\nfn negate(n: i32) -> i32 { -n }\n\nlet left: Either<u32, i32> = Left(4);\nassert_eq!(left.either(square, negate), 16);\n\nlet right: Either<u32, i32> = Right(-4);\nassert_eq!(right.either(square, negate), 4);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}],["g",{"kind":"generic","inner":"G"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2943:1715","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"L"}],"output":{"kind":"generic","inner":"T"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"G"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2943:1715","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"R"}],"output":{"kind":"generic","inner":"T"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:71:1793":{"id":"0:71:1793","crate_id":0,"name":"right_or","span":{"filename":"src/lib.rs","begin":[559,4],"end":[564,5]},"visibility":"public","docs":"Return right value or given value\n\nArguments passed to `right_or` are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use [`right_or_else`],\nwhich is lazily evaluated.\n\n[`right_or_else`]: #method.right_or_else\n\n# Examples\n\n```\n# use either::*;\nlet right: Either<&str, &str> = Right(\"right\");\nassert_eq!(right.right_or(\"foo\"), \"right\");\n\nlet left: Either<&str, &str> = Left(\"left\");\nassert_eq!(left.right_or(\"right\"), \"right\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"R"}]],"output":{"kind":"generic","inner":"R"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:329":{"id":"0:329","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1221,0],"end":[1225,1]},"visibility":"crate","docs":"Requires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2499:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"::std::ffi::CStr","id":"1:47456:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2499:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"::std::ffi::CStr","id":"1:47456:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsMut","id":"1:2499:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CStr","id":"1:47456:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:332:1693"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:48:1720":{"id":"0:48:1720","crate_id":0,"name":"map_right","span":{"filename":"src/lib.rs","begin":[341,4],"end":[349,5]},"visibility":"public","docs":"Apply the function `f` on the value in the `Right` variant if it is present rewrapping the\nresult in `Right`.\n\n```\nuse either::*;\n\nlet left: Either<_, u32> = Left(123);\nassert_eq!(left.map_right(|x| x * 2), Left(123));\n\nlet right: Either<u32, _> = Right(123);\nassert_eq!(right.map_right(|x| x * 2), Right(246));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2943:1715","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"R"}],"output":{"kind":"generic","inner":"S"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11843:6896":{"id":"1:11843:6896","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:11840:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"1:50696:2821","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11827:32040":{"id":"1:11827:32040","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11088:1965"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1731":{"id":"0:0:1731","crate_id":0,"name":"either","span":{"filename":"src/lib.rs","begin":[1,0],"end":[1471,1]},"visibility":"public","docs":"The enum [`Either`] with variants `Left` and `Right` is a general purpose\nsum type with two cases.\n\n[`Either`]: enum.Either.html\n\n**Crate features:**\n\n* `\"use_std\"`\nEnabled by default. Disable to make the library `#![no_std]`.\n\n* `\"serde\"`\nDisabled by default. Enable to `#[derive(Serialize, Deserialize)]` for `Either`\n","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/either/1/\")]","#![no_std]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:23-0:261:159","0:24-0:264:210","0:258:1609","0:25:1635","0:26:1649","0:27:1652"],"is_stripped":false}},"b:1:12119-0:258:1609":{"id":"b:1:12119-0:258:1609","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Future","id":"1:12102:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoFuture","id":"1:12115:2168","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["1:12121:183","1:12122:2168","1:12123:769"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"F"}}},"0:226:541":{"id":"0:226:541","crate_id":0,"name":"deref","span":{"filename":"src/lib.rs","begin":[1264,4],"end":[1266,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:2909:116","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:131:1887":{"id":"0:131:1887","crate_id":0,"name":"fold","span":{"filename":"src/lib.rs","begin":[949,4],"end":[954,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["init",{"kind":"generic","inner":"Acc"}],["f",{"kind":"generic","inner":"G"}]],"output":{"kind":"generic","inner":"Acc"},"c_variadic":false},"generics":{"params":[{"name":"Acc","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"G"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2940:1890","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"Acc"},{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:7202:156","args":null}}}],"output":{"kind":"generic","inner":"Acc"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11942:33014":{"id":"1:11942:33014","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4500:33014"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"1:51025:6911","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11924:30062":{"id":"1:11924:30062","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:11840:409","self::pattern":"1:11520:1637"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11525:2818","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11525:2818","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11540:8145","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11851:28190":{"id":"1:11851:28190","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:11840:409","self::pattern":"1:11520:1637"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11525:2818","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:159:1903":{"id":"0:159:1903","crate_id":0,"name":"rfold","span":{"filename":"src/lib.rs","begin":[1040,4],"end":[1045,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["init",{"kind":"generic","inner":"Acc"}],["f",{"kind":"generic","inner":"G"}]],"output":{"kind":"generic","inner":"Acc"},"c_variadic":false},"generics":{"params":[{"name":"Acc","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"G"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2940:1890","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"Acc"},{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:7202:156","args":null}}}],"output":{"kind":"generic","inner":"Acc"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11857:30061":{"id":"1:11857:30061","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:11840:409","self::pattern":"1:11520:1637"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11525:2818","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11525:2818","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11540:8145","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:222":{"id":"0:222","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1257,0],"end":[1267,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Deref","id":"1:2909:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Deref","id":"1:2909:116","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"qualified_path","inner":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"L"},"trait":{"name":"","id":"1:2909:116","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:2909:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:225:227","0:226:541"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:25:1635":{"id":"0:25:1635","crate_id":0,"name":"for_both","span":{"filename":"src/lib.rs","begin":[82,0],"end":[89,1]},"visibility":"public","docs":"Evaluate the provided expression for both [`Either::Left`] and [`Either::Right`].\n\nThis macro is useful in cases where both sides of [`Either`] can be interacted with\nin the same way even though the don't share the same type.\n\nSyntax: `either::for_both!(` *expression* `,` *pattern* `=>` *expression* `)`\n\n# Example\n\n```\nuse either::Either;\n\nfn length(owned_or_borrowed: Either<String, &'static str>) -> usize {\n    either::for_both!(owned_or_borrowed, s => s.len())\n}\n\nfn main() {\n    let borrowed = Either::Right(\"Hello world!\");\n    let owned = Either::Left(\"Hello world!\".to_owned());\n\n    assert_eq!(length(borrowed), 12);\n    assert_eq!(length(owned), 12);\n}\n```","links":{"`Either::Right`":"0:264:210","`Either`":"0:258:1609","`Either::Left`":"0:261:159"},"attrs":["#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! for_both {\n    ($value:expr, $pattern:pat => $result:expr) => { ... };\n}"},"1:11892:33000":{"id":"1:11892:33000","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11525:2818","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11525:2818","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11540:8145","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11818":{"id":"1:11818","crate_id":1,"name":null,"span":null,"visibility":{"restricted":{"parent":"1:11083:1366","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["1:11819:797","1:11820:2631","1:11821:32990","1:11822:32991","1:11824:32992","1:11827:32040","1:11828:32993","1:11829:310","1:11830:30025","1:11831:25096","1:11833:25097","1:11835:25098","1:11837:1700","1:11839:32994","1:11840:32995","1:11841:30044","1:11842:30045","1:11843:6896","1:11844:6954","1:11845:2619","1:11846:25379","1:11847:25359","1:11848:2613","1:11849:32996","1:11850:25392","1:11851:28190","1:11854:30060","1:11857:30061","1:11860:1898","1:11864:1904","1:11868:2612","1:11871:25371","1:11874:30054","1:11877:32997","1:11880:32998","1:11883:30056","1:11886:30058","1:11889:32999","1:11892:33000","1:11895:2127","1:11898:33001","1:11901:33002","1:11904:33003","1:11907:33004","1:11909:33005","1:11911:33006","1:11913:33007","1:11914:33008","1:11915:33009","1:11918:33010","1:11921:29225","1:11924:30062","1:11927:33011","1:11930:33012","1:11933:33013","1:11936:1966","1:11938:29872","1:11939:29875","1:11940:29876","1:11941:29877","1:11942:33014","1:11944:8016","1:11945:33015"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11930:33012":{"id":"1:11930:33012","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:11840:409","self::pattern":"1:11520:1637"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11525:2818","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:207":{"id":"0:207","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1227,0],"end":[1235,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Target","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2496:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"Target"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2496:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"Target"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2496:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"Target"}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:211:311"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:111":{"id":"0:111","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[900,0],"end":[907,1]},"visibility":"crate","docs":"Convert from `Result` to `Either` with `Ok => Right` and `Err => Left`.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2505:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48878:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"R"}},{"type":{"kind":"generic","inner":"L"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:114:680"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:182:1916":{"id":"0:182:1916","crate_id":0,"name":"read_to_string","span":{"filename":"src/lib.rs","begin":[1109,4],"end":[1111,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"std::string::String","id":"5:7156:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"4:2909:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:264:210":{"id":"0:264:210","crate_id":0,"name":"Right","span":{"filename":"src/lib.rs","begin":[54,4],"end":[54,12]},"visibility":"default","docs":"A value of type `R`.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":{"tuple":["0:266:1567"]},"discriminant":null}},"0:42:1696":{"id":"0:42:1696","crate_id":0,"name":"as_pin_ref","span":{"filename":"src/lib.rs","begin":[262,4],"end":[271,5]},"visibility":"public","docs":"Convert `Pin<&Either<L, R>>` to `Either<Pin<&L>, Pin<&R>>`,\npinned projections of the inner variants.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"1:48870:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Pin","id":"1:48870:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"L"}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"Pin","id":"1:48870:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"R"}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:8139:2384-0:258:1609":{"id":"a:1:8139:2384-0:258:1609","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:8139:2384","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:8139:2384","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8139:2384","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:69:1786":{"id":"0:69:1786","crate_id":0,"name":"left_or_else","span":{"filename":"src/lib.rs","begin":[531,4],"end":[539,5]},"visibility":"public","docs":"Returns left value or computes it from a closure\n\n# Examples\n\n```\n# use either::*;\nlet left: Either<String, u32> = Left(\"3\".to_string());\nassert_eq!(left.left_or_else(|_| unreachable!()), \"3\");\n\nlet right: Either<String, u32> = Right(3);\nassert_eq!(right.left_or_else(|x| x.to_string()), \"3\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"generic","inner":"L"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2943:1715","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"R"}],"output":{"kind":"generic","inner":"L"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:105":{"id":"0:105","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[861,0],"end":[897,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:107:1872","0:108:845"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:328:311":{"id":"0:328:311","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[1221,0],"end":[1225,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"::std::ffi::CStr","id":"1:47456:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:23-0:261:159":{"id":"0:23-0:261:159","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[40,24],"end":[40,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::Either::Left","name":"Left","id":"0:261:159","glob":false}},"0:153:1031":{"id":"0:153:1031","crate_id":0,"name":"position","span":{"filename":"src/lib.rs","begin":[1018,4],"end":[1023,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["predicate",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2940:1890","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:7202:156","args":null}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:181:1915":{"id":"0:181:1915","crate_id":0,"name":"read_to_end","span":{"filename":"src/lib.rs","begin":[1105,4],"end":[1107,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"std::vec::Vec","id":"5:6599:241","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"4:2909:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"17:10506:3366":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"4:10402:2327":{"crate_id":4,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"17:8418:19980":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"16:7372:33938":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"5:3680:2786":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"17:12265:3676":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:20432:24116":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"16:7603:4326":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:7479:2706":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"4:889:2555":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"4:7796:6813":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"1:4001:103":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"17:12609:3799":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"4:6108:2757":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"12:762:2786":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"1:47827:2733":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:52861:5814":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:13221:3970":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:49051:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"6:4693:5079":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"5:3245:2786":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"1:8564:79":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"16:6052:6630":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:47586:2710":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"14:7:6711":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"16:7511:4317":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:10490:3365":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"6:4525:4997":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:0:2158":{"crate_id":17,"path":["object"],"kind":"module"},"16:5596:4193":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:12816:3866":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"6:7289:5541":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"9:649:18854":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"16:2749:4126":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:47489:6042":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"16:5761:6591":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"4:4461:13540":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:9539:6513":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"4:4708:13529":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"16:4606:4178":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:9499:3009":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"6:587:4661":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"5:5739:13651":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:50894:6941":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:12323:2757":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"16:6865:6671":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"16:2411:4112":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:4654:5058":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:4591:5030":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:52490:5796":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:12087:3643":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:8510:3276":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:9658:6517":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"5:1404:6718":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"4:946:2788":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:11800:3584":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"6:4608:5041":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:51018:6895":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:12148:3652":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:47739:2728":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"4:998:6725":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:2683:223":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:13327:4013":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:46978:198":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:54739:5897":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"6:1506:4670":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"12:2184:4500":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"18:707:6465":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"4:1891:6776":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"1:4563:8033":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:38660:180":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"0:258:1609":{"crate_id":0,"path":["either","Either"],"kind":"enum"},"5:1432:6716":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:10875:3395":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:10434:6571":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"4:3906:13509":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"5:6599:241":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:13382:4032":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:7202:156":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:11259:3470":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:48058:2702":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:4373:2413":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:21793:5675":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"12:1845:2786":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"1:51708:158":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"5:2142:33838":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:53621:5845":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:48946:180":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"5:3057:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"6:1531:4680":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:20472:24325":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"5:3153:6738":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"4:11035:5629":{"crate_id":4,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"4:8247:6819":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"9:863:18832":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:1823:2167":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:48600:8069":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"16:3402:4159":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"16:6463:6650":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:12134:3650":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"18:574:3163":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:9446:6506":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:8561:3278":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"16:4574:4177":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:47442:5755":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:54644:5890":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:46912:195":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"5:1091:7245":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:4427:4977":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:47082:4306":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"18:531:6449":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:51147:6952":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:4707:2873":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"17:12739:3850":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:47678:2724":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"18:548:140":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:1749:5645":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:39873:6899":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"15:0:2156":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:11893:3595":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"4:6432:3029":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"16:2465:4114":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:11270:6892":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:13572:4080":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"5:0:283":{"crate_id":5,"path":["alloc"],"kind":"module"},"6:4506:4985":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:4327:4170":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"4:4281:6783":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"4:11854:729":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"17:11300:3482":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"4:8743:6825":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"5:7063:13454":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:4150:2587":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"6:579:4656":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:9577:3303":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"4:8492:2555":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"4:10338:3039":{"crate_id":4,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"4:1004:6726":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"12:0:2154":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"1:51644:208":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"6:547:4640":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"4:7574:5551":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:8822:33944":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"1:47456:101":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:13518:4070":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"16:7093:4288":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:50067:2837":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"6:4310:4933":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:11761:3579":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:2152:578":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"12:1534:6733":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:4222:6866":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"4:11072:5628":{"crate_id":4,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"4:355:6758":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"12:632:2555":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:12896:3884":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"4:721:13444":{"crate_id":4,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"17:487:6476":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"4:6392:2696":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"1:7051:2707":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:6548:5495":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:51132:6947":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"18:113:7226":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:20879:5652":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"4:10441:3040":{"crate_id":4,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:51634:202":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"15:175:7230":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"16:5525:5930":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"6:1547:4688":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:13279:4012":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:30073:24948":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"16:2535:4117":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"6:6339:5392":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:52959:5817":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:10625:3384":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"6:0:802":{"crate_id":6,"path":["libc"],"kind":"module"},"6:4210:4884":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"4:8931:6830":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:47748:2729":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"4:3321:2318":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:21628:7017":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:11540:8145":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:4201:4879":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:1550:2297":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"16:6654:4245":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:53575:5844":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"16:6161:19915":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"18:515:3166":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:8295:19976":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:13176:3960":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:4485:4982":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"5:3699:2969":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:4788:5117":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"4:7511:3034":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"6:4675:5068":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:10528:6576":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"12:815:6720":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"6:532:4631":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:50038:6920":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:8711:656":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"4:11053:5635":{"crate_id":4,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:57559:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:8569:86":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"4:9062:215":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:50077:6922":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"6:6279:5359":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"4:8147:2308":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"12:1832:2555":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:11137:3449":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"4:8482:2840":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"4:2591:3009":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"4:7023:7250":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"16:7249:6680":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:10845:3361":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:9909:3309":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:2681:2404":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"6:1511:4672":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"4:8813:1761":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:52631:5802":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:11909:3600":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"6:4284:4920":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:4754:781":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:12115:2168":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"6:652:14088":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:50046:2563":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:9433:6505":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"6:4585:5027":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"4:11148:6857":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"4:7600:5555":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"1:29756:7895":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"5:1443:6717":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"4:1639:6738":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"16:7388:6693":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:47423:8041":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:21703:5663":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:967:6477":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"16:7872:6700":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:57637:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:9805:3372":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:2909:116":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"6:6582:5504":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"4:663:2287":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"11:0:2153":{"crate_id":11,"path":["adler"],"kind":"module"},"4:9861:6046":{"crate_id":4,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"6:4267:4914":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"5:688:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"4:11211:6034":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:52813:5813":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"5:784:2972":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"9:586:4506":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"1:2579:115":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:20767:5652":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"16:6137:6633":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"4:3468:1608":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"1:4344:3058":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:9025:2578":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"6:4459:4980":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:4755:5104":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:9764:6528":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"4:11229:7013":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:52668:5804":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:51043:6903":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"12:1065:33932":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:12638:3810":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"5:6087:2999":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"18:699:6463":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"4:11847:1444":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"17:12948:3901":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"16:6668:4247":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"4:902:2556":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:47089:6900":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"5:3568:2969":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:3010:19056":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:11356:3499":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:9738:6525":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:39882:2408":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"16:6704:4250":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:8526:3277":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"12:2198:4502":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"16:8014:4306":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"9:33:18903":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"9:592:18852":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"17:13354:4025":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"4:1866:6774":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"1:47696:2734":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"6:6458:5436":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"6:7276:5540":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"12:2069:6727":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"4:11811:13445":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:12674:3840":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:2499:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"1:51521:6053":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"16:2825:4129":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:9691:6520":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:9868:2556":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"16:4519:4175":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:12102:135":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"4:8255:5599":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"4:11859:1460":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"16:2793:4128":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:47022:2208":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"16:8069:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:13231:3975":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:2992:2205":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"4:8184:13505":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"5:6969:195":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"18:681:6460":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:11368:3502":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:51469:7030":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"6:5615:5233":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:9947:20063":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:9936:6877":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"4:10638:6814":{"crate_id":4,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"17:13071:3930":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:9317:6500":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:11721:3573":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:21786:7020":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:9283:2562":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:0:486":{"crate_id":1,"path":["core"],"kind":"module"},"4:9361:128":{"crate_id":4,"path":["std","sys","unix","fs","File"],"kind":"struct"},"17:10973:3419":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"4:10399:2331":{"crate_id":4,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:48810:1761":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"1:21:667":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"6:5482:5167":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:12972:3906":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:12836:3874":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"16:7543:4139":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:53685:5847":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"16:7211:4307":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"12:1836:1761":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:562:3393":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:3326:68":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"1:52715:5805":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"12:697:6717":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"4:11841:1478":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"1:50726:2311":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"1:9011:119":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:51009:6946":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:52983:5818":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:47617:2712":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:9006:111":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"1:21819:7933":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:20851:13206":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:21757:24936":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:48010:2694":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"16:3632:4162":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:2683:4123":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"16:6200:6634":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"4:962:6732":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:11974:3630":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"6:4683:5073":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"16:2320:4108":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:12980:3908":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"4:10923:3043":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:10445:3361":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:48819:2380":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"5:4297:2991":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"6:4356:4957":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:4728:24768":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"4:11444:5637":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"1:47291:6040":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"6:5694:5282":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:48017:6871":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"17:9155:6492":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"4:11223:7012":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:13168:3959":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"12:1029:6728":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:13413:4040":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"4:8867:13594":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"4:547:2983":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:29973:2779":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"4:1613:2788":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"4:8749:183":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"17:13039:3922":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:10257:6556":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:47096:2588":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"17:11536:3544":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:1707:4796":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"16:5122:4189":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:12046:3638":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"16:6472:4230":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:48852:2381":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:4317:4936":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:12435:2781":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"4:7680:6810":{"crate_id":4,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"17:10497:20090":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"5:6349:2969":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"16:7135:33939":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"16:5793:5955":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:10270:6557":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:8631:3280":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:47333:6902":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"16:7567:19922":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"6:595:4666":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:21298:24121":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:12874:3880":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:8475:19959":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:11617:3556":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:2459:13526":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:47103:5751":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"16:4921:4188":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:10949:3405":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"5:1463:6742":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:48921:2555":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"1:51315:6959":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:54495:5885":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"6:6985:5511":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:4826:5139":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"5:5703:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"5:4264:2297":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"4:10651:6028":{"crate_id":4,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"9:622:18853":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"6:1649:4761":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:51481:5634":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"4:8160:2311":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"0:27:1652":{"crate_id":0,"path":["either","try_right"],"kind":"macro"},"17:9885:6543":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:46795:2219":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:2307:124":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"17:12225:3671":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"5:4817:2297":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:20870:13526":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"12:300:7002":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:5661:26396":{"crate_id":1,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"17:9722:3307":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"4:10633:7011":{"crate_id":4,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"16:7497:4141":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"4:1828:6772":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"2:223:207":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:52512:5797":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"6:4364:4962":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:9700:6523":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"4:7801:6814":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:8956:1608":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"17:10360:6561":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"4:2655:2324":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:2687:225":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"16:534:6145":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:10321:3351":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"12:1518:18993":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:22200:171":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:51473:7031":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:50876:6940":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"6:562:4648":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:11058:8107":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"4:11462:5638":{"crate_id":4,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:50948:6943":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"16:7659:19923":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:9243:144":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:47282:6901":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"4:9373:3038":{"crate_id":4,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"4:1622:6735":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"4:9067:216":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:10088:3343":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"4:5410:6790":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"1:2230:97":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"1:10048:6880":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"5:1055:7244":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"4:5853:3018":{"crate_id":4,"path":["std","sync","mpmc","array","Channel"],"kind":"struct"},"1:7097:1883":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:47764:2730":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"16:8056:4377":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:9165:33945":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:21591:5655":{"crate_id":1,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"17:10332:20088":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:9930:3311":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"16:6359:6646":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:5882:2735":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:11591:8151":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"6:4778:5112":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:51687:2755":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:9820:6534":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"16:5737:5952":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:54293:5882":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"16:7825:4364":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"5:7051:2784":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:6865:2695":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"1:52613:5801":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"4:11806:29681":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"16:5472:4137":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:5494:2713":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:9681:3228":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"4:5744:6796":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:9553:3297":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:11247:3469":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"16:7942:6709":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"18:491:6448":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:2828:2193":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:1601:4725":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:11014:3423":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"4:8116:1607":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"4:630:13438":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"4:920:6718":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:48785:1762":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"4:8167:2312":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"1:1634:577":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"1:22299:167":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"6:6287:5364":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:3640:1761":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"6:7265:5536":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"5:3098:33778":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:50776:6938":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"4:4150:7249":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:9631:6515":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:8494:3275":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:47788:2716":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:6610:7253":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"16:5184:19026":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:51161:6955":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:48734:178":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"12:1859:6736":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:20726:13209":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:8951:33949":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"16:6376:19916":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"6:5520:5186":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:9897:6544":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"12:320:2959":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:2844:2197":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:3389:6861":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"12:725:6718":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:12695:3845":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"4:4603:5407":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"16:6877:19919":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"16:3689:4163":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"5:3086:2555":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:47799:2308":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"4:971:6717":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:1614:4732":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:4227:6867":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"4:5095:188":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"1:1641:5644":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"6:6385:5411":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"4:4137:13535":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:22101:172":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"16:3263:4158":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"16:6528:5989":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"6:7224:5527":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:2791:2184":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"16:4545:4176":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"4:4879:13563":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"6:4277:4917":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"4:3239:2332":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:47626:2719":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"6:4234:4898":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"4:967:6716":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"16:5447:6586":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:13557:4079":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:47729:2727":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:11828:3589":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"4:11125:3045":{"crate_id":4,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"5:288:2783":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:1568:4703":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:6510:5476":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:3977:6863":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:5886:5352":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"4:2385:5647":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"5:3132:33779":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"6:5871:5341":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:47409:6912":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"17:10642:19984":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"6:1660:4769":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"16:7970:6710":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:8911:33953":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"4:9051:164":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"12:444:141":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"12:1866:6737":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"16:7329:4148":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:54701:5895":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:13478:4059":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"4:912:1761":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"4:8173:6819":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:2764:2181":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"17:12022:3635":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:38677:2415":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"17:1931:6480":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:25640:5679":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:49500:2573":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:47595:2307":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"4:1634:6737":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"16:7956:4153":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"4:5524:5313":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"4:2028:182":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:12103:3645":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"4:5347:6786":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"1:50702:6936":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:2769:2186":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"12:777:2965":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"7:0:1505":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:6496:19917":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"16:4689:4181":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:48039:2337":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:4569:5019":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"4:4121:7247":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"4:6319:163":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:9021:191":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"17:8881:33950":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"4:11857:1462":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"17:9382:3292":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"5:1422:6732":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:12550:3747":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"6:6332:5388":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:51533:8166":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"5:6511:2794":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"5:219:2968":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"5:2874:33856":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:8701:3282":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:10121:3346":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"16:5963:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"18:599:33954":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"12:1872:6738":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"1:11344:6877":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"4:11855:730":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"4:10807:4573":{"crate_id":4,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"16:6171:4204":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:52316:5789":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:50579:2709":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"16:6781:6662":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:4408:4976":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:48937:1761":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"17:386:6475":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"4:11851:631":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"1:49733:67":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"17:242:6473":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"6:1642:4757":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"16:4441:4174":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:13141:3952":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"12:834:6723":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:6656:2692":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:21392:13526":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:10583:19983":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:21720:24971":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"16:4385:4172":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:8737:24411":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"18:766:23727":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:7084:133":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:50624:6934":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"4:688:13443":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"4:6211:3015":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:11545:8144":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"4:10034:6840":{"crate_id":4,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"4:4785:13524":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:11559:3549":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:50614:6933":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"4:1116:6728":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:48024:2696":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:11594:3553":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:3167:134":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:51110:8149":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"5:6274:1761":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:2302:185":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"4:9000:29247":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:48685:6781":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:51695:2756":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:7148:1905":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:9644:6516":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:9339:6502":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"4:1610:1761":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"5:36:2785":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"4:1617:2786":{"crate_id":4,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"4:5718:6795":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:8732:26446":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:2850:2198":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"6:1701:4793":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"5:1366:2555":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"16:6690:4143":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"12:659:1761":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:8245:2818":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"6:7230:5528":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:50980:2312":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"17:12198:3669":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:7472:1906":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"16:5664:5942":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"5:5614:2788":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"16:5219:3276":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"4:3486:1606":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"18:736:23726":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:5564:5208":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"4:8137:2307":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"17:11343:3498":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:10466:6573":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"16:2705:4124":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:2916:6484":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"5:6961:1761":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"6:1606:4727":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:57611:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:22266:170":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"4:8498:2842":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"1:50270:5781":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:13492:4061":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:46896:197":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"6:4371:4964":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"16:7469:4150":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"5:2094:7004":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:10221:6553":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"4:2581:2322":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"9:19:18902":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"17:13031:3921":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:1962:6483":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"18:564:3170":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"5:781:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:48794:2555":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:48720:5769":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"4:8797:2555":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"6:1744:4809":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:53158:5823":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:12617:3802":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"6:6312:5382":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"14:187:19005":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"12:738:6719":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"6:5597:5221":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:2854:2199":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:51325:6963":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:11534:6465":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:1894:15065":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"6:5737:5298":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"9:709:2837":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"4:11682:3053":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:50634:6935":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:247:6474":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"16:4217:4167":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"16:4144:4166":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:13393:4037":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"9:676:18840":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"4:3237:2331":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"5:5812:2297":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:3162:231":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:10283:6558":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"6:7253:5534":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:7088:149":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"6:4544:5005":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:3243:2218":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"6:500:4608":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"16:2631:4121":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:9061:3297":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:3249:6486":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:8966:131":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"1:39869:6812":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"3:0:2146":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"16:5878:19027":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:2823:2192":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"16:7980:19924":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:51449:7025":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"4:11196:6032":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:2816:2195":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"16:6330:4207":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:54675:5893":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"5:7156:221":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"4:11843:1028":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"9:0:2151":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:2996:2206":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:52360:5791":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"4:576:3006":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"1:6563:2718":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:9274:6496":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"6:1517:4675":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"4:3707:6779":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"4:4601:5405":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"6:6440:5425":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"5:1973:6744":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:13158:3956":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"4:6505:6800":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"5:2375:5545":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"5:3488:2555":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"4:4533:13555":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"4:6259:203":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"18:521:23728":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:9844:6538":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:10774:3356":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"4:8332:13570":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"5:6998:1761":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:11708:3570":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"4:3477:29239":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"6:1728:4804":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:4195:4877":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:526:4628":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:5605:5226":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:46936:196":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"4:4870:13562":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"16:4721:4182":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:10385:6569":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"6:6419:5418":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:21668:6035":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"4:776:141":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:9458:6507":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:22332:168":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"18:609:6452":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"4:8943:29236":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"9:827:18928":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"0:261:159":{"crate_id":0,"path":["either","Either","Left"],"kind":"variant"},"6:7236:5529":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"4:3278:2328":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"16:2367:4110":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:2253:105":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"7:79:18826":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"4:9072:5628":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"17:11774:3581":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"6:4136:4833":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:52561:5799":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:13340:4019":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:47636:2720":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"4:8978:6836":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:21286:5654":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"6:6425:5420":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:2680:2221":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"4:5018:6785":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:10310:6560":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:47000:200":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"16:3716:4164":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"4:8277:5392":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:2862:2201":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:1580:4711":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"4:2031:181":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"5:7139:2857":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:3089:2209":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:54541:5886":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"6:4575:5021":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:47276:6862":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:9250:6494":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:12307:3680":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:10233:6554":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"4:11142:6803":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:9712:3306":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:3152:2210":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"4:2428:1603":{"crate_id":4,"path":["std","io"],"kind":"module"},"6:554:4643":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:1684:4786":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"4:683:6764":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"16:2300:4102":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"6:5670:5270":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"18:614:33957":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:10108:6548":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"4:8055:2340":{"crate_id":4,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"16:7117:33942":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"4:600:6761":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"4:3161:7497":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:12164:3656":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:10894:3398":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:11684:3569":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:49291:85":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:2807:2188":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"4:2615:2314":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:54183:5881":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"11:36:4504":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"17:12278:3677":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:12060:3639":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:54655:5891":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"12:861:6726":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:9778:6529":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"12:1044:18992":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"4:5361:6787":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"6:5635:5249":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:9400:3060":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"18:0:2159":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:2838:2196":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"4:11822:29248":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"6:5578:5219":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:4189:4876":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:9857:6540":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"4:11844:308":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"5:6931:2788":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:47687:2725":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:50513:6926":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"14:215:6714":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:47503:2860":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"typedef"},"6:4602:5038":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:11525:2818":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:51253:6898":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"5:3477:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:11436:3506":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"4:10984:5616":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:9873:6542":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"5:6155:2788":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:12955:3903":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:50542:6930":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"16:7452:195":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"18:624:33955":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:14:1928":{"crate_id":1,"path":["core","write"],"kind":"macro"},"16:7237:4308":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:21644:5658":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:4353:2589":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:54579:5887":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:1021:6478":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"13:220:4498":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:51725:6056":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:8272:19975":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"16:5949:6599":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"5:7167:2811":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:2692:2405":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"16:5433:6582":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"14:40:3420":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:49751:70":{"crate_id":1,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"6:4807:5131":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:52382:5792":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"15:193:7234":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"4:5581:203":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"4:11245:3047":{"crate_id":4,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"16:2727:4125":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:8774:3284":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:2785:2185":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"4:8509:2843":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"16:6146:5983":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"5:2604:5549":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:12211:3670":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"4:8789:5618":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"0:0:1731":{"crate_id":0,"path":["either"],"kind":"module"},"4:5711:6792":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:49331:92":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:8596:3279":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"4:10929:3044":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"16:0:2157":{"crate_id":16,"path":["gimli"],"kind":"module"},"5:2876:5548":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"5:2880:33827":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"4:10816:6791":{"crate_id":4,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"5:2065:6745":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"16:5494:19911":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"16:7267:6687":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:50522:6928":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:54617:5888":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"16:5411:4138":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:47664:6917":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:46881:2207":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:2344:186":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"4:933:6719":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"6:7299:5543":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:4081:6865":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:1771:6479":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"4:10190:6790":{"crate_id":4,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"4:486:3047":{"crate_id":4,"path":["std","thread","local","fast","Key"],"kind":"struct"},"14:31:6711":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"16:2930:19055":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"9:920:18834":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:1903:20021":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:10752:3388":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:52650:5803":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"4:3164:7555":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"6:4814:5134":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"6:4645:5055":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"16:6298:6636":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"5:1612:2969":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"6:5453:5143":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"4:9091:5629":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"17:420:3236":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:11186:3456":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"16:3026:3189":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"5:7178:2812":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"5:7079:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:51358:2819":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"4:9021:5627":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:49870:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"4:1107:6727":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:7516:26447":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:22068:175":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:51737:5788":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"4:6156:6797":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:2593:127":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"17:12850:3878":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"16:5628:5936":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:51338:6051":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"4:10120:7087":{"crate_id":4,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"16:2341:4109":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:13192:3963":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:13100:3938":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"16:4849:4186":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"16:5541:6590":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"4:7664:13442":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:12884:3881":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"4:3493:1604":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"17:9183:6493":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:11528:3542":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:4024:8018":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"4:7942:6817":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:50285:7023":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"5:6001:13600":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"4:4599:5403":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"6:4222:4889":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"4:7573:13526":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"16:6210:5986":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:47386:8040":{"crate_id":1,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"4:8088:2336":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"1:11233:6889":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"4:9173:6775":{"crate_id":4,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:22830:5678":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"5:2162:7007":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"6:4471:4981":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"4:11846:1366":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"17:9488:6511":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"4:8986:5624":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:57598:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:12730:3846":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:50605:6932":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:13214:3968":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"4:3167:7556":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"12:985:6672":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:58933:5909":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"6:4216:4886":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"6:6991:5513":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:12514:3716":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"5:2873:6150":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"5:1257:6731":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:52336:5790":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:11787:3582":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:10374:6565":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"12:1852:6735":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"6:488:4603":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:2750:2410":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"14:160:6711":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"6:4639:5054":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"12:751:2788":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"4:2911:127":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"14:165:18998":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"16:2282:4100":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"4:10207:32138":{"crate_id":4,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:22365:169":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:11330:3494":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:10394:6570":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"14:0:2155":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"4:9984:7252":{"crate_id":4,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:9328:6501":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"16:7319:6692":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"18:636:3182":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:9475:6510":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"4:1093:6672":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:12176:3658":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"5:5548:229":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:48802:2556":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"4:11858:1459":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"6:482:4600":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"18:538:3168":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"5:1376:2556":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:47319:5754":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"12:119:2957":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:51178:6956":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:10796:3390":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:11661:3564":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:13527:4074":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:2774:2183":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"4:4589:13514":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"5:6939:2979":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"5:3943:2556":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:2933:2203":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"4:10803:6811":{"crate_id":4,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"4:11487:6807":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"4:6561:13592":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"17:11841:3590":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"4:7808:5556":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"5:6947:33776":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:51500:121":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"4:7848:118":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"16:7847:4365":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"5:3093:6736":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"4:11864:1102":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"16:6735:6652":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"4:8228:7008":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"4:11840:409":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"1:50712:2309":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"4:7952:2325":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"4:9110:6838":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:13148:3953":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"6:1538:4683":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"6:474:4595":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:12163:189":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"17:11034:3433":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:9422:6504":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:51445:7024":{"crate_id":1,"path":["core","str","LinesAnyMap"],"kind":"struct"},"1:22398:166":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:3173:2212":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"5:4234:2991":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:12797:3865":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:2338:179":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"1:39833:2161":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"4:3429:2305":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"4:7856:6816":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:47646:2721":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:4663:5064":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:9118:33951":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"4:11839:921":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"17:10721:3387":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"14:221:4453":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"16:6842:6004":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"16:6316:6644":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:51226:6957":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:50670:2822":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"4:7818:6027":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"17:10532:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:11288:3479":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:2496:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"4:7831:129":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"16:6123:4132":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"4:3201:2330":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:10687:6887":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"17:9108:6491":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"6:4437:4978":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"5:5138:13632":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"5:6907:2782":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"4:680:6762":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:10141:6883":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:49131:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"16:3854:4165":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:48629:5767":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"4:8906:5623":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:50794:6939":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"5:6668:3004":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"16:2433:4113":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:12188:2169":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:11734:3316":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:10546:19982":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:9831:6535":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:48048:2700":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"4:2387:13487":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:1758:5648":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:53029:5820":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:48566:5758":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"4:10628:7009":{"crate_id":4,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"6:5851:5327":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:50930:6942":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"17:12337:3361":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:50696:2821":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"5:864:2977":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:47416:6913":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"4:11367:6779":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:48861:2680":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"4:5381:6788":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"1:1917:5651":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:11125:3446":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"5:6922:6757":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:10822:19985":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:57572:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:5703:5946":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"16:6252:5988":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:4108:6157":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:53415:5842":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:12136:28135":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"12:1085:6729":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:20689:13205":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:6805:2336":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"4:1478:143":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"4:4664:13564":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:13024:3920":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:52791:5812":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"19:0:1010":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"12:2205:2784":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:12349:3687":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"15:214:19013":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"16:6059:33940":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"4:5396:6789":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"1:2779:2182":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:53651:5846":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"4:4008:13516":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:50030:2564":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"5:3902:2969":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:9975:6878":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"18:80:7222":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:10013:6879":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"16:2771:4127":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:22431:5677":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"6:5723:5295":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:50684:6050":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"12:1840:2788":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:7218:5526":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:54433:5884":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"12:387:7239":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"4:11008:29466":{"crate_id":4,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:2867:2202":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:49514:2576":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"18:96:7223":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:13459:4054":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:12380:139":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:5417:2723":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:53339:5840":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"5:836:2975":{"crate_id":5,"path":["alloc","collections","binary_heap","retain","RebuildOnDrop"],"kind":"struct"},"6:1692:4787":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"10:0:2152":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"16:6567:6001":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:53385:5841":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:52406:5793":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:53261:5825":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:9015:2574":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"4:5464:6791":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"4:8925:106":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"12:2178:4499":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"6:4327:4943":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"4:10673:129":{"crate_id":4,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"16:5510:5927":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:10608:3250":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"6:1586:4713":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:8393:19979":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:11997:3631":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:47073:5750":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"1:50453:6924":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:54041:5880":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"0:25:1635":{"crate_id":0,"path":["either","for_both"],"kind":"macro"},"8:0:2150":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"4:7621:3040":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"6:4747:5102":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"16:6676:4142":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:51652:192":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"1:49784:109":{"crate_id":1,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"17:10682:3386":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:9501:3290":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"5:6643:2999":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"5:4103:2555":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"5:4219:242":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:8941:6488":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"4:8838:5620":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:2937:2204":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"1:49091:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:20718:13526":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"4:11494:6807":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:9601:3305":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"16:4297:4169":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"16:2605:4120":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"5:3501:2556":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:49211:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:10670:6577":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"4:2909:207":{"crate_id":4,"path":["std","io","error","Result"],"kind":"typedef"},"17:8981:6489":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:13126:3948":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:47566:2709":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"6:4700:983":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"4:7947:6818":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"4:7649:13440":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"4:8440:2839":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"6:5759:5306":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:11639:3563":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"6:5845:5326":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:12748:3851":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:51453:7026":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"16:7909:6705":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"6:5702:5283":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:47655:2722":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"16:6109:4202":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:11485:3531":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:13506:4068":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"16:7929:6706":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:47813:2732":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"5:1212:6672":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"4:11327:6778":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"4:8095:2338":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"16:3566:4160":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:54664:5892":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:9071:33947":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"5:1243:6727":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"16:2261:19028":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:0:433":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"9:977:4576":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"6:4716:5089":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"4:11862:775":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"1:48066:2704":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:47461:2859":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:20449:24323":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:11054:3434":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"4:7585:29443":{"crate_id":4,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"6:4736:5096":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"4:11016:5634":{"crate_id":4,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"16:6829:6668":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:54769:5899":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"6:4257:4908":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:13436:4053":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"16:2509:4116":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:20451:24327":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"5:6977:6020":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:9371:6491":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:9229:140":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"17:11606:3555":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"4:11856:726":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"4:7530:3036":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:10476:20089":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"4:10846:5618":{"crate_id":4,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"1:50085:6923":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"12:646:2556":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"16:6345:4140":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:51034:6862":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"16:5203:3275":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:50504:6925":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"16:4262:4168":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:50830:6882":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:11748:3578":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"4:3900:13510":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"6:7259:5535":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:47716:2714":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"5:961:2969":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"4:8761:5616":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"4:11181:5636":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:49507:2575":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"14:202:2814":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:12926:3895":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:49757:130":{"crate_id":1,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"4:3998:13515":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:54635:5889":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:13404:4038":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:20664:13215":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"17:12361:3694":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"16:7298:6691":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"4:11388:6780":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:10127:6882":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:58912:5908":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"6:4112:4816":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"6:4615:5043":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:48649:24956":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"4:7703:6811":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:21538:6160":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"18:755:6472":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:12033:3636":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"6:1713:4797":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"9:188:18882":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"17:13374:4031":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"16:4635:4179":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:11746:111":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"6:506:4611":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:47343:6041":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:4289:3057":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"5:7004:1761":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"6:6303:5376":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:4708:5084":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"4:11863:1515":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"4:8350:2827":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"17:12237:3672":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"16:2993:4154":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:48672:6049":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:48583:5760":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"6:6362:5410":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:21680:24949":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"4:10295:6825":{"crate_id":4,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"4:10693:2306":{"crate_id":4,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:8991:33952":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"4:1628:6736":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:11813:3586":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"4:4099:7246":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"12:274:6999":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:9362:3297":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"16:6593:6003":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:49251:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"16:2557:4118":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:50592:6931":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"4:4928:13569":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"5:5094:2969":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:2233:98":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:51477:7032":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"4:7872:1952":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"5:7096:2858":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:30015:24962":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"5:632:6739":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:9159:6874":{"crate_id":1,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"4:981:13455":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:52460:5795":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"12:353:2961":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:1674:4780":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"7:32:18819":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"6:5490:5169":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"4:5949:203":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"6:5551:5199":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"4:8851:13593":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:2737:2222":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:47402:6911":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:47546:2874":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"1:3932:2297":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"4:3276:2327":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"4:4439:13539":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"4:526:3005":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"6:4241:4902":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:2684:222":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:9526:6512":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"12:1120:6730":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"4:11850:630":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"4:10609:6848":{"crate_id":4,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"6:6489:5462":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:12909:3890":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:9013:2573":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"16:6619:4241":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"16:6241:6635":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"4:3704:6778":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:12008:3633":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"16:5981:6602":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:8441:19981":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"4:8973:6835":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"4:8966:6834":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"5:7110:24944":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:12118:3649":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"4:6644:6798":{"crate_id":4,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"1:46834:2216":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"5:679:228":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:29979:5681":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"16:7059:2380":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"16:6816:6665":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"4:3093:2339":{"crate_id":4,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"1:50289:6875":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"4:11304:3049":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:8339:19977":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"9:382:18937":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:51290:6958":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:8139:2384":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"6:4561:5015":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"4:9965:6774":{"crate_id":4,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"4:6609:214":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:48033:2698":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:9023:2577":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:4218:204":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"6:5514:5185":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"16:4413:4173":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"5:1454:195":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"6:568:4651":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"4:8154:2309":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"16:6743:19918":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:47055:2211":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:9263:6495":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"4:3950:13512":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"4:4012:13517":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"4:6780:13599":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"5:1708:2786":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"4:6124:3025":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:11500:3535":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"16:6034:6621":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"16:2657:4122":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"4:3354:2337":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"17:12768:3857":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:2833:2194":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"4:8883:13595":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:13082:3934":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"16:7166:19920":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"0:264:210":{"crate_id":0,"path":["either","Either","Right"],"kind":"variant"},"6:7008:5524":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:10159:3348":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"4:7462:3393":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"4:4706:13528":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"4:10828:29246":{"crate_id":4,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"4:10683:118":{"crate_id":4,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"17:13536:4076":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"6:4447:4979":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:12251:3673":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"4:5207:187":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"4:7707:6812":{"crate_id":4,"path":["std","error","private","Internal"],"kind":"struct"},"5:4722:201":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:20638:13214":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"16:5388:4136":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"5:881:2555":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"4:3964:13514":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"12:810:6732":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:10708:6578":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:12485:3696":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"16:2868:4131":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"12:393:7240":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"4:11861:1458":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"4:2873:3012":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:13114:3945":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"4:3958:13513":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"18:644:3163":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"4:8104:2306":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"16:6719:33941":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"5:2055:2983":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"4:11853:728":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"4:4704:13525":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:57585:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:51304:8154":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"4:5049:6785":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:7233:2786":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"16:7343:4149":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"6:5544:5195":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"4:7595:6808":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"6:4631:5050":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:13366:4028":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"4:2255:1912":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"4:6396:6799":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"5:1329:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"16:4786:4184":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"4:8221:6781":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:47707:2726":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"18:507:3163":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"18:590:3171":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:11315:3488":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:9223:19991":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"4:7791:3229":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"6:6963:5510":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:13091:3937":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:53497:5843":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"5:5142:13633":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"4:8423:2838":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"5:6501:2793":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"4:6032:3018":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"4:2401:13491":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"17:10182:3349":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"6:6321:5383":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"4:1969:2286":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"6:1720:4800":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:7176:5525":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:12354:202":{"crate_id":1,"path":["core","task","ready","Ready"],"kind":"struct"},"17:9791:6530":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"6:541:4637":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:11217:3465":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:49766:67":{"crate_id":1,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"5:6201:2969":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"4:8179:6821":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:21695:5662":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"6:5533:5187":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"16:5839:19914":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:47380:6862":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:8162:19972":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:2799:2191":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"6:4345:4952":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"4:11838:367":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"1:21485:6159":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"6:62:13677":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"1:3989:6864":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"4:5787:3017":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"6:4726:5095":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"4:10703:29464":{"crate_id":4,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"4:5933:3015":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"4:2259:1916":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"12:853:6725":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:2974:2215":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:21394:13208":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"5:7126:2856":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"4:1940:2285":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"16:6017:6618":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"4:3807:6780":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"9:800:4557":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"4:9368:6813":{"crate_id":4,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:9303:3290":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"4:1813:598":{"crate_id":4,"path":["std","env"],"kind":"module"},"16:6270:4135":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:9751:6527":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:47536:2875":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"16:6186:4134":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:11951:3621":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:3377:7998":{"crate_id":1,"path":["core","any","Provider"],"kind":"trait"},"17:10921:3399":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"4:11860:1461":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"4:5595:3016":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:10350:3356":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"6:4249:4905":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:21612:5657":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"4:956:2786":{"crate_id":4,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"1:11074:6888":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"4:10996:5617":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:50744:6880":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"4:7473:6858":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"16:5374:4133":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:9401:3294":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:11088:1965":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:49171:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"4:8775:5617":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:8752:2309":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:52428:5794":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"4:8920:6828":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"12:1003:6727":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:13203:3967":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"6:5792:5315":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"16:2389:4111":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"16:7557:6695":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"16:7288:6690":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"16:5780:6597":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"4:4129:7248":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"5:1228:6728":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"4:11845:1336":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"1:30179:24973":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"16:7426:6694":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:22134:173":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:57624:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:11199:3457":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"16:2842:4130":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:2508:235":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:2502:147":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"4:6915:3032":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:20417:24116":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"17:10455:3364":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:52530:5798":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:49493:2574":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"12:2080:6728":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:9019:2576":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:9701:219":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:9350:3270":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:2811:2190":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:8368:19978":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"4:2250:128":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"6:5508:5182":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:53080:5821":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"5:1959:1952":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"5:3623:6744":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"4:10663:5556":{"crate_id":4,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"1:47303:24972":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:46956:199":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:22233:5676":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:3179:2214":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:50848:6883":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:2858:2200":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:7047:2708":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"6:4550:5008":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"16:7044:33937":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:9021:6490":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:10854:19986":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"4:4020:13519":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:53127:5822":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"4:975:6720":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:11235:3466":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:54754:5898":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:10520:3369":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:9031:33948":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:11520:1637":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"6:4162:4853":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:2940:1890":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:9017:2575":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:20601:13213":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"17:8137:19971":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"16:3599:4161":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"12:2053:6672":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"9:956:18835":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"16:7483:4151":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"16:6284:4152":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"4:5275:119":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"1:3506:2788":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"1:53181:5824":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:21741:24963":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"4:11852:731":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"6:6555:5498":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"6:4516:4992":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:5709:5284":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:11271:3471":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"4:6355:6798":{"crate_id":4,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"17:9671:6518":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"13:108:33934":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:11576:3552":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:48543:152":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"5:3127:6735":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"4:5588:3015":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"6:5782:5312":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"12:1138:6731":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"4:10396:2329":{"crate_id":4,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"1:20470:24328":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:50532:6929":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"4:1830:6773":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"17:13047:3923":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"16:5614:5935":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:49011:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"18:481:6447":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"12:669:6716":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:9514:3067":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:11309:6894":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"5:5723:2996":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:50553:5782":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:10075:6546":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:2512:234":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:2460:2162":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"6:6402:5413":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:20720:13207":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:20846:13526":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"17:12291:3678":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"5:4034:2297":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"5:6916:1761":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:8871:6487":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:12934:3898":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:54792:5900":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"16:5235:4191":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:48929:2556":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"17:13134:3951":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:8212:19973":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"6:4499:4983":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:2943:1715":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"6:4290:4922":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"16:4888:4187":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:51000:6945":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"16:3457:3193":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:3125:6485":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:2803:2189":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"4:2518:2321":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:10207:6549":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:3206:2217":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:54831:5901":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:2795:2187":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:4399:2590":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"5:2884:33828":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"6:6534:5486":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"16:153:2955":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:13594:4086":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:51025:6911":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"6:5730:5297":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"6:4771:5109":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:11547:3547":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:21129:13210":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"17:13007:3912":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"12:1555:6734":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:4106:4815":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"5:5390:2792":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:52761:5811":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:20877:13211":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"5:6482:2792":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"6:4537:5004":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"4:8299:5600":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"4:3199:2329":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:12312:106":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"4:413:162":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"4:3411:1605":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"17:12781:3862":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"18:652:3163":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"6:1556:4694":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:13580:4083":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:53835:5848":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"6:4339:4949":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"16:7637:6696":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:29939:2778":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:11873:3594":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:8955:207":{"crate_id":1,"path":["core","fmt","Result"],"kind":"typedef"},"17:11149:3450":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"6:494:4606":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"6:573:4653":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:11070:3438":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"11:44:4505":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"16:7890:6702":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"12:2190:33933":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"12:822:13455":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"16:2579:4119":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"4:3936:13511":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:9293:6498":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"0:26:1649":{"crate_id":0,"path":["either","try_left"],"kind":"macro"},"4:11865:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"4:7264:29684":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"1:4299:2588":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"1:52591:5800":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:48870:190":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:54371:5883":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:4125:4825":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:20404:2415":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:12964:3904":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:1524:4678":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:51461:7028":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"18:719:3183":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:47778:2731":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"12:1628:2966":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"5:1071:33855":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:54690:5894":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"5:1413:6719":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"16:5163:4190":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:6474:2637":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:11161:3453":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:48878:207":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"1:2673:217":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"5:273:2969":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"16:7357:4310":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:51465:7029":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"4:7670:6769":{"crate_id":4,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"6:5682:5275":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:9844:2555":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:54716:5896":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"6:4389:4975":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:10245:6555":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:48971:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:10403:3388":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:10139:3297":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:119:13731":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"13:0:2149":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:7125:120":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:4820:5136":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:10997:3420":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:9691:13526":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"6:6564:5501":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"16:3188:4157":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:11515:3540":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"4:4762:3013":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:2922:1601":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:2724:2407":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"1:10654:6886":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"16:7435:4314":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"4:8400:2837":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"4:10912:3042":{"crate_id":4,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"16:4662:4180":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:22167:174":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"4:6873:7877":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"6:7247:5533":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:21134:13233":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"4:4201:6782":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"16:6517:6651":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:47363:8039":{"crate_id":1,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"16:4357:4171":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:11293:6893":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"16:5460:6589":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"4:3384:2297":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"4:7864:2323":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:11481:2824":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:11174:3455":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"4:3643:13507":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"6:6519:5479":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:8140:2383":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"4:992:6723":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:12630:3809":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:47608:2711":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"16:2894:19054":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"6:5751:5303":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"4:0:1358":{"crate_id":4,"path":["std"],"kind":"module"},"4:7687:13465":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"12:1681:143":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:49371:6873":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"16:6903:5624":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:10062:6545":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:9482:3062":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"5:4938:2996":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"16:5815:19913":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"18:660:6453":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"4:6508:13590":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"4:8239:6822":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"4:361:6759":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"16:7278:4146":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"16:6790:4255":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"5:3872:2788":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"5:3611:1952":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:30001:67":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:50055:144":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:21807:6036":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"16:2487:4115":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"6:5592:5220":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:57202:13242":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:4:994":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"5:3119:6737":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"4:4353:6784":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:49818:71":{"crate_id":1,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"4:5527:13577":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"9:111:18847":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"12:98:6998":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"4:8819:5619":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"18:727:3186":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:9893:2311":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"17:13059:3929":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:53005:5819":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:51457:7027":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"6:6434:5424":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:9283:6497":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"16:5996:6604":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:52937:5816":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"18:671:6459":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:8110:19958":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:2685:108":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"5:4064:2297":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"6:4296:4925":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:8796:3285":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:13184:3962":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"4:1125:6731":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:49854:2572":{"crate_id":1,"path":["core","fmt","FlagV1"],"kind":"enum"},"4:4667:13539":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:50990:6944":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:12073:3640":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"4:2403:13492":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"6:4377:4966":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:11939:3619":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:8055:19960":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:3191:28186":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:10296:6559":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:10420:3360":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"6:4149:4843":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"4:8273:6824":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"16:7309:4147":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"16:4749:4183":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:9627:6514":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:8141:2382":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"5:1387:1761":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:12860:3879":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:8666:3281":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:49796:127":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:10155:6884":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:20677:13526":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:52907:5815":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"16:7396:19921":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"16:6070:4199":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"12:60:7238":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:7475:2557":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"16:5558:19912":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"6:4669:5065":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:48708:5768":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"4:8805:6827":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"4:8233:13536":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"4:2413:13497":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"1:10169:6885":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"6:4621:5046":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:47473:24944":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:12756:3852":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:11853:3591":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:1735:7995":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"6:4304:4930":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:10086:6881":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"16:4817:4185":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:8241:19974":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"5:7250:2787":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:12322:3684":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"4:1606:2555":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"9:896:18833":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:47355:6903":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:9278:2561":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"4:1889:6775":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"6:5743:5301":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"18:690:6462":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:8814:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"4:2252:6777":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"1:2505:132":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:1670:1066":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"6:123:13732":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:11106:3445":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:9193:33946":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"4:6575:3030":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:11087:3440":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"18:582:2415":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"9:505:18977":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}