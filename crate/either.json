{"root":"0:0:1745","crate_version":"1.8.1","includes_private":false,"index":{"0:130:1900":{"id":"0:130:1900","crate_id":0,"name":"size_hint","span":{"filename":"src/lib.rs","begin":[945,4],"end":[947,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"1:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:231":{"id":"0:231","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1281,0],"end":[1299,1]},"visibility":"default","docs":"`Either` implements `Error` if *both* `L` and `R` implement it.","links":{},"attrs":["#[cfg(any(test, feature = \"use_std\"))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"1:2588:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"1:2588:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["description","provide","source","type_id","cause"],"trait":{"name":"Error","id":"1:2588:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:234:1668","0:235:1949","0:236:390"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:191:1936":{"id":"0:191:1936","crate_id":0,"name":"consume","span":{"filename":"src/lib.rs","begin":[1139,4],"end":[1141,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["amt",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2732:2233-0:258:1623":{"id":"a:1:2732:2233-0:258:1623","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2732:2233","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2732:2233","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2732:2233","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:41:1707":{"id":"0:41:1707","crate_id":0,"name":"as_mut","span":{"filename":"src/lib.rs","begin":[253,4],"end":[258,5]},"visibility":"public","docs":"Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.\n\n```\nuse either::*;\n\nfn mutate_left(value: &mut Either<u32, u32>) {\n    if let Some(l) = value.as_mut().left() {\n        *l = 999;\n    }\n}\n\nlet mut left = Left(123);\nlet mut right = Right(123);\nmutate_left(&mut left);\nmutate_left(&mut right);\nassert_eq!(left, Left(999));\nassert_eq!(right, Right(123));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"L"}}}},{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"R"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:67:1788":{"id":"0:67:1788","crate_id":0,"name":"left_or","span":{"filename":"src/lib.rs","begin":[490,4],"end":[495,5]},"visibility":"public","docs":"Return left value or given value\n\nArguments passed to `left_or` are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use [`left_or_else`],\nwhich is lazily evaluated.\n\n[`left_or_else`]: #method.left_or_else\n\n# Examples\n\n```\n# use either::*;\nlet left: Either<&str, &str> = Left(\"left\");\nassert_eq!(left.left_or(\"foo\"), \"left\");\n\nlet right: Either<&str, &str> = Right(\"right\");\nassert_eq!(right.left_or(\"left\"), \"left\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"L"}]],"output":{"kind":"generic","inner":"L"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:42:1710":{"id":"0:42:1710","crate_id":0,"name":"as_pin_ref","span":{"filename":"src/lib.rs","begin":[262,4],"end":[271,5]},"visibility":"public","docs":"Convert `Pin<&Either<L, R>>` to `Either<Pin<&L>, Pin<&R>>`,\npinned projections of the inner variants.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"1:40795:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Pin","id":"1:40795:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"L"}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"Pin","id":"1:40795:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"R"}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:8185:2389-0:258:1623":{"id":"a:1:8185:2389-0:258:1623","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:8185:2389","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:8185:2389","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8185:2389","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:11945:33075":{"id":"1:11945:33075","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:129:943":{"id":"0:129:943","crate_id":0,"name":"next","span":{"filename":"src/lib.rs","begin":[941,4],"end":[943,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:7252:157","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:212":{"id":"0:212","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1237,0],"end":[1245,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Target","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2494:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Target"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2494:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Target"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsMut","id":"1:2494:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Target"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:216:1707"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11973:29888":{"id":"1:11973:29888","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:309":{"id":"0:309","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1211,0],"end":[1215,1]},"visibility":"default","docs":"Requires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2491:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"::std::path::Path","id":"4:5177:188","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2491:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"::std::path::Path","id":"4:5177:188","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2491:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Path","id":"4:5177:188","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:312:313"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:75:1824":{"id":"0:75:1824","crate_id":0,"name":"unwrap_left","span":{"filename":"src/lib.rs","begin":[629,4],"end":[639,5]},"visibility":"public","docs":"Returns the left value\n\n# Examples\n\n```\n# use either::*;\nlet left: Either<_, ()> = Left(3);\nassert_eq!(left.unwrap_left(), 3);\n```\n\n# Panics\n\nWhen `Either` is a `Right` value\n\n```should_panic\n# use either::*;\nlet right: Either<(), _> = Right(3);\nright.unwrap_left();\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"L"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"core::fmt::Debug","id":"1:9048:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:78:1839":{"id":"0:78:1839","crate_id":0,"name":"expect_right","span":{"filename":"src/lib.rs","begin":[718,4],"end":[726,5]},"visibility":"public","docs":"Returns the right value\n\n# Examples\n\n```\n# use either::*;\nlet right: Either<(), _> = Right(3);\nassert_eq!(right.expect_right(\"value was Left\"), 3);\n```\n\n# Panics\n\nWhen `Either` is a `Left` value\n\n```should_panic\n# use either::*;\nlet left: Either<_, ()> = Left(3);\nleft.expect_right(\"value was Right\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["msg",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"generic","inner":"R"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"core::fmt::Debug","id":"1:9048:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:174:184":{"id":"0:174:184","crate_id":0,"name":"Output","span":{"filename":"src/lib.rs","begin":[1078,4],"end":[1078,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"L"},"trait":{"name":"Future","id":"1:12134:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:325":{"id":"0:325","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1221,0],"end":[1225,1]},"visibility":"default","docs":"Requires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2491:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"::std::ffi::CStr","id":"1:39381:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2491:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"::std::ffi::CStr","id":"1:39381:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2491:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CStr","id":"1:39381:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:328:313"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2523-0:258:1623":{"id":"b:1:2523-0:258:1623","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2500:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2497:148","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["1:2526:1847"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:217":{"id":"0:217","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1247,0],"end":[1255,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Target","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2494:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"Target"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2494:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"Target"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsMut","id":"1:2494:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"Target"}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:221:1707"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:136:496":{"id":"0:136:496","crate_id":0,"name":"count","span":{"filename":"src/lib.rs","begin":[963,4],"end":[965,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:227":{"id":"0:227","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1269,0],"end":[1277,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"DerefMut","id":"1:2919:1615","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"DerefMut","id":"1:2919:1615","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"qualified_path","inner":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"L"},"trait":{"name":"","id":"1:2906:116","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"1:2919:1615","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:230:546"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:141:1911":{"id":"0:141:1911","crate_id":0,"name":"partition","span":{"filename":"src/lib.rs","begin":[982,4],"end":[988,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"tuple","inner":[{"kind":"generic","inner":"B"},{"kind":"generic","inner":"B"}]},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"B"},"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:2574:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Extend","id":"1:7145:1897","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:7252:157","args":null}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2937:1904","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:7252:157","args":null}}}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:237":{"id":"0:237","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1301,0],"end":[1309,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"1:9053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"1:9053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:9053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:240:659"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11918:29972":{"id":"1:11918:29972","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:11910:412","str::splitn":"1:11915:29970","self::pattern":"1:11552:1651"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"1:42773:6960","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11557:2765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11557:2765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11572:8187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11850":{"id":"1:11850","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["1:11851:802","1:11852:2609","1:11853:33058","1:11854:33059","1:11856:33060","1:11859:29705","1:11860:33061","1:11861:312","1:11862:29939","1:11863:28681","1:11865:28682","1:11867:28683","1:11869:1714","1:11871:33062","1:11872:33063","1:11873:29958","1:11874:29959","1:11875:6974","1:11876:7041","1:11877:2598","1:11878:24260","1:11879:24276","1:11880:2592","1:11881:33064","1:11882:24275","1:11883:27170","1:11886:29974","1:11889:29975","1:11892:1912","1:11896:1918","1:11900:2591","1:11903:24246","1:11906:29968","1:11909:33065","1:11912:33066","1:11915:29970","1:11918:29972","1:11921:33067","1:11924:33068","1:11927:2142","1:11930:33069","1:11933:33070","1:11936:33071","1:11939:33072","1:11941:33073","1:11943:33074","1:11945:33075","1:11946:33076","1:11947:33077","1:11950:33078","1:11953:29413","1:11956:29976","1:11959:33079","1:11962:33080","1:11965:33081","1:11968:1980","1:11970:29885","1:11971:29886","1:11972:29887","1:11973:29888","1:11974:33082","1:11976:8062","1:11977:33083"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:2541:127":{"id":"1:2541:127","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"1:31759:2176","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:134:1905":{"id":"0:134:1905","crate_id":0,"name":"for_each","span":{"filename":"src/lib.rs","begin":[956,4],"end":[961,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2937:1904","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:7252:157","args":null}}}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2238:24118":{"id":"1:2238:24118","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11882:24275":{"id":"1:11882:24275","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"1:42943:6973","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:118:1847":{"id":"0:118:1847","crate_id":0,"name":"into","span":{"filename":"src/lib.rs","begin":[912,4],"end":[917,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:40803:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"R"}},{"type":{"kind":"generic","inner":"L"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:27:1666":{"id":"0:27:1666","crate_id":0,"name":"try_right","span":{"filename":"src/lib.rs","begin":[125,0],"end":[132,1]},"visibility":"public","docs":"Dual to `try_left!`, see its documentation for more information.","links":{},"attrs":["#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! try_right {\n    ($expr:expr) => { ... };\n}"},"0:155":{"id":"0:155","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1026,0],"end":[1053,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedIterator","id":"1:7174:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedIterator","id":"1:7174:120","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"L"},"trait":{"name":"","id":"1:7252:157","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["try_rfold","rfold","nth_back","advance_back_by","rfind"],"trait":{"name":"DoubleEndedIterator","id":"1:7174:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:158:1916","0:159:1917","0:162:1918"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:125":{"id":"0:125","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[934,0],"end":[1024,1]},"visibility":"default","docs":"`Either<L, R>` is an iterator if both `L` and `R` are iterators.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7252:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7252:157","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"L"},"trait":{"name":"","id":"1:7252:157","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["lt","peekable","zip","min_by_key","by_ref","eq","is_sorted_by","sum","rev","try_fold","skip","fuse","skip_while","find_map","intersperse","collect","max","is_sorted_by_key","product","ne","unzip","try_for_each","inspect","take_while","intersperse_with","max_by","count","chain","cmp","le","__iterator_get_unchecked","all","cmp_by","copied","position","map","reduce","try_collect","map_while","filter","partition","next_chunk","for_each","any","max_by_key","partial_cmp_by","cloned","try_reduce","gt","collect_into","scan","partial_cmp","filter_map","find","advance_by","last","min","size_hint","eq_by","cycle","try_find","partition_in_place","flat_map","enumerate","ge","step_by","nth","min_by","fold","is_sorted","array_chunks","take","rposition","is_partitioned","flatten"],"trait":{"name":"Iterator","id":"1:7252:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:128:1776","0:129:943","0:130:1900","0:131:1901","0:134:1905","0:136:496","0:137:1906","0:138:1907","0:139:1909","0:141:1911","0:144:283","0:146:302","0:148:1912","0:150:1915","0:153:1039"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:44:1719":{"id":"0:44:1719","crate_id":0,"name":"flip","span":{"filename":"src/lib.rs","begin":[300,4],"end":[305,5]},"visibility":"public","docs":"Convert `Either<L, R>` to `Either<R, L>`.\n\n```\nuse either::*;\n\nlet left: Either<_, ()> = Left(123);\nassert_eq!(left.flip(), Right(123));\n\nlet right: Either<(), _> = Right(\"some value\");\nassert_eq!(right.flip(), Left(\"some value\"));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"R"}},{"type":{"kind":"generic","inner":"L"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:317":{"id":"0:317","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1216,0],"end":[1220,1]},"visibility":"default","docs":"Requires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2491:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"::std::ffi::OsStr","id":"4:1988:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2491:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"::std::ffi::OsStr","id":"4:1988:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2491:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"4:1988:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:320:313"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11915:29970":{"id":"1:11915:29970","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:11910:412","self::pattern":"1:11552:1651","str::rsplitn":"1:11918:29972"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"1:42755:6959","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11557:2765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:69:1800":{"id":"0:69:1800","crate_id":0,"name":"left_or_else","span":{"filename":"src/lib.rs","begin":[531,4],"end":[539,5]},"visibility":"public","docs":"Returns left value or computes it from a closure\n\n# Examples\n\n```\n# use either::*;\nlet left: Either<String, u32> = Left(\"3\".to_string());\nassert_eq!(left.left_or_else(|_| unreachable!()), \"3\");\n\nlet right: Either<String, u32> = Right(3);\nassert_eq!(right.left_or_else(|x| x.to_string()), \"3\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"generic","inner":"L"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2940:1729","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"R"}],"output":{"kind":"generic","inner":"L"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:108:850":{"id":"0:108:850","crate_id":0,"name":"map","span":{"filename":"src/lib.rs","begin":[888,4],"end":[896,5]},"visibility":"public","docs":"Map `f` over the contained value and return the result in the\ncorresponding variant.\n\n```\nuse either::*;\n\nlet value: Either<_, i32> = Right(42);\n\nlet other = value.map(|x| x * 2);\nassert_eq!(other, Right(84));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"M"}},{"type":{"kind":"generic","inner":"M"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"M","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2940:1729","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"T"}],"output":{"kind":"generic","inner":"M"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2682:226-0:258:1623":{"id":"a:1:2682:226-0:258:1623","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2682:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2682:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2682:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:7144:775":{"id":"1:7144:775","crate_id":1,"name":"into_iter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"I"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:28":{"id":"0:28","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[134,0],"end":[149,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2249:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2249:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2249:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:31:416","0:32:418"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:159:1917":{"id":"0:159:1917","crate_id":0,"name":"rfold","span":{"filename":"src/lib.rs","begin":[1040,4],"end":[1045,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["init",{"kind":"generic","inner":"Acc"}],["f",{"kind":"generic","inner":"G"}]],"output":{"kind":"generic","inner":"Acc"},"c_variadic":false},"generics":{"params":[{"name":"Acc","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"G"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2937:1904","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"Acc"},{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:7252:157","args":null}}}],"output":{"kind":"generic","inner":"Acc"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5331:33735":{"id":"5:5331:33735","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:277:2744","`String`":"5:7179:222"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:277:2744","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6930:2743","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7179:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:176":{"id":"0:176","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1092,0],"end":[1112,1]},"visibility":"default","docs":"`Either<L, R>` implements `Read` if both `L` and `R` do.\n\nRequires crate feature `\"use_std\"`","links":{},"attrs":["#[cfg(any(test, feature = \"use_std\"))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Read","id":"4:3380:1619","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Read","id":"4:3380:1619","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["read_to_string","chain","read_buf_exact","read_vectored","read_exact","by_ref","is_read_vectored","take","read_to_end","bytes","read_buf"],"trait":{"name":"Read","id":"4:3380:1619","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:179:1926","0:180:1928","0:181:1929","0:182:1930"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:211:313":{"id":"0:211:313","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[1232,4],"end":[1234,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"Target"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:51:1745":{"id":"0:51:1745","crate_id":0,"name":"either","span":{"filename":"src/lib.rs","begin":[367,4],"end":[376,5]},"visibility":"public","docs":"Apply one of two functions depending on contents, unifying their result. If the value is\n`Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second\nfunction `g` is applied.\n\n```\nuse either::*;\n\nfn square(n: u32) -> i32 { (n * n) as i32 }\nfn negate(n: i32) -> i32 { -n }\n\nlet left: Either<u32, i32> = Left(4);\nassert_eq!(left.either(square, negate), 16);\n\nlet right: Either<u32, i32> = Right(-4);\nassert_eq!(right.either(square, negate), 4);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}],["g",{"kind":"generic","inner":"G"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2940:1729","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"L"}],"output":{"kind":"generic","inner":"T"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"G"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2940:1729","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"R"}],"output":{"kind":"generic","inner":"T"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11906:29968":{"id":"1:11906:29968","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:11552:1651","`DoubleEndedIterator`":"1:7174:120","prim@char":"4:11910:412","str::split":"1:11900:2591"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"1:42669:6957","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11557:2765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11557:2765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11572:8187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11943:33074":{"id":"1:11943:33074","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:305":{"id":"0:305","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1210,0],"end":[1210,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2494:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2494:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsMut","id":"1:2494:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:308:1707"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:321":{"id":"0:321","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1216,0],"end":[1220,1]},"visibility":"default","docs":"Requires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2494:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"::std::ffi::OsStr","id":"4:1988:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2494:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"::std::ffi::OsStr","id":"4:1988:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsMut","id":"1:2494:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"4:1988:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:324:1707"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:81":{"id":"0:81","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[752,0],"end":[771,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:84:1853"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:277":{"id":"0:277","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,26],"end":[49,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"1:2679:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:90":{"id":"0:90","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[796,0],"end":[817,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"1:40803:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"L"}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"1:40803:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:94:1867"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2233-0:258:1623":{"id":"b:1:2233-0:258:1623","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2675:2232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2227:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["1:2235:2104"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:332:1707":{"id":"0:332:1707","crate_id":0,"name":"as_mut","span":{"filename":"src/lib.rs","begin":[1221,0],"end":[1225,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"::std::ffi::CStr","id":"1:39381:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5322:33733":{"id":"5:5322:33733","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7179:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7179:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2536:127":{"id":"1:2536:127","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"1:2507:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"1:11881:33064":{"id":"1:11881:33064","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"1:42915:7031","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:270":{"id":"0:270","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,15],"end":[49,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:2678:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11896:1918":{"id":"1:11896:1918","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:40661:177","prim@char":"4:11910:412","self::pattern":"1:11552:1651"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11557:2765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11557:2765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11572:8187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:276:604":{"id":"0:276:604","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[49,15],"end":[49,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:320:313":{"id":"0:320:313","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[1216,0],"end":[1220,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"::std::ffi::OsStr","id":"4:1988:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:139:1909":{"id":"0:139:1909","crate_id":0,"name":"collect","span":{"filename":"src/lib.rs","begin":[975,4],"end":[980,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"B"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"B"},"bounds":[{"trait_bound":{"trait":{"name":"iter::FromIterator","id":"1:7132:133","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:7252:157","args":null}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5314":{"id":"5:5314","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5315:33731","5:5316:8015","5:5319:33732","5:5322:33733","5:5330:33734","5:5331:33735","5:5332:2343","5:5333:31137","5:5334:31138"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:146:302":{"id":"0:146:302","crate_id":0,"name":"any","span":{"filename":"src/lib.rs","begin":[997,4],"end":[1002,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2937:1904","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:7252:157","args":null}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11936:33071":{"id":"1:11936:33071","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:11552:1651","`DoubleEndedIterator`":"1:7174:120","prim@char":"4:11910:412","str::match_indices":"1:11933:33070"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"1:42819:7028","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11557:2765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11557:2765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11572:8187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:183":{"id":"0:183","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1118,0],"end":[1126,1]},"visibility":"default","docs":"`Either<L, R>` implements `Seek` if both `L` and `R` do.\n\nRequires crate feature `\"use_std\"`","links":{},"attrs":["#[cfg(any(test, feature = \"use_std\"))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Seek","id":"4:3455:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Seek","id":"4:3455:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["rewind","stream_len","stream_position"],"trait":{"name":"Seek","id":"4:3455:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:186:1933"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11962:33080":{"id":"1:11962:33080","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:11910:412","self::pattern":"1:11552:1651"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11557:2765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11976:8062":{"id":"1:11976:8062","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4515:8062"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"1:42959:6934","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:240:659":{"id":"0:240:659","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[1306,4],"end":[1308,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:9007:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8996:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5577:1433":{"id":"5:5577:1433","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7179:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11851:802":{"id":"1:11851:802","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:11910:412"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:234:1668":{"id":"0:234:1668","crate_id":0,"name":"source","span":{"filename":"src/lib.rs","begin":[1286,4],"end":[1288,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"1:2588:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:200:1945":{"id":"0:200:1945","crate_id":0,"name":"flush","span":{"filename":"src/lib.rs","begin":[1173,4],"end":[1175,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"4:2865:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2668:218-0:258:1623":{"id":"a:1:2668:218-0:258:1623","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2668:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2668:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2668:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:284":{"id":"0:284","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,30],"end":[49,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::PartialOrd","id":"1:2339:187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::PartialOrd","id":"1:2339:187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["gt","ge","le","lt"],"trait":{"name":"PartialOrd","id":"1:2339:187","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:287:1022"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11869:1714":{"id":"1:11869:1714","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9733:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9733:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:66:775":{"id":"0:66:775","crate_id":0,"name":"into_iter","span":{"filename":"src/lib.rs","begin":[461,4],"end":[470,5]},"visibility":"public","docs":"Convert the inner value to an iterator.\n\n```\nuse either::*;\n\nlet left: Either<_, Vec<u32>> = Left(vec![1, 2, 3, 4, 5]);\nlet mut right: Either<Vec<u32>, _> = Right(vec![]);\nright.extend(left.into_iter());\nassert_eq!(right, Right(vec![1, 2, 3, 4, 5]));\n```","links":{},"attrs":["#[allow(clippy :: should_implement_trait)]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"L"},"trait":{"name":"","id":"1:7136:150","args":null}}}},{"type":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"R"},"trait":{"name":"","id":"1:7136:150","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7136:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7136:150","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"L"},"trait":{"name":"","id":"1:7136:150","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11877:2598":{"id":"1:11877:2598","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"1:42637:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:175:1038":{"id":"0:175:1038","crate_id":0,"name":"poll","span":{"filename":"src/lib.rs","begin":[1080,4],"end":[1085,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"1:40795:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"core::task::Context","id":"1:12344:106","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"core::task::Poll","id":"1:43585:193","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:12134:135","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2526:1847":{"id":"1:2526:1847","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2500:132"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11878:24260":{"id":"1:11878:24260","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:11879:24276"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"1:42925:7032","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:12151-0:258:1623":{"id":"b:1:12151-0:258:1623","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Future","id":"1:12134:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoFuture","id":"1:12147:2184","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["1:12153:184","1:12154:2184","1:12155:774"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"F"}}},"0:267":{"id":"0:267","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,9],"end":[49,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::marker::Copy","id":"1:2680:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::marker::Copy","id":"1:2680:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2680:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2527-0:258:1623":{"id":"b:1:2527-0:258:1623","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2500:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["1:2529:685"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11971:29886":{"id":"1:11971:29886","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:55:1758":{"id":"0:55:1758","crate_id":0,"name":"either_with","span":{"filename":"src/lib.rs","begin":[397,4],"end":[406,5]},"visibility":"public","docs":"Like `either`, but provide some context to whichever of the\nfunctions ends up being called.\n\n```\n// In this example, the context is a mutable reference\nuse either::*;\n\nlet mut result = Vec::new();\n\nlet values = vec![Left(2), Right(2.7)];\n\nfor value in values {\n    value.either_with(&mut result,\n                      |ctx, integer| ctx.push(integer),\n                      |ctx, real| ctx.push(f64::round(real) as i32));\n}\n\nassert_eq!(result, vec![2, 3]);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["ctx",{"kind":"generic","inner":"Ctx"}],["f",{"kind":"generic","inner":"F"}],["g",{"kind":"generic","inner":"G"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[{"name":"Ctx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2940:1729","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"Ctx"},{"kind":"generic","inner":"L"}],"output":{"kind":"generic","inner":"T"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"G"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2940:1729","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"Ctx"},{"kind":"generic","inner":"R"}],"output":{"kind":"generic","inner":"T"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:328:313":{"id":"0:328:313","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[1221,0],"end":[1225,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"::std::ffi::CStr","id":"1:39381:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:73:1815":{"id":"0:73:1815","crate_id":0,"name":"right_or_else","span":{"filename":"src/lib.rs","begin":[600,4],"end":[608,5]},"visibility":"public","docs":"Returns right value or computes it from a closure\n\n# Examples\n\n```\n# use either::*;\nlet left: Either<String, u32> = Left(\"3\".to_string());\nassert_eq!(left.right_or_else(|x| x.parse().unwrap()), 3);\n\nlet right: Either<String, u32> = Right(3);\nassert_eq!(right.right_or_else(|_| unreachable!()), 3);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"generic","inner":"R"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2940:1729","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"L"}],"output":{"kind":"generic","inner":"R"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11876:7041":{"id":"1:11876:7041","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:11910:412"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"1:42627:7023","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11947:33077":{"id":"1:11947:33077","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:11910:412","self::pattern":"1:11552:1651"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11557:2765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11557:2765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:11577:8186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2595-0:258:1623":{"id":"b:1:2595-0:258:1623","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"1:2588:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2675:2232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Provider","id":"1:3376:8045","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["1:2597:2589"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"E"}}},"b:5:5575-0:258:1623":{"id":"b:5:5575-0:258:1623","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:9053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2675:2232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5573:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["5:5577:1433"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11921:33067":{"id":"1:11921:33067","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11557:2765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:230:546":{"id":"0:230:546","crate_id":0,"name":"deref_mut","span":{"filename":"src/lib.rs","begin":[1274,4],"end":[1276,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:2906:116","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:128:1776":{"id":"0:128:1776","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[939,4],"end":[939,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"L"},"trait":{"name":"Iterator","id":"1:7252:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:236:390":{"id":"0:236:390","crate_id":0,"name":"cause","span":{"filename":"src/lib.rs","begin":[1296,4],"end":[1298,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"1:2588:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12153:184":{"id":"1:12153:184","crate_id":1,"name":"Output","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"Future","id":"1:12134:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:1:3327-0:258:1623":{"id":"b:1:3327-0:258:1623","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2675:2232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3325:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["1:3329:1468"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:37:1679":{"id":"0:37:1679","crate_id":0,"name":"is_right","span":{"filename":"src/lib.rs","begin":[177,4],"end":[179,5]},"visibility":"public","docs":"Return true if the value is the `Right` variant.\n\n```\nuse either::*;\n\nlet values = [Left(1), Right(\"the right value\")];\nassert_eq!(values[0].is_right(), false);\nassert_eq!(values[1].is_right(), true);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:71:1807":{"id":"0:71:1807","crate_id":0,"name":"right_or","span":{"filename":"src/lib.rs","begin":[559,4],"end":[564,5]},"visibility":"public","docs":"Return right value or given value\n\nArguments passed to `right_or` are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use [`right_or_else`],\nwhich is lazily evaluated.\n\n[`right_or_else`]: #method.right_or_else\n\n# Examples\n\n```\n# use either::*;\nlet right: Either<&str, &str> = Right(\"right\");\nassert_eq!(right.right_or(\"foo\"), \"right\");\n\nlet left: Either<&str, &str> = Left(\"left\");\nassert_eq!(left.right_or(\"right\"), \"right\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"R"}]],"output":{"kind":"generic","inner":"R"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:221:1707":{"id":"0:221:1707","crate_id":0,"name":"as_mut","span":{"filename":"src/lib.rs","begin":[1252,4],"end":[1254,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"generic","inner":"Target"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:131:1901":{"id":"0:131:1901","crate_id":0,"name":"fold","span":{"filename":"src/lib.rs","begin":[949,4],"end":[954,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["init",{"kind":"generic","inner":"Acc"}],["f",{"kind":"generic","inner":"G"}]],"output":{"kind":"generic","inner":"Acc"},"c_variadic":false},"generics":{"params":[{"name":"Acc","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"G"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2937:1904","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"Acc"},{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:7252:157","args":null}}}],"output":{"kind":"generic","inner":"Acc"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11959:33079":{"id":"1:11959:33079","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:11910:412","self::pattern":"1:11552:1651"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11557:2765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11557:2765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11572:8187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11972:29887":{"id":"1:11972:29887","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:144:283":{"id":"0:144:283","crate_id":0,"name":"all","span":{"filename":"src/lib.rs","begin":[990,4],"end":[995,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2937:1904","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:7252:157","args":null}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:292":{"id":"0:292","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,47],"end":[49,51]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hash","id":"1:9268:140","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hash","id":"1:9268:140","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:9268:140","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:295:720"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:308:1707":{"id":"0:308:1707","crate_id":0,"name":"as_mut","span":{"filename":"src/lib.rs","begin":[1210,0],"end":[1210,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12155:774":{"id":"1:12155:774","crate_id":1,"name":"into_future","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"IntoFuture","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"IntoFuture","id":"1:12147:2184","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:150:1915":{"id":"0:150:1915","crate_id":0,"name":"find_map","span":{"filename":"src/lib.rs","begin":[1011,4],"end":[1016,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2937:1904","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:7252:157","args":null}}}],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:25:1649":{"id":"0:25:1649","crate_id":0,"name":"for_both","span":{"filename":"src/lib.rs","begin":[82,0],"end":[89,1]},"visibility":"public","docs":"Evaluate the provided expression for both [`Either::Left`] and [`Either::Right`].\n\nThis macro is useful in cases where both sides of [`Either`] can be interacted with\nin the same way even though the don't share the same type.\n\nSyntax: `either::for_both!(` *expression* `,` *pattern* `=>` *expression* `)`\n\n# Example\n\n```\nuse either::Either;\n\nfn length(owned_or_borrowed: Either<String, &'static str>) -> usize {\n    either::for_both!(owned_or_borrowed, s => s.len())\n}\n\nfn main() {\n    let borrowed = Either::Right(\"Hello world!\");\n    let owned = Either::Left(\"Hello world!\".to_owned());\n\n    assert_eq!(length(borrowed), 12);\n    assert_eq!(length(owned), 12);\n}\n```","links":{"`Either::Right`":"0:264:211","`Either`":"0:258:1623","`Either::Left`":"0:261:160"},"attrs":["#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! for_both {\n    ($value:expr, $pattern:pat => $result:expr) => { ... };\n}"},"0:280":{"id":"0:280","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,26],"end":[49,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::Eq","id":"1:2302:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::Eq","id":"1:2302:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2302:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:31:416":{"id":"0:31:416","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[135,4],"end":[140,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:676:24125":{"id":"5:676:24125","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11950:33078":{"id":"1:11950:33078","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:11910:412","self::pattern":"1:11552:1651"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11557:2765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11930:33069":{"id":"1:11930:33069","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:11552:1651","`DoubleEndedIterator`":"1:7174:120","prim@char":"4:11910:412","str::matches":"1:11927:2142"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"1:42873:7030","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11557:2765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11557:2765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11572:8187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11974:33082":{"id":"1:11974:33082","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4514:33082"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"1:42950:6990","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11871:33062":{"id":"1:11871:33062","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:11916:1379","str::slice_mut_unchecked":"1:11872:33063","crate::ops::Index":"1:2989:2217"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:76:1830":{"id":"0:76:1830","crate_id":0,"name":"unwrap_right","span":{"filename":"src/lib.rs","begin":[660,4],"end":[668,5]},"visibility":"public","docs":"Returns the right value\n\n# Examples\n\n```\n# use either::*;\nlet right: Either<(), _> = Right(3);\nassert_eq!(right.unwrap_right(), 3);\n```\n\n# Panics\n\nWhen `Either` is a `Left` value\n\n```should_panic\n# use either::*;\nlet left: Either<_, ()> = Left(3);\nleft.unwrap_right();\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"R"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"core::fmt::Debug","id":"1:9048:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:193:1940":{"id":"0:193:1940","crate_id":0,"name":"read_line","span":{"filename":"src/lib.rs","begin":[1147,4],"end":[1149,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"std::string::String","id":"5:7179:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"4:2865:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11889:29975":{"id":"1:11889:29975","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:11910:412","self::pattern":"1:11552:1651"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11557:2765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11557:2765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11572:8187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:123:1898":{"id":"0:123:1898","crate_id":0,"name":"extend","span":{"filename":"src/lib.rs","begin":[925,4],"end":[930,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["iter",{"kind":"generic","inner":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7136:150","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"A"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:295:720":{"id":"0:295:720","crate_id":0,"name":"hash","span":{"filename":"src/lib.rs","begin":[49,47],"end":[49,51]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["state",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"__H"}}}]],"output":{"kind":"tuple","inner":[]},"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:9276:144","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:225:228":{"id":"0:225:228","crate_id":0,"name":"Target","span":{"filename":"src/lib.rs","begin":[1262,4],"end":[1262,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"L"},"trait":{"name":"Deref","id":"1:2906:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"1:7143:1775":{"id":"1:7143:1775","crate_id":1,"name":"IntoIter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"I"}}},"0:291:423":{"id":"0:291:423","crate_id":0,"name":"cmp","span":{"filename":"src/lib.rs","begin":[49,42],"end":[49,45]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::cmp::Ordering","id":"1:30575:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:162:1918":{"id":"0:162:1918","crate_id":0,"name":"rfind","span":{"filename":"src/lib.rs","begin":[1047,4],"end":[1052,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["predicate",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:7252:157","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2937:1904","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:7252:157","args":null}}}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11909:33065":{"id":"1:11909:33065","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:11552:1651","str::split":"1:11900:2591","prim@char":"4:11910:412","`DoubleEndedIterator`":"1:7174:120","str::rsplit_terminator":"1:11912:33066"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"1:42701:7025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11557:2765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11861:312":{"id":"1:11861:312","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:11862:29939","`u8`":"4:11927:1476"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11865:28682":{"id":"1:11865:28682","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:40661:177"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9733:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9733:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:201":{"id":"0:201","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1178,0],"end":[1186,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Target","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2491:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Target"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2491:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Target"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2491:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Target"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:205:313"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:297":{"id":"0:297","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,53],"end":[49,58]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"1:9048:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"1:9048:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9048:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:300:659"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:60:1764":{"id":"0:60:1764","crate_id":0,"name":"left_and_then","span":{"filename":"src/lib.rs","begin":[419,4],"end":[427,5]},"visibility":"public","docs":"Apply the function `f` on the value in the `Left` variant if it is present.\n\n```\nuse either::*;\n\nlet left: Either<_, u32> = Left(123);\nassert_eq!(left.left_and_then::<_,()>(|x| Right(x * 2)), Right(246));\n\nlet right: Either<u32, _> = Right(123);\nassert_eq!(right.left_and_then(|x| Right::<(), _>(x * 2)), Right(123));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2940:1729","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"L"}],"output":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11946:33076":{"id":"1:11946:33076","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:24-0:264:211":{"id":"0:24-0:264:211","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[40,30],"end":[40,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::Either::Right","name":"Right","id":"0:264:211","glob":false}},"1:11854:33059":{"id":"1:11854:33059","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:26:1663":{"id":"0:26:1663","crate_id":0,"name":"try_left","span":{"filename":"src/lib.rs","begin":[114,0],"end":[121,1]},"visibility":"public","docs":"Macro for unwrapping the left side of an `Either`, which fails early\nwith the opposite side. Can only be used in functions that return\n`Either` because of the early return of `Right` that it provides.\n\nSee also `try_right!` for its dual, which applies the same just to the\nright side.\n\n# Example\n\n```\nuse either::{Either, Left, Right};\n\nfn twice(wrapper: Either<u32, &str>) -> Either<u32, &str> {\n    let value = either::try_left!(wrapper);\n    Left(value * 2)\n}\n\nfn main() {\n    assert_eq!(twice(Left(2)), Left(4));\n    assert_eq!(twice(Right(\"ups\")), Right(\"ups\"));\n}\n```","links":{},"attrs":["#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! try_left {\n    ($expr:expr) => { ... };\n}"},"0:263:1581":{"id":"0:263:1581","crate_id":0,"name":"0","span":{"filename":"src/lib.rs","begin":[52,9],"end":[52,10]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"generic","inner":"L"}},"a:1:8186:2388-0:258:1623":{"id":"a:1:8186:2388-0:258:1623","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8186:2388","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8186:2388","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8186:2388","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:194":{"id":"0:194","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1156,0],"end":[1176,1]},"visibility":"default","docs":"`Either<L, R>` implements `Write` if both `L` and `R` do.\n\nRequires crate feature `\"use_std\"`","links":{},"attrs":["#[cfg(any(test, feature = \"use_std\"))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Write","id":"4:3437:1622","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Write","id":"4:3437:1622","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["write_fmt","write_all_vectored","by_ref","write_all","is_write_vectored","write_vectored"],"trait":{"name":"Write","id":"4:3437:1622","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:197:1942","0:198:1943","0:199:1944","0:200:1945"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11953:29413":{"id":"1:11953:29413","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:11910:412","self::pattern":"1:11552:1651"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11557:2765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11927:2142":{"id":"1:11927:2142","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:11552:1651","`DoubleEndedIterator`":"1:7174:120","prim@char":"4:11910:412","str::matches":"1:11927:2142"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"1:42855:7029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11557:2765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2537:1455":{"id":"1:2537:1455","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:40803:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"1:2507:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:7140-0:258:1623":{"id":"b:1:7140-0:258:1623","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7252:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7136:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["1:7142:1776","1:7143:1775","1:7144:775"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"0:266:1581":{"id":"0:266:1581","crate_id":0,"name":"0","span":{"filename":"src/lib.rs","begin":[54,10],"end":[54,11]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"generic","inner":"R"}},"1:7142:1776":{"id":"1:7142:1776","crate_id":1,"name":"Item","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"Iterator","id":"1:7252:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"1:11968:1980":{"id":"1:11968:1980","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:11514:126","`FromStr`":"1:11513:2771"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:40803:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"1:11513:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:11513:2771","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:179:1926":{"id":"0:179:1926","crate_id":0,"name":"read","span":{"filename":"src/lib.rs","begin":[1097,4],"end":[1099,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"4:2865:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:313":{"id":"0:313","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1211,0],"end":[1215,1]},"visibility":"default","docs":"Requires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2494:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"::std::path::Path","id":"4:5177:188","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2494:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"::std::path::Path","id":"4:5177:188","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsMut","id":"1:2494:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Path","id":"4:5177:188","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:316:1707"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:63:1768":{"id":"0:63:1768","crate_id":0,"name":"right_and_then","span":{"filename":"src/lib.rs","begin":[440,4],"end":[448,5]},"visibility":"public","docs":"Apply the function `f` on the value in the `Right` variant if it is present.\n\n```\nuse either::*;\n\nlet left: Either<_, u32> = Left(123);\nassert_eq!(left.right_and_then(|x| Right(x * 2)), Left(123));\n\nlet right: Either<u32, _> = Right(123);\nassert_eq!(right.right_and_then(|x| Right(x * 2)), Right(246));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2940:1729","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"R"}],"output":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:198:1943":{"id":"0:198:1943","crate_id":0,"name":"write_all","span":{"filename":"src/lib.rs","begin":[1165,4],"end":[1167,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"4:2865:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:235:1949":{"id":"0:235:1949","crate_id":0,"name":"description","span":{"filename":"src/lib.rs","begin":[1291,4],"end":[1293,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:119":{"id":"0:119","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[920,0],"end":[931,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Extend","id":"1:7145:1897","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Extend","id":"1:7145:1897","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["extend_one","extend_reserve"],"trait":{"name":"Extend","id":"1:7145:1897","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:123:1898"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11867:28683":{"id":"1:11867:28683","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9733:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9733:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:11875:6974":{"id":"1:11875:6974","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:11910:412"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"1:42621:2768","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:138:1907":{"id":"0:138:1907","crate_id":0,"name":"nth","span":{"filename":"src/lib.rs","begin":[971,4],"end":[973,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:7252:157","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:39:1690":{"id":"0:39:1690","crate_id":0,"name":"right","span":{"filename":"src/lib.rs","begin":[210,4],"end":[215,5]},"visibility":"public","docs":"Convert the right side of `Either<L, R>` to an `Option<R>`.\n\n```\nuse either::*;\n\nlet left: Either<_, ()> = Left(\"some value\");\nassert_eq!(left.right(),  None);\n\nlet right: Either<(), _> = Right(321);\nassert_eq!(right.right(), Some(321));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:672-0:258:1623":{"id":"b:5:672-0:258:1623","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2249:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:668:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["5:674:6186","5:675:24124","5:676:24125"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:158:1916":{"id":"0:158:1916","crate_id":0,"name":"next_back","span":{"filename":"src/lib.rs","begin":[1031,4],"end":[1033,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:7252:157","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11880:2592":{"id":"1:11880:2592","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"1:42905:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:89:1861":{"id":"0:89:1861","crate_id":0,"name":"factor_err","span":{"filename":"src/lib.rs","begin":[788,4],"end":[793,5]},"visibility":"public","docs":"Factors out a homogenous type from an `Either` of [`Result`].\n\nHere, the homogeneous type is the `Err` type of the [`Result`].\n\n```\nuse either::*;\nlet left: Either<_, Result<String, u32>> = Left(Ok(vec![0]));\nassert_eq!(left.factor_err(), Ok(Left(vec![0])));\n\nlet right: Either<Result<Vec<u8>, u32>, _> = Right(Ok(String::new()));\nassert_eq!(right.factor_err(), Ok(Right(String::new())));\n```","links":{"`Result`":"1:40803:208"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:40803:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11956:29976":{"id":"1:11956:29976","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:11910:412","self::pattern":"1:11552:1651"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11557:2765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11557:2765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11572:8187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:32:418":{"id":"0:32:418","crate_id":0,"name":"clone_from","span":{"filename":"src/lib.rs","begin":[142,4],"end":[148,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["source",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:301":{"id":"0:301","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1210,0],"end":[1210,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2491:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2491:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2491:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:304:313"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5333:31137":{"id":"5:5333:31137","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:11972:29887"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7179:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11886:29974":{"id":"1:11886:29974","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"4:11910:412","self::pattern":"1:11552:1651"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11557:2765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:192:1938":{"id":"0:192:1938","crate_id":0,"name":"read_until","span":{"filename":"src/lib.rs","begin":[1143,4],"end":[1145,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["byte",{"kind":"primitive","inner":"u8"}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"std::vec::Vec","id":"5:6622:242","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"4:2865:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5319:33732":{"id":"5:5319:33732","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7179:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7179:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11557:2765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11903:24246":{"id":"1:11903:24246","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:11910:412","self::pattern":"1:11552:1651"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"1:11376:6954","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11557:2765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11856:33060":{"id":"1:11856:33060","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:11854:33059"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:273":{"id":"0:273","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,15],"end":[49,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::PartialEq","id":"1:2297:186","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::PartialEq","id":"1:2297:186","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2297:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:276:604"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:316:1707":{"id":"0:316:1707","crate_id":0,"name":"as_mut","span":{"filename":"src/lib.rs","begin":[1211,0],"end":[1215,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"::std::path::Path","id":"4:5177:188","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11924:33068":{"id":"1:11924:33068","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11557:2765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11557:2765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11572:8187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:300:659":{"id":"0:300:659","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[49,53],"end":[49,58]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"1:9007:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"1:8996:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11970:29885":{"id":"1:11970:29885","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:107:1886":{"id":"0:107:1886","crate_id":0,"name":"into_inner","span":{"filename":"src/lib.rs","begin":[873,4],"end":[875,5]},"visibility":"public","docs":"Extract the value of an either over two equivalent types.\n\n```\nuse either::*;\n\nlet left: Either<_, u32> = Left(123);\nassert_eq!(left.into_inner(), 123);\n\nlet right: Either<u32, _> = Right(123);\nassert_eq!(right.into_inner(), 123);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:85":{"id":"0:85","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[773,0],"end":[794,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"1:40803:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"1:40803:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"R"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:89:1861"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:287:1022":{"id":"0:287:1022","crate_id":0,"name":"partial_cmp","span":{"filename":"src/lib.rs","begin":[49,30],"end":[49,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::option::Option","id":"1:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"$crate::cmp::Ordering","id":"1:30575:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:72:1811":{"id":"0:72:1811","crate_id":0,"name":"right_or_default","span":{"filename":"src/lib.rs","begin":[578,4],"end":[586,5]},"visibility":"public","docs":"Return right or a default\n\n# Examples\n\n```\n# use either::*;\nlet left: Either<String, u32> = Left(\"left\".to_string());\nassert_eq!(left.right_or_default(), u32::default());\n\nlet right: Either<String, u32> = Right(42);\nassert_eq!(right.right_or_default(), 42);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"R"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:2574:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2533-0:258:1623":{"id":"b:1:2533-0:258:1623","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2507:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2503:236","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["1:2536:127","1:2537:1455"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11933:33070":{"id":"1:11933:33070","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:11552:1651","`DoubleEndedIterator`":"1:7174:120","prim@char":"4:11910:412","str::rmatch_indices":"1:11936:33071"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"1:42801:7027","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11557:2765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11900:2591":{"id":"1:11900:2591","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:11552:1651","`DoubleEndedIterator`":"1:7174:120","prim@char":"4:11910:412","str::split_whitespace":"1:11878:24260","str::rsplit":"1:11906:29968"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"1:42651:2321","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11557:2765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:33":{"id":"0:33","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[151,0],"end":[750,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:36:1675","0:37:1679","0:38:1685","0:39:1690","0:40:313","0:41:1707","0:42:1710","0:43:1713","0:44:1719","0:45:1726","0:48:1734","0:51:1745","0:55:1758","0:60:1764","0:63:1768","0:66:775","0:67:1788","0:68:1794","0:69:1800","0:71:1807","0:72:1811","0:73:1815","0:75:1824","0:76:1830","0:77:1834","0:78:1839","0:79:1846"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:95":{"id":"0:95","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[819,0],"end":[838,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"generic","inner":"T"},{"kind":"generic","inner":"L"}]}},{"type":{"kind":"tuple","inner":[{"kind":"generic","inner":"T"},{"kind":"generic","inner":"R"}]}}],"bindings":[]}}}},"items":["0:99:1875"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2538-0:258:1623":{"id":"b:1:2538-0:258:1623","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2497:148","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2507:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["1:2541:127","1:2542:1454"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:12154:2184":{"id":"1:12154:2184","crate_id":1,"name":"IntoFuture","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"F"}}},"1:2597:2589":{"id":"1:2597:2589","crate_id":1,"name":"provide","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["demand",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Demand","id":"1:3388:6933","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:190:1935":{"id":"0:190:1935","crate_id":0,"name":"fill_buf","span":{"filename":"src/lib.rs","begin":[1135,4],"end":[1137,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"4:2865:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11872:33063":{"id":"1:11872:33063","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:11916:1379","crate::ops::IndexMut":"1:2993:2218","str::slice_unchecked":"1:11871:33062"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:180:1928":{"id":"0:180:1928","crate_id":0,"name":"read_exact","span":{"filename":"src/lib.rs","begin":[1101,4],"end":[1103,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"4:2865:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3329:1468":{"id":"1:3329:1468","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"1:38987:5773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2235:2104":{"id":"1:2235:2104","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5334:31138":{"id":"5:5334:31138","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:11973:29888"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7179:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:216:1707":{"id":"0:216:1707","crate_id":0,"name":"as_mut","span":{"filename":"src/lib.rs","begin":[1242,4],"end":[1244,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Target"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1745":{"id":"0:0:1745","crate_id":0,"name":"either","span":{"filename":"src/lib.rs","begin":[1,0],"end":[1471,1]},"visibility":"public","docs":"The enum [`Either`] with variants `Left` and `Right` is a general purpose\nsum type with two cases.\n\n[`Either`]: enum.Either.html\n\n**Crate features:**\n\n* `\"use_std\"`\nEnabled by default. Disable to make the library `#![no_std]`.\n\n* `\"serde\"`\nDisabled by default. Enable to `#[derive(Serialize, Deserialize)]` for `Either`\n","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/either/1/\")]","#![no_std]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:23-0:261:160","0:24-0:264:211","0:258:1623","0:25:1649","0:26:1663","0:27:1666"],"is_stripped":false}},"0:45:1726":{"id":"0:45:1726","crate_id":0,"name":"map_left","span":{"filename":"src/lib.rs","begin":[319,4],"end":[327,5]},"visibility":"public","docs":"Apply the function `f` on the value in the `Left` variant if it is present rewrapping the\nresult in `Left`.\n\n```\nuse either::*;\n\nlet left: Either<_, u32> = Left(123);\nassert_eq!(left.map_left(|x| x * 2), Left(246));\n\nlet right: Either<u32, _> = Right(123);\nassert_eq!(right.map_left(|x| x * 2), Right(123));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"M"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"M","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2940:1729","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"L"}],"output":{"kind":"generic","inner":"M"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:114:685":{"id":"0:114:685","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[901,4],"end":[906,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["r",{"kind":"resolved_path","inner":{"name":"Result","id":"1:40803:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"R"}},{"type":{"kind":"generic","inner":"L"}}],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11860:33061":{"id":"1:11860:33061","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:11892:1912":{"id":"1:11892:1912","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:40661:177","prim@char":"4:11910:412","self::pattern":"1:11552:1651"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11557:2765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5332:2343":{"id":"5:5332:2343","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7179:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7179:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:43:1713":{"id":"0:43:1713","crate_id":0,"name":"as_pin_mut","span":{"filename":"src/lib.rs","begin":[275,4],"end":[287,5]},"visibility":"public","docs":"Convert `Pin<&mut Either<L, R>>` to `Either<Pin<&mut L>, Pin<&mut R>>`,\npinned projections of the inner variants.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"1:40795:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Pin","id":"1:40795:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"L"}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"Pin","id":"1:40795:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"R"}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:182:1930":{"id":"0:182:1930","crate_id":0,"name":"read_to_string","span":{"filename":"src/lib.rs","begin":[1109,4],"end":[1111,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"std::string::String","id":"5:7179:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"4:2865:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11939:33072":{"id":"1:11939:33072","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:675:24124":{"id":"5:675:24124","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:171":{"id":"0:171","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1073,0],"end":[1086,1]},"visibility":"default","docs":"`Either<L, R>` is a future if both `L` and `R` are futures.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Future","id":"1:12134:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Future","id":"1:12134:135","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"L"},"trait":{"name":"","id":"1:12134:135","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Future","id":"1:12134:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:174:184","0:175:1038"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:181:1929":{"id":"0:181:1929","crate_id":0,"name":"read_to_end","span":{"filename":"src/lib.rs","begin":[1105,4],"end":[1107,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"std::vec::Vec","id":"5:6622:242","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"4:2865:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:36:1675":{"id":"0:36:1675","crate_id":0,"name":"is_left","span":{"filename":"src/lib.rs","begin":[161,4],"end":[166,5]},"visibility":"public","docs":"Return true if the value is the `Left` variant.\n\n```\nuse either::*;\n\nlet values = [Left(1), Right(\"the right value\")];\nassert_eq!(values[0].is_left(), true);\nassert_eq!(values[1].is_left(), false);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:264:211":{"id":"0:264:211","crate_id":0,"name":"Right","span":{"filename":"src/lib.rs","begin":[54,4],"end":[54,12]},"visibility":"default","docs":"A value of type `R`.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":{"tuple":["0:266:1581"]},"discriminant":null}},"0:304:313":{"id":"0:304:313","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[1210,0],"end":[1210,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11852:2609":{"id":"1:11852:2609","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:153:1039":{"id":"0:153:1039","crate_id":0,"name":"position","span":{"filename":"src/lib.rs","begin":[1018,4],"end":[1023,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["predicate",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2937:1904","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:7252:157","args":null}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:226:544":{"id":"0:226:544","crate_id":0,"name":"deref","span":{"filename":"src/lib.rs","begin":[1264,4],"end":[1266,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:2906:116","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11874:29959":{"id":"1:11874:29959","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:11873:29958"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:164":{"id":"0:164","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1055,0],"end":[1063,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"ExactSizeIterator","id":"1:7197:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"ExactSizeIterator","id":"1:7197:1919","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"L"},"trait":{"name":"","id":"1:7252:157","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:7197:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:167:802"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:99:1875":{"id":"0:99:1875","crate_id":0,"name":"factor_first","span":{"filename":"src/lib.rs","begin":[832,4],"end":[837,5]},"visibility":"public","docs":"Factor out a homogeneous type from an either of pairs.\n\nHere, the homogeneous type is the first element of the pairs.\n\n```\nuse either::*;\nlet left: Either<_, (u32, String)> = Left((123, vec![0]));\nassert_eq!(left.factor_first().0, 123);\n\nlet right: Either<(u32, Vec<u8>), _> = Right((123, String::new()));\nassert_eq!(right.factor_first().0, 123);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"tuple","inner":[{"kind":"generic","inner":"T"},{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:168":{"id":"0:168","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1065,0],"end":[1070,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"iter::FusedIterator","id":"1:7522:1920","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"iter::FusedIterator","id":"1:7522:1920","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"L"},"trait":{"name":"","id":"1:7252:157","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7522:1920","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:187":{"id":"0:187","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1130,0],"end":[1150,1]},"visibility":"default","docs":"Requires crate feature `\"use_std\"`","links":{},"attrs":["#[cfg(any(test, feature = \"use_std\"))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"BufRead","id":"4:3462:1618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"BufRead","id":"4:3462:1618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["lines","read_until","split","read_line","has_data_left"],"trait":{"name":"BufRead","id":"4:3462:1618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:190:1935","0:191:1936","0:192:1938","0:193:1940"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:288":{"id":"0:288","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,42],"end":[49,45]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::Ord","id":"1:2333:180","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::Ord","id":"1:2333:180","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clamp","max","min"],"trait":{"name":"Ord","id":"1:2333:180","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:291:423"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:148:1912":{"id":"0:148:1912","crate_id":0,"name":"find","span":{"filename":"src/lib.rs","begin":[1004,4],"end":[1009,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["predicate",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:7252:157","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2937:1904","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:7252:157","args":null}}}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:205:313":{"id":"0:205:313","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[1183,4],"end":[1185,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Target"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:186:1933":{"id":"0:186:1933","crate_id":0,"name":"seek","span":{"filename":"src/lib.rs","begin":[1123,4],"end":[1125,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["pos",{"kind":"resolved_path","inner":{"name":"SeekFrom","id":"4:8124:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"4:2865:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:115":{"id":"0:115","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[911,0],"end":[918,1]},"visibility":"default","docs":"Convert from `Either` to `Result` with `Right => Ok` and `Left => Err`.","links":{},"attrs":["#[allow(clippy :: from_over_into)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2497:148","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"1:40803:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"R"}},{"type":{"kind":"generic","inner":"L"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:118:1847"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:68:1794":{"id":"0:68:1794","crate_id":0,"name":"left_or_default","span":{"filename":"src/lib.rs","begin":[509,4],"end":[517,5]},"visibility":"public","docs":"Return left or a default\n\n# Examples\n\n```\n# use either::*;\nlet left: Either<String, u32> = Left(\"left\".to_string());\nassert_eq!(left.left_or_default(), \"left\");\n\nlet right: Either<String, u32> = Right(42);\nassert_eq!(right.left_or_default(), String::default());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"L"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:2574:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:94:1867":{"id":"0:94:1867","crate_id":0,"name":"factor_ok","span":{"filename":"src/lib.rs","begin":[811,4],"end":[816,5]},"visibility":"public","docs":"Factors out a homogenous type from an `Either` of [`Result`].\n\nHere, the homogeneous type is the `Ok` type of the [`Result`].\n\n```\nuse either::*;\nlet left: Either<_, Result<u32, String>> = Left(Err(vec![0]));\nassert_eq!(left.factor_ok(), Err(Left(vec![0])));\n\nlet right: Either<Result<u32, Vec<u8>>, _> = Right(Err(String::new()));\nassert_eq!(right.factor_ok(), Err(Right(String::new())));\n```","links":{"`Result`":"1:40803:208"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:40803:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:137:1906":{"id":"0:137:1906","crate_id":0,"name":"last","span":{"filename":"src/lib.rs","begin":[967,4],"end":[969,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:7252:157","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:100":{"id":"0:100","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[840,0],"end":[859,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"generic","inner":"L"},{"kind":"generic","inner":"T"}]}},{"type":{"kind":"tuple","inner":[{"kind":"generic","inner":"R"},{"kind":"generic","inner":"T"}]}}],"bindings":[]}}}},"items":["0:104:1882"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11977:33083":{"id":"1:11977:33083","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4512:33083"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"1:42968:6982","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:167:802":{"id":"0:167:802","crate_id":0,"name":"len","span":{"filename":"src/lib.rs","begin":[1060,4],"end":[1062,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:38:1685":{"id":"0:38:1685","crate_id":0,"name":"left","span":{"filename":"src/lib.rs","begin":[192,4],"end":[197,5]},"visibility":"public","docs":"Convert the left side of `Either<L, R>` to an `Option<L>`.\n\n```\nuse either::*;\n\nlet left: Either<_, ()> = Left(\"some value\");\nassert_eq!(left.left(),  Some(\"some value\"));\n\nlet right: Either<(), _> = Right(321);\nassert_eq!(right.left(), None);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5315:33731":{"id":"5:5315:33731","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:277:2744","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6930:2743","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:277:2744","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6930:2743","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:197:1942":{"id":"0:197:1942","crate_id":0,"name":"write","span":{"filename":"src/lib.rs","begin":[1161,4],"end":[1163,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"4:2865:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5316:8015":{"id":"5:5316:8015","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7179:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7179:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11557:2765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11873:29958":{"id":"1:11873:29958","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:11874:29959"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:48:1734":{"id":"0:48:1734","crate_id":0,"name":"map_right","span":{"filename":"src/lib.rs","begin":[341,4],"end":[349,5]},"visibility":"public","docs":"Apply the function `f` on the value in the `Right` variant if it is present rewrapping the\nresult in `Right`.\n\n```\nuse either::*;\n\nlet left: Either<_, u32> = Left(123);\nassert_eq!(left.map_right(|x| x * 2), Left(123));\n\nlet right: Either<u32, _> = Right(123);\nassert_eq!(right.map_right(|x| x * 2), Right(246));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2940:1729","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"R"}],"output":{"kind":"generic","inner":"S"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:104:1882":{"id":"0:104:1882","crate_id":0,"name":"factor_second","span":{"filename":"src/lib.rs","begin":[853,4],"end":[858,5]},"visibility":"public","docs":"Factor out a homogeneous type from an either of pairs.\n\nHere, the homogeneous type is the second element of the pairs.\n\n```\nuse either::*;\nlet left: Either<_, (String, u32)> = Left((vec![0], 123));\nassert_eq!(left.factor_second().1, 123);\n\nlet right: Either<(Vec<u8>, u32), _> = Right((String::new(), 123));\nassert_eq!(right.factor_second().1, 123);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},{"kind":"generic","inner":"T"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2529:685":{"id":"1:2529:685","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:23-0:261:160":{"id":"0:23-0:261:160","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[40,24],"end":[40,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::Either::Left","name":"Left","id":"0:261:160","glob":false}},"1:11853:33058":{"id":"1:11853:33058","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:199:1944":{"id":"0:199:1944","crate_id":0,"name":"write_fmt","span":{"filename":"src/lib.rs","begin":[1169,4],"end":[1171,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["fmt",{"kind":"resolved_path","inner":{"name":"fmt::Arguments","id":"1:41790:73","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"4:2865:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:84:1853":{"id":"0:84:1853","crate_id":0,"name":"factor_none","span":{"filename":"src/lib.rs","begin":[765,4],"end":[770,5]},"visibility":"public","docs":"Factors out `None` from an `Either` of [`Option`].\n\n```\nuse either::*;\nlet left: Either<_, Option<String>> = Left(Some(vec![0]));\nassert_eq!(left.factor_none(), Some(Left(vec![0])));\n\nlet right: Either<Option<Vec<u8>>, _> = Right(Some(String::new()));\nassert_eq!(right.factor_none(), Some(Right(String::new())));\n```","links":{"`Option`":"1:40659:179"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:329":{"id":"0:329","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1221,0],"end":[1225,1]},"visibility":"default","docs":"Requires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2494:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"::std::ffi::CStr","id":"1:39381:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2494:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"::std::ffi::CStr","id":"1:39381:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsMut","id":"1:2494:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CStr","id":"1:39381:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:332:1707"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:79:1846":{"id":"0:79:1846","crate_id":0,"name":"either_into","span":{"filename":"src/lib.rs","begin":[740,4],"end":[749,5]},"visibility":"public","docs":"Convert the contained value into `T`\n\n# Examples\n\n```\n# use either::*;\n// Both u16 and u32 can be converted to u64.\nlet left: Either<u16, u32> = Left(3u16);\nassert_eq!(left.either_into::<u64>(), 3u64);\nlet right: Either<u16, u32> = Right(7u32);\nassert_eq!(right.either_into::<u64>(), 7u64);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2497:148","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2497:148","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11883:27170":{"id":"1:11883:27170","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:11910:412","self::pattern":"1:11552:1651"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11557:2765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11862:29939":{"id":"1:11862:29939","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:11927:1476"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11863:28681":{"id":"1:11863:28681","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:40661:177"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9733:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9733:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11965:33081":{"id":"1:11965:33081","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:11910:412","self::pattern":"1:11552:1651"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11557:2765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11557:2765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11572:8187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11941:33073":{"id":"1:11941:33073","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11859:29705":{"id":"1:11859:29705","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11120:1979"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2236-0:258:1623":{"id":"b:1:2236-0:258:1623","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2675:2232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2230:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["1:2238:24118"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:261:160":{"id":"0:261:160","crate_id":0,"name":"Left","span":{"filename":"src/lib.rs","begin":[52,4],"end":[52,11]},"visibility":"default","docs":"A value of type `L`.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":{"tuple":["0:263:1581"]},"discriminant":null}},"1:11879:24276":{"id":"1:11879:24276","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:11878:24260"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"1:42934:7033","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:77:1834":{"id":"0:77:1834","crate_id":0,"name":"expect_left","span":{"filename":"src/lib.rs","begin":[689,4],"end":[697,5]},"visibility":"public","docs":"Returns the left value\n\n# Examples\n\n```\n# use either::*;\nlet left: Either<_, ()> = Left(3);\nassert_eq!(left.expect_left(\"value was Right\"), 3);\n```\n\n# Panics\n\nWhen `Either` is a `Right` value\n\n```should_panic\n# use either::*;\nlet right: Either<(), _> = Right(3);\nright.expect_left(\"value was Right\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["msg",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"generic","inner":"L"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"core::fmt::Debug","id":"1:9048:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:222":{"id":"0:222","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1257,0],"end":[1267,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Deref","id":"1:2906:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Deref","id":"1:2906:116","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"qualified_path","inner":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"L"},"trait":{"name":"","id":"1:2906:116","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:2906:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:225:228","0:226:544"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:312:313":{"id":"0:312:313","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[1211,0],"end":[1215,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"::std::path::Path","id":"4:5177:188","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5330:33734":{"id":"5:5330:33734","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7179:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7179:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:40:313":{"id":"0:40:313","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[228,4],"end":[233,5]},"visibility":"public","docs":"Convert `&Either<L, R>` to `Either<&L, &R>`.\n\n```\nuse either::*;\n\nlet left: Either<_, ()> = Left(\"some value\");\nassert_eq!(left.as_ref(), Left(&\"some value\"));\n\nlet right: Either<(), _> = Right(\"some value\");\nassert_eq!(right.as_ref(), Right(&\"some value\"));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"L"}}}},{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"R"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:674:6186":{"id":"5:674:6186","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"0:207":{"id":"0:207","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1227,0],"end":[1235,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Target","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2491:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"Target"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2491:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"Target"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2491:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"Target"}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:211:313"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:111":{"id":"0:111","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[900,0],"end":[907,1]},"visibility":"default","docs":"Convert from `Result` to `Either` with `Ok => Right` and `Err => Left`.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2500:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"1:40803:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"R"}},{"type":{"kind":"generic","inner":"L"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:114:685"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:258:1623":{"id":"0:258:1623","crate_id":0,"name":"Either","span":{"filename":"src/lib.rs","begin":[50,0],"end":[55,1]},"visibility":"public","docs":"The enum `Either` with variants `Left` and `Right` is a general purpose\nsum type with two cases.\n\nThe `Either` type is symmetric and treats its variants the same way, without\npreference.\n(For representing success or error, use the regular `Result` enum instead.)","links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"variants_stripped":false,"variants":["0:261:160","0:264:211"],"impls":["0:33","0:81","0:85","0:90","0:95","0:100","0:105","a:1:8185:2389-0:258:1623","a:1:2732:2233-0:258:1623","a:1:2682:226-0:258:1623","a:1:2668:218-0:258:1623","a:1:8186:2388-0:258:1623","b:1:2236-0:258:1623","b:1:7140-0:258:1623","b:1:2595-0:258:1623","b:1:2538-0:258:1623","b:1:2233-0:258:1623","b:1:2527-0:258:1623","b:1:12151-0:258:1623","b:1:2523-0:258:1623","b:1:3327-0:258:1623","b:1:2533-0:258:1623","b:5:5575-0:258:1623","b:5:672-0:258:1623","0:222","0:292","0:212","0:227","0:119","0:171","0:325","0:217","0:309","0:270","0:288","0:321","0:194","0:301","0:207","0:168","0:125","0:201","0:280","0:155","0:277","0:313","0:183","0:329","0:28","0:231","0:297","0:284","0:273","0:305","0:317","0:187","0:237","0:111","0:115","0:164","0:267","0:176"]}},"1:2542:1454":{"id":"1:2542:1454","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:40803:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"1:2507:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11912:33066":{"id":"1:11912:33066","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:11552:1651","str::split":"1:11900:2591","prim@char":"4:11910:412","str::split_terminator":"1:11909:33065"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"1:42719:7026","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11557:2765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11557:2765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11572:8187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:105":{"id":"0:105","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[861,0],"end":[897,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Either","id":"0:258:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:107:1886","0:108:850"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:324:1707":{"id":"0:324:1707","crate_id":0,"name":"as_mut","span":{"filename":"src/lib.rs","begin":[1216,0],"end":[1220,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"::std::ffi::OsStr","id":"4:1988:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"5:6174:2749":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"16:7697:4131":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:39280:6982":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:10173:6960":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"4:7953:6885":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"6:4408:4906":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"4:621:2298":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:13257:3896":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"4:8255:6891":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"11:387:7297":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"6:4489:4947":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"14:165:19087":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:4001:103":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"1:22808:5700":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:13399:3935":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:9322:34226":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:1034:6539":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:39311:8086":{"crate_id":1,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"17:12224:3609":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:6530:5407":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"4:7546:2997":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"6:7173:5533":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:2572:4107":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"5:3979:2554":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"4:8500:2553":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"6:4429:4917":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"16:6254:4190":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:41216:85":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:487:6537":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"4:1771:601":{"crate_id":4,"path":["std","env"],"kind":"module"},"1:2131:581":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:13015:3836":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:39348:8087":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"4:4109:13562":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"5:7133:25812":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:7475:5559":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:11011:3367":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:13053:3847":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:8953:3258":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:11090:8150":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:21357:13248":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"11:119:2905":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"4:11522:6874":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:13194:3880":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"5:1066:7303":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"16:5367:19116":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"18:590:3137":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"16:6876:4132":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:39703:2708":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"6:7446:5552":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:10691:20178":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:39942:6946":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"17:9907:3283":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"6:1559:4675":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:31799:6978":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"17:11434:3440":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"16:7065:6735":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"4:2212:1926":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"1:2813:2207":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"11:60:7296":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"6:1520:4656":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:41425:2566":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:12433:3642":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"16:7016:6729":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:44423:5826":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"4:939:13483":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"9:234:2784":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"4:8813:6899":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"4:9059:165":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:21448:6198":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"5:4253:243":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"5:1451:6806":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:13443:3946":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"16:2319:4090":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"6:4649:4985":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:4841:5081":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"4:11914:310":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"5:3076:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"4:10233:29439":{"crate_id":4,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:9028:6548":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:3171:2224":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"16:5741:20002":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"16:7498:6755":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:13477:3953":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:3640:1775":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"4:925:6780":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"16:8142:6773":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:46226:5912":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"16:2546:4106":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:11770:3521":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:20564:13253":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"4:8933:106":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"4:11171:6870":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"6:1514:4653":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:11422:3439":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:12550:3666":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"5:3504:161":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"16:7259:2385":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:39471:2813":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"11:2053:6736":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:9933:6585":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:11037:20074":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:10080:6957":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:13803:4060":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"5:7276:2748":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"5:7086:13482":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:39738:2709":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:2830:2206":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:39713:2693":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"6:6628:5441":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:48978:244":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:11552:1651":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"4:10940:3003":{"crate_id":4,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"16:6218:6684":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:43406:5658":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:10923:6640":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"4:3779:6846":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"6:4549:4959":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"16:6919:34214":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:42517:7018":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"6:4775:5045":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:46623:5924":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:31795:6879":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"6:5945:5322":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"4:933:6784":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:11641:3489":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"18:548:140":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"11:2178:4493":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:2800:2201":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:10125:3288":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"6:578:4637":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:20414:26718":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:10257:6605":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:45508:5874":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:43263:6086":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"16:6717:6715":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:7195:5534":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"4:878:6782":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:9007:131":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"1:39621:2711":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"4:3168:2339":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:42378:7011":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:242:6534":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"4:7862:6883":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:10440:6615":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:44494:5829":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:8598:20070":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:49004:244":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:1604:4706":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"4:3970:13542":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"6:7469:5558":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"13:226:4492":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:8753:3252":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"4:1571:2749":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"6:7386:5548":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"5:6220:2918":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"6:6594:5435":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"11:1836:1775":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"6:531:4612":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"5:6930:2743":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"4:413:163":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"6:4890:5112":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:45768:5878":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:2906:116":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"5:3528:2554":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"4:8236:7095":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"6:6698:5485":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"4:10661:7098":{"crate_id":4,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"4:1788:6837":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"18:671:6520":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"16:5944:6653":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"16:4932:4174":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"11:1085:6793":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:10402:6609":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:13265:3898":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"18:624:34233":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:386:6536":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:46474:5916":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"6:6548:5416":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:2776:2194":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:40936:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:13564:4002":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:2454:13553":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:42205:7110":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"16:7103:5645":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"6:1710:4777":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"18:690:6523":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:20380:26525":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"5:6945:6822":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"4:11044:5658":{"crate_id":4,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"4:3127:7552":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:11861:3542":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"4:9099:5650":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"0:264:211":{"crate_id":0,"path":["either","Either","Right"],"kind":"variant"},"1:42934:7033":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:10283:3320":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"4:4093:7305":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"16:3815:4153":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:40597:6084":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:13698:4030":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"14:160:6775":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"4:6931:2993":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:39244:5777":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:13292:3902":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:9839:6576":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:40554:5791":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"5:6970:32995":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"4:1985:183":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:48991:244":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:8718:3251":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"6:4237:4806":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"11:1840:2749":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"4:8358:2783":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"16:7437:4300":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:38760:2228":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"17:12923:3800":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:2302:124":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"5:2904:32937":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"18:80:7280":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:13041:3842":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"4:10711:118":{"crate_id":4,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:21699:25834":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"4:11931:1472":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"17:8909:2320":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"18:736:23917":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:7201:5536":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"6:4353:4883":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:3205:2229":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"4:2207:128":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"1:44601:5834":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"4:2216:1930":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"6:4952:5135":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:46597:5922":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"18:96:7281":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"4:4071:7304":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"16:5811:5966":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"16:6132:6661":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:10598:3365":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:11446:3443":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:11924:3553":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"6:7521:5568":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:13625:4009":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:11585:3472":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:1649:1074":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"16:6854:4237":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:39589:6998":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:40976:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:10316:3323":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:11391:3435":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"4:3398:2314":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"4:3455:1620":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"1:4768:786":{"crate_id":1,"path":["core","iter"],"kind":"module"},"4:11923:733":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"6:5951:5325":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:11484:3447":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:12467:2742":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"5:5417:2753":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:12345:3629":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"6:4962:5140":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:40795:191":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"17:10478:6618":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:9265:6552":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:39334:6991":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:20683:13247":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:2497:148":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"14:31:6775":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"9:174:19067":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"4:7854:118":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:3160:232":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"16:2742:4114":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"11:2080:6792":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"16:5886:5976":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:12006:3563":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:1620:5668":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"5:6666:2957":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:11319:3423":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:2470:4103":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:21249:5678":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"4:1051:6736":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:12461:3648":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"6:505:4592":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:0:436":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"1:38862:197":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:8667:3249":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:13324:3912":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"5:621:6803":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"11:2198:4496":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:8186:2388":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:229:208":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"5:2624:5574":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:21554:5679":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:6608:2695":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"11:98:7085":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"5:868:2553":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:39571:2698":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:11572:8187":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"4:5332:6853":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"16:7767:20012":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"16:4757:4168":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"16:3225:4147":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"6:1663:4750":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:8823:3254":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"4:8103:2347":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"4:3612:13535":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"4:10469:3001":{"crate_id":4,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:41698:67":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1:29782:7950":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"4:4636:13591":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"4:5561:2979":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"4:11920:633":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"4:8891:13624":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:38948:2220":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"17:3142:6546":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"4:679:13470":{"crate_id":4,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"17:11136:3376":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"11:669:6780":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:11282:3410":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"5:6992:196":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"4:7527:2995":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"6:7511:5566":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"11:0:2168":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:11106:6965":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:2249:105":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"4:5352:6854":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"1:43577:209":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"1:22109:175":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"6:4673:4996":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:20640:13553":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"17:13689:4028":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"4:950:6787":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:2491:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"17:9596:3272":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:46672:5927":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:39268:6076":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"4:8821:1775":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"11:725:6782":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:11532:3459":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"4:11012:5637":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:9577:3270":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"16:7509:4137":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"16:6558:6710":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:39491:2686":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"4:8859:13623":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"16:7543:4139":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:44339:5823":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"16:8090:6766":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:9498:3268":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:42504:2686":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"16:5346:4181":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"4:7709:6878":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:11946:3554":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:46577:5920":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:7522:1920":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:11628:3488":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:10747:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:247:6535":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"4:505:2934":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:9138:6550":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:13777:4051":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:2933:6545":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:40777:2386":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:12126:3580":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"18:507:3129":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:11566:6526":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"4:11929:1474":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"16:6146:192":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"16:6868:4239":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"4:10844:6857":{"crate_id":4,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"1:40735:1775":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"17:13639:4015":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:42621:2768":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"4:904:2749":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:2680:108":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"18:719:3149":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:2574:115":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:12147:2184":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:22076:174":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"4:8827:5640":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"6:6649:5448":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:42943:6973":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:10052:6600":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"6:567:4632":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"6:4681:5000":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:5450:2700":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"4:7824:6058":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"1:39386:2798":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:9312:6553":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"15:198:7292":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"4:3446:31710":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:12134:135":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:3150:2222":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"4:1586:6800":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:41016:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"6:4766:5039":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"4:5383:6856":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"4:8340:13600":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"6:1645:4738":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:12318:3626":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"16:7293:4280":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"6:4571:4961":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"4:6080:2720":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:46687:5928":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"4:11258:7100":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"6:1541:4664":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"5:3105:2553":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:562:3370":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"16:7803:4318":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:4900:5118":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:21662:25835":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"6:5959:5327":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"4:11930:1475":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"16:5630:6648":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:11109:3375":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"4:3058:2348":{"crate_id":4,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"17:12059:3571":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:10823:3220":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"6:525:4609":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:39612:2702":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"5:5573:230":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:11653:3492":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"5:5639:2749":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:2675:2232":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"4:8285:5416":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:11573:3469":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:43446:6088":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"4:11081:5659":{"crate_id":4,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:22010:176":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"4:3922:13539":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"4:11036:29414":{"crate_id":4,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"4:3674:6844":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:8389:20063":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"4:9080:5649":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"6:1899:15094":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:10505:6620":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:41716:127":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:42950:6990":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"16:2786:4116":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"16:8025:4356":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:4328:4867":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:2687:2407":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"1:2804:2200":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"14:202:2759":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:9469:6556":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:9063:192":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"4:8517:2789":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"6:4751:5035":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:5698:5193":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"16:5557:4123":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:45272:5870":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:6764:5521":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"4:2344:13515":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"5:1442:196":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"6:5752:5219":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:48569:13282":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"14:0:2170":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"16:6351:20005":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:10428:6614":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:13721:4043":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"5:7000:6050":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"16:6179:6666":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:41096:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:13667:4022":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"16:5616:6644":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"16:6236:6693":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"6:5910:5307":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:7529:2683":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:4301:4857":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"4:2572:2323":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"16:8269:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"4:3872:13537":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:11600:3478":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:42429:7012":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:42801:7027":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"16:7529:4138":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:7252:157":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:2766:2198":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"4:7837:129":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"17:13344:3919":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"4:11926:731":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"6:499:4589":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"6:4921:5125":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:11069:20075":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"6:5890:5299":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:21761:7982":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"4:5568:2980":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:45584:5876":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:43628:2719":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:42755:6959":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"5:4846:2306":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:653:14113":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:11577:8186":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:41950:2561":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"16:5655:4127":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:38807:2219":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:9316:2559":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:2937:1904":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:11193:3386":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:10555:6621":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"16:3872:4154":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:13121:3864":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"4:1786:6836":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"4:3130:7610":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"5:1030:7302":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:41439:2569":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:10967:3365":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:45318:5871":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"4:7676:6833":{"crate_id":4,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"1:2993:2218":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"6:5990:5336":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:46304:5913":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:43240:7046":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"0:27:1666":{"crate_id":0,"path":["either","try_right"],"kind":"macro"},"17:11993:3560":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"16:5708:5960":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:2678:224":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:39673:2706":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"6:4720:5022":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:2507:235":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"6:4687:5002":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"6:4361:4886":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:10743:6638":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:41296:6950":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:45060:5852":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"11:2069:6791":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:10857:20073":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"4:5437:6857":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"5:6954:2749":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:13101:3856":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:8195:20049":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"4:4411:13564":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"4:4676:13552":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:48965:244":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"4:3908:13538":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"10:0:2167":{"crate_id":10,"path":["adler"],"kind":"module"},"1:39632:2703":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"16:8256:4369":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:13082:3855":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:9188:34225":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"5:3117:34079":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"16:6793:6033":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"11:1120:6794":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:4334:4870":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:9628:6565":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"4:2360:13520":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"1:39935:2671":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:42669:6957":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:10516:3328":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"18:652:3129":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:40659:179":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"4:929:6781":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:10026:6595":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"4:10426:2340":{"crate_id":4,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:8185:2389":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:12622:3338":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:21728:7107":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:8651:3248":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"4:7655:13471":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"4:11710:3014":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"4:1849:6839":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"6:5917:5308":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"9:445:19001":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"4:3930:13540":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"4:2385:1617":{"crate_id":4,"path":["std","io"],"kind":"module"},"5:6962:2929":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"4:2209:6842":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"17:12592:3670":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"11:353:2909":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"4:1436:143":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:3376:8045":{"crate_id":1,"path":["core","any","Provider"],"kind":"trait"},"17:12358:3630":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:40610:6847":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"6:7434:5550":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"6:4714:5019":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:22208:171":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"4:10731:29416":{"crate_id":4,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:11969:3559":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:44524:5830":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"4:5318:6852":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"6:4346:4879":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:11557:2765":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"11:762:2747":{"crate_id":11,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"1:39964:2346":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"16:6981:6726":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:20833:13553":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:10465:6617":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"4:2612:2333":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:7525:2555":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"4:6364:2673":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"6:6059:5351":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"5:1354:2554":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"16:7596:20011":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:21645:5685":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:42438:7013":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:39752:2710":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:4781:5046":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"4:2548:2972":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"6:5722:5209":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"16:2426:4101":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"5:1410:6796":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"4:1564:2553":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"14:7:6775":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"4:7670:13472":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"4:11395:6845":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:8490:20066":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:43658:6092":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:41686:109":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"5:4268:2946":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:13024:3840":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:9409:20082":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"4:4639:13564":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:43250:7050":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:43103:7043":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:9218:3275":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"4:11892:29408":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:6519:2615":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"5:1969:1966":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:22274:169":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"18:574:3129":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"4:9394:2999":{"crate_id":4,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:11265:6967":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"4:10058:6912":{"crate_id":4,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"4:11354:6844":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:6655:7311":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"4:8751:6897":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"4:10216:6856":{"crate_id":4,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"4:5177:188":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"4:1824:6838":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"1:2503:236":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"16:2298:19118":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"6:6496:5388":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:43585:193":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"6:4261:4824":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:9059:2568":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:12386:203":{"crate_id":1,"path":["core","task","ready","Ready"],"kind":"struct"},"1:9546:3033":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"4:6004:2982":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"4:8241:13563":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"6:586:4642":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"18:564:3136":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"4:3247:2337":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"16:6460:4125":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:10416:6613":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"4:3290:2327":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:8187:2387":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"16:7683:4141":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"4:5717:6862":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"4:11922:736":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"4:8951:29274":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:9653:6567":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"16:7042:6034":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"6:4483:4945":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:11785:3525":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:44463:5828":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:12770:3686":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:13857:4070":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:10201:6962":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"5:1185:6736":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:11090:3372":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:20395:26525":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"4:8112:2316":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"5:1600:2918":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:13821:4066":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:13159:3870":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:39007:4298":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"17:9748:3275":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"16:6327:6697":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:21092:13250":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"18:531:6510":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"4:7590:5576":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"6:4988:5157":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"4:860:2554":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:39428:2799":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"typedef"},"17:10334:3275":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"4:355:6823":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:2930:2215":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"4:2865:208":{"crate_id":4,"path":["std","io","error","Result"],"kind":"typedef"},"1:44746:5843":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"4:11911:1492":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"16:6201:6681":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"16:2879:4120":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:45430:5873":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:42549:7021":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:45348:5872":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"14:221:4445":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:10686:6963":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"4:7039:7308":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:2771:2195":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:3087:2221":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"4:891:6783":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:42457:7016":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"4:8974:6906":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"16:6767:6031":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:43035:8198":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"5:2893:6186":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"11:1832:2553":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:21637:5684":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"16:5920:5982":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"6:5728:5210":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:10491:6619":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:13651:4018":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:12835:3737":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:41418:2567":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:8996:208":{"crate_id":1,"path":["core","fmt","Result"],"kind":"typedef"},"4:6547:2991":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:11258:3409":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"4:361:6824":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:40862:1775":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"4:11913:1036":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"6:4910:5119":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"4:2358:13519":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"17:10377:3326":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:9065:2570":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"4:8063:2349":{"crate_id":4,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"1:2676:2406":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"5:2104:7091":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"4:5921:204":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"17:11879:3543":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"6:4476:4943":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"5:7259:2747":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"5:7102:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:43620:2718":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:30575:181":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"1:9201:6951":{"crate_id":1,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"0:258:1623":{"crate_id":0,"path":["either","Either"],"kind":"enum"},"4:11490:5662":{"crate_id":4,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"6:4656:4986":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:4820:5066":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:45974:5910":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:4757:5036":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:10007:6955":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"4:8914:5644":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"14:187:19094":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"14:215:6778":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:40719:2553":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:8606:79":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:8971:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"4:6832:3008":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","fast","Key"],"kind":"struct"},"17:10615:6631":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"17:11060:3338":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:46588:5921":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:9275:34223":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"5:6939:1775":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:9443:6555":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"4:588:13467":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:7132:133":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"4:2342:5671":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"4:6096:2986":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:9900:2554":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:42819:7028":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"4:9885:6081":{"crate_id":4,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:11376:6954":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"11:2205:2745":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"11:274:7086":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"5:3515:2553":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:1978:6544":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:9268:140":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"4:11240:6065":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"11:1845:2747":{"crate_id":11,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"6:4389:4898":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:12563:3667":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"16:7317:34218":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"6:5938:5321":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:13506:3960":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"15:219:19103":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"6:4787:5049":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:5690:5191":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:22373:5699":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"4:5905:2979":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:13488:3957":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:40846:2553":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"1:43072:7039":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:3177:2226":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:8360:20062":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"16:6321:6696":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"16:2594:4108":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:9340:6554":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:8283:20060":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"5:0:284":{"crate_id":5,"path":["alloc"],"kind":"module"},"4:3980:13543":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"16:6520:4198":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:48926:244":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:9453:20083":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:39201:6934":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:40710:1776":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"4:4101:7306":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"18:699:6524":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:42190:5808":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:44315:5822":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:12033:3568":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:29971:2739":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"16:7478:4136":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:8774:26757":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:7145:1897":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"16:2616:4109":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"16:3300:4148":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"17:13419:3941":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"16:7449:6744":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"4:8175:2317":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"1:42915:7031":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:41668:67":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"5:4967:2952":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"10:36:4498":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:38987:5773":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"6:7487:5561":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:4358:3019":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:38926:201":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:10142:20152":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:10936:3364":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"6:553:4624":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"11:697:6781":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:10735:3346":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:9512:6560":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:9723:13553":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"16:154:2902":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"4:11100:5649":{"crate_id":4,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"4:6616:6864":{"crate_id":4,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"16:7366:20010":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:5921:2712":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"5:6372:2918":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"4:7713:6879":{"crate_id":4,"path":["std","error","private","Internal"],"kind":"struct"},"17:9108:34227":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"18:727:3152":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:4468:4938":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:11623:8192":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"6:62:13702":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"1:40645:5793":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"4:7802:6880":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"1:39561:2697":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"4:11274:3008":{"crate_id":4,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"0:25:1649":{"crate_id":0,"path":["either","for_both"],"kind":"macro"},"17:420:3206":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"5:7074:2745":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"4:10637:6920":{"crate_id":4,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"4:4505:13582":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"5:2177:7094":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:3190:26907":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"4:7958:2334":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:10660:3338":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"11:1555:6798":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"16:5693:5957":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:7136:150":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"6:4994:5159":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:3977:6935":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"3:0:2161":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"4:9389:6880":{"crate_id":4,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"16:6061:19117":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"4:7627:3001":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"5:6524:2754":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"16:6819:4233":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"4:3245:2336":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:10092:6604":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:9055:2566":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"4:11252:7099":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"5:668:229":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:2808:2202":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"11:738:6783":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"6:1723:4781":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"4:5500:13604":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"1:4236:6938":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"11:1866:6801":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:11556:3461":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"6:6000:5339":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:4597:4963":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:9523:6561":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"16:6442:6018":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"4:4900:13596":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"4:11154:3006":{"crate_id":4,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"16:3782:4152":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:4387:2416":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:12372:3633":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"4:3437:1622":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"1:3505:2749":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"17:11821:3534":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:12138:3581":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"4:6889:7932":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:9061:2569":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"4:3677:6845":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:40574:25818":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:46366:5914":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:11813:3532":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"16:5032:4177":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"5:803:2924":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"9:325:4534":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:30603:2424":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"5:3151:34080":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"16:5402:3249":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:2757:2414":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"4:8846:5641":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:9826:6575":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"4:10364:3000":{"crate_id":4,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"1:22175:5698":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"17:12072:3572":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"16:2905:4121":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:41738:71":{"crate_id":1,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"1:6911:2672":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"5:2894:34033":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:4367:2579":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"16:7859:20013":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"5:2900:32936":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"4:2370:13525":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"16:6488:6700":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:30011:5704":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"6:1617:4713":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"4:11924:734":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"17:11844:3539":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:39014:6979":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"16:5071:4178":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:2862:4119":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"16:3030:4144":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"18:481:6508":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"14:40:3410":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:48939:244":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:9228:34222":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:10712:20179":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:46116:5911":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:9968:6954":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"16:7743:4129":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:39021:2578":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"17:8632:20048":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:12536:3663":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:10015:6594":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"11:1872:6802":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"18:599:34231":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:5813:5250":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:21622:25811":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"11:1029:6792":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"4:1568:1775":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"18:609:6513":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"16:6400:6016":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"16:535:6181":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"11:1852:6799":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:9917:3284":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"6:4501:4956":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:30005:2740":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:20681:13553":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"4:8506:2788":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"5:3146:6799":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"5:7179:222":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"5:5761:13676":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"16:8170:6774":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:13181:3874":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"6:1583:4692":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:40786:2661":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"16:6361:4195":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:42637:2320":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"4:1074:6792":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"4:4678:13555":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"4:3984:13544":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:44870:5846":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:40508:5784":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"11:2190:34208":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"5:3644:1966":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:43386:7115":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:11302:6970":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:1737:5672":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"4:4433:13565":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"16:7519:6756":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"18:521:23919":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"4:7686:6877":{"crate_id":4,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"1:44892:5847":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"4:7489:6930":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:39949:2673":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:11341:6972":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"4:10656:7096":{"crate_id":4,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"16:8072:6764":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:42651:2321":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"4:7948:6884":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:10761:20071":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:43402:7119":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"4:10831:6878":{"crate_id":4,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"1:20842:5676":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:38980:2223":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"6:1527:4659":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"18:644:3129":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"16:2720:4113":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:25618:5701":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"4:734:141":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"4:8431:2785":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"4:8168:2321":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"1:40633:5792":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:10635:3337":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"5:7021:1775":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"4:7693:13503":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"6:1652:4742":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"15:180:7288":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"16:5847:5972":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:4:1001":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"1:9876:2553":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:2588:127":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"16:4400:4158":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:14:1942":{"crate_id":1,"path":["core","write"],"kind":"macro"},"5:5167:13659":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"5:4750:202":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"11:853:6789":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:48952:244":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:42959:6934":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:12576:3668":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"5:5834:2306":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"16:3047:19146":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"4:4173:6848":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:39258:6981":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"18:681:6521":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"16:8214:4298":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"18:538:3134":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"5:851:2926":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:44361:5824":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:40468:153":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"5:677:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"11:1518:19082":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"5:5745:2952":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:10840:3361":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"6:4733:5027":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"4:5691:6861":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"4:7878:1966":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"18:0:2174":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:10000:3349":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"4:11331:3010":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"4:10691:5578":{"crate_id":4,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"4:11909:926":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"16:6293:4193":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:9311:2558":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:13865:4073":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:10187:6961":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:42925:7032":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:21:672":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"11:1065:34209":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:10080:6603":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"4:8448:2786":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"5:3937:2918":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"16:4845:4171":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:8979:34220":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"4:9126:29722":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","fast","DtorState"],"kind":"enum"},"1:39654:2704":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:10798:20072":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"18:582:2424":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:2830:4118":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:9057:2567":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"4:11024:5638":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"5:2395:5570":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"4:534:2969":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"6:561:4629":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:12894:3789":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"6:119:13756":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"17:12158:3584":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:45194:5855":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:20730:5676":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:10452:6616":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:4024:8064":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"7:0:1519":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:8109:6769":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:11120:1979":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"4:8187:6893":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:11339:3424":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"11:1534:6797":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"4:8263:5619":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:12293:3623":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"16:6376:4124":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"11:659:1775":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"16:55:4346":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"16:7467:6751":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"4:6477:6866":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:9178:6551":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:42539:7020":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:8310:20061":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"4:11210:5660":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:2796:2203":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"16:2502:4104":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"16:2448:4102":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:21097:13273":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"17:13461:3950":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"4:10701:129":{"crate_id":4,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:2682:226":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"17:8931:3257":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"6:5805:5245":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"4:8229:6847":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:39973:2677":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"4:3878:13536":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:45618:5877":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"5:3264:2747":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"17:13426:3942":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:4092:6937":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"18:515:3132":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:13411:3938":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:39958:2675":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"16:4037:4156":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:20601:13254":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"17:8256:20047":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:2230:98":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"16:4596:4164":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"11:300:7089":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"6:4218:4796":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:4877:5105":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"5:5123:2918":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"4:10856:29425":{"crate_id":4,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:39689:2707":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"5:3713:2747":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"6:6743:5509":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"4:1575:2747":{"crate_id":4,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"6:5000:5162":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"4:4757:13551":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"4:8145:2318":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"4:8096:2345":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"6:5800:5244":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:39533:2688":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:12634:3677":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:2847:2210":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"4:5760:2981":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:41987:2784":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:40525:8112":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:43425:121":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"16:3899:4155":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"4:11935:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"16:4568:4163":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:42478:5809":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:4577:8079":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:2679:223":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"16:8180:20014":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:6667:5459":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:13211:3885":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:20367:2424":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:43398:7118":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:10545:3333":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"5:4099:2306":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:0:2173":{"crate_id":17,"path":["object"],"kind":"module"},"17:9641:6566":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"11:1003:6791":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"6:4369:4889":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:4743:5031":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:13135:3868":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:10118:6958":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:10159:6959":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"6:5660:5166":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:8611:86":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:4232:205":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"17:9876:3198":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"5:4139:2553":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"16:4445:4159":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"9:421:19003":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:20412:26713":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"16:7635:4306":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:40854:2554":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"1:44648:5835":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:39341:6992":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"18:614:34230":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:11372:3430":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:3932:2306":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"17:12331:3628":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:9488:6558":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:22142:172":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"17:13763:4049":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"11:751:2749":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"4:8181:6891":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"5:1046:32962":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:4559:4960":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"4:5065:189":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"1:38721:2231":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"6:1687:4767":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"16:5643:6651":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"6:7440:5551":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"7:79:18994":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:10719:6964":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:20689:13249":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"16:5418:4182":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"5:3732:2918":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:44694:5841":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"16:6022:20004":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"4:10679:6059":{"crate_id":4,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:42609:6085":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:11471:3446":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"6:5759:5223":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:4828:5071":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:39381:101":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"5:1420:6780":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:6702:2669":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"5:2896:5573":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:39551:2696":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:44249:5819":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:4721:2812":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"4:4988:6851":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"0:261:160":{"crate_id":0,"path":["either","Either","Left"],"kind":"variant"},"4:6752:13626":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:20435:26717":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"5:7027:1775":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"16:6535:2904":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"18:491:6509":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"16:6575:20006":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:10589:6630":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:42447:7015":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"16:6506:6708":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:2841:2209":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:10045:6956":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"4:11932:780":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"1:43215:7045":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:12019:3293":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:4303:3018":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"4:956:6789":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"4:11934:1111":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"17:10569:6625":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:10303:6608":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:1802:2183":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:41958:7007":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:2851:2211":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"5:7204:2761":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"4:10666:6881":{"crate_id":4,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"5:3112:6800":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:8997:1622":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"1:39641:2691":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:12959:3830":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"16:2524:4105":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:12449:3646":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:38882:200":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:12113:3579":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"6:4662:4989":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:2919:1615":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:13612:4003":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:38822:198":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:9721:6572":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"11:2184:4494":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"4:8769:5637":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"4:11925:735":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"4:11917:1458":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"1:46725:5930":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"4:1065:6791":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"4:11416:6846":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"4:5554:204":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:2337:4092":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:39520:2318":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"4:10951:3004":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:13791:4058":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"6:4611:4964":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"6:5786:5243":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:4307:4858":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"16:7244:34219":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"5:5171:13660":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"18:660:6514":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"16:6662:6714":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:39327:6990":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"9:352:19016":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:9772:3280":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"6:7498:5565":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"4:7814:5578":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"4:7870:2332":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:20433:26715":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"5:208:2917":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:2835:2208":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"5:3907:2749":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"16:7588:6757":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"4:8797:5639":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"17:12496:3660":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:4322:4865":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"4:1592:6801":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:2825:2205":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:9986:6590":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:2989:2217":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"1:9048:111":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"16:7488:6754":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"6:5741:5211":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:13812:4064":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"5:951:2918":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:45114:5854":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:39724:2319":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:21683:25809":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"4:914:2747":{"crate_id":4,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"5:768:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:9098:6549":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"4:6327:6864":{"crate_id":4,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"5:6984:1775":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:12194:3590":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:12799:3706":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"16:6904:4242":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"4:3323:2346":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"1:39983:2679":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:11299:3413":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"5:3656:6808":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"5:1339:2553":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"6:6719:5499":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:39398:25812":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"4:558:6825":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:2940:1729":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"4:9382:128":{"crate_id":4,"path":["std","sys","unix","fs","File"],"kind":"struct"},"16:7757:6759":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"4:4325:6850":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"4:10429:2336":{"crate_id":4,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"17:9822:6574":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:42209:6952":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:6851:2345":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"4:11933:1529":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"17:13240:3893":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"6:4637:4978":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:39414:6077":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"5:6293:1775":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"16:4904:4173":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"4:2538:2331":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"16:7335:34216":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"4:8155:2319":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"4:9070:216":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"4:11915:1349":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"16:2967:19145":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:8521:20067":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:13219:3888":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"4:8994:5645":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"6:473:4576":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:39664:2705":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"4:10321:6897":{"crate_id":4,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:11325:6971":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"4:847:2553":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:13066:3852":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:13169:3871":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:39367:5778":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:12307:3625":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:45013:5851":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:5527:2690":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:2297:186":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"4:11921:634":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"16:7837:6760":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"16:2642:4110":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:12403:3639":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"16:4969:4175":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:9068:34224":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:43394:7117":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:975:6538":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:9973:6589":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"18:113:7284":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"18:755:6533":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"6:4539:4958":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:6634:5443":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:43151:7044":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:12419:3640":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"16:2378:4099":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:43458:8205":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:8420:20064":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"4:6231:204":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:44583:5833":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"16:7711:4309":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:1529:2306":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:9067:2571":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:4742:26320":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:43670:5818":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"6:4274:4834":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"6:4862:5096":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"4:8247:6894":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:42701:7025":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:12344:106":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:20840:13251":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:43057:7034":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:2227:97":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"5:1431:6781":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"6:540:4618":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:12388:3635":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"4:4122:7307":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:41056:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"16:4540:4162":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:10068:6602":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:13385:3928":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:43382:7114":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"16:7029:6732":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"0:0:1745":{"crate_id":0,"path":["either"],"kind":"module"},"16:6696:20007":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:12915:3799":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:11721:3496":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"6:4703:5011":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"4:8939:6902":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"4:6404:2990":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:13842:4069":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"6:1534:4661":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:1787:6540":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"6:7481:5560":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"4:1083:6795":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"6:5716:5206":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:12646:3684":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"6:1747:4790":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"4:6368:6865":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"5:1216:6791":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:2792:2199":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"6:7428:5549":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:30099:25874":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"4:3462:1618":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"6:6512:5400":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:12522:3662":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:42719:7026":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"6:4929:5127":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:13879:4076":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:11778:111":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"4:8124:1621":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"1:46634:5925":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"4:8281:6896":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:11220:3394":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"9:0:2166":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:39991:2681":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:22307:170":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:9866:6578":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:2500:132":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"17:8548:20068":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"6:6643:5447":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:12046:3569":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:39305:6934":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:11513:2771":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"6:4981:5154":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:8858:3255":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"18:766:23918":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:4248:4814":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"11:1138:6795":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:13744:4044":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:1919:20110":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"5:771:2921":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"16:3640:3160":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"4:1847:2822":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"4:641:6828":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:13433:3943":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"4:1597:6802":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:42855:7029":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"17:10527:20177":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:44564:5832":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"6:4439:4924":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:43370:7111":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"4:9118:6910":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:10104:3286":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:2494:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"4:870:1775":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:46702:5929":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:11502:3455":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"16:2694:4112":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:42905:2317":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"17:9545:3243":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"6:4850:5087":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"6:4945:5132":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:9946:6587":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:10897:3363":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"16:8129:6770":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"6:7452:5553":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"4:11177:6929":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"4:6480:13617":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:13145:3869":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"4:7589:13553":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"4:10957:3005":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"16:7572:34215":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"4:11859:6066":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"4:8757:184":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"17:13033:3841":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:13316:3911":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:10580:6629":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:10649:6633":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"4:4680:13556":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"18:707:6526":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"4:5019:6851":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:5843:5273":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"6:5902:5306":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:9796:3282":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"16:3749:4151":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:39228:25815":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"16:5724:6652":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"6:1571:4684":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:9038:34221":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"5:2065:2934":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:8573:20069":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:2934:2216":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"11:834:6787":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:44546:5831":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"6:481:4581":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:40727:2554":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"6:0:807":{"crate_id":6,"path":["libc"],"kind":"module"},"1:7095:2685":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"16:5571:4126":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"16:8047:4357":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:45554:5875":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"6:4402:4903":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:42559:7022":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"6:4451:4930":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"4:5684:6858":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:9696:3268":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"6:4422:4914":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"16:7557:4302":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:13249:3894":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:50300:5939":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"4:1927:2297":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"4:11225:6063":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"11:822:13483":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:42005:7010":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"6:1731:4785":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:6611:5436":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"16:2808:4117":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:43283:2766":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:43567:203":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"4:9029:5648":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"4:11881:13473":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"16:3585:4150":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"5:1983:6808":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:13499:3958":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:21735:5697":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"6:6488:5383":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:2761:2193":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"5:4331:2946":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"16:6307:4122":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:2668:218":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"17:8443:20065":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:40803:208":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"17:8788:3253":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:45091:5853":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:43229:8199":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:21355:13553":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"5:277:2744":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:6053:5350":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:4871:5102":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"4:10145:7174":{"crate_id":4,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"16:6390:6698":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:9853:6577":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"4:9192:2822":{"crate_id":4,"path":["std","sys","unix","args","Args"],"kind":"struct"},"4:6291:164":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:41256:92":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"4:11063:5650":{"crate_id":4,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"4:11910:412":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"4:8981:6907":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:7174:120":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"11:1044:19081":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"4:4842:13589":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"16:3063:3156":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:43086:7042":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:41176:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:1896:5675":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:11544:3460":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"6:6728:5502":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"4:8408:2784":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"1:43641:159":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:39542:2689":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:11832:3537":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:11800:3530":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:31759:2176":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"4:9075:217":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"13:0:2164":{"crate_id":13,"path":["std_detect"],"kind":"module"},"5:35:2746":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:42873:7030":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:44393:5825":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"16:4510:4161":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"16:6990:4247":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"4:3208:2341":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"4:5245:119":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"6:4457:4933":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:11410:3436":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"11:1859:6800":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"4:10721:2316":{"crate_id":4,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:9895:6583":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:12259:3620":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"6:1695:4768":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:10039:6598":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"4:2475:2330":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"5:3138:6801":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"4:10423:2338":{"crate_id":4,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"16:8156:4143":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"6:493:4587":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"6:4379:4895":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:12195:190":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"17:13453:3949":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"4:8875:13622":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:6541:5412":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:3242:2230":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"4:11927:1476":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"1:20809:13553":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"16:3446:4149":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"16:4818:4170":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"11:393:7298":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:46512:5917":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:6094:5376":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"16:4480:4160":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:30027:67":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"16:4728:4167":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"11:444:141":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:43374:7112":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"4:1898:2296":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"16:4327:4157":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"9:52:19019":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:12510:3661":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"16:6728:6019":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"6:594:4647":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"4:962:6790":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:21610:6069":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:44269:5820":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:22241:168":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"16:6890:4133":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"9:502:4557":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:44445:5827":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:9053:119":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"16:2764:4115":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:39461:2814":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:4122:6196":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"6:4795:5054":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"16:6164:6664":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:4313:2578":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"1:44938:5849":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:39511:2687":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"16:7411:4299":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:44724:5842":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"6:5931:5319":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:22043:173":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"10:44:4499":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"4:7797:3199":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"1:21749:6070":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:9350:34229":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"5:7162:2796":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"4:11928:1473":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"16:5305:4180":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:2788:2196":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"16:5104:4179":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:11891:3545":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:12178:3585":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:42467:7017":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"4:646:13469":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"4:11472:5661":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"17:1947:6541":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"4:11876:32475":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"16:6935:6716":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:10989:3333":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"5:1370:1775":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:12282:3621":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"4:10835:4554":{"crate_id":4,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"5:6023:13627":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"4:3166:2338":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"16:6671:4221":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:7099:2684":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"11:861:6790":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:13659:4021":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:44794:5844":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"4:6128:6863":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:9276:144":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:40871:181":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:13469:3952":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:38838:196":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"1:4413:2580":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"4:4734:2977":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:9531:2972":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:3388:6933":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"1:42530:7019":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:5878:5294":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"4:4253:6849":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"11:1628:2914":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:2719:2409":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"4:3936:13541":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:13356:3920":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"4:6533:13619":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"4:3133:7611":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:2859:2213":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"4:2867:127":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"5:1230:6795":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"6:1704:4774":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:6521:5406":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"4:7807:6881":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"16:6243:34217":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:13516:3965":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"5:1401:6783":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:10721:3343":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:12412:139":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:8753:659":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"17:9566:6552":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:2864:2214":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"4:5497:5337":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"1:44916:5848":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"6:6757:5518":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"16:0:2172":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:3165:134":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"6:4520:4957":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:2455:2177":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:2782:2197":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:9148:34228":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:12168:26370":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"4:11916:1379":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"1:21501:6199":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:10681:6635":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"9:481:19000":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"4:8162:2320":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"9:388:19002":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"16:5797:5965":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:46550:5918":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"16:7669:4140":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"6:1677:4761":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"7:32:18987":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"12:0:2169":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:39028:5774":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:2855:2212":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"5:6691:2967":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"4:6183:2979":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"11:632:2553":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"6:7218:5547":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:13233:3891":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"16:6544:4130":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:41658:5797":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:13376:3927":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"5:1201:6792":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:1728:5669":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"4:920:6796":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"4:2830:2976":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:42773:6960":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:43178:6976":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"4:3353:2306":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"1:41975:144":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"16:4702:4166":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"6:572:4634":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"6:4727:5024":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:4241:6939":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:6079:5365":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"16:6336:6013":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"6:1550:4669":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:13367:3924":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"6:546:4621":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:9534:6562":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"5:7193:2760":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"6:6773:5524":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:40896:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"5:1392:6782":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:10270:6606":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"11:1681:143":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:12902:3792":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:46428:5915":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"4:9008:29266":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:30205:25873":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:41136:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:4583:4962":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"6:4812:989":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"5:7119:2797":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"6:123:13757":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:3266:6547":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"5:262:2918":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"16:6474:4142":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:9670:6570":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:39216:6075":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"4:11908:369":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"4:8986:6908":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"4:4571:5427":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"4:3206:2340":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:13678:4027":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"16:5963:6659":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:43390:7116":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"11:985:6736":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"6:6791:5527":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"16:2404:4100":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:9683:6571":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"16:4872:4172":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"5:2075:6809":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"4:9989:6838":{"crate_id":4,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"1:38904:199":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:8292:2765":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:46764:5931":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"4:3380:1619":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"16:6431:6699":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:10354:3325":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"5:7149:2795":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"4:5368:6855":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"16:7626:6758":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:9734:6573":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:13309:3910":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"4:4575:5431":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"5:4069:2306":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:11615:3484":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:12098:3576":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:3325:68":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"17:11459:3445":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"4:7478:3370":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:40744:2385":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"1:43378:7113":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"4:10008:7310":{"crate_id":4,"path":["std","sys","unix","os","Env"],"kind":"struct"},"16:5386:3248":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:9617:6564":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"16:4624:4165":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:20814:13246":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:31808:2415":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:39580:2699":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:2333:180":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"5:6106:2957":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"6:4416:4911":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"5:1302:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:21586:5680":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:2732:2233":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"16:5998:20003":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:10626:6632":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"4:638:6826":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:41997:7009":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"6:4618:4966":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"4:4561:13541":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:9733:220":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:44840:5845":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:42595:2769":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"0:26:1663":{"crate_id":0,"path":["either","try_left"],"kind":"macro"},"1:30041:25872":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"16:5677:20001":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:9424:3265":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"5:3172:6802":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"18:636:3148":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:46608:5923":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"4:10874:5639":{"crate_id":4,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"15:0:2171":{"crate_id":15,"path":["addr2line"],"kind":"module"},"19:0:1018":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:9432:3026":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"6:4313:4860":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:11355:3428":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:20652:13245":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"4:11515:6874":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"8:0:2165":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"5:5725:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:11163:3382":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"4:1580:6799":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"4:0:1371":{"crate_id":4,"path":["std"],"kind":"module"},"17:12980:3835":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"5:1704:2747":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"1:42627:7023":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:22340:167":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:9925:2321":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"1:2745:2411":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"1:21570:7104":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"5:6622:242":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"16:2931:19144":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:8683:3250":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:40491:5782":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:7566:26758":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:10885:6639":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:46649:5926":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:44962:5850":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"16:5000:4176":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:39207:6980":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"13:110:34210":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:42968:6982":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:12085:3574":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"4:7280:32474":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"6:1509:4651":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"11:646:2554":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:5697:27327":{"crate_id":1,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"6:5967:5330":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:9478:6557":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"11:815:6784":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:41966:2560":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"4:8490:2787":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"16:2668:4111":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:21261:26528":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"11:320:2907":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"16:5594:4128":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:50279:5938":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"5:2157:32988":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:11520:3456":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:10705:3342":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:12220:2185":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"16:5779:4184":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:3989:6936":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:44293:5821":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"11:777:2913":{"crate_id":11,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"17:12607:3674":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"6:5772:5232":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"4:484:2968":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"4:4573:5429":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"5:3595:2918":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:41432:2568":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:11234:3395":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"5:6534:2755":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"17:12236:3611":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"11:810:6796":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:46568:5919":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:4396:4901":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"4:8805:2553":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"6:4697:5008":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:9514:3028":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"6:1716:4778":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:13332:3913":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:0:489":{"crate_id":1,"path":["core"],"kind":"module"},"5:4298:2306":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:12483:3659":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"6:1609:4708":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:10670:3341":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"6:1589:4694":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:2971:2227":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"4:8307:5620":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"16:7077:20009":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:12355:2720":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"6:6571:5434":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"6:4882:5107":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:39603:2701":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"6:487:4584":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"4:4851:13590":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"4:3992:13546":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"4:1988:182":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:2820:2204":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"6:5823:5257":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:39288:8085":{"crate_id":1,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"17:9886:6580":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:9959:6588":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:9557:3275":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:41790:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"17:11902:3546":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"4:8192:13534":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"1:8779:25041":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"16:7652:196":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"4:7601:6875":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"5:6505:2753":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:2339:187":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:7463:5557":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:1613:580":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"16:2357:4098":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"6:4628:4973":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"4:6581:215":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"16:6943:20008":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"16:4789:4169":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:1714:8043":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:9380:20081":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"6:4805:5060":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"6:4224:4797":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:41774:2576":{"crate_id":1,"path":["core","fmt","FlagV1"],"kind":"enum"},"1:4164:2577":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"16:5976:5985":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:20627:13255":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"1:7197:1919":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"4:7606:5577":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"4:8928:6900":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"4:8783:5638":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}