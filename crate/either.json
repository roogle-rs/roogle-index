{"root":"0:0:1917","crate_version":"1.9.0","includes_private":false,"index":{"1:12493:31795":{"id":"1:12493:31795","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:311:718":{"id":"0:311:718","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[49,53],"end":[49,58]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9506:137","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9487:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:25:1794":{"id":"0:25:1794","crate_id":0,"name":"for_both","span":{"filename":"src/lib.rs","begin":[82,0],"end":[89,1]},"visibility":"public","docs":"Evaluate the provided expression for both [`Either::Left`] and [`Either::Right`].\n\nThis macro is useful in cases where both sides of [`Either`] can be interacted with\nin the same way even though the don't share the same type.\n\nSyntax: `either::for_both!(` *expression* `,` *pattern* `=>` *expression* `)`\n\n# Example\n\n```\nuse either::Either;\n\nfn length(owned_or_borrowed: Either<String, &'static str>) -> usize {\n    either::for_both!(owned_or_borrowed, s => s.len())\n}\n\nfn main() {\n    let borrowed = Either::Right(\"Hello world!\");\n    let owned = Either::Left(\"Hello world!\".to_owned());\n\n    assert_eq!(length(borrowed), 12);\n    assert_eq!(length(owned), 12);\n}\n```","links":{"`Either::Right`":"0:275:234","`Either`":"0:269:1768","`Either::Left`":"0:272:176"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! for_both {\n    ($value:expr, $pattern:pat => $result:expr) => { ... };\n}"}},"0:312":{"id":"0:312","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1269,0],"end":[1269,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2535:78","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2535:78","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2535:78","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:315:343"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:115:2049":{"id":"0:115:2049","crate_id":0,"name":"factor_second","span":{"filename":"src/lib.rs","begin":[912,4],"end":[917,5]},"visibility":"public","docs":"Factor out a homogeneous type from an either of pairs.\n\nHere, the homogeneous type is the second element of the pairs.\n\n```\nuse either::*;\nlet left: Either<_, (String, u32)> = Left((vec![0], 123));\nassert_eq!(left.factor_second().1, 123);\n\nlet right: Either<(Vec<u8>, u32), _> = Right((String::new(), 123));\nassert_eq!(right.factor_second().1, 123);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"tuple":[{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},{"generic":"T"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:320":{"id":"0:320","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1270,0],"end":[1274,1]},"visibility":"default","docs":"Requires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2535:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"::std::path::Path","id":"4:5268:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2535:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"::std::path::Path","id":"4:5268:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2535:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"4:5268:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:323:343"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:222:343":{"id":"0:222:343","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[1291,4],"end":[1293,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"Target"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:164:1119":{"id":"0:164:1119","crate_id":0,"name":"position","span":{"filename":"src/lib.rs","begin":[1077,4],"end":[1082,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["predicate",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3041:2071","args":{"parenthesized":{"inputs":[{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:7627:173","args":null}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:212":{"id":"0:212","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1237,0],"end":[1245,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Target","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2535:78","args":{"angle_bracketed":{"args":[{"type":{"generic":"Target"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2535:78","args":{"angle_bracketed":{"args":[{"type":{"generic":"Target"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2535:78","args":{"angle_bracketed":{"args":[{"type":{"generic":"Target"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:216:343"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2582-0:269:1768":{"id":"b:1:2582-0:269:1768","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2541:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2551:262","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:2585:133","1:2586:1588"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12405:872":{"id":"1:12405:872","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:12067:450"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12433:26390":{"id":"1:12433:26390","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:12432:26381"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:43809:7628","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:27:1811":{"id":"0:27:1811","crate_id":0,"name":"try_right","span":{"filename":"src/lib.rs","begin":[125,0],"end":[132,1]},"visibility":"public","docs":"Dual to `try_left!`, see its documentation for more information.","links":{},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! try_right {\n    ($expr:expr) => { ... };\n}"}},"1:12526:28534":{"id":"1:12526:28534","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12510:28639":{"id":"1:12510:28639","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12067:450","self::pattern":"1:12106:1796"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:2943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12111:2943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12126:8711","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:36:1820":{"id":"0:36:1820","crate_id":0,"name":"is_left","span":{"filename":"src/lib.rs","begin":[161,4],"end":[166,5]},"visibility":"public","docs":"Return true if the value is the `Left` variant.\n\n```\nuse either::*;\n\nlet values = [Left(1), Right(\"the right value\")];\nassert_eq!(values[0].is_left(), true);\nassert_eq!(values[1].is_left(), false);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:335:1852":{"id":"0:335:1852","crate_id":0,"name":"as_mut","span":{"filename":"src/lib.rs","begin":[1275,0],"end":[1279,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"::std::ffi::OsStr","id":"4:1986:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12525:28532":{"id":"1:12525:28532","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39520:24847","Self::is_ascii":"1:12524:28531"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39520:24847","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2570:2014":{"id":"1:2570:2014","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2544:138"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:242":{"id":"0:242","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1340,0],"end":[1358,1]},"visibility":"default","docs":"`Either` implements `Error` if *both* `L` and `R` implement it.","links":{},"attrs":["#[cfg(any(test, feature = \"use_std\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"1:2629:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"1:2629:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["provide","source","description","cause","type_id"],"trait":{"name":"Error","id":"1:2629:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:245:1813","0:246:2116","0:247:425"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2573:744":{"id":"1:2573:744","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3412-0:269:1768":{"id":"b:1:3412-0:269:1768","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2783:2407","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3410:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:3414:1603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2567-0:269:1768":{"id":"b:1:2567-0:269:1768","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2544:138","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2541:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:2570:2014"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:247:425":{"id":"0:247:425","crate_id":0,"name":"cause","span":{"filename":"src/lib.rs","begin":[1355,4],"end":[1357,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"1:2629:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:274:1725":{"id":"0:274:1725","crate_id":0,"name":"0","span":{"filename":"src/lib.rs","begin":[52,9],"end":[52,10]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"generic":"L"}}},"1:12524:28531":{"id":"1:12524:28531","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:197:2100":{"id":"0:197:2100","crate_id":0,"name":"seek","span":{"filename":"src/lib.rs","begin":[1182,4],"end":[1184,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["pos",{"resolved_path":{"name":"SeekFrom","id":"4:8206:1766","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"4:2927:231","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:159:2079":{"id":"0:159:2079","crate_id":0,"name":"find","span":{"filename":"src/lib.rs","begin":[1063,4],"end":[1068,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["predicate",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:7627:173","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3041:2071","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:7627:173","args":null}}}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12528:28536":{"id":"1:12528:28536","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:277:1725":{"id":"0:277:1725","crate_id":0,"name":"0","span":{"filename":"src/lib.rs","begin":[54,10],"end":[54,11]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"generic":"R"}}},"0:92":{"id":"0:92","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[811,0],"end":[830,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:95:2020"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:28":{"id":"0:28","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[134,0],"end":[149,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2277:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2277:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2277:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:31:454","0:32:456"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:0:1917":{"id":"0:0:1917","crate_id":0,"name":"either","span":{"filename":"src/lib.rs","begin":[1,0],"end":[1530,1]},"visibility":"public","docs":"The enum [`Either`] with variants `Left` and `Right` is a general purpose\nsum type with two cases.\n\n[`Either`]: enum.Either.html\n\n**Crate features:**\n\n* `\"use_std\"`\nEnabled by default. Disable to make the library `#![no_std]`.\n\n* `\"serde\"`\nDisabled by default. Enable to `#[derive(Serialize, Deserialize)]` for `Either`\n","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/either/1/\")]","#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:23-0:272:176","0:24-0:275:234","0:269:1768","0:25:1794","0:26:1808","0:27:1811"],"is_stripped":false}}},"0:161:2082":{"id":"0:161:2082","crate_id":0,"name":"find_map","span":{"filename":"src/lib.rs","begin":[1070,4],"end":[1075,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"generic":"B"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3041:2071","args":{"parenthesized":{"inputs":[{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:7627:173","args":null}}}],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"generic":"B"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2266:24719":{"id":"1:2266:24719","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2577-0:269:1768":{"id":"b:1:2577-0:269:1768","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2551:262","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2547:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:2580:133","1:2581:1590"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:45:1871":{"id":"0:45:1871","crate_id":0,"name":"map_left","span":{"filename":"src/lib.rs","begin":[319,4],"end":[327,5]},"visibility":"public","docs":"Apply the function `f` on the value in the `Left` variant if it is present rewrapping the\nresult in `Left`.\n\n```\nuse either::*;\n\nlet left: Either<_, u32> = Left(123);\nassert_eq!(left.map_left(|x| x * 2), Left(246));\n\nlet right: Either<u32, _> = Right(123);\nassert_eq!(right.map_left(|x| x * 2), Right(123));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"M"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"M","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3044:1874","args":{"parenthesized":{"inputs":[{"generic":"L"}],"output":{"generic":"M"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:251:718":{"id":"0:251:718","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[1365,4],"end":[1367,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9506:137","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9487:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:84:1982":{"id":"0:84:1982","crate_id":0,"name":"right_or_else","span":{"filename":"src/lib.rs","begin":[659,4],"end":[667,5]},"visibility":"public","docs":"Returns right value or computes it from a closure\n\n# Examples\n\n```\n# use either::*;\nlet left: Either<String, u32> = Left(\"3\".to_string());\nassert_eq!(left.right_or_else(|x| x.parse().unwrap()), 3);\n\nlet right: Either<String, u32> = Right(3);\nassert_eq!(right.right_or_else(|_| unreachable!()), 3);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"generic":"R"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3044:1874","args":{"parenthesized":{"inputs":[{"generic":"L"}],"output":{"generic":"R"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:7487:1943":{"id":"1:7487:1943","crate_id":1,"name":"IntoIter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"I"}}}},"0:87:1997":{"id":"0:87:1997","crate_id":0,"name":"unwrap_right","span":{"filename":"src/lib.rs","begin":[719,4],"end":[727,5]},"visibility":"public","docs":"Returns the right value\n\n# Examples\n\n```\n# use either::*;\nlet right: Either<(), _> = Right(3);\nassert_eq!(right.unwrap_right(), 3);\n```\n\n# Panics\n\nWhen `Either` is a `Left` value\n\n```should_panic\n# use either::*;\nlet left: Either<_, ()> = Left(3);\nleft.unwrap_right();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"R"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"core::fmt::Debug","id":"1:9531:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12404":{"id":"1:12404","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:12405:872","1:12406:2783","1:12407:31783","1:12408:31784","1:12410:31785","1:12413:29759","1:12414:31786","1:12415:342","1:12416:341","1:12417:26786","1:12419:26787","1:12421:26788","1:12423:1859","1:12425:31787","1:12426:31788","1:12427:28618","1:12428:28619","1:12429:7574","1:12430:7636","1:12431:2772","1:12432:26381","1:12433:26390","1:12434:2766","1:12435:31789","1:12436:26395","1:12437:27199","1:12440:28636","1:12443:28637","1:12446:2079","1:12450:2085","1:12454:2765","1:12457:26386","1:12460:28628","1:12463:31790","1:12466:31791","1:12469:28630","1:12472:28632","1:12475:28634","1:12478:28635","1:12481:2322","1:12484:31792","1:12487:31793","1:12490:31794","1:12493:31795","1:12495:31796","1:12497:31797","1:12499:31798","1:12500:31799","1:12501:31800","1:12504:31801","1:12507:28638","1:12510:28639","1:12513:31802","1:12516:31803","1:12519:31804","1:12522:2146","1:12524:28531","1:12525:28532","1:12526:28534","1:12527:28535","1:12528:28536","1:12529:31805","1:12531:8594","1:12532:31806"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2581:1590":{"id":"1:2581:1590","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41709:231","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2551:262","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:149:2074":{"id":"0:149:2074","crate_id":0,"name":"nth","span":{"filename":"src/lib.rs","begin":[1030,4],"end":[1032,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:7627:173","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5792-0:269:1768":{"id":"b:5:5792-0:269:1768","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:9536:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2783:2407","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5790:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["5:5794:1565"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:192:2096":{"id":"0:192:2096","crate_id":0,"name":"read_to_end","span":{"filename":"src/lib.rs","begin":[1164,4],"end":[1166,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"std::vec::Vec","id":"5:6914:269","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"4:2927:231","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:223":{"id":"0:223","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1296,0],"end":[1304,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Target","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2538:77","args":{"angle_bracketed":{"args":[{"type":{"generic":"Target"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2538:77","args":{"angle_bracketed":{"args":[{"type":{"generic":"Target"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsMut","id":"1:2538:77","args":{"angle_bracketed":{"args":[{"type":{"generic":"Target"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:227:1852"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12457:26386":{"id":"1:12457:26386","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:12067:450","self::pattern":"1:12106:1796"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:11922:7554","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:2943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:56:1905":{"id":"0:56:1905","crate_id":0,"name":"map_either_with","span":{"filename":"src/lib.rs","begin":[399,4],"end":[408,5]},"visibility":"public","docs":"Similar to [`map_either`], with an added context `ctx` accessible to\nboth functions.\n\n```\nuse either::*;\n\nlet mut sum = 0;\n\n// Both closures want to update the same value, so pass it as context.\nlet mut f = |sum: &mut usize, s: String| { *sum += s.len(); s.to_uppercase() };\nlet mut g = |sum: &mut usize, u: usize| { *sum += u; u.to_string() };\n\nlet left: Either<String, usize> = Left(\"loopy\".into());\nassert_eq!(left.map_either_with(&mut sum, &mut f, &mut g), Left(\"LOOPY\".into()));\n\nlet right: Either<String, usize> = Right(42);\nassert_eq!(right.map_either_with(&mut sum, &mut f, &mut g), Right(\"42\".into()));\n\nassert_eq!(sum, 47);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["ctx",{"generic":"Ctx"}],["f",{"generic":"F"}],["g",{"generic":"G"}]],"output":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"M"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Ctx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"M","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3044:1874","args":{"parenthesized":{"inputs":[{"generic":"Ctx"},{"generic":"L"}],"output":{"generic":"M"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"G"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3044:1874","args":{"parenthesized":{"inputs":[{"generic":"Ctx"},{"generic":"R"}],"output":{"generic":"S"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:140:1016":{"id":"0:140:1016","crate_id":0,"name":"next","span":{"filename":"src/lib.rs","begin":[1000,4],"end":[1002,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:7627:173","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:100:2028":{"id":"0:100:2028","crate_id":0,"name":"factor_err","span":{"filename":"src/lib.rs","begin":[847,4],"end":[852,5]},"visibility":"public","docs":"Factors out a homogenous type from an `Either` of [`Result`].\n\nHere, the homogeneous type is the `Err` type of the [`Result`].\n\n```\nuse either::*;\nlet left: Either<_, Result<String, u32>> = Left(Ok(vec![0]));\nassert_eq!(left.factor_err(), Ok(Left(vec![0])));\n\nlet right: Either<Result<Vec<u8>, u32>, _> = Right(Ok(String::new()));\nassert_eq!(right.factor_err(), Ok(Right(String::new())));\n```","links":{"`Result`":"1:41709:231"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41709:231","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}}},{"type":{"generic":"E"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:7484-0:269:1768":{"id":"b:1:7484-0:269:1768","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7627:173","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7480:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:7486:168","1:7487:1943","1:7488:838"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"a:1:2776:242-0:269:1768":{"id":"a:1:2776:242-0:269:1768","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2776:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2776:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2776:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:88:2001":{"id":"0:88:2001","crate_id":0,"name":"expect_left","span":{"filename":"src/lib.rs","begin":[748,4],"end":[756,5]},"visibility":"public","docs":"Returns the left value\n\n# Examples\n\n```\n# use either::*;\nlet left: Either<_, ()> = Left(3);\nassert_eq!(left.expect_left(\"value was Right\"), 3);\n```\n\n# Panics\n\nWhen `Either` is a `Right` value\n\n```should_panic\n# use either::*;\nlet right: Either<(), _> = Right(3);\nright.expect_left(\"value was Right\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["msg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"generic":"L"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"core::fmt::Debug","id":"1:9531:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2586:1588":{"id":"1:2586:1588","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:41709:231","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2551:262","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12475:28634":{"id":"1:12475:28634","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:2943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:142:2068":{"id":"0:142:2068","crate_id":0,"name":"fold","span":{"filename":"src/lib.rs","begin":[1008,4],"end":[1013,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["init",{"generic":"Acc"}],["f",{"generic":"G"}]],"output":{"generic":"Acc"},"c_variadic":false},"generics":{"params":[{"name":"Acc","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"G"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3041:2071","args":{"parenthesized":{"inputs":[{"generic":"Acc"},{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:7627:173","args":null}}}],"output":{"generic":"Acc"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:110:2042":{"id":"0:110:2042","crate_id":0,"name":"factor_first","span":{"filename":"src/lib.rs","begin":[891,4],"end":[896,5]},"visibility":"public","docs":"Factor out a homogeneous type from an either of pairs.\n\nHere, the homogeneous type is the first element of the pairs.\n\n```\nuse either::*;\nlet left: Either<_, (u32, String)> = Left((123, vec![0]));\nassert_eq!(left.factor_first().0, 123);\n\nlet right: Either<(u32, Vec<u8>), _> = Right((123, String::new()));\nassert_eq!(right.factor_first().0, 123);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"tuple":[{"generic":"T"},{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3414:1603":{"id":"1:3414:1603","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:39333:3238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:315:343":{"id":"0:315:343","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[1269,0],"end":[1269,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12460:28628":{"id":"1:12460:28628","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12106:1796","`DoubleEndedIterator`":"1:7518:126","prim@char":"4:12067:450","str::split":"1:12454:2765"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43544:7557","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:2943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12111:2943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12126:8711","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:179":{"id":"0:179","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1124,0],"end":[1129,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"iter::FusedIterator","id":"1:7932:2087","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"iter::FusedIterator","id":"1:7932:2087","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"L"},"trait":{"name":"","id":"1:7627:173","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7932:2087","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:684:6767":{"id":"5:684:6767","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:105:2034":{"id":"0:105:2034","crate_id":0,"name":"factor_ok","span":{"filename":"src/lib.rs","begin":[870,4],"end":[875,5]},"visibility":"public","docs":"Factors out a homogenous type from an `Either` of [`Result`].\n\nHere, the homogeneous type is the `Ok` type of the [`Result`].\n\n```\nuse either::*;\nlet left: Either<_, Result<u32, String>> = Left(Err(vec![0]));\nassert_eq!(left.factor_ok(), Err(Left(vec![0])));\n\nlet right: Either<Result<u32, Vec<u8>>, _> = Right(Err(String::new()));\nassert_eq!(right.factor_ok(), Err(Right(String::new())));\n```","links":{"`Result`":"1:41709:231"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41709:231","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12429:7574":{"id":"1:12429:7574","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:12067:450"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43496:2946","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12450:2085":{"id":"1:12450:2085","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:41566:196","prim@char":"4:12067:450","self::pattern":"1:12106:1796"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:2943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12111:2943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12126:8711","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12499:31798":{"id":"1:12499:31798","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:79:1961":{"id":"0:79:1961","crate_id":0,"name":"left_or_default","span":{"filename":"src/lib.rs","begin":[568,4],"end":[576,5]},"visibility":"public","docs":"Return left or a default\n\n# Examples\n\n```\n# use either::*;\nlet left: Either<String, u32> = Left(\"left\".to_string());\nassert_eq!(left.left_or_default(), \"left\");\n\nlet right: Either<String, u32> = Right(42);\nassert_eq!(right.left_or_default(), String::default());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"L"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:2618:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:211:2112":{"id":"0:211:2112","crate_id":0,"name":"flush","span":{"filename":"src/lib.rs","begin":[1232,4],"end":[1234,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"4:2927:231","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:141:2067":{"id":"0:141:2067","crate_id":0,"name":"size_hint","span":{"filename":"src/lib.rs","begin":[1004,4],"end":[1006,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12507:28638":{"id":"1:12507:28638","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12067:450","self::pattern":"1:12106:1796"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:2943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12501:31800":{"id":"1:12501:31800","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:12067:450","self::pattern":"1:12106:1796"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:2943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12111:2943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12131:8710","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12529:31805":{"id":"1:12529:31805","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4573:31805"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:43825:7583","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:210:2111":{"id":"0:210:2111","crate_id":0,"name":"write_fmt","span":{"filename":"src/lib.rs","begin":[1228,4],"end":[1230,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["fmt",{"resolved_path":{"name":"fmt::Arguments","id":"1:42661:75","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"4:2927:231","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:272:176":{"id":"0:272:176","crate_id":0,"name":"Left","span":{"filename":"src/lib.rs","begin":[52,4],"end":[52,11]},"visibility":"default","docs":"A value of type `L`.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:274:1725"]},"discriminant":null}}},"0:241:597":{"id":"0:241:597","crate_id":0,"name":"deref_mut","span":{"filename":"src/lib.rs","begin":[1333,4],"end":[1335,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:3010:122","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12443:28637":{"id":"1:12443:28637","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:12067:450","self::pattern":"1:12106:1796"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:2943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12111:2943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12126:8711","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:80:1967":{"id":"0:80:1967","crate_id":0,"name":"left_or_else","span":{"filename":"src/lib.rs","begin":[590,4],"end":[598,5]},"visibility":"public","docs":"Returns left value or computes it from a closure\n\n# Examples\n\n```\n# use either::*;\nlet left: Either<String, u32> = Left(\"3\".to_string());\nassert_eq!(left.left_or_else(|_| unreachable!()), \"3\");\n\nlet right: Either<String, u32> = Right(3);\nassert_eq!(right.left_or_else(|x| x.to_string()), \"3\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"generic":"L"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3044:1874","args":{"parenthesized":{"inputs":[{"generic":"R"}],"output":{"generic":"L"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:284":{"id":"0:284","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,15],"end":[49,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::PartialEq","id":"1:2325:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::PartialEq","id":"1:2325:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2325:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:287:660"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:66:1928":{"id":"0:66:1928","crate_id":0,"name":"either_with","span":{"filename":"src/lib.rs","begin":[456,4],"end":[465,5]},"visibility":"public","docs":"Like `either`, but provide some context to whichever of the\nfunctions ends up being called.\n\n```\n// In this example, the context is a mutable reference\nuse either::*;\n\nlet mut result = Vec::new();\n\nlet values = vec![Left(2), Right(2.7)];\n\nfor value in values {\n    value.either_with(&mut result,\n                      |ctx, integer| ctx.push(integer),\n                      |ctx, real| ctx.push(f64::round(real) as i32));\n}\n\nassert_eq!(result, vec![2, 3]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["ctx",{"generic":"Ctx"}],["f",{"generic":"F"}],["g",{"generic":"G"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[{"name":"Ctx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3044:1874","args":{"parenthesized":{"inputs":[{"generic":"Ctx"},{"generic":"L"}],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"G"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3044:1874","args":{"parenthesized":{"inputs":[{"generic":"Ctx"},{"generic":"R"}],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:150:2076":{"id":"0:150:2076","crate_id":0,"name":"collect","span":{"filename":"src/lib.rs","begin":[1034,4],"end":[1039,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"B"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"B"},"bounds":[{"trait_bound":{"trait":{"name":"iter::FromIterator","id":"1:7476:139","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:7627:173","args":null}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:340":{"id":"0:340","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1280,0],"end":[1284,1]},"visibility":"default","docs":"Requires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2538:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"::std::ffi::CStr","id":"1:40082:104","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2538:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"::std::ffi::CStr","id":"1:40082:104","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsMut","id":"1:2538:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"CStr","id":"1:40082:104","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:343:1852"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12408:31784":{"id":"1:12408:31784","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:686:24724":{"id":"5:686:24724","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12484:31792":{"id":"1:12484:31792","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12106:1796","`DoubleEndedIterator`":"1:7518:126","prim@char":"4:12067:450","str::matches":"1:12481:2322"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:43748:7625","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:2943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12111:2943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12126:8711","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12432:26381":{"id":"1:12432:26381","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:12433:26390"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:43800:7627","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:205":{"id":"0:205","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1215,0],"end":[1235,1]},"visibility":"default","docs":"`Either<L, R>` implements `Write` if both `L` and `R` do.\n\nRequires crate feature `\"use_std\"`","links":{},"attrs":["#[cfg(any(test, feature = \"use_std\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Write","id":"4:3514:1767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Write","id":"4:3514:1767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["by_ref","is_write_vectored","write_fmt","write_vectored","write_all","write_all_vectored"],"trait":{"name":"Write","id":"4:3514:1767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:208:2109","0:209:2110","0:210:2111","0:211:2112"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:148:2073":{"id":"0:148:2073","crate_id":0,"name":"last","span":{"filename":"src/lib.rs","begin":[1026,4],"end":[1028,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:7627:173","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12531:8594":{"id":"1:12531:8594","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4574:8594"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:43834:7535","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12481:2322":{"id":"1:12481:2322","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12106:1796","`DoubleEndedIterator`":"1:7518:126","prim@char":"4:12067:450","str::rmatches":"1:12484:31792"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:43730:7624","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:2943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:119:921":{"id":"0:119:921","crate_id":0,"name":"map","span":{"filename":"src/lib.rs","begin":[947,4],"end":[955,5]},"visibility":"public","docs":"Map `f` over the contained value and return the result in the\ncorresponding variant.\n\n```\nuse either::*;\n\nlet value: Either<_, i32> = Right(42);\n\nlet other = value.map(|x| x * 2);\nassert_eq!(other, Right(84));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"M"}},{"type":{"generic":"M"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"M","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3044:1874","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":{"generic":"M"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:319:1852":{"id":"0:319:1852","crate_id":0,"name":"as_mut","span":{"filename":"src/lib.rs","begin":[1269,0],"end":[1269,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:332":{"id":"0:332","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1275,0],"end":[1279,1]},"visibility":"default","docs":"Requires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2538:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"::std::ffi::OsStr","id":"4:1986:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2538:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"::std::ffi::OsStr","id":"4:1986:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsMut","id":"1:2538:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"4:1986:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:335:1852"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:125:744":{"id":"0:125:744","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[960,4],"end":[965,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["r",{"resolved_path":{"name":"Result","id":"1:41709:231","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"L"}}],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:145:2072":{"id":"0:145:2072","crate_id":0,"name":"for_each","span":{"filename":"src/lib.rs","begin":[1015,4],"end":[1020,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3041:2071","args":{"parenthesized":{"inputs":[{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:7627:173","args":null}}}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12469:28630":{"id":"1:12469:28630","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:12067:450","self::pattern":"1:12106:1796","str::rsplitn":"1:12472:28632"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43630:7559","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:2943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12490:31794":{"id":"1:12490:31794","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12106:1796","`DoubleEndedIterator`":"1:7518:126","prim@char":"4:12067:450","str::match_indices":"1:12487:31793"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:43694:7623","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:2943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12111:2943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12126:8711","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5538:29766":{"id":"5:5538:29766","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:12528:28536"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:298:1100":{"id":"0:298:1100","crate_id":0,"name":"partial_cmp","span":{"filename":"src/lib.rs","begin":[49,30],"end":[49,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"1:30807:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:327:1852":{"id":"0:327:1852","crate_id":0,"name":"as_mut","span":{"filename":"src/lib.rs","begin":[1270,0],"end":[1274,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"::std::path::Path","id":"4:5268:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:331:343":{"id":"0:331:343","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[1275,0],"end":[1279,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"::std::ffi::OsStr","id":"4:1986:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:198":{"id":"0:198","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1189,0],"end":[1209,1]},"visibility":"default","docs":"Requires crate feature `\"use_std\"`","links":{},"attrs":["#[cfg(any(test, feature = \"use_std\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"BufRead","id":"4:3539:1763","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"BufRead","id":"4:3539:1763","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["split","has_data_left","read_until","lines","read_line"],"trait":{"name":"BufRead","id":"4:3539:1763","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:201:2102","0:202:2103","0:203:2105","0:204:2107"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2264-0:269:1768":{"id":"b:1:2264-0:269:1768","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2783:2407","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2258:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:2266:24719"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:106":{"id":"0:106","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[878,0],"end":[897,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"generic":"T"},{"generic":"L"}]}},{"type":{"tuple":[{"generic":"T"},{"generic":"R"}]}}],"bindings":[]}}}},"items":["0:110:2042"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:299":{"id":"0:299","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,42],"end":[49,45]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::Ord","id":"1:2361:199","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::Ord","id":"1:2361:199","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clamp","max","min"],"trait":{"name":"Ord","id":"1:2361:199","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:302:461"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12513:31802":{"id":"1:12513:31802","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12067:450","self::pattern":"1:12106:1796"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:2943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12111:2943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12126:8711","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:295":{"id":"0:295","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,30],"end":[49,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::PartialOrd","id":"1:2367:206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::PartialOrd","id":"1:2367:206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["gt","lt","le","ge"],"trait":{"name":"PartialOrd","id":"1:2367:206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:298:1100"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:682-0:269:1768":{"id":"b:5:682-0:269:1768","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2277:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["5:684:6767","5:685:24723","5:686:24724"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:209:2110":{"id":"0:209:2110","crate_id":0,"name":"write_all","span":{"filename":"src/lib.rs","begin":[1224,4],"end":[1226,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"4:2927:231","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:190:2093":{"id":"0:190:2093","crate_id":0,"name":"read","span":{"filename":"src/lib.rs","begin":[1156,4],"end":[1158,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"4:2927:231","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:218":{"id":"0:218","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1286,0],"end":[1294,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Target","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2535:78","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"Target"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2535:78","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"Target"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2535:78","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"Target"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:222:343"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:101":{"id":"0:101","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[855,0],"end":[876,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Result","id":"1:41709:231","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"L"}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Result","id":"1:41709:231","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"R"}}],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:105:2034"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:245:1813":{"id":"0:245:1813","crate_id":0,"name":"source","span":{"filename":"src/lib.rs","begin":[1345,4],"end":[1347,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"1:2629:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2585:133":{"id":"1:2585:133","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:31991:2355","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"1:12709:159":{"id":"1:12709:159","crate_id":1,"name":"IntoFuture","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"F"}}}},"0:302:461":{"id":"0:302:461","crate_id":0,"name":"cmp","span":{"filename":"src/lib.rs","begin":[49,42],"end":[49,45]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"1:30807:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:31:454":{"id":"0:31:454","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[135,4],"end":[140,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:7488:838":{"id":"1:7488:838","crate_id":1,"name":"into_iter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"I"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:118:2053":{"id":"0:118:2053","crate_id":0,"name":"into_inner","span":{"filename":"src/lib.rs","begin":[932,4],"end":[934,5]},"visibility":"public","docs":"Extract the value of an either over two equivalent types.\n\n```\nuse either::*;\n\nlet left: Either<_, u32> = Left(123);\nassert_eq!(left.into_inner(), 123);\n\nlet right: Either<u32, _> = Right(123);\nassert_eq!(right.into_inner(), 123);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:116":{"id":"0:116","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[920,0],"end":[956,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:118:2053","0:119:921"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:328":{"id":"0:328","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1275,0],"end":[1279,1]},"visibility":"default","docs":"Requires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2535:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"::std::ffi::OsStr","id":"4:1986:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2535:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"::std::ffi::OsStr","id":"4:1986:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2535:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"4:1986:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:331:343"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:8607:2565-0:269:1768":{"id":"a:1:8607:2565-0:269:1768","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8607:2565","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8607:2565","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8607:2565","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:41:1852":{"id":"0:41:1852","crate_id":0,"name":"as_mut","span":{"filename":"src/lib.rs","begin":[253,4],"end":[258,5]},"visibility":"public","docs":"Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.\n\n```\nuse either::*;\n\nfn mutate_left(value: &mut Either<u32, u32>) {\n    if let Some(l) = value.as_mut().left() {\n        *l = 999;\n    }\n}\n\nlet mut left = Left(123);\nlet mut right = Right(123);\nmutate_left(&mut left);\nmutate_left(&mut right);\nassert_eq!(left, Left(999));\nassert_eq!(right, Right(123));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"L"}}}},{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"R"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:155:312":{"id":"0:155:312","crate_id":0,"name":"all","span":{"filename":"src/lib.rs","begin":[1049,4],"end":[1054,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3041:2071","args":{"parenthesized":{"inputs":[{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:7627:173","args":null}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:147:542":{"id":"0:147:542","crate_id":0,"name":"count","span":{"filename":"src/lib.rs","begin":[1022,4],"end":[1024,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:228":{"id":"0:228","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1306,0],"end":[1314,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Target","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2538:77","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"Target"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2538:77","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"Target"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsMut","id":"1:2538:77","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"Target"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:232:1852"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12436:26395":{"id":"1:12436:26395","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:43818:7573","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12463:31790":{"id":"1:12463:31790","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12106:1796","str::split":"1:12454:2765","prim@char":"4:12067:450","`DoubleEndedIterator`":"1:7518:126","str::rsplit_terminator":"1:12466:31791"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43576:7620","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:2943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2793:252-0:269:1768":{"id":"a:1:2793:252-0:269:1768","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2793:252","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2793:252","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2793:252","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:339:343":{"id":"0:339:343","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[1280,0],"end":[1284,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"::std::ffi::CStr","id":"1:40082:104","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12407:31783":{"id":"1:12407:31783","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12446:2079":{"id":"1:12446:2079","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:41566:196","prim@char":"4:12067:450","self::pattern":"1:12106:1796"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:2943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:336":{"id":"0:336","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1280,0],"end":[1284,1]},"visibility":"default","docs":"Requires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2535:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"::std::ffi::CStr","id":"1:40082:104","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2535:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"::std::ffi::CStr","id":"1:40082:104","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2535:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"CStr","id":"1:40082:104","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:339:343"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:287:660":{"id":"0:287:660","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[49,15],"end":[49,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:139:168":{"id":"0:139:168","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[998,4],"end":[998,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"L"},"trait":{"name":"Iterator","id":"1:7627:173","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"0:343:1852":{"id":"0:343:1852","crate_id":0,"name":"as_mut","span":{"filename":"src/lib.rs","begin":[1280,0],"end":[1284,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"::std::ffi::CStr","id":"1:40082:104","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:78:1955":{"id":"0:78:1955","crate_id":0,"name":"left_or","span":{"filename":"src/lib.rs","begin":[549,4],"end":[554,5]},"visibility":"public","docs":"Return left value or given value\n\nArguments passed to `left_or` are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use [`left_or_else`],\nwhich is lazily evaluated.\n\n[`left_or_else`]: #method.left_or_else\n\n# Examples\n\n```\n# use either::*;\nlet left: Either<&str, &str> = Left(\"left\");\nassert_eq!(left.left_or(\"foo\"), \"left\");\n\nlet right: Either<&str, &str> = Right(\"right\");\nassert_eq!(right.left_or(\"left\"), \"left\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["other",{"generic":"L"}]],"output":{"generic":"L"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:194":{"id":"0:194","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1177,0],"end":[1185,1]},"visibility":"default","docs":"`Either<L, R>` implements `Seek` if both `L` and `R` do.\n\nRequires crate feature `\"use_std\"`","links":{},"attrs":["#[cfg(any(test, feature = \"use_std\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Seek","id":"4:3532:1765","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Seek","id":"4:3532:1765","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["stream_position","rewind","stream_len"],"trait":{"name":"Seek","id":"4:3532:1765","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:197:2100"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12466:31791":{"id":"1:12466:31791","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12106:1796","str::split":"1:12454:2765","prim@char":"4:12067:450","str::split_terminator":"1:12463:31790"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43594:7621","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:2943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12111:2943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12126:8711","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12708:203":{"id":"1:12708:203","crate_id":1,"name":"Output","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"Future","id":"1:12689:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"0:291":{"id":"0:291","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,26],"end":[49,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::Eq","id":"1:2330:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::Eq","id":"1:2330:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2330:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:51:1891":{"id":"0:51:1891","crate_id":0,"name":"map_either","span":{"filename":"src/lib.rs","begin":[368,4],"end":[377,5]},"visibility":"public","docs":"Apply the functions `f` and `g` to the `Left` and `Right` variants\nrespectively. This is equivalent to\n[bimap](https://hackage.haskell.org/package/bifunctors-5/docs/Data-Bifunctor.html)\nin functional programming.\n\n```\nuse either::*;\n\nlet f = |s: String| s.len();\nlet g = |u: u8| u.to_string();\n\nlet left: Either<String, u8> = Left(\"loopy\".into());\nassert_eq!(left.map_either(f, g), Left(5));\n\nlet right: Either<String, u8> = Right(42);\nassert_eq!(right.map_either(f, g), Right(\"42\".into()));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}],["g",{"generic":"G"}]],"output":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"M"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"M","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3044:1874","args":{"parenthesized":{"inputs":[{"generic":"L"}],"output":{"generic":"M"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"G"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3044:1874","args":{"parenthesized":{"inputs":[{"generic":"R"}],"output":{"generic":"S"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:186:1118":{"id":"0:186:1118","crate_id":0,"name":"poll","span":{"filename":"src/lib.rs","begin":[1139,4],"end":[1144,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"1:41701:210","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}],["cx",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"core::task::Context","id":"1:12896:111","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"core::task::Poll","id":"1:44464:212","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:12689:143","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12410:31785":{"id":"1:12410:31785","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:12408:31784"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12532:31806":{"id":"1:12532:31806","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4571:31806"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:43843:7582","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5519:32464":{"id":"5:5519:32464","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2922","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2922","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:43:1858":{"id":"0:43:1858","crate_id":0,"name":"as_pin_mut","span":{"filename":"src/lib.rs","begin":[275,4],"end":[287,5]},"visibility":"public","docs":"Convert `Pin<&mut Either<L, R>>` to `Either<Pin<&mut L>, Pin<&mut R>>`,\npinned projections of the inner variants.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"1:41701:210","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Pin","id":"1:41701:210","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"L"}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Pin","id":"1:41701:210","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"R"}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:202:2103":{"id":"0:202:2103","crate_id":0,"name":"consume","span":{"filename":"src/lib.rs","begin":[1198,4],"end":[1200,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["amt",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:203:2105":{"id":"0:203:2105","crate_id":0,"name":"read_until","span":{"filename":"src/lib.rs","begin":[1202,4],"end":[1204,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["byte",{"primitive":"u8"}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"std::vec::Vec","id":"5:6914:269","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"4:2927:231","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:303":{"id":"0:303","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,47],"end":[49,51]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hash","id":"1:9747:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hash","id":"1:9747:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:9747:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:306:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5534:32467":{"id":"5:5534:32467","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7489:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:77:838":{"id":"0:77:838","crate_id":0,"name":"into_iter","span":{"filename":"src/lib.rs","begin":[520,4],"end":[529,5]},"visibility":"public","docs":"Convert the inner value to an iterator.\n\n```\nuse either::*;\n\nlet left: Either<_, Vec<u32>> = Left(vec![1, 2, 3, 4, 5]);\nlet mut right: Either<Vec<u32>, _> = Right(vec![]);\nright.extend(left.into_iter());\nassert_eq!(right, Right(vec![1, 2, 3, 4, 5]));\n```","links":{},"attrs":["#[allow(clippy :: should_implement_trait)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"L"},"trait":{"name":"","id":"1:7480:160","args":null}}}},{"type":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"1:7480:160","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7480:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7480:160","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"L"},"trait":{"name":"","id":"1:7480:160","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:24-0:275:234":{"id":"0:24-0:275:234","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[40,30],"end":[40,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::Either::Right","name":"Right","id":"0:275:234","glob":false}}},"1:12423:1859":{"id":"1:12423:1859","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12478:28635":{"id":"1:12478:28635","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:2943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12111:2943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12126:8711","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:129:2014":{"id":"0:129:2014","crate_id":0,"name":"into","span":{"filename":"src/lib.rs","begin":[971,4],"end":[976,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41709:231","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"L"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12440:28636":{"id":"1:12440:28636","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"4:12067:450","self::pattern":"1:12106:1796"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:2943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:246:2116":{"id":"0:246:2116","crate_id":0,"name":"description","span":{"filename":"src/lib.rs","begin":[1350,4],"end":[1352,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:308":{"id":"0:308","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,53],"end":[49,58]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"1:9531:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"1:9531:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9531:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:311:718"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:324":{"id":"0:324","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1270,0],"end":[1274,1]},"visibility":"default","docs":"Requires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2538:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"::std::path::Path","id":"4:5268:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2538:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"::std::path::Path","id":"4:5268:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsMut","id":"1:2538:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"4:5268:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:327:1852"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12472:28632":{"id":"1:12472:28632","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:12067:450","str::splitn":"1:12469:28630","self::pattern":"1:12106:1796"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:43648:7560","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:2943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12111:2943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12126:8711","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:96":{"id":"0:96","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[832,0],"end":[853,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Result","id":"1:41709:231","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"E"}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Result","id":"1:41709:231","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"E"}}],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:100:2028"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:316":{"id":"0:316","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1269,0],"end":[1269,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2538:77","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2538:77","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsMut","id":"1:2538:77","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:319:1852"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:32:456":{"id":"0:32:456","crate_id":0,"name":"clone_from","span":{"filename":"src/lib.rs","begin":[142,4],"end":[148,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["source",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:7486:168":{"id":"1:7486:168","crate_id":1,"name":"Item","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"Iterator","id":"1:7627:173","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"1:12487:31793":{"id":"1:12487:31793","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12106:1796","`DoubleEndedIterator`":"1:7518:126","prim@char":"4:12067:450","str::rmatch_indices":"1:12490:31794"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:43676:7622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:2943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:89:2006":{"id":"0:89:2006","crate_id":0,"name":"expect_right","span":{"filename":"src/lib.rs","begin":[777,4],"end":[785,5]},"visibility":"public","docs":"Returns the right value\n\n# Examples\n\n```\n# use either::*;\nlet right: Either<(), _> = Right(3);\nassert_eq!(right.expect_right(\"value was Left\"), 3);\n```\n\n# Panics\n\nWhen `Either` is a `Left` value\n\n```should_panic\n# use either::*;\nlet left: Either<_, ()> = Left(3);\nleft.expect_right(\"value was Right\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["msg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"generic":"R"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"core::fmt::Debug","id":"1:9531:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:90:2013":{"id":"0:90:2013","crate_id":0,"name":"either_into","span":{"filename":"src/lib.rs","begin":[799,4],"end":[808,5]},"visibility":"public","docs":"Convert the contained value into `T`\n\n# Examples\n\n```\n# use either::*;\n// Both u16 and u32 can be converted to u64.\nlet left: Either<u16, u32> = Left(3u16);\nassert_eq!(left.either_into::<u64>(), 3u64);\nlet right: Either<u16, u32> = Right(7u32);\nassert_eq!(right.either_into::<u64>(), 7u64);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2541:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2541:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:233":{"id":"0:233","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1316,0],"end":[1326,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Deref","id":"1:3010:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Deref","id":"1:3010:122","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"L"},"trait":{"name":"","id":"1:3010:122","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:3010:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:236:254","0:237:595"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:126":{"id":"0:126","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[970,0],"end":[977,1]},"visibility":"default","docs":"Convert from `Either` to `Result` with `Right => Ok` and `Left => Err`.","links":{},"attrs":["#[allow(clippy :: from_over_into)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2541:157","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Result","id":"1:41709:231","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"L"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:129:2014"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:130":{"id":"0:130","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[979,0],"end":[990,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Extend","id":"1:7489:2064","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Extend","id":"1:7489:2064","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["extend_one","extend_reserve"],"trait":{"name":"Extend","id":"1:7489:2064","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:134:2065"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:86:1991":{"id":"0:86:1991","crate_id":0,"name":"unwrap_left","span":{"filename":"src/lib.rs","begin":[688,4],"end":[698,5]},"visibility":"public","docs":"Returns the left value\n\n# Examples\n\n```\n# use either::*;\nlet left: Either<_, ()> = Left(3);\nassert_eq!(left.unwrap_left(), 3);\n```\n\n# Panics\n\nWhen `Either` is a `Right` value\n\n```should_panic\n# use either::*;\nlet right: Either<(), _> = Right(3);\nright.unwrap_left();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"L"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"core::fmt::Debug","id":"1:9531:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2263:2283":{"id":"1:2263:2283","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:238":{"id":"0:238","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1328,0],"end":[1336,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"DerefMut","id":"1:3023:1760","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"DerefMut","id":"1:3023:1760","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"L"},"trait":{"name":"","id":"1:3010:122","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"1:3023:1760","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:241:597"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:306:781":{"id":"0:306:781","crate_id":0,"name":"hash","span":{"filename":"src/lib.rs","begin":[49,47],"end":[49,51]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:9755:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:175":{"id":"0:175","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1114,0],"end":[1122,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"ExactSizeIterator","id":"1:7571:2086","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"ExactSizeIterator","id":"1:7571:2086","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"L"},"trait":{"name":"","id":"1:7627:173","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["len","is_empty"],"trait":{"name":"ExactSizeIterator","id":"1:7571:2086","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:178:872"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:33":{"id":"0:33","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[151,0],"end":[809,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:36:1820","0:37:1824","0:38:1830","0:39:1835","0:40:343","0:41:1852","0:42:1855","0:43:1858","0:44:1864","0:45:1871","0:48:1879","0:51:1891","0:56:1905","0:62:1917","0:66:1928","0:71:1932","0:74:1936","0:77:838","0:78:1955","0:79:1961","0:80:1967","0:82:1974","0:83:1978","0:84:1982","0:86:1991","0:87:1997","0:88:2001","0:89:2006","0:90:2013"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5523:32465":{"id":"5:5523:32465","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7489:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:2943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:152:2078":{"id":"0:152:2078","crate_id":0,"name":"partition","span":{"filename":"src/lib.rs","begin":[1041,4],"end":[1047,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"tuple":[{"generic":"B"},{"generic":"B"}]},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"B"},"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:2618:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Extend","id":"1:7489:2064","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:7627:173","args":null}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3041:2071","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:7627:173","args":null}}}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:37:1824":{"id":"0:37:1824","crate_id":0,"name":"is_right","span":{"filename":"src/lib.rs","begin":[177,4],"end":[179,5]},"visibility":"public","docs":"Return true if the value is the `Right` variant.\n\n```\nuse either::*;\n\nlet values = [Left(1), Right(\"the right value\")];\nassert_eq!(values[0].is_right(), false);\nassert_eq!(values[1].is_right(), true);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74:1936":{"id":"0:74:1936","crate_id":0,"name":"right_and_then","span":{"filename":"src/lib.rs","begin":[499,4],"end":[507,5]},"visibility":"public","docs":"Apply the function `f` on the value in the `Right` variant if it is present.\n\n```\nuse either::*;\n\nlet left: Either<_, u32> = Left(123);\nassert_eq!(left.right_and_then(|x| Right(x * 2)), Left(123));\n\nlet right: Either<u32, _> = Right(123);\nassert_eq!(right.right_and_then(|x| Right(x * 2)), Right(246));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3044:1874","args":{"parenthesized":{"inputs":[{"generic":"R"}],"output":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12710:837":{"id":"1:12710:837","crate_id":1,"name":"into_future","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoFuture","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"IntoFuture","id":"1:12702:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:169:2083":{"id":"0:169:2083","crate_id":0,"name":"next_back","span":{"filename":"src/lib.rs","begin":[1090,4],"end":[1092,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:7627:173","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:136":{"id":"0:136","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[993,0],"end":[1083,1]},"visibility":"default","docs":"`Either<L, R>` is an iterator if both `L` and `R` are iterators.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7627:173","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7627:173","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"L"},"trait":{"name":"","id":"1:7627:173","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["unzip","try_for_each","inspect","map_while","filter","min_by_key","next_chunk","find","ne","map","last","size_hint","__iterator_get_unchecked","cmp_by","copied","reduce","all","try_collect","scan","filter_map","max","advance_by","nth","fold","eq","any","partial_cmp_by","take","cloned","try_reduce","collect_into","flat_map","enumerate","max_by","step_by","partial_cmp","eq_by","cycle","try_find","partition_in_place","flatten","peekable","max_by_key","zip","find_map","position","collect","by_ref","cmp","lt","gt","array_chunks","skip","rposition","is_sorted","is_partitioned","map_windows","skip_while","intersperse","min","is_sorted_by","sum","rev","try_fold","ge","fuse","take_while","intersperse_with","min_by","le","count","partition","for_each","chain","is_sorted_by_key","product"],"trait":{"name":"Iterator","id":"1:7627:173","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:139:168","0:140:1016","0:141:2067","0:142:2068","0:145:2072","0:147:542","0:148:2073","0:149:2074","0:150:2076","0:152:2078","0:155:312","0:157:331","0:159:2079","0:161:2082","0:164:1119"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:173:2085":{"id":"0:173:2085","crate_id":0,"name":"rfind","span":{"filename":"src/lib.rs","begin":[1106,4],"end":[1111,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["predicate",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:7627:173","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3041:2071","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:7627:173","args":null}}}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12431:2772":{"id":"1:12431:2772","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43512:2499","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12434:2766":{"id":"1:12434:2766","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:43780:2496","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:48:1879":{"id":"0:48:1879","crate_id":0,"name":"map_right","span":{"filename":"src/lib.rs","begin":[341,4],"end":[349,5]},"visibility":"public","docs":"Apply the function `f` on the value in the `Right` variant if it is present rewrapping the\nresult in `Right`.\n\n```\nuse either::*;\n\nlet left: Either<_, u32> = Left(123);\nassert_eq!(left.map_right(|x| x * 2), Left(123));\n\nlet right: Either<u32, _> = Right(123);\nassert_eq!(right.map_right(|x| x * 2), Right(246));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3044:1874","args":{"parenthesized":{"inputs":[{"generic":"R"}],"output":{"generic":"S"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:204:2107":{"id":"0:204:2107","crate_id":0,"name":"read_line","span":{"filename":"src/lib.rs","begin":[1206,4],"end":[1208,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"std::string::String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"4:2927:231","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:208:2109":{"id":"0:208:2109","crate_id":0,"name":"write","span":{"filename":"src/lib.rs","begin":[1220,4],"end":[1222,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"4:2927:231","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:248":{"id":"0:248","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1360,0],"end":[1368,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"1:9536:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"1:9536:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:9536:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:251:718"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2580:133":{"id":"1:2580:133","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2551:262","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"1:12435:31789":{"id":"1:12435:31789","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:43790:7626","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5537:29765":{"id":"5:5537:29765","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:12527:28535"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:23-0:272:176":{"id":"0:23-0:272:176","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[40,24],"end":[40,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::Either::Left","name":"Left","id":"0:272:176","glob":false}}},"1:12516:31803":{"id":"1:12516:31803","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12067:450","self::pattern":"1:12106:1796"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:2943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8606:2566-0:269:1768":{"id":"a:1:8606:2566-0:269:1768","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:8606:2566","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:8606:2566","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8606:2566","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:193:2097":{"id":"0:193:2097","crate_id":0,"name":"read_to_string","span":{"filename":"src/lib.rs","begin":[1168,4],"end":[1170,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"std::string::String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"4:2927:231","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:95:2020":{"id":"0:95:2020","crate_id":0,"name":"factor_none","span":{"filename":"src/lib.rs","begin":[824,4],"end":[829,5]},"visibility":"public","docs":"Factors out `None` from an `Either` of [`Option`].\n\n```\nuse either::*;\nlet left: Either<_, Option<String>> = Left(Some(vec![0]));\nassert_eq!(left.factor_none(), Some(Left(vec![0])));\n\nlet right: Either<Option<Vec<u8>>, _> = Right(Some(String::new()));\nassert_eq!(right.factor_none(), Some(Right(String::new())));\n```","links":{"`Option`":"1:41564:198"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:39:1835":{"id":"0:39:1835","crate_id":0,"name":"right","span":{"filename":"src/lib.rs","begin":[210,4],"end":[215,5]},"visibility":"public","docs":"Convert the right side of `Either<L, R>` to an `Option<R>`.\n\n```\nuse either::*;\n\nlet left: Either<_, ()> = Left(\"some value\");\nassert_eq!(left.right(),  None);\n\nlet right: Either<(), _> = Right(321);\nassert_eq!(right.right(), Some(321));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:122":{"id":"0:122","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[959,0],"end":[966,1]},"visibility":"default","docs":"Convert from `Result` to `Either` with `Ok => Right` and `Err => Left`.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2544:138","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Result","id":"1:41709:231","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"L"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:125:744"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:237:595":{"id":"0:237:595","crate_id":0,"name":"deref","span":{"filename":"src/lib.rs","begin":[1323,4],"end":[1325,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:3010:122","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12495:31796":{"id":"1:12495:31796","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12454:2765":{"id":"1:12454:2765","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12106:1796","`DoubleEndedIterator`":"1:7518:126","prim@char":"4:12067:450","str::split_whitespace":"1:12432:26381","str::rsplit":"1:12460:28628"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43526:2500","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:2943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:44:1864":{"id":"0:44:1864","crate_id":0,"name":"flip","span":{"filename":"src/lib.rs","begin":[300,4],"end":[305,5]},"visibility":"public","docs":"Convert `Either<L, R>` to `Either<R, L>`.\n\n```\nuse either::*;\n\nlet left: Either<_, ()> = Left(123);\nassert_eq!(left.flip(), Right(123));\n\nlet right: Either<(), _> = Right(\"some value\");\nassert_eq!(right.flip(), Left(\"some value\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"L"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12497:31797":{"id":"1:12497:31797","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:12706-0:269:1768":{"id":"b:1:12706-0:269:1768","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Future","id":"1:12689:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoFuture","id":"1:12702:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:12708:203","1:12709:159","1:12710:837"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"F"}}}},"0:227:1852":{"id":"0:227:1852","crate_id":0,"name":"as_mut","span":{"filename":"src/lib.rs","begin":[1301,4],"end":[1303,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Target"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12428:28619":{"id":"1:12428:28619","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:12427:28618"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:278":{"id":"0:278","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,9],"end":[49,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::marker::Copy","id":"1:2788:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::marker::Copy","id":"1:2788:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2788:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12417:26786":{"id":"1:12417:26786","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:41566:196"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:236:254":{"id":"0:236:254","crate_id":0,"name":"Target","span":{"filename":"src/lib.rs","begin":[1321,4],"end":[1321,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"L"},"trait":{"name":"Deref","id":"1:3010:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"1:12416:341":{"id":"1:12416:341","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:12084:1612"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12430:7636":{"id":"1:12430:7636","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:12067:450"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43502:7618","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:71:1932":{"id":"0:71:1932","crate_id":0,"name":"left_and_then","span":{"filename":"src/lib.rs","begin":[478,4],"end":[486,5]},"visibility":"public","docs":"Apply the function `f` on the value in the `Left` variant if it is present.\n\n```\nuse either::*;\n\nlet left: Either<_, u32> = Left(123);\nassert_eq!(left.left_and_then::<_,()>(|x| Right(x * 2)), Right(246));\n\nlet right: Either<u32, _> = Right(123);\nassert_eq!(right.left_and_then(|x| Right::<(), _>(x * 2)), Right(123));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3044:1874","args":{"parenthesized":{"inputs":[{"generic":"L"}],"output":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}},{"type":{"generic":"R"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5536:2522":{"id":"5:5536:2522","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7489:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:134:2065":{"id":"0:134:2065","crate_id":0,"name":"extend","span":{"filename":"src/lib.rs","begin":[984,4],"end":[989,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7480:160","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"A"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:40:343":{"id":"0:40:343","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[228,4],"end":[233,5]},"visibility":"public","docs":"Convert `&Either<L, R>` to `Either<&L, &R>`.\n\n```\nuse either::*;\n\nlet left: Either<_, ()> = Left(\"some value\");\nassert_eq!(left.as_ref(), Left(&\"some value\"));\n\nlet right: Either<(), _> = Right(\"some value\");\nassert_eq!(right.as_ref(), Right(&\"some value\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"L"}}}},{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"R"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:182":{"id":"0:182","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1132,0],"end":[1145,1]},"visibility":"default","docs":"`Either<L, R>` is a future if both `L` and `R` are futures.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Future","id":"1:12689:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Future","id":"1:12689:143","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"L"},"trait":{"name":"","id":"1:12689:143","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Future","id":"1:12689:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:185:203","0:186:1118"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12421:26788":{"id":"1:12421:26788","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:83:1978":{"id":"0:83:1978","crate_id":0,"name":"right_or_default","span":{"filename":"src/lib.rs","begin":[637,4],"end":[645,5]},"visibility":"public","docs":"Return right or a default\n\n# Examples\n\n```\n# use either::*;\nlet left: Either<String, u32> = Left(\"left\".to_string());\nassert_eq!(left.right_or_default(), u32::default());\n\nlet right: Either<String, u32> = Right(42);\nassert_eq!(right.right_or_default(), 42);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"R"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:2618:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12406:2783":{"id":"1:12406:2783","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12426:31788":{"id":"1:12426:31788","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:12073:1506","crate::ops::IndexMut":"1:3077:2394","str::slice_unchecked":"1:12425:31787"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12437:27199":{"id":"1:12437:27199","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:12067:450","self::pattern":"1:12106:1796"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:2943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2261-0:269:1768":{"id":"b:1:2261-0:269:1768","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2783:2407","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2255:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:2263:2283"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:323:343":{"id":"0:323:343","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[1270,0],"end":[1274,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"::std::path::Path","id":"4:5268:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12414:31786":{"id":"1:12414:31786","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12425:31787":{"id":"1:12425:31787","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:12073:1506","str::slice_mut_unchecked":"1:12426:31788","crate::ops::Index":"1:3073:2393"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:187":{"id":"0:187","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1151,0],"end":[1171,1]},"visibility":"default","docs":"`Either<L, R>` implements `Read` if both `L` and `R` do.\n\nRequires crate feature `\"use_std\"`","links":{},"attrs":["#[cfg(any(test, feature = \"use_std\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Read","id":"4:3457:1764","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Read","id":"4:3457:1764","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["is_read_vectored","read_to_end","bytes","read_to_string","read_buf","chain","read_buf_exact","read_vectored","read_exact","take","by_ref"],"trait":{"name":"Read","id":"4:3457:1764","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:190:2093","0:191:2095","0:192:2096","0:193:2097"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5520:8552":{"id":"5:5520:8552","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7489:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:2943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:288":{"id":"0:288","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,26],"end":[49,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"1:2787:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:216:343":{"id":"0:216:343","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[1242,4],"end":[1244,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Target"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12419:26787":{"id":"1:12419:26787","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:41566:196"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:42:1855":{"id":"0:42:1855","crate_id":0,"name":"as_pin_ref","span":{"filename":"src/lib.rs","begin":[262,4],"end":[271,5]},"visibility":"public","docs":"Convert `Pin<&Either<L, R>>` to `Either<Pin<&L>, Pin<&R>>`,\npinned projections of the inner variants.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"1:41701:210","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Pin","id":"1:41701:210","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"L"}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Pin","id":"1:41701:210","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"R"}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5794:1565":{"id":"5:5794:1565","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:26:1808":{"id":"0:26:1808","crate_id":0,"name":"try_left","span":{"filename":"src/lib.rs","begin":[114,0],"end":[121,1]},"visibility":"public","docs":"Macro for unwrapping the left side of an `Either`, which fails early\nwith the opposite side. Can only be used in functions that return\n`Either` because of the early return of `Right` that it provides.\n\nSee also `try_right!` for its dual, which applies the same just to the\nright side.\n\n# Example\n\n```\nuse either::{Either, Left, Right};\n\nfn twice(wrapper: Either<u32, &str>) -> Either<u32, &str> {\n    let value = either::try_left!(wrapper);\n    Left(value * 2)\n}\n\nfn main() {\n    assert_eq!(twice(Left(2)), Left(4));\n    assert_eq!(twice(Right(\"ups\")), Right(\"ups\"));\n}\n```","links":{},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! try_left {\n    ($expr:expr) => { ... };\n}"}},"b:1:2571-0:269:1768":{"id":"b:1:2571-0:269:1768","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2544:138","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:2573:744"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:82:1974":{"id":"0:82:1974","crate_id":0,"name":"right_or","span":{"filename":"src/lib.rs","begin":[618,4],"end":[623,5]},"visibility":"public","docs":"Return right value or given value\n\nArguments passed to `right_or` are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use [`right_or_else`],\nwhich is lazily evaluated.\n\n[`right_or_else`]: #method.right_or_else\n\n# Examples\n\n```\n# use either::*;\nlet right: Either<&str, &str> = Right(\"right\");\nassert_eq!(right.right_or(\"foo\"), \"right\");\n\nlet left: Either<&str, &str> = Left(\"left\");\nassert_eq!(left.right_or(\"right\"), \"right\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["other",{"generic":"R"}]],"output":{"generic":"R"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:191:2095":{"id":"0:191:2095","crate_id":0,"name":"read_exact","span":{"filename":"src/lib.rs","begin":[1160,4],"end":[1162,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"4:2927:231","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:166":{"id":"0:166","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1085,0],"end":[1112,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedIterator","id":"1:7518:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedIterator","id":"1:7518:126","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"L"},"trait":{"name":"","id":"1:7627:173","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["nth_back","rfind","advance_back_by","rfold","try_rfold"],"trait":{"name":"DoubleEndedIterator","id":"1:7518:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:169:2083","0:170:2084","0:173:2085"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12413:29759":{"id":"1:12413:29759","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11666:2145"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:685:24723":{"id":"5:685:24723","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12519:31804":{"id":"1:12519:31804","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12067:450","self::pattern":"1:12106:1796"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:2943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12111:2943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12126:8711","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12522:2146":{"id":"1:12522:2146","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12067:132","`FromStr`":"1:12066:2949"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41709:231","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12066:2949","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12066:2949","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:201:2102":{"id":"0:201:2102","crate_id":0,"name":"fill_buf","span":{"filename":"src/lib.rs","begin":[1194,4],"end":[1196,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"4:2927:231","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:178:872":{"id":"0:178:872","crate_id":0,"name":"len","span":{"filename":"src/lib.rs","begin":[1119,4],"end":[1121,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12500:31799":{"id":"1:12500:31799","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5518":{"id":"5:5518","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5519:32464","5:5520:8552","5:5523:32465","5:5526:32466","5:5534:32467","5:5535:32468","5:5536:2522","5:5537:29765","5:5538:29766"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:170:2084":{"id":"0:170:2084","crate_id":0,"name":"rfold","span":{"filename":"src/lib.rs","begin":[1099,4],"end":[1104,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["init",{"generic":"Acc"}],["f",{"generic":"G"}]],"output":{"generic":"Acc"},"c_variadic":false},"generics":{"params":[{"name":"Acc","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"G"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3041:2071","args":{"parenthesized":{"inputs":[{"generic":"Acc"},{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:7627:173","args":null}}}],"output":{"generic":"Acc"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5535:32468":{"id":"5:5535:32468","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2922","`String`":"5:7489:248"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2922","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12427:28618":{"id":"1:12427:28618","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:12428:28619"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:281":{"id":"0:281","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,15],"end":[49,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:2786:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12527:28535":{"id":"1:12527:28535","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62:1917":{"id":"0:62:1917","crate_id":0,"name":"either","span":{"filename":"src/lib.rs","begin":[426,4],"end":[435,5]},"visibility":"public","docs":"Apply one of two functions depending on contents, unifying their result. If the value is\n`Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second\nfunction `g` is applied.\n\n```\nuse either::*;\n\nfn square(n: u32) -> i32 { (n * n) as i32 }\nfn negate(n: i32) -> i32 { -n }\n\nlet left: Either<u32, i32> = Left(4);\nassert_eq!(left.either(square, negate), 16);\n\nlet right: Either<u32, i32> = Right(-4);\nassert_eq!(right.either(square, negate), 4);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}],["g",{"generic":"G"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3044:1874","args":{"parenthesized":{"inputs":[{"generic":"L"}],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"G"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3044:1874","args":{"parenthesized":{"inputs":[{"generic":"R"}],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2833:2408-0:269:1768":{"id":"a:1:2833:2408-0:269:1768","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2833:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2833:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2833:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5526:32466":{"id":"5:5526:32466","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7489:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:38:1830":{"id":"0:38:1830","crate_id":0,"name":"left","span":{"filename":"src/lib.rs","begin":[192,4],"end":[197,5]},"visibility":"public","docs":"Convert the left side of `Either<L, R>` to an `Option<L>`.\n\n```\nuse either::*;\n\nlet left: Either<_, ()> = Left(\"some value\");\nassert_eq!(left.left(),  Some(\"some value\"));\n\nlet right: Either<(), _> = Right(321);\nassert_eq!(right.left(), None);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:111":{"id":"0:111","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[899,0],"end":[918,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Either","id":"0:269:1768","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"generic":"L"},{"generic":"T"}]}},{"type":{"tuple":[{"generic":"R"},{"generic":"T"}]}}],"bindings":[]}}}},"items":["0:115:2049"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12504:31801":{"id":"1:12504:31801","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12067:450","self::pattern":"1:12106:1796"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:2943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:269:1768":{"id":"0:269:1768","crate_id":0,"name":"Either","span":{"filename":"src/lib.rs","begin":[50,0],"end":[55,1]},"visibility":"public","docs":"The enum `Either` with variants `Left` and `Right` is a general purpose\nsum type with two cases.\n\nThe `Either` type is symmetric and treats its variants the same way, without\npreference.\n(For representing success or error, use the regular `Result` enum instead.)","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"variants_stripped":false,"variants":["0:272:176","0:275:234"],"impls":["0:33","0:92","0:96","0:101","0:106","0:111","0:116","a:1:2793:252-0:269:1768","a:1:2776:242-0:269:1768","a:1:8606:2566-0:269:1768","a:1:2833:2408-0:269:1768","a:1:8607:2565-0:269:1768","b:1:2571-0:269:1768","b:1:2577-0:269:1768","b:1:2582-0:269:1768","b:1:12706-0:269:1768","b:1:7484-0:269:1768","b:1:2261-0:269:1768","b:1:3412-0:269:1768","b:1:2264-0:269:1768","b:1:2567-0:269:1768","b:5:5792-0:269:1768","b:5:682-0:269:1768","0:198","0:187","0:126","0:205","0:295","0:122","0:218","0:288","0:136","0:340","0:303","0:182","0:233","0:212","0:291","0:130","0:228","0:336","0:332","0:281","0:242","0:284","0:328","0:238","0:316","0:308","0:179","0:324","0:194","0:278","0:320","0:28","0:248","0:166","0:312","0:175","0:223","0:299"]}}},"0:275:234":{"id":"0:275:234","crate_id":0,"name":"Right","span":{"filename":"src/lib.rs","begin":[54,4],"end":[54,12]},"visibility":"default","docs":"A value of type `R`.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:277:1725"]},"discriminant":null}}},"0:157:331":{"id":"0:157:331","crate_id":0,"name":"any","span":{"filename":"src/lib.rs","begin":[1056,4],"end":[1061,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3041:2071","args":{"parenthesized":{"inputs":[{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:7627:173","args":null}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12415:342":{"id":"1:12415:342","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:12416:341","`u8`":"4:12084:1612"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:185:203":{"id":"0:185:203","crate_id":0,"name":"Output","span":{"filename":"src/lib.rs","begin":[1137,4],"end":[1137,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"L"},"trait":{"name":"Future","id":"1:12689:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"0:232:1852":{"id":"0:232:1852","crate_id":0,"name":"as_mut","span":{"filename":"src/lib.rs","begin":[1311,4],"end":[1313,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"generic":"Target"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"4:12087:1611":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"4:2582:3425":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"16:8205:20692":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:43496:2946":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"6:1507:5105":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:9994:3425":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:21150:13783":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:3255:2399":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:14100:4399":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:22870:186":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"4:11325:3458":{"crate_id":4,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"17:11074:7209":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:3044:1874":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"6:4461:5345":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"11:731:7376":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"18:755:7112":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:47575:6485":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:2931:2386":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:11922:7554":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:13710:4300":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"6:4721:5432":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"5:687:115":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"4:1895:2469":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"17:13667:4293":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:9921:7136":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:6613:5856":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"6:7287:5984":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:14134:4406":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"5:7261:3385":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:39228:220":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:14076:4394":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"6:1682:5217":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"16:5648:7243":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:43834:7535":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"6:4853:5493":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:14335:4480":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"6:4406:5318":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:41768:1943":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"17:12280:3945":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:43790:7626":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"4:9010:7496":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"16:6171:211":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"16:5830:6536":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:45995:6414":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"4:11232:6103":{"crate_id":4,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"4:8337:7487":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"4:7885:7478":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"5:5996:14257":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"5:4987:2482":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:41649:2562":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"17:11337:20871":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"4:8250:2500":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"4:5336:125":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"1:30243:6150":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"16:6792:6603":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"4:4411:7451":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:45734:6400":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:21804:6128":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:44337:8730":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"5:1516:215":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:2783:2407":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"4:7945:7481":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"4:4653:14122":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:11187:7564":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"17:8594:20727":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"0:272:176":{"crate_id":0,"path":["either","Either","Left"],"kind":"variant"},"17:9207:3707":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:3232:7124":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"16:2644:4564":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:44325:6659":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"16:5384:20678":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:40414:2873":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"16:8050:4811":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"4:4339:7450":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"16:7660:4761":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"16:8154:7365":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"15:394:19783":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"1:22233:6134":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:7255:2851":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"16:3655:3609":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:45610:6395":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"6:5892:5695":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:11306:3793":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:12543:4002":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:39106:2403":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"5:2962:32950":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"6:1697:5226":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:21094:13778":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"4:1429:151":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"4:8269:7489":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"11:822:7379":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"18:707:7105":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:10186:7148":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"4:1585:7397":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"6:4775:5458":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"11:427:7942":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"14:187:19762":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:13071:4097":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:9542:2744":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"4:4943:14170":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"14:165:19755":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:9003:20748":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"6:4643:5408":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"4:1986:201":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:2860:2370":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"4:3964:14117":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"4:12070:1116":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"1:40068:6350":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"6:596:5096":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"16:6687:7309":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:8895:20744":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"6:6856:5971":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"6:4934:5543":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:21365:13774":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:2535:78":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"6:1604:5162":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:9550:2747":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"5:7377:2923":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"4:9512:7478":{"crate_id":4,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"16:8239:4753":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:40802:2858":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:30437:24961":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:43332:7611":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"4:5599:14184":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"4:12072:1474":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"4:7937:124":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:3565:7126":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:40172:2990":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"16:5121:4632":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:12751:209":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"4:897:2927":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"5:1275:7388":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:2325:205":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:5905:5701":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:10513:7556":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:40777:2854":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:6726:5893":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:10714:7197":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:22705:193":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"16:5588:4580":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"11:1525:19750":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:11151:7215":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"4:7162:7953":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"5:4034:3374":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:9031:82":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:41880:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"18:80:7922":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"4:12065:401":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"6:4540:5385":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"4:3994:14119":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"16:6485:4579":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"5:3802:2925":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"17:10214:7153":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"6:7624:6022":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"16:6583:7305":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"5:5137:3405":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:40568:2890":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:12513:3999":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"11:2165:7167":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"6:4346:5282":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:12452:3987":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:44158:2944":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"18:590:3585":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:21482:14108":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"6:123:14338":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"4:3315:2516":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:14033:4380":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"4:12071:339":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"17:10738:7199":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"5:6797:2931":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"6:6759:5909":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"6:4989:5572":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:9506:137":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"16:2696:4566":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"6:7601:6016":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"16:6425:6588":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:9867:3719":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"4:4519:14145":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:11811:7567":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:11845:3843":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"6:5782:5642":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:7571:2086":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:9607:7130":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"6:4884:1065":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:10196:244":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"4:11024:6093":{"crate_id":4,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"1:40016:7583":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:13286:4134":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:13876:4341":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"4:1931:703":{"crate_id":4,"path":["std","ffi"],"kind":"module"},"1:2935:2387":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:42566:69":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"17:9574:33371":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:14042:4381":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"4:8599:2966":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"18:766:24710":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:4425:5331":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:12888:4068":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:12724:4029":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"18:727:3600":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:4669:5410":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:12790:4038":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"6:62:14283":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"16:7768:4583":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:14156:4411":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"4:8833:7493":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"17:9086:3703":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:13546:4246":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:9036:89":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"4:2409:1762":{"crate_id":4,"path":["std","io"],"kind":"module"},"18:699:7103":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"4:8973:14204":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:32031:4753":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"1:4068:8595":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:12131:8710":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:9328:2499":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:483:5030":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:41335:6356":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:22241:6135":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:2836:2589":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"4:9184:7506":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:11761:3832":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:47783:6489":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:9790:2736":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"16:3461:4602":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:13816:4323":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:10012:3733":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"5:4236:2731":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"5:4076:2732":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:12737:4031":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:10366:7157":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:11358:20872":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"4:7880:3219":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"1:4640:8612":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:12765:4036":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:10669:7562":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"6:1650:5199":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"6:569:5081":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:10561:7178":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"17:12225:3926":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"6:5982:5750":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"11:796:2925":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"16:7651:7353":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"16:4921:4626":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"6:654:14695":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"4:7920:135":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"5:7589:2926":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"4:10193:3048":{"crate_id":4,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:14126:4405":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:40252:2876":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"4:913:7392":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:14355:4483":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:39936:6647":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:23416:241":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"9:357:19683":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:44026:7639":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"6:475:5025":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"4:4022:14122":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"4:11511:7445":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"6:6023:5770":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"4:10133:7511":{"crate_id":4,"path":["std","sys","unix","os","Env"],"kind":"struct"},"4:853:2732":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:30203:2917":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:12997:4086":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:9390:134":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"4:12086:1610":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"1:40042:7586":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"1:43414:7615":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:11244:3822":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:2841:2591":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"17:10962:3780":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"4:1067:7388":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"6:555:5073":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"13:110:33351":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:11636:8675":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"16:5712:6527":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:40272:2878":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:10771:3745":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:11235:7225":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"16:5661:7246":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:14522:4526":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"16:4053:4609":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"4:7406:31294":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"4:9505:134":{"crate_id":4,"path":["std","sys","unix","fs","File"],"kind":"struct"},"16:7102:20687":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:12332:116":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"6:574:5083":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:44281:6115":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"16:4613:4617":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:10430:7163":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"16:3600:4603":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:1642:6121":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"14:40:3867":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"4:8440:2960":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"16:7582:4757":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:42829:7602":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"11:2303:7401":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"1:22357:8517":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:21106:26754":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"18:681:7100":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:10397:7160":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"11:2238:7331":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"10:0:2346":{"crate_id":10,"path":["adler"],"kind":"module"},"16:4719:4619":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"6:6720:5891":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:4805:5474":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"11:868:7385":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:13215:4124":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"4:8227:2497":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"1:9755:152":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:41501:7448":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"5:7436:24970":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:2787:249":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"4:4157:7949":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:1672:1155":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"17:8978:20747":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:2171:8563":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"4:4179:7950":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"11:2473:4952":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"16:2339:4546":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"16:7006:7321":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:5833:5662":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"4:7776:14083":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"1:2551:262":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"9:0:2345":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"4:7743:14052":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:43353:6381":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"16:5727:6530":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"4:7669:14108":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"1:3034:2391":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:4611:5405":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:6811:5949":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"4:863:1943":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"4:4665:5879":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"17:12959:4082":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"4:2394:14105":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"11:344:7938":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"4:12089:847":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"1:39333:3238":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"18:690:7102":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:7621:20689":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"16:6156:7256":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"6:4815:5478":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:46209:6421":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"6:4913:5528":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"16:2766:4569":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"6:1912:15686":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"5:6513:3374":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"5:7478:3406":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"5:4350:270":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"16:5798:4638":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:13174:4119":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:41381:6363":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"16:2472:4557":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:4379:5306":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:39921:7535":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:40035:7585":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"16:7568:4593":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:12876:4066":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"16:5612:4582":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:9197:718":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"16:2428:4555":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"5:6914:269":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:42846:152":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:41709:231":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"1:2798:2585":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"6:6151:5801":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:11124:7213":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:45919:6407":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"16:7782:7354":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"5:5633:2931":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"4:8422:14180":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"4:2568:2510":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:44115:7641":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:41624:2731":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"6:4592:5404":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:2499:2356":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"4:11375:6117":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"6:4320:5262":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"4:1840:2996":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"1:11666:2145":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:533:5061":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"4:12068:1628":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"17:11448:20750":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"4:12078:692":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"4:9063:7504":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"14:215:7373":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:12702:159":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"4:3313:2515":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:11316:3796":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:44104:8724":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:2909:2381":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"4:8909:6094":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"4:11071:3455":{"crate_id":4,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:9540:2743":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"17:14013:4373":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"4:9146:156":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"17:11098:7211":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"6:4949:5552":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"11:759:7377":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"16:6879:4692":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"6:5844:5670":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:11111:7212":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"4:622:2471":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"5:1475:7378":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:7526:6000":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"6:4859:5496":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:13085:4099":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"4:9517:3451":{"crate_id":4,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:43676:7622":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"18:660:7093":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"4:10573:2519":{"crate_id":4,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"16:7503:4590":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:11788:3833":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"5:6586:1943":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:11272:7227":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"4:6277:3437":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:9945:3722":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:44257:7727":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"5:7251:2927":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"11:2479:33349":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:13676:4297":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"11:357:3366":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"6:1558:5133":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"5:7322:1943":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"11:101:7697":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:11407:20749":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:2361:199":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"1:46111:6417":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:13838:4327":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:12621:4016":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:44520:175":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"16:3232:4543":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"4:884:7378":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:9564:7129":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:8607:2565":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:11886:3852":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:10227:7154":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:11573:7235":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:12810:4041":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:11661:3824":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"6:119:14337":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"4:8367:5866":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"4:11405:6637":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:39326:2398":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:12252:3935":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:9455:33367":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"16:7284:2562":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"6:4555:5392":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:40754:7547":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:47868:6494":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:14401:4497":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"4:8851:6091":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"4:8311:7448":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:48035:6503":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:11023:3783":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:44273:7731":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:45564:6393":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:41615:168":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"11:1869:7396":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"11:2394:2925":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"17:14110:4402":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:2538:77":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"17:10420:3648":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"11:693:1943":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:14324:4475":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"6:0:877":{"crate_id":6,"path":["libc"],"kind":"module"},"4:8530:2963":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"17:9488:33365":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:44261:7728":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"4:3429:2482":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"4:5596:5787":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"1:40390:2887":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"16:6893:4694":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:5814:5660":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:14001:4372":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"6:507:5041":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"6:5056:5604":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"6:4548:5390":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"16:3797:4605":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:9242:3708":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:9070:3702":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:14316:4474":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:10316:3738":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:22324:7720":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:11201:7216":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:2884:2377":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"5:3332:2925":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:46362:6425":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:2788:113":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:2914:2382":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:11535:7234":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"4:10869:30665":{"crate_id":4,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"1:2629:133":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"5:207:3373":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:4655:5409":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:13966:4363":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:9051:20726":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"18:0:2353":{"crate_id":18,"path":["memchr"],"kind":"module"},"4:8194:2495":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"4:1579:7396":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:2855:2371":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"5:1259:7331":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:41640:1943":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"17:9711:33369":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"4:7555:3699":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"4:4008:14120":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:13567:4256":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"11:0:2347":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:44253:7726":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"6:7310:5997":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:22166:7717":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"6:7520:5999":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:5820:5661":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"16:3915:4608":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"16:6456:7294":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"4:6568:7466":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:12671:3750":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:14282:4462":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:7976:26675":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"16:7128:6099":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:2919:2384":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:13922:4351":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"16:7360:33359":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"4:7792:7477":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:40243:2868":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:10112:7145":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"16:5403:3702":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"11:483:149":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"11:1846:1943":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:9896:20761":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:40192:2865":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:4436:2593":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:12999:2920":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"1:43424:7616":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"11:1842:2731":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"6:4529:5380":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"5:784:3377":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:40554:2889":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"4:1764:657":{"crate_id":4,"path":["std","env"],"kind":"module"},"1:40262:2877":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"16:6968:20686":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:4801:419":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:30807:200":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"6:4799:5471":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"16:4585:4616":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:11000:3782":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"12:0:2348":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:32052:7579":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"1:2880:2379":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:29988:8480":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"16:6844:4688":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:40234:2867":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:22182:6130":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"6:6030:5771":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"6:7538:6002":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:10139:20778":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"1:44456:232":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"17:13632:4292":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"4:4056:14123":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"4:364:7425":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"5:6334:14207":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:43502:7618":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:12111:3902":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"5:1304:7391":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"4:11390:6635":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"5:6958:3416":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"4:7796:3237":{"crate_id":4,"path":["std","error","private","Internal"],"kind":"struct"},"17:13575:4257":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"6:1501:5102":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:46465:6427":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:21297:14108":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"17:14090:4396":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:41802:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"5:1525:7405":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"4:10616:3453":{"crate_id":4,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"17:12024:3887":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"16:6569:4584":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"4:8318:7707":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"4:11250:6116":{"crate_id":4,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"17:8794:20741":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"4:8389:6074":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:42661:75":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"6:6820:5952":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"16:6742:7310":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:527:5058":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"11:2286:7388":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"4:10978:7477":{"crate_id":4,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"1:40023:8618":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:7627:173":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"6:6865:5974":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"4:8345:6073":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:10603:7181":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"6:6037:5772":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"4:7907:6630":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"17:10726:7198":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"4:7764:7434":{"crate_id":4,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"1:47958:6500":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"16:7269:33360":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:10637:7185":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"5:6816:2932":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:2939:2388":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"4:11423:7712":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:12830:4042":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"18:515:3580":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"4:11640:31633":{"crate_id":4,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"4:11551:7446":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"4:1924:2470":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"6:4511:5371":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:10447:7167":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"4:6385:180":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"11:785:2927":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"4:2216:7443":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"17:9790:33370":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:13868:4338":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"11:2494:2923":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"4:3198:8150":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"4:10576:2515":{"crate_id":4,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"4:11342:7469":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"5:7503:2938":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:2498:14108":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:40365:2885":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:41682:2563":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:9660:33364":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:261:7114":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:9538:2742":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"1:43978:7638":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:43304:7607":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"4:3958:14118":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:11971:3880":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"5:6467:2927":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"6:1528:5113":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"16:4557:4615":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"14:31:7370":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:4416:2754":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:43630:7559":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"14:221:4902":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"6:1710:5230":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:6686:5885":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"11:1862:7395":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:13973:4364":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"5:4428:3400":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"6:5020:5582":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"10:36:4956":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:4822:28312":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"4:5423:7454":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"1:43313:7608":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:40404:2888":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:39978:7581":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"16:5322:4633":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:14083:4395":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:41543:6365":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:582:3699":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:2888:2376":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:3949:2482":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"6:5851:5674":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"16:7544:7351":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:13202:4123":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"9:237:2961":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"4:5474:109":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"16:2380:4553":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:47905:6497":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:12120:7105":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"5:7405:105":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"5:1505:7376":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"16:5363:4634":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"6:4373:5305":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"15:0:2350":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:47245:6482":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:41841:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"5:3722:2132":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:8953:20746":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:13135:4116":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"6:5935:5724":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"16:149:3361":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:2012:7119":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"6:1596:5157":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"16:7884:20691":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:3010:122":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:7518:126":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:14308:4471":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"5:7301:6622":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"16:7523:7350":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:43379:2865":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:9536:125":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"17:13148:4117":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"4:8031:3124":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"5:0:313":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:1752:6122":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"6:4631:5407":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"4:9233:6107":{"crate_id":4,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:13244:4127":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:44138:6657":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"5:7271:33241":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"16:6960:7311":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"5:3180:7396":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"4:2927:231":{"crate_id":4,"path":["std","io","error","Result"],"kind":"type_alias"},"16:6467:6590":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:13989:4366":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"16:4862:4624":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:10368:2732":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:47894:6496":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:13778:4317":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:43576:7620":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:32027:3237":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"17:11351:3797":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"16:6929:4697":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"4:1564:2927":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:46187:6420":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:47745:6488":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:2173:8564":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"8:0:2344":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"4:4934:14169":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"16:2722:4567":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:22097:6780":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"5:6983:3420":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"16:8294:133":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:12136:3904":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:39250:219":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"4:11213:6115":{"crate_id":4,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"4:4667:5881":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"16:6560:3363":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"17:9102:3704":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"6:6790:5935":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"5:7389:14063":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"16:7041:7324":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:3410:70":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"1:12066:2949":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"9:450:19668":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:11639:3790":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:11872:3851":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:10494:7172":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:46589:6443":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"5:5944:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"6:4488:5358":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"4:10795:7708":{"crate_id":4,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:2793:252":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"5:7452:2972":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"4:2644:2512":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:2618:121":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"4:7953:2511":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"16:6376:20683":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:2547:263":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"4:10468:7493":{"crate_id":4,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:45835:6404":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"5:3671:3374":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:41524:6364":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:4279:226":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"17:10916:7201":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"16:6901:4586":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"11:1635:3370":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"4:1568:2925":{"crate_id":4,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"16:6753:6591":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"4:9131:181":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"5:2972:32752":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:44090:7640":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:47497:6484":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:7476:139":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"4:4728:14171":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:9137:3705":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:47973:6501":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"16:6189:7259":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"16:5435:4635":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"4:12033:31296":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:2876:2375":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"4:4070:14125":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"4:9028:30532":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"5:4395:2482":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"6:4892:5513":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:3041:2071":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"16:6721:20685":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"4:9015:111":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:43780:2496":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"6:7265:5983":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"4:8582:2731":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"6:1521:5110":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"4:8206:1766":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"5:1120:32951":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:46233:6422":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:5421:2482":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"17:13890:4344":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:7025:2848":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:44464:212":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"5:2172:7703":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:47920:6498":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:13040:4092":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"16:6041:20682":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"16:5760:20680":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:45765:6401":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"18:564:3584":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:39208:217":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"4:10359:109":{"crate_id":4,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"17:13792:4321":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"6:4943:5549":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"4:840:2731":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"6:6633:5862":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"5:3173:2731":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"15:327:19777":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"6:4441:5336":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:40374:2886":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"4:12080:795":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"1:41692:2840":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"4:12092:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"6:1734:5239":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:4385:5308":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:6910:2875":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:13274:3793":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"16:4949:4627":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"4:12067:450":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"1:47699:6487":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:39988:6648":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"16:8181:4597":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"14:160:7370":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"7:78:19661":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:39347:6219":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:5509:2482":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"16:7391:20688":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"6:1591:5155":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"4:1058:7386":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:12983:4085":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"4:7011:8462":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:46701:6445":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:10903:7200":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"4:7961:2132":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"13:226:4949":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"19:0:1096":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"11:1092:7389":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"16:536:6762":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"11:772:7378":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:9823:20759":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"4:871:7377":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"16:7534:4591":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"11:1072:33350":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"4:3234:2517":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"11:1855:2925":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"4:10805:7479":{"crate_id":4,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"6:4786:5466":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"4:1573:7395":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:11137:7214":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:11991:3881":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:46284:6423":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:22331:6147":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:2943:2389":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:11048:7204":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"18:614:33375":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:43809:7628":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:40761:2850":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"6:5790:5644":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:8686:20738":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"5:7465:2973":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:14296:4468":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"4:5853:3431":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:42116:88":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"4:8572:2964":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"6:4296:5245":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:9701:7131":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:10292:3733":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"14:202:2937":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:1761:3220":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:12531:4000":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"4:5660:3437":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:12086:3897":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"5:1413:2731":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"15:288:7930":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"4:2501:2509":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"4:8865:6092":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:6206:2871":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"4:2366:6124":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"11:2351:1943":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"17:1075:7117":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:22969:189":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"17:12711:4028":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:14478:4519":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"5:7231:1943":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:47996:6502":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:4848:853":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:45872:6406":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"5:7293:215":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"6:4621:5406":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"4:10135:7510":{"crate_id":4,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"1:21357:14108":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"4:6325:225":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:14269:4456":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:43800:7627":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:12945:4080":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:12944:147":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"4:2382:14099":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"4:918:7375":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:13055:4096":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:6217:3475":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:39168:218":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:44300:127":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"1:21359:13772":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"6:7532:6001":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:7939:2862":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:10672:7190":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:44249:7725":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:45586:6394":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"4:5156:208":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"6:5073:5608":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:9972:7140":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"4:8887:2731":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:39153:2395":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:40810:2860":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"4:12079:798":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"4:6015:225":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"16:2305:19818":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"4:4992:14176":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"17:12698:4026":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"16:4986:4628":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"6:548:5070":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:47387:6483":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:12846:4047":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"6:6703:5886":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:46065:6416":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:22150:6129":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"5:3214:7395":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"6:5897:5696":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:7439:2864":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"4:11851:3464":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"4:6624:14199":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"6:4823:5482":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:7932:2087":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"6:4877:5507":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"16:2933:19819":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"5:678:255":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"4:4078:14127":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:10278:7156":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:11228:8576":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:7480:160":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"5:3219:33237":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"4:641:7429":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"5:2225:33311":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"6:4954:5554":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"16:4497:4613":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:40221:2497":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"7:0:1658":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:43694:7623":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"11:829:14064":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"16:7054:7327":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:7489:2064":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:8659:20725":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:11848:7570":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:12896:111":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"4:3760:7445":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"6:4922:5534":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"4:2894:3121":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"16:6696:4676":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:20920:27231":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:14499:4522":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"11:992:7331":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:2786:250":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:8606:2566":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"5:1376:97":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:1549:2482":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"11:2085:7388":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:10534:7176":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:41760:2732":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"6:495:5036":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:46543:6442":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:46619:6444":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"4:11417:7711":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:21241:8563":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"17:10165:20779":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"6:1537:5118":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:42858:2961":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:22771:195":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"17:10059:3726":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"16:2832:4572":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:9531:33366":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:40792:2856":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"4:5999:3437":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:9959:7139":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:45632:6396":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"4:12077:690":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"6:4501:5364":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"16:6361:6585":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:6944:33356":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"4:9141:240":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"4:4497:14144":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"6:4480:5353":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:2548:4560":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:32139:2592":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:12437:3982":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:2330:130":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"6:7573:6010":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"5:7330:1943":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:11295:7228":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"6:6622:5857":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"18:652:3577":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"5:3596:2732":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"4:7670:6030":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"5:629:7402":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"5:7489:248":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:11951:3870":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"4:5110:7452":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:4283:7539":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"17:10646:3806":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"4:12073:1506":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"16:6261:7288":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"4:12082:797":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"1:22295:24971":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"5:1290:7386":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:10628:7184":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"17:9650:3733":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"6:6588:5838":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:12184:3916":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"4:11628:6118":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"4:12085:1609":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"5:1494:7375":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"4:9165:6103":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"17:14346:4481":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"5:4166:2482":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"4:8928:6095":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"4:646:14049":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:10949:7203":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"4:7715:3453":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"1:22:731":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"16:3032:4598":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:22903:187":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:11226:7224":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"16:2596:4562":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:12750:4033":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:41632:2732":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"4:3236:2518":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:39520:24847":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"6:1546:5124":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:12645:4017":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"4:6458:7465":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"6:580:5086":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:42837:2738":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:10929:3777":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:40333:2883":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:2258:101":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"16:5696:20679":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"16:2618:4563":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:9977:3479":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"4:12091:1215":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"1:9218:26677":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"18:521:24711":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:9223:27744":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"16:5995:6555":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"6:4753:5447":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"11:2058:7331":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"16:6279:4645":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"16:2788:4570":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:43544:7557":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"4:534:3422":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"6:4838:5486":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:8825:20742":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"5:1466:7377":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:12465:3989":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"4:6638:3442":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"5:35:2924":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:40162:2991":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:22837:185":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"17:12934:4078":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"9:52:19686":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:13010:4087":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"16:4641:4618":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:2541:157":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"1:44245:7724":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"17:10661:7189":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"6:7478:5998":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"4:1044:7331":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:8716:2943":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:40355:2884":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"16:2321:4544":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:43910:8723":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"3:0:2342":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"17:13298:4141":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:44446:224":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"4:10850:124":{"crate_id":4,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:30331:24981":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"5:3570:177":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"16:4745:4620":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:43080:7551":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"11:324:7701":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"5:3185:33242":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:43947:7634":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"11:1127:7390":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:41777:200":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"16:6401:4578":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"6:7561:6008":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:4690:5413":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"11:2334:2732":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"1:4463:2755":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:43470:2947":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:9747:148":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:2925:2385":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:10685:7193":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"5:3206:7397":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:3289:2404":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"11:703:7375":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"16:6346:7291":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:46163:6419":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:32038:7578":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"5:1484:7392":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"5:3737:7407":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"4:1817:7439":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"17:12422:3978":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"4:8895:7495":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"6:7555:6007":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:4709:5425":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"4:3201:8151":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"16:3764:4604":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:11719:20753":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:44053:7576":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"16:5939:6552":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:40342:2870":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"6:6009:5759":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:32045:2753":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"1:41488:6655":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:43405:7614":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"18:491:7088":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:10383:7159":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"4:8903:1943":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"16:4417:4611":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"16:7462:4755":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"6:7544:6003":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:46385:6426":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:39948:24972":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"6:1639:5191":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:44499:2898":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:3244:259":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"6:4523:5377":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:12267:3941":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:7195:2524":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:39067:2406":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:12598:4011":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:2784:2584":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"1:47637:6486":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"9:330:4993":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"16:6204:7261":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:10641:7560":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"18:599:33374":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:12237:3929":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:30259:69":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"17:10126:7146":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"6:1718:5234":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"16:2406:4554":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"4:589:14047":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"4:6839:14206":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"6:5878:5694":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:4333:5272":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"11:1562:7394":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:10456:7170":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:44549:6390":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"4:3865:7447":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"4:10376:31354":{"crate_id":4,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:47839:6491":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"16:8134:7364":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:11389:7233":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:12496:3996":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:43512:2499":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"16:8195:7369":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:9488:1767":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"4:8588:2965":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"16:8097:7359":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"0:26:1808":{"crate_id":0,"path":["either","try_left"],"kind":"macro"},"16:0:2351":{"crate_id":16,"path":["gimli"],"kind":"module"},"6:5049:5601":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:43526:2500":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"17:12484:3994":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"4:8996:6098":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"4:8036:3125":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"1:45817:6403":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:42612:73":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"5:7239:7423":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:14145:4410":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"11:860:7384":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"16:3830:4606":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"5:3144:98":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"9:486:19667":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"18:113:7926":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"11:423:7941":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:12658:4020":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:10468:3741":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:3023:1760":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:40000:7582":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"10:44:4957":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"1:20875:27004":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"17:12293:3946":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"4:8329:7490":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"11:1010:7386":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"6:4968:5560":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:13826:4324":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"4:2384:14100":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"5:1778:2925":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"6:5808:5657":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"4:8323:14143":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"6:1703:5227":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"16:3065:3604":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:40544:2498":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"4:10878:30679":{"crate_id":4,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"6:4451:5342":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:10507:7174":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:21108:8563":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"4:7606:3447":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"4:7897:6032":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"1:2845:2369":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"4:12084:1612":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"5:897:2731":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"4:10818:6631":{"crate_id":4,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:11473:3669":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:1184:7118":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:5627:2869":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"4:5667:7458":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"14:7:7370":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"4:12049:30671":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"5:2961:6767":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"4:3276:2520":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"6:563:5078":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:13259:4131":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"16:2864:4573":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"4:5774:7459":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"4:8146:2528":{"crate_id":4,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"1:42036:86":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:22639:191":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:13101:4103":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:11742:3829":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"4:10776:7519":{"crate_id":4,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"17:9445:7127":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:13906:4347":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"16:6318:4648":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:13739:4308":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"6:6186:5826":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:2850:2374":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:12007:3885":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:11261:7226":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:0:531":{"crate_id":1,"path":["core"],"kind":"module"},"5:5327:3374":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:4407:3469":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:45795:6402":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:11173:20870":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"16:6600:20684":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:3274:26977":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:3077:2394":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:14378:4496":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:2830:2587":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"17:14514:4523":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"4:9312:2996":{"crate_id":4,"path":["std","sys","unix","args","Args"],"kind":"struct"},"17:11086:7210":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:10575:7179":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"16:2284:19792":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"6:4867:5501":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"4:7566:7532":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"16:5905:6546":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"4:8041:2513":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:14056:4388":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"4:12090:1668":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"17:11327:7230":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"16:7318:4735":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:10084:7143":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"16:2670:4565":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"4:5528:7457":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"1:21463:13771":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:41564:198":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"11:1687:151":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:11910:3866":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:9546:211":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"6:1514:5108":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:9911:3477":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"6:542:5067":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"6:4700:5420":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"4:9071:6099":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"16:7474:7339":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:2833:2408":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:21056:14108":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"5:7573:2925":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:22936:184":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:10344:2731":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"16:7792:20690":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"16:2907:4575":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:11367:3798":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"5:2964:6027":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"5:880:3382":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:10627:7559":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:40313:2882":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:9172:3706":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"4:11654:7473":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"11:666:2731":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"6:6735:5897":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:9617:33368":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:3441:7125":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:2992:2402":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"17:11547:3820":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:9277:3709":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"18:624:33373":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"5:2245:7706":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:44265:7729":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:22258:24962":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"16:6332:4576":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:12098:3900":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:22044:6779":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:10393:2500":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"17:13685:4298":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"6:4734:5436":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"6:4400:5315":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:13949:4355":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:6171:5815":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"16:6352:7292":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"4:11006:30677":{"crate_id":4,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:1635:633":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"1:21491:6126":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:9548:2746":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:10980:3733":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"4:4259:7449":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"4:5781:7462":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:10436:7554":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:39964:6349":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"4:4731:14144":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:13693:4299":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:11934:3867":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"6:4792:5469":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"6:4561:5394":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:43434:7617":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"6:4683:5411":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"4:8879:6093":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"6:4829:5483":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"4:12081:796":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"1:12126:8711":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"4:2929:133":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"4:12083:793":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"17:12576:4010":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:400:7115":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:46779:6446":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:43748:7625":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:12111:2943":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"9:507:3016":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"16:3315:4601":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:3073:2393":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"5:5371:14240":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"16:2810:4571":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:40049:8619":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"4:2604:2502":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"4:9051:7502":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"4:10570:2517":{"crate_id":4,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"18:548:148":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:1738:8578":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:40322:2891":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"5:7422:2974":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:2178:7120":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:21379:6126":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"6:6145:5800":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"5:5375:14241":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"6:5085:5613":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:12043:3892":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"4:3475:2490":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"15:306:7934":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:8608:2564":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:44507:2899":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"7:31:19654":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:42075:93":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"16:2450:4556":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:21712:13785":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"17:13611:4287":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"11:1876:7397":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"16:7554:4592":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:22345:6642":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:10588:7180":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"4:5409:7453":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"5:2463:6024":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"4:2368:14095":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"4:4849:14132":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"16:6017:20681":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"11:2461:4950":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"16:7677:215":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:11586:3821":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"4:6222:7464":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"4:8513:2962":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"6:4573:5403":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"4:4187:7951":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"16:5866:6542":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:10240:3722":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:10750:3743":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:13981:4365":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:9795:2737":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"4:8274:14115":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"6:4745:5443":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:43061:6380":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:2897:2383":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:7935:2733":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"4:1557:2731":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:20905:27228":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:43825:7583":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"16:4774:4621":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"6:1632:5187":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"4:3514:1767":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"17:9933:7137":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:46855:6448":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:12373:3953":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:47039:6450":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"16:8072:4812":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"6:4433:5334":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:22672:192":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:11062:7208":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:42868:7604":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:12554:4003":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:11871:7571":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:9886:7134":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:14469:4517":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:39927:7580":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"16:5088:4631":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"14:0:2349":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:13451:4163":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:2892:2378":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:42876:7605":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"4:558:7426":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"4:12016:6638":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"9:426:19670":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"0:269:1768":{"crate_id":0,"path":["either","Either"],"kind":"enum"},"1:42316:2743":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"16:5816:6535":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"5:824:3380":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"6:4728:5433":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:4021:7536":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:0:475":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"1:41997:92":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"0:25:1794":{"crate_id":0,"path":["either","for_both"],"kind":"macro"},"6:5063:5607":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:10197:7150":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:2866:2373":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"16:8281:4824":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"6:1570:5141":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"4:6174:2900":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"0:27:1811":{"crate_id":0,"path":["either","try_right"],"kind":"macro"},"17:14420:4502":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"6:4394:5313":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:22804:188":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"4:9085:30674":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"11:2487:4954":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"5:2037:2132":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"4:9021:7498":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"5:3583:2731":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:45965:6413":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:10478:3015":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"4:3401:2525":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"6:4769:5455":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:14118:4403":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"4:12074:1593":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"1:2948:2390":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"4:727:149":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:42337:2745":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"6:4494:5361":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:12196:3917":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"4:7890:7479":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"5:2692:6028":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:11393:133":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:8765:20740":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:14163:4413":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"0:0:1917":{"crate_id":0,"path":["either"],"kind":"module"},"1:4045:106":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"4:8490:2961":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"17:9985:7141":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:3261:2401":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:10023:7131":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:12106:1796":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"16:7513:7349":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"5:2968:32751":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:11162:3785":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"16:6083:19791":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"11:817:7392":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:11490:3818":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"4:10114:7439":{"crate_id":4,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"4:10511:3452":{"crate_id":4,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"1:12177:8717":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:11815:3839":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"16:5673:4581":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"6:5915:5708":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:7293:5986":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"4:358:7424":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"4:4663:5877":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:22279:24960":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"9:177:19735":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"11:1051:19749":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:3326:2405":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:42323:2742":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:13162:4118":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:40082:104":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"16:7736:4764":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"6:501:5038":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:42556:6369":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"5:1428:2732":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"4:1842:7440":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"6:1496:5100":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"4:7625:3449":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:2161:634":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:2367:206":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"16:6545:4653":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"16:4527:4614":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"16:8115:7361":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:3038:2392":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"4:11647:7473":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"6:6082:5786":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"16:2744:4568":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:43322:7610":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:45694:6398":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:11281:3792":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"5:5790:256":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"4:1561:1943":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:30835:2604":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"4:922:7376":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:10097:7144":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:43818:7573":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"16:6415:7293":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"5:1140:7948":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:39272:221":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"16:6386:4650":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"11:389:3368":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:11710:3793":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"16:7436:4754":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:21926:14108":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:6212:7716":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"11:841:7382":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"11:298:7698":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:43594:7621":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"4:4768:14133":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:21816:27002":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:47879:6495":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"4:9106:6102":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"18:736:24709":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:5574:4577":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:47848:6492":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"16:7342:33361":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:39184:215":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"5:4365:3400":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:43648:7560":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:10009:3484":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"4:11088:3457":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"4:11193:6092":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:4759:5449":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"5:6826:2933":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"1:43253:7606":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"16:5982:7254":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:13554:4249":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:9487:231":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"16:6226:7276":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"16:7862:7355":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:42330:2744":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"16:7597:33357":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:1826:183":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"11:680:2732":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:47859:6493":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"16:7067:6606":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"16:6243:7279":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:20903:27226":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"18:481:7087":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"4:11205:30669":{"crate_id":4,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"4:7758:14053":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:2526:4559":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"11:1036:7388":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:1923:6125":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"4:10285:7820":{"crate_id":4,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"17:12154:3912":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:40212:2866":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:9531:116":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"4:12088:1608":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"16:5049:4630":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:42155:95":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"16:4462:4612":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:45540:6392":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"16:5743:7247":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:22606:194":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:13024:4090":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:4033:7537":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:40304:2881":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:11887:7572":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:504:7116":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"6:1674:5216":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"16:5963:7248":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"9:393:19669":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:11381:3801":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"5:7222:2921":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:42194:7550":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:12970:4083":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"6:1576:5143":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"18:531:7089":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"5:4848:222":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"11:1541:7393":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"4:9201:7507":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"1:43342:7612":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"5:1104:7947":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"4:10800:7710":{"crate_id":4,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"6:6849:5968":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"4:10991:7457":{"crate_id":4,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"11:2260:7386":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"4:8263:7487":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"16:2969:19820":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"4:11179:6091":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"11:1145:7391":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"18:574:3577":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"4:10830:6032":{"crate_id":4,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"17:9998:3692":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"4:3125:2527":{"crate_id":4,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"1:4:1079":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"4:3457:1764":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"17:13723:4305":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:44125:7645":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:13914:4349":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:9372:3712":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:2872:2372":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"4:10860:2495":{"crate_id":4,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"4:1590:7398":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:42621:69":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"16:7722:4585":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"4:10009:6652":{"crate_id":4,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"5:3240:7398":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"16:4806:4622":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"6:5752:5617":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"4:2219:2093":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"4:2214:134":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"1:10655:7561":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:10475:7555":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"4:4016:14121":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:39294:2396":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1:40087:2976":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:42821:2739":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"4:4770:14135":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:13188:4120":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"4:1076:7391":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:11191:3790":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"16:4889:4625":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"6:6092:5789":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:4847:5492":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"4:9223:31639":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"1:3171:216":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"4:3523:31329":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:2838:110":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"11:1882:7398":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"4:8183:2526":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"1:44277:7732":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"4:638:7427":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"4:4208:7952":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:9762:33363":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"6:6059:5780":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"6:7579:6011":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"18:636:3596":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"16:6915:4587":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"4:3763:7446":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:40290:7592":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:43730:7624":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:41752:2731":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"4:4597:14162":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:13758:4309":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:21489:13780":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"4:6672:238":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"6:5970:5745":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:11154:7563":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:256:7113":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:3519:2927":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"4:3274:2519":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:2544:138":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:20862:2604":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:41958:85":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:43961:7637":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:6028:2892":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"4:6924:3444":{"crate_id":4,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"4:11082:3456":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"16:3049:19821":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"4:12038:14054":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"4:10840:135":{"crate_id":4,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"4:9136:239":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:15:2109":{"crate_id":1,"path":["core","write"],"kind":"macro"},"16:7492:7346":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:47821:6490":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:9350:3711":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"4:8839:203":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"1:46825:6447":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"16:6513:7295":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:11507:20751":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"5:2051:7407":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:22206:6641":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:3234:2397":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"16:6268:33362":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"6:6741:5898":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:2670:2474":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"1:40008:7535":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"6:6835:5959":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:46331:6424":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"11:122:3364":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"4:9058:7503":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:2776:242":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"17:10265:7155":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:21058:13776":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"0:275:234":{"crate_id":0,"path":["either","Either","Right"],"kind":"variant"},"5:6100:2482":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"16:2881:4574":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"4:943:7382":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:10520:7175":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"4:8957:14202":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:2150:20804":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"4:483:3421":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:40099:24970":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"4:5443:7455":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"17:8848:20743":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:10788:20846":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"4:8941:14203":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"4:6454:2852":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"1:41295:165":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"6:6663:5884":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:7443:2863":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:6640:5866":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"16:7015:4702":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"6:7590:6015":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"5:1013:3374":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:7614:6020":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:10340:3740":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:10036:3724":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:12074:3896":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:10186:14108":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"5:276:2922":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:13113:4105":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"5:1444:1943":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"4:2223:2097":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"6:5994:5757":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:14448:4511":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:12724:26909":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:12776:2361":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:46017:6415":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"11:2074:7386":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:40281:2879":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:12778:4037":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"18:609:7092":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"4:932:14064":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"18:582:2604":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"4:505:3391":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"5:261:3374":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"17:9521:7128":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:2904:2380":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:10547:7177":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:13802:4322":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:12911:4077":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:43843:7582":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:234:231":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:21227:13779":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:45664:6397":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"18:96:7923":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:10440:7164":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"4:1983:202":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:41318:6354":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:14536:4529":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:45854:6405":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:9752:7132":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"6:489:5033":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:14460:4513":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"4:7053:3445":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"4:1781:7438":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"13:0:2343":{"crate_id":13,"path":["std_detect"],"kind":"module"},"6:4468:5348":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:42584:114":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"18:671:7099":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"6:6002:5758":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"18:644:3577":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:47943:6499":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:45716:6399":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:21458:14108":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"16:4344:4610":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"16:5017:4629":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"5:6665:3374":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:30237:2918":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"4:8244:2499":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"5:5860:2927":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:40783:2525":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:6883:5977":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"4:4195:14142":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"11:1850:2927":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"5:4196:2482":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:43076:7723":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:11687:20752":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"6:1691:5223":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:12689:143":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"16:7090:7330":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:41701:210":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"4:6571:14197":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"5:5975:3405":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:2209:7123":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"6:4997:5574":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:41352:8644":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:22738:190":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:21280:13775":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"18:507:3577":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:12473:3991":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:2255:100":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"6:4309:5254":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:40768:2852":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:25818:272":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"16:7694:4594":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"6:5079:5610":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"16:6818:6605":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"6:4474:5350":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:46141:6418":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:9544:2745":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"6:588:5091":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:5569:2880":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"4:8363:7492":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"4:7694:6031":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"1:4137:7538":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:44562:7649":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"4:3358:2506":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"4:7769:7476":{"crate_id":4,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"4:3532:1765":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"17:8713:20739":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:14173:4418":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"16:2504:4558":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:14024:4377":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:41919:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"11:2467:4951":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:21194:13784":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"4:7689:7474":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"6:5030:5587":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:10586:7558":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:40115:2975":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"5:1674:3374":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:9852:20760":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"18:719:3597":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:12123:3903":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:10370:7158":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:12305:3949":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:6809:2789":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"16:3888:4607":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"4:6098:3432":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"5:7285:1943":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:3249:140":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:46889:6449":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"4:3195:8099":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:3654:1943":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"4:3539:1763":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"6:4960:5555":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:8926:20745":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"18:538:3582":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"4:926:7379":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:13897:4346":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:13228:4125":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"6:4418:5327":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:21313:13770":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"4:5079:7452":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"4:4826:3429":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:14434:4504":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"16:5419:3703":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"4:907:2925":{"crate_id":4,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:20890:27004":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"16:6499:4596":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:43484:6656":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:30273:24980":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"4:949:7384":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"6:6580:5833":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:4835:4623":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"11:2423:19745":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"5:2133:3391":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:49859:13787":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"6:7567:6009":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"16:7828:4773":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"4:5653:225":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:9780:7133":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:44269:7730":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:10410:7161":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"4:5808:7463":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:4168:6777":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:13422:4143":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:9912:7135":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"16:2574:4561":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:42639:133":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"6:6051:5777":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:11617:3822":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:21928:13773":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:4352:3468":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"4:8237:2498":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"17:13487:4194":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"4:10982:3014":{"crate_id":4,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"17:12062:3893":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"6:1664:5210":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:12208:3918":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:20922:27229":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"4:3698:14116":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"4:5268:207":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"17:10698:7195":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"4:11348:7529":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"16:5634:7239":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"6:4900:5518":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"4:6190:3436":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:10548:7557":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"4:4772:14136":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:44537:6663":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:45520:6391":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:4211:2752":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"4:416:179":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"4:12066:999":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"6:4978:5566":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"16:6531:7303":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"5:7514:2939":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"11:2368:2927":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"1:43932:7629":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:6604:5850":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"4:11572:7447":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:2277:108":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"4:6494:3441":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:14068:4391":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:12172:3913":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"5:4004:2927":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:13851:4333":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"11:2317:2731":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"1:21707:13777":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:4362:2753":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"17:434:3655":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:22218:24968":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"4:955:7385":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"4:8257:2496":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"17:14221:4455":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"4:11488:3460":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:11652:7565":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"16:7708:4595":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:12907:2900":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"6:5864:5683":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"4:1779:7437":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"5:780:99":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"4:11269:156":{"crate_id":4,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"6:5013:5579":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:42596:4788":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:31991:2355":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:41465:24978":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:10616:7182":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:12685:4025":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"4:0:1498":{"crate_id":4,"path":["std"],"kind":"module"},"5:2143:7408":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:40129:2977":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:43392:7613":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"6:6043:5775":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:6974:7955":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"4:5459:7456":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"16:7613:7352":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:11215:7220":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:4288:7540":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"4:8174:2524":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"4:4066:14124":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:0:2352":{"crate_id":17,"path":["object"],"kind":"module"},"16:2359:4552":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"16:8167:7368":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}