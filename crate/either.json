{"root":"0:0:2504","crate_version":"1.12.0","includes_private":false,"index":{"0:407":{"id":"0:407","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1255,0],"end":[1255,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2957:78","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2957:78","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2957:78","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:410:337"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:427":{"id":"0:427","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1261,0],"end":[1265,1]},"visibility":"default","docs":"Requires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2960:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"::std::ffi::OsStr","id":"4:2084:197","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2960:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"::std::ffi::OsStr","id":"4:2084:197","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsMut","id":"1:2960:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"4:2084:197","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:430:2441"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13586:34184":{"id":"1:13586:34184","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13894:199":{"id":"1:13894:199","crate_id":1,"name":"Output","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"Future","id":"1:45176:151","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"0:304":{"id":"0:304","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1272,0],"end":[1280,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Target","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2957:78","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"Target"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2957:78","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"Target"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2957:78","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"Target"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:308:337"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:136:1008":{"id":"0:136:1008","crate_id":0,"name":"len","span":{"filename":"src/iterator.rs","begin":[305,4],"end":[307,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13613:30322":{"id":"1:13613:30322","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:104:584":{"id":"0:104:584","crate_id":0,"name":"count","span":{"filename":"src/iterator.rs","begin":[209,4],"end":[211,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:227:2637":{"id":"0:227:2637","crate_id":0,"name":"expect_right","span":{"filename":"src/lib.rs","begin":[915,4],"end":[923,5]},"visibility":"public","docs":"Returns the right value\n\n# Examples\n\n```\n# use either::*;\nlet right: Either<(), _> = Right(3);\nassert_eq!(right.expect_right(\"value was Left\"), 3);\n```\n\n# Panics\n\nWhen `Either` is a `Left` value\n\n```should_panic\n# use either::*;\nlet left: Either<_, ()> = Left(3);\nleft.expect_right(\"value was Right\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["msg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"generic":"R"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"core::fmt::Debug","id":"1:10411:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:277:2700":{"id":"0:277:2700","crate_id":0,"name":"read_exact","span":{"filename":"src/lib.rs","begin":[1146,4],"end":[1148,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"4:3072:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:176:2397":{"id":"0:176:2397","crate_id":0,"name":"map_either","span":{"filename":"src/lib.rs","begin":[382,4],"end":[391,5]},"visibility":"public","docs":"Apply the functions `f` and `g` to the `Left` and `Right` variants\nrespectively. This is equivalent to\n[bimap](https://hackage.haskell.org/package/bifunctors-5/docs/Data-Bifunctor.html)\nin functional programming.\n\n```\nuse either::*;\n\nlet f = |s: String| s.len();\nlet g = |u: u8| u.to_string();\n\nlet left: Either<String, u8> = Left(\"loopy\".into());\nassert_eq!(left.map_either(f, g), Left(5));\n\nlet right: Either<String, u8> = Right(42);\nassert_eq!(right.map_either(f, g), Right(\"42\".into()));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}],["g",{"generic":"G"}]],"output":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"M"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"M","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3461:143","args":{"parenthesized":{"inputs":[{"generic":"L"}],"output":{"generic":"M"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"G"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3461:143","args":{"parenthesized":{"inputs":[{"generic":"R"}],"output":{"generic":"S"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:157:482":{"id":"0:157:482","crate_id":0,"name":"clone_from","span":{"filename":"src/lib.rs","begin":[156,4],"end":[162,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["source",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:133":{"id":"0:133","crate_id":0,"name":null,"span":{"filename":"src/iterator.rs","begin":[300,0],"end":[308,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"ExactSizeIterator","id":"1:8395:2916","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"ExactSizeIterator","id":"1:8395:2916","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["len","is_empty"],"trait":{"name":"ExactSizeIterator","id":"1:8395:2916","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterEither","id":"0:395:2398","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:136:1008"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:153":{"id":"0:153","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[148,0],"end":[163,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2732:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2732:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2732:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:156:480","0:157:482"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:287:2707":{"id":"0:287:2707","crate_id":0,"name":"fill_buf","span":{"filename":"src/lib.rs","begin":[1180,4],"end":[1182,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"4:3072:226","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3004-0:395:2398":{"id":"b:1:3004-0:395:2398","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2963:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2973:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterEither","id":"0:395:2398","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:3007:138","1:3008:1824"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:309":{"id":"0:309","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1282,0],"end":[1290,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Target","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2960:77","args":{"angle_bracketed":{"args":[{"type":{"generic":"Target"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2960:77","args":{"angle_bracketed":{"args":[{"type":{"generic":"Target"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsMut","id":"1:2960:77","args":{"angle_bracketed":{"args":[{"type":{"generic":"Target"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:313:2441"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:52:2897":{"id":"0:52:2897","crate_id":0,"name":"fold","span":{"filename":"src/iterator.rs","begin":[58,4],"end":[63,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["init",{"generic":"Acc"}],["f",{"generic":"G"}]],"output":{"generic":"Acc"},"c_variadic":false},"generics":{"params":[{"name":"Acc","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"G"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3458:142","args":{"parenthesized":{"inputs":[{"generic":"Acc"},{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8450:178","args":null}}}],"output":{"generic":"Acc"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:355:2353":{"id":"0:355:2353","crate_id":0,"name":"Either","span":{"filename":"src/lib.rs","begin":[49,0],"end":[54,1]},"visibility":"public","docs":"The enum `Either` with variants `Left` and `Right` is a general purpose\nsum type with two cases.\n\nThe `Either` type is symmetric and treats its variants the same way, without\npreference.\n(For representing success or error, use the regular `Result` enum instead.)","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"variants_stripped":false,"variants":["0:358:181","0:361:229"],"impls":["0:158","0:230","0:234","0:239","0:244","0:249","0:254","a:1:32622:237-0:355:2353","a:1:3212:247-0:355:2353","a:1:42483:3250-0:355:2353","a:1:32681:3211-0:355:2353","a:1:3247:3272-0:355:2353","a:1:42484:3249-0:355:2353","b:0:150-0:355:2353","b:1:2993-0:355:2353","b:1:3828-0:355:2353","b:1:2719-0:355:2353","b:1:2716-0:355:2353","b:1:13892-0:355:2353","b:1:3004-0:355:2353","b:1:2999-0:355:2353","b:1:8308-0:355:2353","b:1:2989-0:355:2353","b:5:5964-0:355:2353","b:5:793-0:355:2353","0:334","0:153","0:40","0:391","0:378","0:411","0:264","0:309","0:46","0:374","0:370","0:260","0:76","0:324","0:291","0:268","0:298","0:364","0:407","0:415","0:280","0:314","0:319","0:284","0:367","0:328","0:304","0:386","0:427","0:435","0:86","0:90","0:382","0:431","0:423","0:419","0:273"]}}},"0:26:2396":{"id":"0:26:2396","crate_id":0,"name":"try_right","span":{"filename":"src/lib.rs","begin":[124,0],"end":[131,1]},"visibility":"public","docs":"Dual to [`try_left!`], see its documentation for more information.","links":{"`try_left!`":"0:25:2393"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! try_right {\n    ($expr:expr) => { ... };\n}"}},"1:13525:26688":{"id":"1:13525:26688","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:44551:8162","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3003:1826":{"id":"1:3003:1826","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:42522:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2973:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13529:30884":{"id":"1:13529:30884","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"4:12388:476","self::pattern":"1:13180:2381"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13186:3644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13621:34192":{"id":"1:13621:34192","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:5023:34192"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:44558:8177","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:331:2402":{"id":"0:331:2402","crate_id":0,"name":"source","span":{"filename":"src/lib.rs","begin":[1333,4],"end":[1335,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42390:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"1:3052:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:44:2894":{"id":"0:44:2894","crate_id":0,"name":"extend","span":{"filename":"src/iterator.rs","begin":[34,4],"end":[39,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8304:165","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"A"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:158":{"id":"0:158","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[165,0],"end":[947,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:161:2409","0:162:2413","0:163:2419","0:164:2424","0:165:337","0:166:2441","0:167:2444","0:168:2447","0:169:2453","0:170:2460","0:173:2467","0:176:2397","0:181:2492","0:187:2504","0:191:2515","0:196:2519","0:199:2523","0:202:966","0:203:988","0:206:989","0:209:2560","0:210:2567","0:213:2576","0:216:2587","0:217:2593","0:218:2599","0:220:2605","0:221:2609","0:222:2613","0:224:2622","0:225:2628","0:226:2632","0:227:2637","0:228:2644"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:415":{"id":"0:415","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1256,0],"end":[1260,1]},"visibility":"default","docs":"Requires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2957:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"::std::path::Path","id":"4:5465:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2957:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"::std::path::Path","id":"4:5465:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2957:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"4:5465:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:418:337"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:422:2441":{"id":"0:422:2441","crate_id":0,"name":"as_mut","span":{"filename":"src/lib.rs","begin":[1256,0],"end":[1260,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"::std::path::Path","id":"4:5465:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:163:2419":{"id":"0:163:2419","crate_id":0,"name":"left","span":{"filename":"src/lib.rs","begin":[206,4],"end":[211,5]},"visibility":"public","docs":"Convert the left side of `Either<L, R>` to an `Option<L>`.\n\n```\nuse either::*;\n\nlet left: Either<_, ()> = Left(\"some value\");\nassert_eq!(left.left(),  Some(\"some value\"));\n\nlet right: Either<(), _> = Right(321);\nassert_eq!(right.left(), None);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"1:42390:194","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:389:883":{"id":"0:389:883","crate_id":0,"name":"hash","span":{"filename":"src/lib.rs","begin":[48,47],"end":[48,51]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:10637:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:395:2398":{"id":"0:395:2398","crate_id":0,"name":"IterEither","span":{"filename":"src/iterator.rs","begin":[19,0],"end":[21,1]},"visibility":"public","docs":"Iterator that maps left or right iterators to corresponding `Either`-wrapped items.\n\nThis struct is created by the [`Either::factor_into_iter`],\n[`factor_iter`][Either::factor_iter],\nand [`factor_iter_mut`][Either::factor_iter_mut] methods.","links":{"Either::factor_iter_mut":"0:213:2576","Either::factor_iter":"0:210:2567","`Either::factor_into_iter`":"0:209:2560"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:32622:237-0:395:2398","a:1:3212:247-0:395:2398","a:1:42483:3250-0:395:2398","a:1:32681:3211-0:395:2398","a:1:3247:3272-0:395:2398","a:1:42484:3249-0:395:2398","b:0:150-0:395:2398","b:1:2993-0:395:2398","b:1:3828-0:395:2398","b:1:2719-0:395:2398","b:1:2716-0:395:2398","b:1:3004-0:395:2398","b:1:2999-0:395:2398","b:1:8308-0:395:2398","b:1:2989-0:395:2398","b:5:793-0:395:2398","0:403","0:133","0:137","0:123","0:93","0:399"]}}},"0:363:1993":{"id":"0:363:1993","crate_id":0,"name":"0","span":{"filename":"src/lib.rs","begin":[53,10],"end":[53,11]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"generic":"R"}}},"b:1:3004-0:355:2353":{"id":"b:1:3004-0:355:2353","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2963:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2973:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:3007:138","1:3008:1824"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:8308-0:355:2353":{"id":"b:1:8308-0:355:2353","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8450:178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8304:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:8310:173","1:8311:2532","1:8312:966"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"1:13895:164":{"id":"1:13895:164","crate_id":1,"name":"IntoFuture","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"F"}}}},"0:50:1206":{"id":"0:50:1206","crate_id":0,"name":"next","span":{"filename":"src/iterator.rs","begin":[50,4],"end":[52,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42390:194","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8450:178","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13511:34174":{"id":"1:13511:34174","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:12394:1739","str::slice_mut_unchecked":"1:13512:34175","crate::ops::Index":"1:39936:3070"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:302:337":{"id":"0:302:337","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[1228,4],"end":[1230,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Target"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:114:327":{"id":"0:114:327","crate_id":0,"name":"any","span":{"filename":"src/iterator.rs","begin":[243,4],"end":[248,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3458:142","args":{"parenthesized":{"inputs":[{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8450:178","args":null}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:166:2441":{"id":"0:166:2441","crate_id":0,"name":"as_mut","span":{"filename":"src/lib.rs","begin":[267,4],"end":[272,5]},"visibility":"public","docs":"Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.\n\n```\nuse either::*;\n\nfn mutate_left(value: &mut Either<u32, u32>) {\n    if let Some(l) = value.as_mut().left() {\n        *l = 999;\n    }\n}\n\nlet mut left = Left(123);\nlet mut right = Right(123);\nmutate_left(&mut left);\nmutate_left(&mut right);\nassert_eq!(left, Left(999));\nassert_eq!(right, Right(123));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"L"}}}},{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"R"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:327:639":{"id":"0:327:639","crate_id":0,"name":"deref_mut","span":{"filename":"src/lib.rs","begin":[1319,4],"end":[1321,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:3420:125","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5729:3200":{"id":"5:5729:3200","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7771:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7771:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:434:337":{"id":"0:434:337","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[1266,0],"end":[1270,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"::std::ffi::CStr","id":"1:40923:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:140-0:395:2398":{"id":"0:140-0:395:2398","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[143,0],"end":[143,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::iterator::IterEither","name":"IterEither","id":"0:395:2398","glob":false}}},"a:1:3212:247-0:395:2398":{"id":"a:1:3212:247-0:395:2398","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3212:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3212:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3212:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterEither","id":"0:395:2398","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:80:2913":{"id":"0:80:2913","crate_id":0,"name":"nth_back","span":{"filename":"src/iterator.rs","begin":[144,4],"end":[146,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42390:194","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8450:178","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:296:2716":{"id":"0:296:2716","crate_id":0,"name":"write_fmt","span":{"filename":"src/lib.rs","begin":[1214,4],"end":[1216,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["fmt",{"resolved_path":{"name":"fmt::Arguments","id":"1:43435:2717","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"4:3072:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13526:28404":{"id":"1:13526:28404","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:12388:476","self::pattern":"1:13180:2381"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13186:3644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2719-0:395:2398":{"id":"b:1:2719-0:395:2398","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32623:2925","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2713:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterEither","id":"0:395:2398","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:2721:26441"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13507:29493":{"id":"1:13507:29493","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11313:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11313:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2989-0:395:2398":{"id":"b:1:2989-0:395:2398","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2966:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2963:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterEither","id":"0:395:2398","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:2992:2645"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:403":{"id":"0:403","crate_id":0,"name":null,"span":{"filename":"src/iterator.rs","begin":[18,16],"end":[18,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"1:10411:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"1:10411:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10411:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterEither","id":"0:395:2398","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:406:811"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:423":{"id":"0:423","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1261,0],"end":[1265,1]},"visibility":"default","docs":"Requires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2957:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"::std::ffi::OsStr","id":"4:2084:197","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2957:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"::std::ffi::OsStr","id":"4:2084:197","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2957:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"4:2084:197","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:426:337"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13555:34178":{"id":"1:13555:34178","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:13180:2381","str::split":"1:13543:3446","prim@char":"4:12388:476","str::split_terminator":"1:13552:34177"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:44327:8214","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13186:3644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13186:3644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13201:9639","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13608:34191":{"id":"1:13608:34191","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12388:476","self::pattern":"1:13180:2381"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13186:3644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13186:3644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13201:9639","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13624:34193":{"id":"1:13624:34193","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:5021:34193"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:44576:8176","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:13892-0:355:2353":{"id":"b:1:13892-0:355:2353","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Future","id":"1:45176:151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoFuture","id":"1:45179:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:13894:199","1:13895:164","1:13896:965"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"F"}}}},"0:294:2714":{"id":"0:294:2714","crate_id":0,"name":"write","span":{"filename":"src/lib.rs","begin":[1206,4],"end":[1208,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"4:3072:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:81:2914":{"id":"0:81:2914","crate_id":0,"name":"rfold","span":{"filename":"src/iterator.rs","begin":[148,4],"end":[153,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["init",{"generic":"Acc"}],["f",{"generic":"G"}]],"output":{"generic":"Acc"},"c_variadic":false},"generics":{"params":[{"name":"Acc","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"G"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3458:142","args":{"parenthesized":{"inputs":[{"generic":"Acc"},{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8450:178","args":null}}}],"output":{"generic":"Acc"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:187:2504":{"id":"0:187:2504","crate_id":0,"name":"either","span":{"filename":"src/lib.rs","begin":[440,4],"end":[449,5]},"visibility":"public","docs":"Apply one of two functions depending on contents, unifying their result. If the value is\n`Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second\nfunction `g` is applied.\n\n```\nuse either::*;\n\nfn square(n: u32) -> i32 { (n * n) as i32 }\nfn negate(n: i32) -> i32 { -n }\n\nlet left: Either<u32, i32> = Left(4);\nassert_eq!(left.either(square, negate), 16);\n\nlet right: Either<u32, i32> = Right(-4);\nassert_eq!(right.either(square, negate), 4);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}],["g",{"generic":"G"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3461:143","args":{"parenthesized":{"inputs":[{"generic":"L"}],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"G"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3461:143","args":{"parenthesized":{"inputs":[{"generic":"R"}],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74:2911":{"id":"0:74:2911","crate_id":0,"name":"position","span":{"filename":"src/iterator.rs","begin":[127,4],"end":[132,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["predicate",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42390:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3458:142","args":{"parenthesized":{"inputs":[{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8450:178","args":null}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13492:3464":{"id":"1:13492:3464","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13518:8163":{"id":"1:13518:8163","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:12388:476"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:44229:3646","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32622:237-0:395:2398":{"id":"a:1:32622:237-0:395:2398","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32622:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32622:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32622:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterEither","id":"0:395:2398","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:216:2587":{"id":"0:216:2587","crate_id":0,"name":"left_or","span":{"filename":"src/lib.rs","begin":[689,4],"end":[694,5]},"visibility":"public","docs":"Return left value or given value\n\nArguments passed to `left_or` are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use\n[`left_or_else`][Self::left_or_else], which is lazily evaluated.\n\n# Examples\n\n```\n# use either::*;\nlet left: Either<&str, &str> = Left(\"left\");\nassert_eq!(left.left_or(\"foo\"), \"left\");\n\nlet right: Either<&str, &str> = Right(\"right\");\nassert_eq!(right.left_or(\"left\"), \"left\");\n```","links":{"Self::left_or_else":"0:218:2599"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["other",{"generic":"L"}]],"output":{"generic":"L"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:137":{"id":"0:137","crate_id":0,"name":null,"span":{"filename":"src/iterator.rs","begin":[310,0],"end":[315,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"iter::FusedIterator","id":"1:8757:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"iter::FusedIterator","id":"1:8757:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8757:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterEither","id":"0:395:2398","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:40":{"id":"0:40","crate_id":0,"name":null,"span":{"filename":"src/iterator.rs","begin":[29,0],"end":[40,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Extend","id":"1:8313:2893","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Extend","id":"1:8313:2893","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["extend_one","extend_reserve"],"trait":{"name":"Extend","id":"1:8313:2893","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"super::Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:44:2894"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:89:1008":{"id":"0:89:1008","crate_id":0,"name":"len","span":{"filename":"src/iterator.rs","begin":[168,4],"end":[170,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13496:34172":{"id":"1:13496:34172","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:13494:34171"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:55:2900":{"id":"0:55:2900","crate_id":0,"name":"for_each","span":{"filename":"src/iterator.rs","begin":[65,4],"end":[70,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3458:142","args":{"parenthesized":{"inputs":[{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8450:178","args":null}}}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5966:1799":{"id":"5:5966:1799","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7771:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:406:811":{"id":"0:406:811","crate_id":0,"name":"fmt","span":{"filename":"src/iterator.rs","begin":[18,16],"end":[18,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10377:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10358:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:226:2632":{"id":"0:226:2632","crate_id":0,"name":"expect_left","span":{"filename":"src/lib.rs","begin":[886,4],"end":[894,5]},"visibility":"public","docs":"Returns the left value\n\n# Examples\n\n```\n# use either::*;\nlet left: Either<_, ()> = Left(3);\nassert_eq!(left.expect_left(\"value was Right\"), 3);\n```\n\n# Panics\n\nWhen `Either` is a `Right` value\n\n```should_panic\n# use either::*;\nlet right: Either<(), _> = Right(3);\nright.expect_left(\"value was Right\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["msg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"generic":"L"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"core::fmt::Debug","id":"1:10411:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13582:34182":{"id":"1:13582:34182","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13617:30328":{"id":"1:13617:30328","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:84:2915":{"id":"0:84:2915","crate_id":0,"name":"rfind","span":{"filename":"src/iterator.rs","begin":[155,4],"end":[160,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["predicate",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42390:194","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8450:178","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3458:142","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8450:178","args":null}}}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:435":{"id":"0:435","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1266,0],"end":[1270,1]},"visibility":"default","docs":"Requires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2960:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"::std::ffi::CStr","id":"1:40923:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2960:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"::std::ffi::CStr","id":"1:40923:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsMut","id":"1:2960:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"CStr","id":"1:40923:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:438:2441"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13499:30562":{"id":"1:13499:30562","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12727:2751"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:271:199":{"id":"0:271:199","crate_id":0,"name":"Output","span":{"filename":"src/lib.rs","begin":[1123,4],"end":[1123,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"L"},"trait":{"name":"Future","id":"1:45176:151","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"0:150":{"id":"0:150","crate_id":0,"name":null,"span":{"filename":"src/into_either.rs","begin":[64,0],"end":[64,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["into_either_with","into_either"],"trait":{"name":"IntoEither","id":"0:146:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"generic":"T"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:131:2915":{"id":"0:131:2915","crate_id":0,"name":"rfind","span":{"filename":"src/iterator.rs","begin":[292,4],"end":[297,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["predicate",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42390:194","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8450:178","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3458:142","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8450:178","args":null}}}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:49:173":{"id":"0:49:173","crate_id":0,"name":"Item","span":{"filename":"src/iterator.rs","begin":[48,4],"end":[48,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"L"},"trait":{"name":"Iterator","id":"1:8450:178","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"0:90":{"id":"0:90","crate_id":0,"name":null,"span":{"filename":"src/iterator.rs","begin":[173,0],"end":[178,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"iter::FusedIterator","id":"1:8757:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"iter::FusedIterator","id":"1:8757:150","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"L"},"trait":{"name":"","id":"1:8450:178","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8757:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"super::Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:156:480":{"id":"0:156:480","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[149,4],"end":[154,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:105:2901":{"id":"0:105:2901","crate_id":0,"name":"last","span":{"filename":"src/iterator.rs","begin":[213,4],"end":[215,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"1:42390:194","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8450:178","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13493:34170":{"id":"1:13493:34170","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:98:2896":{"id":"0:98:2896","crate_id":0,"name":"size_hint","span":{"filename":"src/iterator.rs","begin":[191,4],"end":[193,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:42390:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:334":{"id":"0:334","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1348,0],"end":[1356,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"1:10416:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"1:10416:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:10416:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:337:811"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:22-0:358:181":{"id":"0:22-0:358:181","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[39,24],"end":[39,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::Either::Left","name":"Left","id":"0:358:181","glob":false}}},"b:1:2716-0:355:2353":{"id":"b:1:2716-0:355:2353","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32623:2925","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2710:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:2718:2947"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2993-0:355:2353":{"id":"b:1:2993-0:355:2353","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2966:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:2995:841"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:426:337":{"id":"0:426:337","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[1261,0],"end":[1265,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"::std::ffi::OsStr","id":"4:2084:197","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:51:2896":{"id":"0:51:2896","crate_id":0,"name":"size_hint","span":{"filename":"src/iterator.rs","begin":[54,4],"end":[56,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:42390:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65:308":{"id":"0:65:308","crate_id":0,"name":"all","span":{"filename":"src/iterator.rs","begin":[99,4],"end":[104,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3458:142","args":{"parenthesized":{"inputs":[{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8450:178","args":null}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86":{"id":"0:86","crate_id":0,"name":null,"span":{"filename":"src/iterator.rs","begin":[163,0],"end":[171,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"ExactSizeIterator","id":"1:8395:2916","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"ExactSizeIterator","id":"1:8395:2916","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"L"},"trait":{"name":"","id":"1:8450:178","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["len","is_empty"],"trait":{"name":"ExactSizeIterator","id":"1:8395:2916","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"super::Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:89:1008"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5716:34888":{"id":"5:5716:34888","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7771:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7771:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13186:3644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:99:2897":{"id":"0:99:2897","crate_id":0,"name":"fold","span":{"filename":"src/iterator.rs","begin":[195,4],"end":[200,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["init",{"generic":"Acc"}],["f",{"generic":"G"}]],"output":{"generic":"Acc"},"c_variadic":false},"generics":{"params":[{"name":"Acc","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"G"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3458:142","args":{"parenthesized":{"inputs":[{"generic":"Acc"},{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8450:178","args":null}}}],"output":{"generic":"Acc"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:202:966":{"id":"0:202:966","crate_id":0,"name":"into_iter","span":{"filename":"src/lib.rs","begin":[537,4],"end":[543,5]},"visibility":"public","docs":"Convert the inner value to an iterator.\n\nThis requires the `Left` and `Right` iterators to have the same item type.\nSee [`factor_into_iter`][Either::factor_into_iter] to iterate different types.\n\n```\nuse either::*;\n\nlet left: Either<_, Vec<u32>> = Left(vec![1, 2, 3, 4, 5]);\nlet mut right: Either<Vec<u32>, _> = Right(vec![]);\nright.extend(left.into_iter());\nassert_eq!(right, Right(vec![1, 2, 3, 4, 5]));\n```","links":{"Either::factor_into_iter":"0:209:2560"},"attrs":["#[allow(clippy::should_implement_trait)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"L"},"trait":{"name":"","id":"1:8304:165","args":null}}}},{"type":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"1:8304:165","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8304:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8304:165","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"L"},"trait":{"name":"","id":"1:8304:165","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:147:2399":{"id":"0:147:2399","crate_id":0,"name":"into_either","span":{"filename":"src/into_either.rs","begin":[29,4],"end":[35,5]},"visibility":"default","docs":"Converts `self` into a [`Left`] variant of [`Either<Self, Self>`](Either)\nif `into_left` is `true`.\nConverts `self` into a [`Right`] variant of [`Either<Self, Self>`](Either)\notherwise.\n\n# Examples\n\n```\nuse either::{IntoEither, Left, Right};\n\nlet x = 0;\nassert_eq!(x.into_either(true), Left(x));\nassert_eq!(x.into_either(false), Right(x));\n```","links":{"Either":"0:355:2353","`Right`":"0:361:229","`Left`":"0:358:181"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["into_left",{"primitive":"bool"}]],"output":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13620:30799":{"id":"1:13620:30799","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1066:38509"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:313:2441":{"id":"0:313:2441","crate_id":0,"name":"as_mut","span":{"filename":"src/lib.rs","begin":[1287,4],"end":[1289,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Target"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:59:2902":{"id":"0:59:2902","crate_id":0,"name":"nth","span":{"filename":"src/iterator.rs","begin":[80,4],"end":[82,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42390:194","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8450:178","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13490":{"id":"1:13490","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:13491:1008","1:13492:3464","1:13493:34170","1:13494:34171","1:13496:34172","1:13499:30562","1:13500:34173","1:13501:336","1:13502:30849","1:13503:29491","1:13505:29492","1:13507:29493","1:13509:2448","1:13511:34174","1:13512:34175","1:13513:30868","1:13514:30869","1:13515:30872","1:13516:30873","1:13518:8163","1:13519:8229","1:13520:3453","1:13521:26669","1:13522:26748","1:13523:3447","1:13524:34176","1:13525:26688","1:13526:28404","1:13529:30884","1:13532:30885","1:13535:2907","1:13539:2915","1:13543:3446","1:13546:26658","1:13549:30876","1:13552:34177","1:13555:34178","1:13558:30878","1:13561:30880","1:13564:30882","1:13567:30883","1:13570:2989","1:13573:34179","1:13576:34180","1:13579:34181","1:13582:34182","1:13584:34183","1:13586:34184","1:13588:34185","1:13589:34186","1:13590:34187","1:13593:34188","1:13596:30304","1:13599:30886","1:13602:34189","1:13605:34190","1:13608:34191","1:13611:2752","1:13613:30322","1:13614:30794","1:13615:30326","1:13616:30327","1:13617:30328","1:13618:30797","1:13619:30798","1:13620:30799","1:13621:34192","1:13623:9533","1:13624:34193"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:284":{"id":"0:284","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1175,0],"end":[1195,1]},"visibility":"default","docs":"Requires crate feature `\"use_std\"`","links":{},"attrs":["#[cfg(any(test, feature = \"use_std\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"BufRead","id":"4:3684:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"BufRead","id":"4:3684:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["read_line","has_data_left","skip_until","lines","read_until","split"],"trait":{"name":"BufRead","id":"4:3684:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:287:2707","0:288:2708","0:289:2710","0:290:2712"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:267:2645":{"id":"0:267:2645","crate_id":0,"name":"into","span":{"filename":"src/lib.rs","begin":[1109,4],"end":[1114,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:42522:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"L"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:260":{"id":"0:260","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1097,0],"end":[1104,1]},"visibility":"default","docs":"Convert from `Result` to `Either` with `Ok => Right` and `Err => Left`.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2966:145","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Result","id":"1:42522:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"L"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:263:841"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:109:2906":{"id":"0:109:2906","crate_id":0,"name":"partition","span":{"filename":"src/iterator.rs","begin":[228,4],"end":[234,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"tuple":[{"generic":"B"},{"generic":"B"}]},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"B"},"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:3041:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Extend","id":"1:8313:2893","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8450:178","args":null}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3458:142","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8450:178","args":null}}}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:414:2441":{"id":"0:414:2441","crate_id":0,"name":"as_mut","span":{"filename":"src/lib.rs","begin":[1255,0],"end":[1255,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:364":{"id":"0:364","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[48,9],"end":[48,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::marker::Copy","id":"1:3207:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::marker::Copy","id":"1:3207:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3207:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13614:30794":{"id":"1:13614:30794","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:40291:9516","Self::is_ascii":"1:13613:30322"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42390:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:40291:9516","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2995:841":{"id":"1:2995:841","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:8310:173":{"id":"1:8310:173","crate_id":1,"name":"Item","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"Iterator","id":"1:8450:178","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"0:161:2409":{"id":"0:161:2409","crate_id":0,"name":"is_left","span":{"filename":"src/lib.rs","begin":[175,4],"end":[180,5]},"visibility":"public","docs":"Return true if the value is the `Left` variant.\n\n```\nuse either::*;\n\nlet values = [Left(1), Right(\"the right value\")];\nassert_eq!(values[0].is_left(), true);\nassert_eq!(values[1].is_left(), false);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:279:2702":{"id":"0:279:2702","crate_id":0,"name":"read_to_string","span":{"filename":"src/lib.rs","begin":[1154,4],"end":[1156,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"std::string::String","id":"5:7771:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"4:3072:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:431":{"id":"0:431","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1266,0],"end":[1270,1]},"visibility":"default","docs":"Requires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2957:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"::std::ffi::CStr","id":"1:40923:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2957:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"::std::ffi::CStr","id":"1:40923:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2957:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"CStr","id":"1:40923:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:434:337"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13564:30882":{"id":"1:13564:30882","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42390:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13186:3644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:283:2705":{"id":"0:283:2705","crate_id":0,"name":"seek","span":{"filename":"src/lib.rs","begin":[1168,4],"end":[1170,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["pos",{"resolved_path":{"name":"SeekFrom","id":"4:8511:2351","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"4:3072:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13616:30327":{"id":"1:13616:30327","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:112:308":{"id":"0:112:308","crate_id":0,"name":"all","span":{"filename":"src/iterator.rs","begin":[236,4],"end":[241,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3458:142","args":{"parenthesized":{"inputs":[{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8450:178","args":null}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:213:2576":{"id":"0:213:2576","crate_id":0,"name":"factor_iter_mut","span":{"filename":"src/lib.rs","begin":[663,4],"end":[671,5]},"visibility":"public","docs":"Mutably borrows an `Either` of `Iterator`s to be an `Iterator` of `Either`s\n\nUnlike [`iter_mut`][Either::iter_mut], this does not require the\n`Left` and `Right` iterators to have the same item type.\n\n```\nuse either::*;\nlet mut left: Either<_, Vec<u8>> = Left([\"hello\"]);\nleft.factor_iter_mut().for_each(|x| *x.unwrap_left() = \"goodbye\");\nassert_eq!(left, Left([\"goodbye\"]));\nlet mut right: Either<[&str; 2], _> = Right(vec![0, 1, 2]);\nright.factor_iter_mut().for_each(|x| if let Right(r) = x { *r = -*r; });\nassert_eq!(right, Right(vec![0, -1, -2]));\n\n```","links":{"Either::iter_mut":"0:206:989"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"IterEither","id":"0:395:2398","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"L"}}},"trait":{"name":"IntoIterator","id":"1:8304:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},{"type":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"R"}}},"trait":{"name":"IntoIterator","id":"1:8304:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"L"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8304:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}]}},{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"R"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8304:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3008:1824":{"id":"1:3008:1824","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:42522:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2973:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:373:706":{"id":"0:373:706","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[48,15],"end":[48,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13576:34180":{"id":"1:13576:34180","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:13180:2381","`DoubleEndedIterator`":"1:8342:130","prim@char":"4:12388:476","str::rmatch_indices":"1:13579:34181"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:44409:8215","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13186:3644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:793-0:355:2353":{"id":"b:5:793-0:355:2353","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2732:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:789:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["5:795:7299","5:796:26445","5:797:26446"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:97:1206":{"id":"0:97:1206","crate_id":0,"name":"next","span":{"filename":"src/iterator.rs","begin":[187,4],"end":[189,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42390:194","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8450:178","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:358:181":{"id":"0:358:181","crate_id":0,"name":"Left","span":{"filename":"src/lib.rs","begin":[51,4],"end":[51,11]},"visibility":"default","docs":"A value of type `L`.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:360:1993"]},"discriminant":null}}},"0:370":{"id":"0:370","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[48,15],"end":[48,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::PartialEq","id":"1:2766:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::PartialEq","id":"1:2766:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2766:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:373:706"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:210:2567":{"id":"0:210:2567","crate_id":0,"name":"factor_iter","span":{"filename":"src/lib.rs","begin":[637,4],"end":[645,5]},"visibility":"public","docs":"Borrows an `Either` of `Iterator`s to be an `Iterator` of `Either`s\n\nUnlike [`iter`][Either::iter], this does not require the\n`Left` and `Right` iterators to have the same item type.\n\n```\nuse either::*;\nlet left: Either<_, Vec<u8>> = Left([\"hello\"]);\nassert_eq!(left.factor_iter().next(), Some(Left(&\"hello\")));\nlet right: Either<[&str; 2], _> = Right(vec![0, 1]);\nassert_eq!(right.factor_iter().collect::<Vec<_>>(), vec![Right(&0), Right(&1)]);\n\n```","links":{"Either::iter":"0:203:988"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"IterEither","id":"0:395:2398","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"L"}}},"trait":{"name":"IntoIterator","id":"1:8304:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},{"type":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"R"}}},"trait":{"name":"IntoIterator","id":"1:8304:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"L"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8304:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}]}},{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"R"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8304:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:394:811":{"id":"0:394:811","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[48,53],"end":[48,58]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10377:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10358:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13590:34187":{"id":"1:13590:34187","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:12388:476","self::pattern":"1:13180:2381"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13186:3644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13186:3644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:13206:9638","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:96:173":{"id":"0:96:173","crate_id":0,"name":"Item","span":{"filename":"src/iterator.rs","begin":[185,4],"end":[185,41]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"L"},"trait":{"name":"Iterator","id":"1:8450:178","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"Iterator","id":"1:8450:178","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}}}}},"1:13502:30849":{"id":"1:13502:30849","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:12407:1869"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5727:34890":{"id":"5:5727:34890","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7771:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7771:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3002:138":{"id":"1:3002:138","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2973:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:288:2708":{"id":"0:288:2708","crate_id":0,"name":"consume","span":{"filename":"src/lib.rs","begin":[1184,4],"end":[1186,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["amt",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:0:150-0:355:2353":{"id":"b:0:150-0:355:2353","crate_id":0,"name":null,"span":{"filename":"src/into_either.rs","begin":[64,0],"end":[64,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["into_either_with","into_either"],"trait":{"name":"IntoEither","id":"0:146:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:203:988":{"id":"0:203:988","crate_id":0,"name":"iter","span":{"filename":"src/lib.rs","begin":[560,4],"end":[566,5]},"visibility":"public","docs":"Borrow the inner value as an iterator.\n\nThis requires the `Left` and `Right` iterators to have the same item type.\nSee [`factor_iter`][Either::factor_iter] to iterate different types.\n\n```\nuse either::*;\n\nlet left: Either<_, &[u32]> = Left(vec![2, 3]);\nlet mut right: Either<Vec<u32>, _> = Right(&[4, 5][..]);\nlet mut all = vec![1];\nall.extend(left.iter());\nall.extend(right.iter());\nassert_eq!(all, vec![1, 2, 3, 4, 5]);\n```","links":{"Either::factor_iter":"0:210:2567"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"L"}}},"trait":{"name":"IntoIterator","id":"1:8304:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},{"type":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"R"}}},"trait":{"name":"IntoIterator","id":"1:8304:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"L"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8304:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}]}},{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"R"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8304:165","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"L"}}},"trait":{"name":"IntoIterator","id":"1:8304:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13558:30878":{"id":"1:13558:30878","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:12388:476","self::pattern":"1:13180:2381","str::rsplitn":"1:13561:30880"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:44363:8148","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13186:3644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:199:2523":{"id":"0:199:2523","crate_id":0,"name":"right_and_then","span":{"filename":"src/lib.rs","begin":[513,4],"end":[521,5]},"visibility":"public","docs":"Apply the function `f` on the value in the `Right` variant if it is present.\n\n```\nuse either::*;\n\nlet left: Either<_, u32> = Left(123);\nassert_eq!(left.right_and_then(|x| Right(x * 2)), Left(123));\n\nlet right: Either<u32, _> = Right(123);\nassert_eq!(right.right_and_then(|x| Right(x * 2)), Right(246));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3461:143","args":{"parenthesized":{"inputs":[{"generic":"R"}],"output":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:209:2560":{"id":"0:209:2560","crate_id":0,"name":"factor_into_iter","span":{"filename":"src/lib.rs","begin":[615,4],"end":[621,5]},"visibility":"public","docs":"Converts an `Either` of `Iterator`s to be an `Iterator` of `Either`s\n\nUnlike [`into_iter`][Either::into_iter], this does not require the\n`Left` and `Right` iterators to have the same item type.\n\n```\nuse either::*;\nlet left: Either<_, Vec<u8>> = Left(&[\"hello\"]);\nassert_eq!(left.factor_into_iter().next(), Some(Left(&\"hello\")));\nlet right: Either<&[&str], _> = Right(vec![0, 1]);\nassert_eq!(right.factor_into_iter().collect::<Vec<_>>(), vec![Right(0), Right(1)]);\n\n```","links":{"Either::into_iter":"0:202:966"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"IterEither","id":"0:395:2398","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"L"},"trait":{"name":"","id":"1:8304:165","args":null}}}},{"type":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"1:8304:165","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8304:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8304:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13543:3446":{"id":"1:13543:3446","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:13180:2381","`DoubleEndedIterator`":"1:8342:130","prim@char":"4:12388:476","str::split_whitespace":"1:13521:26669","str::rsplit":"1:13549:30876"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:44259:3177","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13186:3644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:391":{"id":"0:391","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[48,53],"end":[48,58]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"1:10411:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"1:10411:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10411:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:394:811"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:181:2492":{"id":"0:181:2492","crate_id":0,"name":"map_either_with","span":{"filename":"src/lib.rs","begin":[413,4],"end":[422,5]},"visibility":"public","docs":"Similar to [`map_either`][Self::map_either], with an added context `ctx` accessible to\nboth functions.\n\n```\nuse either::*;\n\nlet mut sum = 0;\n\n// Both closures want to update the same value, so pass it as context.\nlet mut f = |sum: &mut usize, s: String| { *sum += s.len(); s.to_uppercase() };\nlet mut g = |sum: &mut usize, u: usize| { *sum += u; u.to_string() };\n\nlet left: Either<String, usize> = Left(\"loopy\".into());\nassert_eq!(left.map_either_with(&mut sum, &mut f, &mut g), Left(\"LOOPY\".into()));\n\nlet right: Either<String, usize> = Right(42);\nassert_eq!(right.map_either_with(&mut sum, &mut f, &mut g), Right(\"42\".into()));\n\nassert_eq!(sum, 47);\n```","links":{"Self::map_either":"0:176:2397"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["ctx",{"generic":"Ctx"}],["f",{"generic":"F"}],["g",{"generic":"G"}]],"output":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"M"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Ctx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"M","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3461:143","args":{"parenthesized":{"inputs":[{"generic":"Ctx"},{"generic":"L"}],"output":{"generic":"M"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"G"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3461:143","args":{"parenthesized":{"inputs":[{"generic":"Ctx"},{"generic":"R"}],"output":{"generic":"S"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:280":{"id":"0:280","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1163,0],"end":[1171,1]},"visibility":"default","docs":"`Either<L, R>` implements `Seek` if both `L` and `R` do.\n\nRequires crate feature `\"use_std\"`","links":{},"attrs":["#[cfg(any(test, feature = \"use_std\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Seek","id":"4:3674:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Seek","id":"4:3674:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["stream_len","seek_relative","rewind","stream_position"],"trait":{"name":"Seek","id":"4:3674:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:283:2705"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:239":{"id":"0:239","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[993,0],"end":[1014,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Result","id":"1:42522:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"L"}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Result","id":"1:42522:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"R"}}],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:243:2665"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13503:29491":{"id":"1:13503:29491","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:42392:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42390:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11313:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11313:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13615:30326":{"id":"1:13615:30326","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13618:30797":{"id":"1:13618:30797","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1066:38509"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2718:2947":{"id":"1:2718:2947","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5728:34891":{"id":"5:5728:34891","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:306:3623","`String`":"5:7771:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:306:3623","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7771:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:224:2622":{"id":"0:224:2622","crate_id":0,"name":"unwrap_left","span":{"filename":"src/lib.rs","begin":[826,4],"end":[836,5]},"visibility":"public","docs":"Returns the left value\n\n# Examples\n\n```\n# use either::*;\nlet left: Either<_, ()> = Left(3);\nassert_eq!(left.unwrap_left(), 3);\n```\n\n# Panics\n\nWhen `Either` is a `Right` value\n\n```should_panic\n# use either::*;\nlet right: Either<(), _> = Right(3);\nright.unwrap_left();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"L"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"core::fmt::Debug","id":"1:10411:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13519:8229":{"id":"1:13519:8229","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:12388:476"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:44235:8211","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3828-0:355:2353":{"id":"b:1:3828-0:355:2353","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32623:2925","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3826:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:3830:1839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:24:2379":{"id":"0:24:2379","crate_id":0,"name":"for_both","span":{"filename":"src/lib.rs","begin":[81,0],"end":[88,1]},"visibility":"public","docs":"Evaluate the provided expression for both [`Either::Left`] and [`Either::Right`].\n\nThis macro is useful in cases where both sides of [`Either`] can be interacted with\nin the same way even though the don't share the same type.\n\nSyntax: `either::for_both!(` *expression* `,` *pattern* `=>` *expression* `)`\n\n# Example\n\n```\nuse either::Either;\n\nfn length(owned_or_borrowed: Either<String, &'static str>) -> usize {\n    either::for_both!(owned_or_borrowed, s => s.len())\n}\n\nfn main() {\n    let borrowed = Either::Right(\"Hello world!\");\n    let owned = Either::Left(\"Hello world!\".to_owned());\n\n    assert_eq!(length(borrowed), 12);\n    assert_eq!(length(owned), 12);\n}\n```","links":{"`Either::Right`":"0:361:229","`Either`":"0:355:2353","`Either::Left`":"0:358:181"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! for_both {\n    ($value:expr, $pattern:pat => $result:expr) => { ... };\n}"}},"0:146:2400":{"id":"0:146:2400","crate_id":0,"name":"IntoEither","span":{"filename":"src/into_either.rs","begin":[14,0],"end":[62,1]},"visibility":"public","docs":"Provides methods for converting a type `Self` into either a [`Left`] or [`Right`]\nvariant of [`Either<Self, Self>`](Either).\n\nThe [`into_either`](IntoEither::into_either) method takes a [`bool`] to determine\nwhether to convert to [`Left`] or [`Right`].\n\nThe [`into_either_with`](IntoEither::into_either_with) method takes a\n[predicate function](FnOnce) to determine whether to convert to [`Left`] or [`Right`].","links":{"`Left`":"0:358:181","`bool`":"4:12386:420","IntoEither::into_either_with":"0:148:2940","`Right`":"0:361:229","FnOnce":"1:3461:143","IntoEither::into_either":"0:147:2399","Either":"0:355:2353"},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:147:2399","0:148:2940"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32623:2925","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:150"]}}},"0:328":{"id":"0:328","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1328,0],"end":[1346,1]},"visibility":"default","docs":"`Either` implements `Error` if *both* `L` and `R` implement it.\n\nRequires crate feature `\"use_std\"`","links":{},"attrs":["#[cfg(any(test, feature = \"use_std\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"1:3052:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"1:3052:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["description","source","type_id","cause","provide"],"trait":{"name":"Error","id":"1:3052:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:331:2402","0:332:2722","0:333:447"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13516:30873":{"id":"1:13516:30873","crate_id":1,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"1:13515:30872"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42390:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13552:34177":{"id":"1:13552:34177","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:13180:2381","str::split":"1:13543:3446","prim@char":"4:12388:476","`DoubleEndedIterator`":"1:8342:130","str::rsplit_terminator":"1:13555:34178"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:44309:8213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13186:3644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13611:2752":{"id":"1:13611:2752","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:13141:137","`FromStr`":"1:13140:3649"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42522:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:13140:3649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:13140:3649","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:23-0:361:229":{"id":"0:23-0:361:229","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[39,30],"end":[39,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::Either::Right","name":"Right","id":"0:361:229","glob":false}}},"1:13515:30872":{"id":"1:13515:30872","crate_id":1,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"1:13516:30873"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42390:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:402:480":{"id":"0:402:480","crate_id":0,"name":"clone","span":{"filename":"src/iterator.rs","begin":[18,9],"end":[18,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"IterEither","id":"0:395:2398","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2721:26441":{"id":"1:2721:26441","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:319":{"id":"0:319","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1302,0],"end":[1312,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Deref","id":"1:3420:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Deref","id":"1:3420:125","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"L"},"trait":{"name":"","id":"1:3420:125","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:3420:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:322:249","0:323:637"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:238:2659":{"id":"0:238:2659","crate_id":0,"name":"factor_err","span":{"filename":"src/lib.rs","begin":[985,4],"end":[990,5]},"visibility":"public","docs":"Factors out a homogenous type from an `Either` of [`Result`].\n\nHere, the homogeneous type is the `Err` type of the [`Result`].\n\n```\nuse either::*;\nlet left: Either<_, Result<String, u32>> = Left(Ok(vec![0]));\nassert_eq!(left.factor_err(), Ok(Left(vec![0])));\n\nlet right: Either<Result<Vec<u8>, u32>, _> = Right(Ok(String::new()));\nassert_eq!(right.factor_err(), Ok(Right(String::new())));\n```","links":{"`Result`":"1:42522:226"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:42522:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}}},{"type":{"generic":"E"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:411":{"id":"0:411","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1255,0],"end":[1255,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2960:77","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2960:77","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsMut","id":"1:2960:77","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:414:2441"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:168:2447":{"id":"0:168:2447","crate_id":0,"name":"as_pin_mut","span":{"filename":"src/lib.rs","begin":[289,4],"end":[301,5]},"visibility":"public","docs":"Convert `Pin<&mut Either<L, R>>` to `Either<Pin<&mut L>, Pin<&mut R>>`,\npinned projections of the inner variants.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"1:42514:2345","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Pin","id":"1:42514:2345","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"L"}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Pin","id":"1:42514:2345","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"R"}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:385:487":{"id":"0:385:487","crate_id":0,"name":"cmp","span":{"filename":"src/lib.rs","begin":[48,42],"end":[48,45]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"1:31382:196","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:276:2698":{"id":"0:276:2698","crate_id":0,"name":"read","span":{"filename":"src/lib.rs","begin":[1142,4],"end":[1144,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"4:3072:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13513:30868":{"id":"1:13513:30868","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"1:13515:30872","str::split_at_mut":"1:13514:30869"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13514:30869":{"id":"1:13514:30869","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:13513:30868","str::split_at_mut_checked":"1:13516:30873"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:69:2907":{"id":"0:69:2907","crate_id":0,"name":"find","span":{"filename":"src/iterator.rs","begin":[113,4],"end":[118,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["predicate",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42390:194","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8450:178","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3458:142","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8450:178","args":null}}}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13539:2915":{"id":"1:13539:2915","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:42392:191","prim@char":"4:12388:476","self::pattern":"1:13180:2381"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42390:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13186:3644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13186:3644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13201:9639","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13596:30304":{"id":"1:13596:30304","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12388:476","self::pattern":"1:13180:2381"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42390:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13186:3644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:291":{"id":"0:291","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1201,0],"end":[1221,1]},"visibility":"default","docs":"`Either<L, R>` implements `Write` if both `L` and `R` do.\n\nRequires crate feature `\"use_std\"`","links":{},"attrs":["#[cfg(any(test, feature = \"use_std\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Write","id":"4:3656:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Write","id":"4:3656:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["write_vectored","write_all_vectored","is_write_vectored","write_fmt","by_ref","write_all"],"trait":{"name":"Write","id":"4:3656:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:294:2714","0:295:2715","0:296:2716","0:297:2718"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:8311:2532":{"id":"1:8311:2532","crate_id":1,"name":"IntoIter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"I"}}}},"0:230":{"id":"0:230","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[949,0],"end":[968,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"1:42390:194","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Option","id":"1:42390:194","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:233:2651"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2716-0:395:2398":{"id":"b:1:2716-0:395:2398","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32623:2925","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2710:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterEither","id":"0:395:2398","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:2718:2947"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:332:2722":{"id":"0:332:2722","crate_id":0,"name":"description","span":{"filename":"src/lib.rs","begin":[1338,4],"end":[1340,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32681:3211-0:395:2398":{"id":"a:1:32681:3211-0:395:2398","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32681:3211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32681:3211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32681:3211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterEither","id":"0:395:2398","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13619:30798":{"id":"1:13619:30798","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1066:38509"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:333:447":{"id":"0:333:447","crate_id":0,"name":"cause","span":{"filename":"src/lib.rs","begin":[1343,4],"end":[1345,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42390:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"1:3052:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5711":{"id":"5:5711","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5712:34887","5:5713:9479","5:5716:34888","5:5719:34889","5:5727:34890","5:5728:34891","5:5729:3200","5:5730:30324","5:5731:30325"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:233:2651":{"id":"0:233:2651","crate_id":0,"name":"factor_none","span":{"filename":"src/lib.rs","begin":[962,4],"end":[967,5]},"visibility":"public","docs":"Factors out `None` from an `Either` of [`Option`].\n\n```\nuse either::*;\nlet left: Either<_, Option<String>> = Left(Some(vec![0]));\nassert_eq!(left.factor_none(), Some(Left(vec![0])));\n\nlet right: Either<Option<Vec<u8>>, _> = Right(Some(String::new()));\nassert_eq!(right.factor_none(), Some(Right(String::new())));\n```","links":{"`Option`":"1:42390:194"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"1:42390:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:46":{"id":"0:46","crate_id":0,"name":null,"span":{"filename":"src/iterator.rs","begin":[43,0],"end":[133,1]},"visibility":"default","docs":"`Either<L, R>` is an iterator if both `L` and `R` are iterators.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8450:178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8450:178","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"L"},"trait":{"name":"","id":"1:8450:178","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["partial_cmp_by","cloned","try_reduce","collect_into","flat_map","nth","enumerate","size_hint","step_by","min_by_key","eq_by","le","cycle","try_find","partition_in_place","ge","flatten","lt","peekable","fold","zip","max","by_ref","is_sorted","gt","array_chunks","take","rposition","is_partitioned","find_map","map_windows","collect","skip_while","max_by","intersperse","all","is_sorted_by","sum","skip","rev","try_fold","position","fuse","take_while","max_by_key","intersperse_with","ne","any","chain","is_sorted_by_key","product","unzip","try_for_each","inspect","partition","map_while","for_each","filter","min","next_chunk","count","eq","__iterator_get_unchecked","cmp_by","copied","map","reduce","cmp","try_collect","find","scan","last","filter_map","min_by","advance_by","partial_cmp"],"trait":{"name":"Iterator","id":"1:8450:178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"super::Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:49:173","0:50:1206","0:51:2896","0:52:2897","0:55:2900","0:57:584","0:58:2901","0:59:2902","0:60:2904","0:62:2906","0:65:308","0:67:327","0:69:2907","0:71:2910","0:74:2911"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:796:26445":{"id":"5:796:26445","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:25:2393":{"id":"0:25:2393","crate_id":0,"name":"try_left","span":{"filename":"src/lib.rs","begin":[113,0],"end":[120,1]},"visibility":"public","docs":"Macro for unwrapping the left side of an [`Either`], which fails early\nwith the opposite side. Can only be used in functions that return\n`Either` because of the early return of `Right` that it provides.\n\nSee also [`try_right!`] for its dual, which applies the same just to the\nright side.\n\n# Example\n\n```\nuse either::{Either, Left, Right};\n\nfn twice(wrapper: Either<u32, &str>) -> Either<u32, &str> {\n    let value = either::try_left!(wrapper);\n    Left(value * 2)\n}\n\nfn main() {\n    assert_eq!(twice(Left(2)), Left(4));\n    assert_eq!(twice(Right(\"ups\")), Right(\"ups\"));\n}\n```","links":{"`Either`":"0:355:2353","`try_right!`":"0:26:2396"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! try_left {\n    ($expr:expr) => { ... };\n}"}},"1:13524:34176":{"id":"1:13524:34176","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:44523:8219","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13522:26748":{"id":"1:13522:26748","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:13521:26669"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:44542:8221","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:249":{"id":"0:249","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1037,0],"end":[1056,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"generic":"L"},{"generic":"T"}]}},{"type":{"tuple":[{"generic":"R"},{"generic":"T"}]}}],"bindings":[]}}}},"items":["0:253:2679"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:361:229":{"id":"0:361:229","crate_id":0,"name":"Right","span":{"filename":"src/lib.rs","begin":[53,4],"end":[53,12]},"visibility":"default","docs":"A value of type `R`.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:363:1993"]},"discriminant":null}}},"1:13500:34173":{"id":"1:13500:34173","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32681:3211-0:355:2353":{"id":"a:1:32681:3211-0:355:2353","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32681:3211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32681:3211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32681:3211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:106:2902":{"id":"0:106:2902","crate_id":0,"name":"nth","span":{"filename":"src/iterator.rs","begin":[217,4],"end":[219,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42390:194","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8450:178","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:71:2910":{"id":"0:71:2910","crate_id":0,"name":"find_map","span":{"filename":"src/iterator.rs","begin":[120,4],"end":[125,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Option","id":"1:42390:194","args":{"angle_bracketed":{"args":[{"type":{"generic":"B"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3458:142","args":{"parenthesized":{"inputs":[{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8450:178","args":null}}}],"output":{"resolved_path":{"name":"Option","id":"1:42390:194","args":{"angle_bracketed":{"args":[{"type":{"generic":"B"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:324":{"id":"0:324","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1314,0],"end":[1322,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"DerefMut","id":"1:3433:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"DerefMut","id":"1:3433:2344","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"L"},"trait":{"name":"","id":"1:3420:125","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"1:3433:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:327:639"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13505:29492":{"id":"1:13505:29492","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:42392:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42390:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11313:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11313:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:107:2904":{"id":"0:107:2904","crate_id":0,"name":"collect","span":{"filename":"src/iterator.rs","begin":[221,4],"end":[226,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"B"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"B"},"bounds":[{"trait_bound":{"trait":{"name":"iter::FromIterator","id":"1:8293:146","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8450:178","args":null}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42484:3249-0:355:2353":{"id":"a:1:42484:3249-0:355:2353","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42484:3249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42484:3249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42484:3249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2993-0:395:2398":{"id":"b:1:2993-0:395:2398","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2966:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterEither","id":"0:395:2398","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:2995:841"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2999-0:355:2353":{"id":"b:1:2999-0:355:2353","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2973:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2969:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:3002:138","1:3003:1826"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:167:2444":{"id":"0:167:2444","crate_id":0,"name":"as_pin_ref","span":{"filename":"src/lib.rs","begin":[276,4],"end":[285,5]},"visibility":"public","docs":"Convert `Pin<&Either<L, R>>` to `Either<Pin<&L>, Pin<&R>>`,\npinned projections of the inner variants.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"1:42514:2345","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Pin","id":"1:42514:2345","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"L"}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Pin","id":"1:42514:2345","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"R"}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2504":{"id":"0:0:2504","crate_id":0,"name":"either","span":{"filename":"src/lib.rs","begin":[1,0],"end":[1519,1]},"visibility":"public","docs":"The enum [`Either`] with variants `Left` and `Right` is a general purpose\nsum type with two cases.\n\n[`Either`]: enum.Either.html\n\n**Crate features:**\n\n* `\"use_std\"`\nEnabled by default. Disable to make the library `#![no_std]`.\n\n* `\"serde\"`\nDisabled by default. Enable to `#[derive(Serialize, Deserialize)]` for `Either`\n","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/either/1/\")]","#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:22-0:358:181","0:23-0:361:229","0:355:2353","0:140-0:395:2398","0:152-0:146:2400","0:24:2379","0:25:2393","0:26:2396"],"is_stripped":false}}},"0:244":{"id":"0:244","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1016,0],"end":[1035,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"generic":"T"},{"generic":"L"}]}},{"type":{"tuple":[{"generic":"T"},{"generic":"R"}]}}],"bindings":[]}}}},"items":["0:248:2672"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:290:2712":{"id":"0:290:2712","crate_id":0,"name":"read_line","span":{"filename":"src/lib.rs","begin":[1192,4],"end":[1194,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"std::string::String","id":"5:7771:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"4:3072:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:164:2424":{"id":"0:164:2424","crate_id":0,"name":"right","span":{"filename":"src/lib.rs","begin":[224,4],"end":[229,5]},"visibility":"public","docs":"Convert the right side of `Either<L, R>` to an `Option<R>`.\n\n```\nuse either::*;\n\nlet left: Either<_, ()> = Left(\"some value\");\nassert_eq!(left.right(),  None);\n\nlet right: Either<(), _> = Right(321);\nassert_eq!(right.right(), Some(321));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"1:42390:194","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:128:2914":{"id":"0:128:2914","crate_id":0,"name":"rfold","span":{"filename":"src/iterator.rs","begin":[285,4],"end":[290,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["init",{"generic":"Acc"}],["f",{"generic":"G"}]],"output":{"generic":"Acc"},"c_variadic":false},"generics":{"params":[{"name":"Acc","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"G"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3458:142","args":{"parenthesized":{"inputs":[{"generic":"Acc"},{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8450:178","args":null}}}],"output":{"generic":"Acc"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:173:2467":{"id":"0:173:2467","crate_id":0,"name":"map_right","span":{"filename":"src/lib.rs","begin":[355,4],"end":[363,5]},"visibility":"public","docs":"Apply the function `f` on the value in the `Right` variant if it is present rewrapping the\nresult in `Right`.\n\n```\nuse either::*;\n\nlet left: Either<_, u32> = Left(123);\nassert_eq!(left.map_right(|x| x * 2), Left(123));\n\nlet right: Either<u32, _> = Right(123);\nassert_eq!(right.map_right(|x| x * 2), Right(246));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3461:143","args":{"parenthesized":{"inputs":[{"generic":"R"}],"output":{"generic":"S"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:272:1331":{"id":"0:272:1331","crate_id":0,"name":"poll","span":{"filename":"src/lib.rs","begin":[1125,4],"end":[1130,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"1:42514:2345","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}],["cx",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"core::task::Context","id":"1:14093:116","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"core::task::Poll","id":"1:45201:207","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:45176:151","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:123":{"id":"0:123","crate_id":0,"name":null,"span":{"filename":"src/iterator.rs","begin":[272,0],"end":[298,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedIterator","id":"1:8342:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedIterator","id":"1:8342:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["rfold","try_rfold","nth_back","advance_back_by","rfind"],"trait":{"name":"DoubleEndedIterator","id":"1:8342:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterEither","id":"0:395:2398","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:126:2912","0:127:2913","0:128:2914","0:131:2915"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:102:2900":{"id":"0:102:2900","crate_id":0,"name":"for_each","span":{"filename":"src/iterator.rs","begin":[202,4],"end":[207,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3458:142","args":{"parenthesized":{"inputs":[{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8450:178","args":null}}}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13491:1008":{"id":"1:13491:1008","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:12388:476"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:169:2453":{"id":"0:169:2453","crate_id":0,"name":"flip","span":{"filename":"src/lib.rs","begin":[314,4],"end":[319,5]},"visibility":"public","docs":"Convert `Either<L, R>` to `Either<R, L>`.\n\n```\nuse either::*;\n\nlet left: Either<_, ()> = Left(123);\nassert_eq!(left.flip(), Right(123));\n\nlet right: Either<(), _> = Right(\"some value\");\nassert_eq!(right.flip(), Left(\"some value\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"L"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:118:2910":{"id":"0:118:2910","crate_id":0,"name":"find_map","span":{"filename":"src/iterator.rs","begin":[257,4],"end":[262,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Option","id":"1:42390:194","args":{"angle_bracketed":{"args":[{"type":{"generic":"B"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3458:142","args":{"parenthesized":{"inputs":[{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8450:178","args":null}}}],"output":{"resolved_path":{"name":"Option","id":"1:42390:194","args":{"angle_bracketed":{"args":[{"type":{"generic":"B"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:127:2913":{"id":"0:127:2913","crate_id":0,"name":"nth_back","span":{"filename":"src/iterator.rs","begin":[281,4],"end":[283,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42390:194","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8450:178","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:121:2911":{"id":"0:121:2911","crate_id":0,"name":"position","span":{"filename":"src/iterator.rs","begin":[264,4],"end":[269,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["predicate",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42390:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3458:142","args":{"parenthesized":{"inputs":[{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8450:178","args":null}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:60:2904":{"id":"0:60:2904","crate_id":0,"name":"collect","span":{"filename":"src/iterator.rs","begin":[84,4],"end":[89,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"B"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"B"},"bounds":[{"trait_bound":{"trait":{"name":"iter::FromIterator","id":"1:8293:146","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8450:178","args":null}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:298":{"id":"0:298","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1223,0],"end":[1231,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Target","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2957:78","args":{"angle_bracketed":{"args":[{"type":{"generic":"Target"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2957:78","args":{"angle_bracketed":{"args":[{"type":{"generic":"Target"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2957:78","args":{"angle_bracketed":{"args":[{"type":{"generic":"Target"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:302:337"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13512:34175":{"id":"1:13512:34175","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:12394:1739","crate::ops::IndexMut":"1:3490:3071","str::slice_unchecked":"1:13511:34174"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13535:2907":{"id":"1:13535:2907","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:42392:191","prim@char":"4:12388:476","self::pattern":"1:13180:2381"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42390:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13186:3644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:273":{"id":"0:273","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1137,0],"end":[1157,1]},"visibility":"default","docs":"`Either<L, R>` implements `Read` if both `L` and `R` do.\n\nRequires crate feature `\"use_std\"`","links":{},"attrs":["#[cfg(any(test, feature = \"use_std\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Read","id":"4:3599:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Read","id":"4:3599:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["read_to_end","read_buf","bytes","take","read_to_string","read_buf_exact","read_vectored","chain","read_exact","is_read_vectored","by_ref"],"trait":{"name":"Read","id":"4:3599:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:276:2698","0:277:2700","0:278:2701","0:279:2702"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13532:30885":{"id":"1:13532:30885","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:12388:476","self::pattern":"1:13180:2381"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13186:3644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13186:3644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13201:9639","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:165:337":{"id":"0:165:337","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[242,4],"end":[247,5]},"visibility":"public","docs":"Convert `&Either<L, R>` to `Either<&L, &R>`.\n\n```\nuse either::*;\n\nlet left: Either<_, ()> = Left(\"some value\");\nassert_eq!(left.as_ref(), Left(&\"some value\"));\n\nlet right: Either<(), _> = Right(\"some value\");\nassert_eq!(right.as_ref(), Right(&\"some value\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"L"}}}},{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"R"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:314":{"id":"0:314","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1292,0],"end":[1300,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Target","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2960:77","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"Target"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2960:77","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"Target"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsMut","id":"1:2960:77","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"Target"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:318:2441"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5730:30324":{"id":"5:5730:30324","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:13616:30327"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7771:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:234":{"id":"0:234","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[970,0],"end":[991,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Result","id":"1:42522:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"E"}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Result","id":"1:42522:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"E"}}],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:238:2659"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:243:2665":{"id":"0:243:2665","crate_id":0,"name":"factor_ok","span":{"filename":"src/lib.rs","begin":[1008,4],"end":[1013,5]},"visibility":"public","docs":"Factors out a homogenous type from an `Either` of [`Result`].\n\nHere, the homogeneous type is the `Ok` type of the [`Result`].\n\n```\nuse either::*;\nlet left: Either<_, Result<u32, String>> = Left(Err(vec![0]));\nassert_eq!(left.factor_ok(), Err(Left(vec![0])));\n\nlet right: Either<Result<u32, Vec<u8>>, _> = Right(Err(String::new()));\nassert_eq!(right.factor_ok(), Err(Right(String::new())));\n```","links":{"`Result`":"1:42522:226"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:42522:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13567:30883":{"id":"1:13567:30883","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42390:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13186:3644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13186:3644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13201:9639","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2992:2645":{"id":"1:2992:2645","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2966:145"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:218:2599":{"id":"0:218:2599","crate_id":0,"name":"left_or_else","span":{"filename":"src/lib.rs","begin":[730,4],"end":[738,5]},"visibility":"public","docs":"Returns left value or computes it from a closure\n\n# Examples\n\n```\n# use either::*;\nlet left: Either<String, u32> = Left(\"3\".to_string());\nassert_eq!(left.left_or_else(|_| unreachable!()), \"3\");\n\nlet right: Either<String, u32> = Right(3);\nassert_eq!(right.left_or_else(|x| x.to_string()), \"3\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"generic":"L"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3461:143","args":{"parenthesized":{"inputs":[{"generic":"R"}],"output":{"generic":"L"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13494:34171":{"id":"1:13494:34171","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32622:237-0:355:2353":{"id":"a:1:32622:237-0:355:2353","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32622:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32622:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32622:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:381:1310":{"id":"0:381:1310","crate_id":0,"name":"partial_cmp","span":{"filename":"src/lib.rs","begin":[48,30],"end":[48,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"1:42390:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"1:31382:196","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:8308-0:395:2398":{"id":"b:1:8308-0:395:2398","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8450:178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8304:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterEither","id":"0:395:2398","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:8310:173","1:8311:2532","1:8312:966"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:220:2605":{"id":"0:220:2605","crate_id":0,"name":"right_or","span":{"filename":"src/lib.rs","begin":[756,4],"end":[761,5]},"visibility":"public","docs":"Return right value or given value\n\nArguments passed to `right_or` are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use\n[`right_or_else`][Self::right_or_else], which is lazily evaluated.\n\n# Examples\n\n```\n# use either::*;\nlet right: Either<&str, &str> = Right(\"right\");\nassert_eq!(right.right_or(\"foo\"), \"right\");\n\nlet left: Either<&str, &str> = Left(\"left\");\nassert_eq!(left.right_or(\"right\"), \"right\");\n```","links":{"Self::right_or_else":"0:222:2613"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["other",{"generic":"R"}]],"output":{"generic":"R"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:263:841":{"id":"0:263:841","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[1098,4],"end":[1103,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["r",{"resolved_path":{"name":"Result","id":"1:42522:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"L"}}],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13501:336":{"id":"1:13501:336","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:13502:30849","`u8`":"4:12407:1869"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13521:26669":{"id":"1:13521:26669","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:13522:26748"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:44533:8220","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:221:2609":{"id":"0:221:2609","crate_id":0,"name":"right_or_default","span":{"filename":"src/lib.rs","begin":[775,4],"end":[783,5]},"visibility":"public","docs":"Return right or a default\n\n# Examples\n\n```\n# use either::*;\nlet left: Either<String, u32> = Left(\"left\".to_string());\nassert_eq!(left.right_or_default(), u32::default());\n\nlet right: Either<String, u32> = Right(42);\nassert_eq!(right.right_or_default(), 42);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"R"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:3041:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13593:34188":{"id":"1:13593:34188","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12388:476","self::pattern":"1:13180:2381"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13186:3644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5712:34887":{"id":"5:5712:34887","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:306:3623","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:306:3623","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5719:34889":{"id":"5:5719:34889","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7771:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7771:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2719-0:355:2353":{"id":"b:1:2719-0:355:2353","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32623:2925","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2713:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:2721:26441"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:322:249":{"id":"0:322:249","crate_id":0,"name":"Target","span":{"filename":"src/lib.rs","begin":[1307,4],"end":[1307,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"L"},"trait":{"name":"Deref","id":"1:3420:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"0:225:2628":{"id":"0:225:2628","crate_id":0,"name":"unwrap_right","span":{"filename":"src/lib.rs","begin":[857,4],"end":[865,5]},"visibility":"public","docs":"Returns the right value\n\n# Examples\n\n```\n# use either::*;\nlet right: Either<(), _> = Right(3);\nassert_eq!(right.unwrap_right(), 3);\n```\n\n# Panics\n\nWhen `Either` is a `Left` value\n\n```should_panic\n# use either::*;\nlet left: Either<_, ()> = Left(3);\nleft.unwrap_right();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"R"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"core::fmt::Debug","id":"1:10411:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:795:7299":{"id":"5:795:7299","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:295:2715":{"id":"0:295:2715","crate_id":0,"name":"write_all","span":{"filename":"src/lib.rs","begin":[1210,4],"end":[1212,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"4:3072:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:797:26446":{"id":"5:797:26446","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42483:3250-0:355:2353":{"id":"a:1:42483:3250-0:355:2353","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:42483:3250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:42483:3250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42483:3250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:264":{"id":"0:264","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1108,0],"end":[1115,1]},"visibility":"default","docs":"Convert from `Either` to `Result` with `Right => Ok` and `Left => Err`.","links":{},"attrs":["#[allow(clippy::from_over_into)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2963:163","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Result","id":"1:42522:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"L"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:267:2645"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:248:2672":{"id":"0:248:2672","crate_id":0,"name":"factor_first","span":{"filename":"src/lib.rs","begin":[1029,4],"end":[1034,5]},"visibility":"public","docs":"Factor out a homogeneous type from an either of pairs.\n\nHere, the homogeneous type is the first element of the pairs.\n\n```\nuse either::*;\nlet left: Either<_, (u32, String)> = Left((123, vec![0]));\nassert_eq!(left.factor_first().0, 123);\n\nlet right: Either<(u32, Vec<u8>), _> = Right((123, String::new()));\nassert_eq!(right.factor_first().0, 123);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"tuple":[{"generic":"T"},{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:430:2441":{"id":"0:430:2441","crate_id":0,"name":"as_mut","span":{"filename":"src/lib.rs","begin":[1261,0],"end":[1265,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"::std::ffi::OsStr","id":"4:2084:197","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:323:637":{"id":"0:323:637","crate_id":0,"name":"deref","span":{"filename":"src/lib.rs","begin":[1309,4],"end":[1311,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:3420:125","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:162:2413":{"id":"0:162:2413","crate_id":0,"name":"is_right","span":{"filename":"src/lib.rs","begin":[191,4],"end":[193,5]},"visibility":"public","docs":"Return true if the value is the `Right` variant.\n\n```\nuse either::*;\n\nlet values = [Left(1), Right(\"the right value\")];\nassert_eq!(values[0].is_right(), false);\nassert_eq!(values[1].is_right(), true);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13549:30876":{"id":"1:13549:30876","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:13180:2381","`DoubleEndedIterator`":"1:8342:130","prim@char":"4:12388:476","str::split":"1:13543:3446"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:44277:8146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13186:3644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13186:3644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13201:9639","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2999-0:395:2398":{"id":"b:1:2999-0:395:2398","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2973:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2969:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterEither","id":"0:395:2398","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:3002:138","1:3003:1826"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:0:150-0:395:2398":{"id":"b:0:150-0:395:2398","crate_id":0,"name":null,"span":{"filename":"src/into_either.rs","begin":[64,0],"end":[64,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["into_either_with","into_either"],"trait":{"name":"IntoEither","id":"0:146:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterEither","id":"0:395:2398","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3247:3272-0:395:2398":{"id":"a:1:3247:3272-0:395:2398","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"1:3247:3272","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"1:3247:3272","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3247:3272","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterEither","id":"0:395:2398","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:318:2441":{"id":"0:318:2441","crate_id":0,"name":"as_mut","span":{"filename":"src/lib.rs","begin":[1297,4],"end":[1299,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"generic":"Target"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:148:2940":{"id":"0:148:2940","crate_id":0,"name":"into_either_with","span":{"filename":"src/into_either.rs","begin":[55,4],"end":[61,5]},"visibility":"default","docs":"Converts `self` into a [`Left`] variant of [`Either<Self, Self>`](Either)\nif `into_left(&self)` returns `true`.\nConverts `self` into a [`Right`] variant of [`Either<Self, Self>`](Either)\notherwise.\n\n# Examples\n\n```\nuse either::{IntoEither, Left, Right};\n\nfn is_even(x: &u8) -> bool {\n    x % 2 == 0\n}\n\nlet x = 0;\nassert_eq!(x.into_either_with(is_even), Left(x));\nassert_eq!(x.into_either_with(|x| !is_even(x)), Right(x));\n```","links":{"Either":"0:355:2353","`Right`":"0:361:229","`Left`":"0:358:181"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["into_left",{"generic":"F"}]],"output":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3461:143","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:93":{"id":"0:93","crate_id":0,"name":null,"span":{"filename":"src/iterator.rs","begin":[180,0],"end":[270,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8450:178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8450:178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["partial_cmp_by","cloned","try_reduce","collect_into","flat_map","nth","enumerate","size_hint","step_by","min_by_key","eq_by","le","cycle","try_find","partition_in_place","ge","flatten","lt","peekable","fold","zip","max","by_ref","is_sorted","gt","array_chunks","take","rposition","is_partitioned","find_map","map_windows","collect","skip_while","max_by","intersperse","all","is_sorted_by","sum","skip","rev","try_fold","position","fuse","take_while","max_by_key","intersperse_with","ne","any","chain","is_sorted_by_key","product","unzip","try_for_each","inspect","partition","map_while","for_each","filter","min","next_chunk","count","eq","__iterator_get_unchecked","cmp_by","copied","map","reduce","cmp","try_collect","find","scan","last","filter_map","min_by","advance_by","partial_cmp"],"trait":{"name":"Iterator","id":"1:8450:178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterEither","id":"0:395:2398","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:96:173","0:97:1206","0:98:2896","0:99:2897","0:102:2900","0:104:584","0:105:2901","0:106:2902","0:107:2904","0:109:2906","0:112:308","0:114:327","0:116:2907","0:118:2910","0:121:2911"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:3007:138":{"id":"1:3007:138","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32546:3025","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:297:2718":{"id":"0:297:2718","crate_id":0,"name":"flush","span":{"filename":"src/lib.rs","begin":[1218,4],"end":[1220,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"4:3072:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3828-0:395:2398":{"id":"b:1:3828-0:395:2398","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32623:2925","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3826:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterEither","id":"0:395:2398","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:3830:1839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:5964-0:355:2353":{"id":"b:5:5964-0:355:2353","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10416:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32623:2925","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5962:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["5:5966:1799"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:254":{"id":"0:254","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1058,0],"end":[1094,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:256:2683","0:257:1066"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:289:2710":{"id":"0:289:2710","crate_id":0,"name":"read_until","span":{"filename":"src/lib.rs","begin":[1188,4],"end":[1190,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["byte",{"primitive":"u8"}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"std::vec::Vec","id":"5:7184:264","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"4:3072:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:222:2613":{"id":"0:222:2613","crate_id":0,"name":"right_or_else","span":{"filename":"src/lib.rs","begin":[797,4],"end":[805,5]},"visibility":"public","docs":"Returns right value or computes it from a closure\n\n# Examples\n\n```\n# use either::*;\nlet left: Either<String, u32> = Left(\"3\".to_string());\nassert_eq!(left.right_or_else(|x| x.parse().unwrap()), 3);\n\nlet right: Either<String, u32> = Right(3);\nassert_eq!(right.right_or_else(|_| unreachable!()), 3);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"generic":"R"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3461:143","args":{"parenthesized":{"inputs":[{"generic":"L"}],"output":{"generic":"R"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13584:34183":{"id":"1:13584:34183","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13602:34189":{"id":"1:13602:34189","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12388:476","self::pattern":"1:13180:2381"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13186:3644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13186:3644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13201:9639","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13561:30880":{"id":"1:13561:30880","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:12388:476","str::splitn":"1:13558:30878","self::pattern":"1:13180:2381"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:44381:8149","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13186:3644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13186:3644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13201:9639","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:793-0:395:2398":{"id":"b:5:793-0:395:2398","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2732:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:789:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterEither","id":"0:395:2398","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["5:795:7299","5:796:26445","5:797:26446"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:386":{"id":"0:386","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[48,47],"end":[48,51]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hash","id":"1:10629:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hash","id":"1:10629:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:10629:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:389:883"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13570:2989":{"id":"1:13570:2989","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:13180:2381","`DoubleEndedIterator`":"1:8342:130","prim@char":"4:12388:476","str::rmatches":"1:13573:34179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:44463:8217","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13186:3644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13605:34190":{"id":"1:13605:34190","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12388:476","self::pattern":"1:13180:2381"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13186:3644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:378":{"id":"0:378","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[48,30],"end":[48,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::PartialOrd","id":"1:2808:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::PartialOrd","id":"1:2808:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["gt","ge","lt","le"],"trait":{"name":"PartialOrd","id":"1:2808:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:381:1310"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:62:2906":{"id":"0:62:2906","crate_id":0,"name":"partition","span":{"filename":"src/iterator.rs","begin":[91,4],"end":[97,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"tuple":[{"generic":"B"},{"generic":"B"}]},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"B"},"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:3041:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Extend","id":"1:8313:2893","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8450:178","args":null}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3458:142","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8450:178","args":null}}}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42484:3249-0:395:2398":{"id":"a:1:42484:3249-0:395:2398","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42484:3249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42484:3249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42484:3249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterEither","id":"0:395:2398","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:8312:966":{"id":"1:8312:966","crate_id":1,"name":"into_iter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"I"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:170:2460":{"id":"0:170:2460","crate_id":0,"name":"map_left","span":{"filename":"src/lib.rs","begin":[333,4],"end":[341,5]},"visibility":"public","docs":"Apply the function `f` on the value in the `Left` variant if it is present rewrapping the\nresult in `Left`.\n\n```\nuse either::*;\n\nlet left: Either<_, u32> = Left(123);\nassert_eq!(left.map_left(|x| x * 2), Left(246));\n\nlet right: Either<u32, _> = Right(123);\nassert_eq!(right.map_left(|x| x * 2), Right(123));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"M"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"M","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3461:143","args":{"parenthesized":{"inputs":[{"generic":"L"}],"output":{"generic":"M"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13573:34179":{"id":"1:13573:34179","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:13180:2381","`DoubleEndedIterator`":"1:8342:130","prim@char":"4:12388:476","str::matches":"1:13570:2989"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:44481:8218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13186:3644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13186:3644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13201:9639","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13589:34186":{"id":"1:13589:34186","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5731:30325":{"id":"5:5731:30325","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:13617:30328"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7771:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:308:337":{"id":"0:308:337","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[1277,4],"end":[1279,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"Target"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:57:584":{"id":"0:57:584","crate_id":0,"name":"count","span":{"filename":"src/iterator.rs","begin":[72,4],"end":[74,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:67:327":{"id":"0:67:327","crate_id":0,"name":"any","span":{"filename":"src/iterator.rs","begin":[106,4],"end":[111,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3458:142","args":{"parenthesized":{"inputs":[{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8450:178","args":null}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:399":{"id":"0:399","crate_id":0,"name":null,"span":{"filename":"src/iterator.rs","begin":[18,9],"end":[18,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"1:2732:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"1:2732:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2732:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterEither","id":"0:395:2398","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:402:480"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:268":{"id":"0:268","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1118,0],"end":[1131,1]},"visibility":"default","docs":"`Either<L, R>` is a future if both `L` and `R` are futures.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Future","id":"1:45176:151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Future","id":"1:45176:151","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"L"},"trait":{"name":"","id":"1:45176:151","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Future","id":"1:45176:151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:271:199","0:272:1331"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13896:965":{"id":"1:13896:965","crate_id":1,"name":"into_future","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoFuture","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"IntoFuture","id":"1:45179:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3247:3272-0:355:2353":{"id":"a:1:3247:3272-0:355:2353","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"1:3247:3272","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"1:3247:3272","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3247:3272","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3212:247-0:355:2353":{"id":"a:1:3212:247-0:355:2353","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3212:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3212:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3212:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:116:2907":{"id":"0:116:2907","crate_id":0,"name":"find","span":{"filename":"src/iterator.rs","begin":[250,4],"end":[255,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["predicate",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42390:194","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8450:178","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3458:142","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8450:178","args":null}}}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:253:2679":{"id":"0:253:2679","crate_id":0,"name":"factor_second","span":{"filename":"src/lib.rs","begin":[1050,4],"end":[1055,5]},"visibility":"public","docs":"Factor out a homogeneous type from an either of pairs.\n\nHere, the homogeneous type is the second element of the pairs.\n\n```\nuse either::*;\nlet left: Either<_, (String, u32)> = Left((vec![0], 123));\nassert_eq!(left.factor_second().1, 123);\n\nlet right: Either<(Vec<u8>, u32), _> = Right((String::new(), 123));\nassert_eq!(right.factor_second().1, 123);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"tuple":[{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},{"generic":"T"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:410:337":{"id":"0:410:337","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[1255,0],"end":[1255,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42483:3250-0:395:2398":{"id":"a:1:42483:3250-0:395:2398","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:42483:3250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:42483:3250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42483:3250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterEither","id":"0:395:2398","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13509:2448":{"id":"1:13509:2448","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11313:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11313:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:196:2519":{"id":"0:196:2519","crate_id":0,"name":"left_and_then","span":{"filename":"src/lib.rs","begin":[492,4],"end":[500,5]},"visibility":"public","docs":"Apply the function `f` on the value in the `Left` variant if it is present.\n\n```\nuse either::*;\n\nlet left: Either<_, u32> = Left(123);\nassert_eq!(left.left_and_then::<_,()>(|x| Right(x * 2)), Right(246));\n\nlet right: Either<u32, _> = Right(123);\nassert_eq!(right.left_and_then(|x| Right::<(), _>(x * 2)), Right(123));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3461:143","args":{"parenthesized":{"inputs":[{"generic":"L"}],"output":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}},{"type":{"generic":"R"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2989-0:355:2353":{"id":"b:1:2989-0:355:2353","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2966:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2963:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:2992:2645"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5713:9479":{"id":"5:5713:9479","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7771:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7771:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13186:3644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:438:2441":{"id":"0:438:2441","crate_id":0,"name":"as_mut","span":{"filename":"src/lib.rs","begin":[1266,0],"end":[1270,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"::std::ffi::CStr","id":"1:40923:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:367":{"id":"0:367","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[48,15],"end":[48,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:32624:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13623:9533":{"id":"1:13623:9533","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:5024:9533"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:44567:8122","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:126:2912":{"id":"0:126:2912","crate_id":0,"name":"next_back","span":{"filename":"src/iterator.rs","begin":[277,4],"end":[279,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42390:194","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8450:178","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:217:2593":{"id":"0:217:2593","crate_id":0,"name":"left_or_default","span":{"filename":"src/lib.rs","begin":[708,4],"end":[716,5]},"visibility":"public","docs":"Return left or a default\n\n# Examples\n\n```\n# use either::*;\nlet left: Either<String, u32> = Left(\"left\".to_string());\nassert_eq!(left.left_or_default(), \"left\");\n\nlet right: Either<String, u32> = Right(42);\nassert_eq!(right.left_or_default(), String::default());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"L"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:3041:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:79:2912":{"id":"0:79:2912","crate_id":0,"name":"next_back","span":{"filename":"src/iterator.rs","begin":[140,4],"end":[142,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42390:194","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8450:178","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:152-0:146:2400":{"id":"0:152-0:146:2400","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[146,0],"end":[146,38]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::into_either::IntoEither","name":"IntoEither","id":"0:146:2400","glob":false}}},"1:13520:3453":{"id":"1:13520:3453","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:44245:3176","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:256:2683":{"id":"0:256:2683","crate_id":0,"name":"into_inner","span":{"filename":"src/lib.rs","begin":[1070,4],"end":[1072,5]},"visibility":"public","docs":"Extract the value of an either over two equivalent types.\n\n```\nuse either::*;\n\nlet left: Either<_, u32> = Left(123);\nassert_eq!(left.into_inner(), 123);\n\nlet right: Either<u32, _> = Right(123);\nassert_eq!(right.into_inner(), 123);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:76":{"id":"0:76","crate_id":0,"name":null,"span":{"filename":"src/iterator.rs","begin":[135,0],"end":[161,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedIterator","id":"1:8342:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedIterator","id":"1:8342:130","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"L"},"trait":{"name":"","id":"1:8450:178","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["rfold","try_rfold","nth_back","advance_back_by","rfind"],"trait":{"name":"DoubleEndedIterator","id":"1:8342:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"super::Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:79:2912","0:80:2913","0:81:2914","0:84:2915"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:382":{"id":"0:382","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[48,42],"end":[48,45]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::Ord","id":"1:2802:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::Ord","id":"1:2802:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["max","min","clamp"],"trait":{"name":"Ord","id":"1:2802:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:385:487"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:337:811":{"id":"0:337:811","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[1353,4],"end":[1355,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10377:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10358:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13523:3447":{"id":"1:13523:3447","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:44513:3173","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:419":{"id":"0:419","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1256,0],"end":[1260,1]},"visibility":"default","docs":"Requires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2960:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"::std::path::Path","id":"4:5465:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2960:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"::std::path::Path","id":"4:5465:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsMut","id":"1:2960:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"4:5465:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:422:2441"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:228:2644":{"id":"0:228:2644","crate_id":0,"name":"either_into","span":{"filename":"src/lib.rs","begin":[937,4],"end":[946,5]},"visibility":"public","docs":"Convert the contained value into `T`\n\n# Examples\n\n```\n# use either::*;\n// Both u16 and u32 can be converted to u64.\nlet left: Either<u16, u32> = Left(3u16);\nassert_eq!(left.either_into::<u64>(), 3u64);\nlet right: Either<u16, u32> = Right(7u32);\nassert_eq!(right.either_into::<u64>(), 7u64);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2963:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2963:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:374":{"id":"0:374","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[48,26],"end":[48,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::Eq","id":"1:2771:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::Eq","id":"1:2771:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2771:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:206:989":{"id":"0:206:989","crate_id":0,"name":"iter_mut","span":{"filename":"src/lib.rs","begin":[589,4],"end":[597,5]},"visibility":"public","docs":"Mutably borrow the inner value as an iterator.\n\nThis requires the `Left` and `Right` iterators to have the same item type.\nSee [`factor_iter_mut`][Either::factor_iter_mut] to iterate different types.\n\n```\nuse either::*;\n\nlet mut left: Either<_, &mut [u32]> = Left(vec![2, 3]);\nfor l in left.iter_mut() {\n    *l *= *l\n}\nassert_eq!(left, Left(vec![4, 9]));\n\nlet mut inner = [4, 5];\nlet mut right: Either<Vec<u32>, _> = Right(&mut inner[..]);\nfor r in right.iter_mut() {\n    *r *= *r\n}\nassert_eq!(inner, [16, 25]);\n```","links":{"Either::factor_iter_mut":"0:213:2576"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"L"}}},"trait":{"name":"IntoIterator","id":"1:8304:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},{"type":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"R"}}},"trait":{"name":"IntoIterator","id":"1:8304:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"L"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8304:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}]}},{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"R"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8304:165","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"L"}}},"trait":{"name":"IntoIterator","id":"1:8304:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13546:26658":{"id":"1:13546:26658","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:12388:476","self::pattern":"1:13180:2381"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:12995:8143","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13186:3644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13579:34181":{"id":"1:13579:34181","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:13180:2381","`DoubleEndedIterator`":"1:8342:130","prim@char":"4:12388:476","str::match_indices":"1:13576:34180"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:44427:8216","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13186:3644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13186:3644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13201:9639","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13588:34185":{"id":"1:13588:34185","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:257:1066":{"id":"0:257:1066","crate_id":0,"name":"map","span":{"filename":"src/lib.rs","begin":[1085,4],"end":[1093,5]},"visibility":"public","docs":"Map `f` over the contained value and return the result in the\ncorresponding variant.\n\n```\nuse either::*;\n\nlet value: Either<_, i32> = Right(42);\n\nlet other = value.map(|x| x * 2);\nassert_eq!(other, Right(84));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Either","id":"0:355:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"M"}},{"type":{"generic":"M"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"M","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3461:143","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":{"generic":"M"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:278:2701":{"id":"0:278:2701","crate_id":0,"name":"read_to_end","span":{"filename":"src/lib.rs","begin":[1150,4],"end":[1152,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"std::vec::Vec","id":"5:7184:264","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"4:3072:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3830:1839":{"id":"1:3830:1839","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:40105:6692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13599:30886":{"id":"1:13599:30886","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12388:476","self::pattern":"1:13180:2381"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42390:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13186:3644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13186:3644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13201:9639","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:418:337":{"id":"0:418:337","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[1256,0],"end":[1260,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"::std::path::Path","id":"4:5465:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:191:2515":{"id":"0:191:2515","crate_id":0,"name":"either_with","span":{"filename":"src/lib.rs","begin":[470,4],"end":[479,5]},"visibility":"public","docs":"Like [`either`][Self::either], but provide some context to whichever of the\nfunctions ends up being called.\n\n```\n// In this example, the context is a mutable reference\nuse either::*;\n\nlet mut result = Vec::new();\n\nlet values = vec![Left(2), Right(2.7)];\n\nfor value in values {\n    value.either_with(&mut result,\n                      |ctx, integer| ctx.push(integer),\n                      |ctx, real| ctx.push(f64::round(real) as i32));\n}\n\nassert_eq!(result, vec![2, 3]);\n```","links":{"Self::either":"0:187:2504"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["ctx",{"generic":"Ctx"}],["f",{"generic":"F"}],["g",{"generic":"G"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[{"name":"Ctx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3461:143","args":{"parenthesized":{"inputs":[{"generic":"Ctx"},{"generic":"L"}],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"G"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3461:143","args":{"parenthesized":{"inputs":[{"generic":"Ctx"},{"generic":"R"}],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:58:2901":{"id":"0:58:2901","crate_id":0,"name":"last","span":{"filename":"src/iterator.rs","begin":[76,4],"end":[78,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"1:42390:194","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8450:178","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:360:1993":{"id":"0:360:1993","crate_id":0,"name":"0","span":{"filename":"src/lib.rs","begin":[51,9],"end":[51,10]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"generic":"L"}}}},"paths":{"1:22585:14704":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:11706:7677":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"11:2366:7944":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"5:7574:2532":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"18:689:7627":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:12028:7695":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"6:6473:6093":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"0:355:2353":{"crate_id":0,"path":["either","Either"],"kind":"enum"},"1:22759:14790":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1:41195:3556":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"4:11307:162":{"crate_id":4,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"16:5379:5049":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"5:7582:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:23262:26715":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"18:765:26432":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"4:5794:6247":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"16:7192:22174":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"11:1049:7931":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"4:10998:3172":{"crate_id":4,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"16:7282:7115":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:16832:4228":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"16:6159:7037":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:12749:7745":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:2937:3026":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"5:5150:3157":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:5450:5935":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"4:11536:33224":{"crate_id":4,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"5:3101:33869":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:10977:35564":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:15679:4649":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"16:7462:7864":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:14872:4416":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:10418:3422":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"1:39856:3083":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"4:5117:15106":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"4:9177:6554":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"1:3458:142":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"4:12403:902":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"17:13451:4145":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"9:445:21154":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"5:1595:7922":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:34262:3054":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"16:7075:22173":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:23296:6608":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"4:6736:7313":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:23433:6614":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"5:3339:7940":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"4:8578:15055":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"4:766:154":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"16:7907:5176":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"6:6564:6147":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:14560:4354":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:46465:6901":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"16:8298:7898":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:11926:4054":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"11:785:7922":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"6:6507:6117":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:42130:170":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"5:3347:7938":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:16297:4829":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:42514:2345":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:47050:6942":{"crate_id":1,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"6:5494:5958":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"16:7578:6560":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"4:12402:920":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"1:8260:3536":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:10422:3424":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:21897:30143":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"17:16159:4793":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:15777:4674":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"4:9318:30292":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:14001:4238":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"4:11289:6571":{"crate_id":4,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"14:7:7913":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:22583:15048":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:44985:8323":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:11971:7691":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"4:10949:8062":{"crate_id":4,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"16:7168:5098":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:8256:3537":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:41129:8189":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"4:892:3412":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"4:4346:15083":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"4:8493:3204":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"4:6885:8047":{"crate_id":4,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"1:22933:14785":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"11:708:7919":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:2802:195":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"1:44558:8177":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"5:7059:3632":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:22046:6588":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"5:4307:3157":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:12303:8153":{"crate_id":1,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"1:23951:236":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:44997:8326":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"4:3617:3166":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:23378:6609":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"5:2825:6488":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:12149:7709":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:41143:3553":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"6:6526:6119":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:44756:8232":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"16:5649:5052":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"5:5006:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:46273:6878":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:10418:22239":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:13491:4147":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"0:358:181":{"crate_id":0,"path":["either","Either","Left"],"kind":"variant"},"17:16714:4936":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"11:1884:2532":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"4:10743:3197":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"4:12409:1857":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"17:13592:4155":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"5:1395:7931":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:10629:153":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:38588:3061":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:42570:3412":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"17:13055:4036":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"16:8546:7904":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:15973:4727":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:2406:7645":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:14773:4406":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"16:8626:7912":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"5:6148:7977":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:12319:7727":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"5:3105:33868":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:44513:3173":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:11702:8147":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:43321:6844":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"4:11235:6553":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:44641:9651":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"6:5319:5875":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"4:4116:15057":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"16:4184:5025":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"5:3097:6485":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:16132:4781":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"4:12411:1845":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"17:14483:4344":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"16:8209:5001":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"16:7030:5075":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"16:6837:7835":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"4:4822:6337":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"4:879:3411":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"4:4566:8017":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:44973:8320":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"5:2377:8300":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"6:479:5425":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"6:5676:6033":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:32599:8172":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"17:15090:4454":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"16:7980:5009":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"16:3110:5016":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"4:11254:6570":{"crate_id":4,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"5:938:15002":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"17:11281:7662":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"6:6758:6230":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"1:45201:207":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"1:14116:3601":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"17:15148:4463":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"5:3809:35044":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:15286:4469":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"10:44:5339":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"1:30971:3618":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"11:328:8295":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"6:1727:5631":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"4:2081:198":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:34781:3058":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:44166:8208":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"16:2550:4973":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"5:6551:15141":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"14:31:7913":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"6:1514:5502":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:4861:3435":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"17:12736:7744":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:13610:4158":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:23400:6611":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"0:0:2504":{"crate_id":0,"path":["either"],"kind":"module"},"1:13201:9639":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:8313:2893":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"6:6902:6275":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:41173:3555":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"5:5561:15173":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:44309:8213":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"4:11272:6564":{"crate_id":4,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"1:3455:141":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"1:12270:8152":{"crate_id":1,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"1:42418:3411":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"10:36:5338":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"4:1905:8000":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"5:3095:33891":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"4:505:33222":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:42562:3411":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"5:7083:3633":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"5:6730:35044":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:10672:3416":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"4:2332:2702":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"4:3402:3198":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:12826:7748":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"18:670:7624":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"4:5726:8024":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"18:643:3874":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"4:9207:6555":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:0:568":{"crate_id":1,"path":["core"],"kind":"module"},"17:16362:4847":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:15714:4659":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"4:11727:7145":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"5:4172:35044":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:12409:22347":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"4:952:7935":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"4:9193:8085":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"4:10443:8414":{"crate_id":4,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"4:1930:8002":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"6:5088:5797":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:6611:6173":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:8766:3535":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:16750:4945":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"16:2880:4988":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:3254:3274":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"1:40966:3176":{"crate_id":1,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"17:14547:4353":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"6:4929:5726":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:15431:4582":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"16:2506:4971":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"5:7257:35071":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"4:8619:8301":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"14:160:7913":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:11777:7680":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"1:42296:26749":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:43360:5209":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:10778:7654":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"4:10517:114":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"4:5184:15111":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"4:680:7993":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"4:4826:6341":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"6:5648:6023":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:43835:6856":{"crate_id":1,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"4:10669:33217":{"crate_id":4,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"16:4120:5023":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:14358:4324":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:2969:258":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"4:4891:15085":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:322:7639":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:10031:22227":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"16:8096:7896":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:4883:3084":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"4:2479:15035":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:4604:7314":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"4:9576:8001":{"crate_id":4,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"1:10416:129":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"17:12371:4060":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:40703:8122":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:46422:6891":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:41230:3559":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"6:5057:5787":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"4:9201:2532":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"16:4404:5028":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"13:110:35543":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"18:573:3874":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:14640:4365":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:3273:3046":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:42184:9576":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:39892:3080":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"1:44218:7166":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"9:176:21221":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:11678:7675":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"6:1569:5535":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:6159:3552":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:47071:6943":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:32624:244":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:14612:4361":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"4:628:14982":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:41004:3691":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"1:13910:29986":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"5:1379:7874":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:44144:8206":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"4:4932:15076":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:11664:8146":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"16:7969:7893":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"11:1064:21235":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:3288:3068":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"6:4816:5654":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:10793:3899":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"1:44993:8325":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:34050:3050":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"18:651:3874":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"4:3566:3157":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"5:7794:3640":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:12995:8143":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:2052:6583":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"4:11337:6572":{"crate_id":4,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"16:7259:7113":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"6:5658:6024":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"17:12359:7731":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:12976:4113":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:11733:22276":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"1:22028:14702":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"5:3703:182":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"4:5465:203":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"1:46436:6892":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:13635:4159":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:10516:22242":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"4:3443:3193":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:23211:6596":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:10564:4014":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"16:908:7639":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"6:5593:5992":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:32613:8173":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"17:10442:22240":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:10332:22236":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"11:698:2532":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:3258:3043":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"6:7463:6357":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"16:3048:21308":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"6:5670:6031":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"6:6443:6083":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"11:2323:7930":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"14:202:3638":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"6:5420:5914":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"16:7949:5008":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:1838:3395":{"crate_id":1,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"14:220:5323":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"18:113:9243":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:12983:22373":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"6:532:5459":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:22452:6589":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:31024:3432":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:40976:3678":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:3659:147":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:38533:3060":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:2227:7644":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:12711:7742":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:16739:4944":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"17:11592:3995":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"4:1645:7940":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"16:7765:5156":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"4:8667:6326":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:42870:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:41073:3540":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"6:7487:6370":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:23309:7152":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:44691:8230":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:10426:206":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"17:14796:4407":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:32623:2925":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"1:44989:8324":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"16:6440:22169":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"16:2435:21306":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"4:10986:6567":{"crate_id":4,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"6:564:5476":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:44708:8231":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"6:5069:5796":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"10:0:3014":{"crate_id":10,"path":["adler"],"kind":"module"},"1:14136:3598":{"crate_id":1,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"1:2963:163":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"4:8218:7142":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"17:15665:4648":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"4:6055:8032":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"6:4997:5756":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"4:10979:140":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"1:4795:8310":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:47470:6985":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"6:6823:6249":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:23071:7318":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"5:7691:3672":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:44186:8210":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:21973:15048":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"16:2620:4976":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"11:1920:7941":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:16145:4787":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"16:7495:7867":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:44409:8215":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"4:0:1731":{"crate_id":4,"path":["std"],"kind":"module"},"1:9872:85":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"11:2545:5334":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"4:994:7929":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:10487:22241":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"1:7786:9278":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:3343:3057":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:3654:254":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"11:740:7920":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:15689:4650":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:43348:6852":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"17:13119:4121":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"16:2900:4989":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:13547:7778":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"4:4928:15073":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"4:11111:33227":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:16595:4196":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"6:4990:5753":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:4852:9543":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:15829:4688":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"4:8689:6535":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:23189:26686":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:1220:7642":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"4:3445:3194":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"16:6738:35557":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"6:5629:6014":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"1:42648:97":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"5:7510:2532":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"16:2990:4993":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:13041:7768":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"4:11752:8305":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"4:10377:8103":{"crate_id":4,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"16:5318:5047":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"4:3400:3197":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"6:7368:6326":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:10424:3425":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"11:2121:7874":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"5:7618:2532":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"16:6188:7788":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"16:2840:4986":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"5:4536:3157":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:44542:8221":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:2612:9495":{"crate_id":1,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"6:8261:6459":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"4:677:7991":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:16332:4842":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"0:361:229":{"crate_id":0,"path":["either","Either","Right"],"kind":"variant"},"1:4068:2532":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"5:1548:3412":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:10534:4012":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:44327:8214":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:3438:3065":{"crate_id":1,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"6:6544:6131":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:44551:8162":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:4573:8125":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:40778:8175":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:46518:6904":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"4:971:15001":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"4:5672:114":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"9:53:21172":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:42946:98":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:14019:4239":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:43414:138":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"17:16341:4844":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:12673:7736":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:11313:239":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"6:5586:5990":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"6:5405:5908":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"4:5009:15072":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:15939:4719":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:26351:267":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"4:9251:15135":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"4:11129:33221":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:16209:4806":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:3207:118":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:3263:3048":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:11460:3411":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:10803:3176":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"4:8484:3202":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"16:6042:4998":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:46843:6935":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"5:1223:9268":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"4:1867:7998":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"1:2082:1373":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"4:11975:30434":{"crate_id":4,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"11:881:7929":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:15905:4706":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"4:11701:8051":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:40815:8177":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"5:4337:3157":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:23477:6618":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"6:6534:6124":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:8450:178":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:10037:811":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"16:6502:21278":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"4:11907:8013":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:41379:3175":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:42318:7165":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"4:11123:33207":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"16:5348:5048":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:4465:110":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"4:3665:30550":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:5131:7652":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"4:8644:6534":{"crate_id":4,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"17:11553:7671":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:16036:4743":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"18:491:7613":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"5:1424:7934":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:14375:4327":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"16:7416:7854":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"4:10534:30413":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"4:597:7990":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:5094:9553":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:16179:4799":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:15136:4110":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:16385:4851":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"4:8531:3174":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"9:328:5375":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"6:5311:5871":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:22034:14705":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:15602:4634":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"5:5565:15174":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"6:5488:5956":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"17:15981:4728":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"16:7386:5118":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"11:396:9260":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:5428:5919":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:12066:4056":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"6:517:5450":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:16264:4822":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"6:1643:5591":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:8760:3413":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"4:9415:187":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:15946:4720":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:22809:28326":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"17:12952:7762":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"5:7540:7982":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:14152:4275":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:12962:22372":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"16:7959:7892":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:47344:6979":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"16:6144:22167":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"6:5007:5763":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:10831:29307":{"crate_id":1,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"6:5349:5881":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"4:12174:8873":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"6:7604:6435":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"14:0:3017":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"14:187:21249":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:11401:4030":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:8069:3523":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"17:15475:4613":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:32711:3275":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"14:40:4193":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"6:5025:5772":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:12687:7740":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:15953:4721":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:31003:3619":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:14127:4271":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"16:2796:4984":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:15010:4446":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:10358:226":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"5:3318:33903":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:42212:6838":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"6:6623:6180":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:6748:6223":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"1:47148:6975":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:3503:7649":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:14997:4445":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:44005:8200":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"5:7735:3676":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"6:4896:5707":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:13757:4192":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:11124:35570":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"16:4929:5035":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"4:11049:30301":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"14:214:7917":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:46547:6905":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:3285:3067":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"17:16668:4923":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"6:6521:6118":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"4:5620:8021":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"18:706:7630":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"15:327:21264":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:43595:3419":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:47580:6998":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"16:8043:35551":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"11:0:3015":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"6:4970:5742":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"4:1106:7931":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"11:798:3628":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:12550:4095":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:4731:8127":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"4:10740:3195":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"16:7716:35556":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:16283:4827":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:23422:6613":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"4:4146:15059":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"5:2182:7956":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"17:667:4002":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:23466:6617":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"6:5603:5997":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"5:3277:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:11771:8150":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:10938:35565":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"4:6942:233":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"11:1674:8870":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"4:8567:8074":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:10058:28396":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:5295:5864":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"5:6900:35044":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:44074:8203":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:14055:4244":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"4:9346:8093":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:15731:4664":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:11484:3412":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:10663:4017":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:14586:4357":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"4:3674:2350":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"1:46378:6888":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:1339:7643":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:40008:215":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:11743:8148":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"4:1869:7999":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"4:378:7986":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:41214:3558":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"16:6302:7052":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:11075:35566":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:22848:14792":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"6:5622:6011":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:16311:4836":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:10246:22233":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"6:8249:6457":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:13193:7773":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"17:14859:4415":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"4:7325:8959":{"crate_id":4,"path":["std","sys","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"16:6914:7098":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:15496:4618":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:15785:4676":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"4:6590:186":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"4:8092:15022":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"16:7838:22177":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"11:830:7935":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"6:4964:5740":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:42483:3250":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"6:5412:1258":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"6:6493:6106":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"4:8191:3951":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"1:39968:210":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"4:4110:15058":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:3041:124":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"4:961:7920":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:14507:4345":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"16:7212:7853":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"16:8151:5013":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:16171:4796":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"11:1725:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:21909:30143":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"4:12006:33205":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"18:754:7637":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"18:680:7625":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"5:7518:7981":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:16026:4738":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:12869:4145":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"16:3587:5020":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"4:10960:7143":{"crate_id":4,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"1:38643:3062":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"4:9746:30416":{"crate_id":4,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"4:2242:129":{"crate_id":4,"path":["std","ffi","os_str","Display"],"kind":"struct"},"1:2146:9509":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"9:422:21156":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"6:6708:6213":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"1:22142:15048":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"4:6696:3524":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"1:32546:3025":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:1969:3157":{"crate_id":1,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"4:2645:3187":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:7548:6413":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"16:8121:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"6:6411:6065":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"4:8663:8079":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"16:6173:7040":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:3433:2344":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"4:5103:15105":{"crate_id":4,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"4:8044:4066":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"1:42474:3246":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"5:1625:7920":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"6:5641:6020":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"4:11007:33137":{"crate_id":4,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"6:6659:6194":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"18:589:3882":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"11:2420:2532":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"17:14533:4068":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"4:3493:3182":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"4:8561:3173":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"6:5482:5955":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:13222:22243":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:46258:6877":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"4:8554:3177":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"17:16241:4821":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:39990:212":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:12293:7722":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"5:3373:7941":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:42409:173":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"1:8342:130":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:45315:8242":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"4:12395:1829":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"17:12931:4110":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"5:1496:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"6:553:5471":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"6:5044:5783":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:7361:6322":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:11864:7688":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"4:9140:199":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"1:47402:6981":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"4:9339:8092":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:15641:4643":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"16:8066:22178":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:11515:7669":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:15106:4456":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"7:79:21148":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:16008:4735":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:2596:679":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"5:7759:7983":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"18:726:3897":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:23488:6619":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"17:16812:4956":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"17:14917:4425":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:4365:3157":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"5:1011:3411":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"4:1617:3411":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"6:5117:5799":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"4:9741:8061":{"crate_id":4,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"16:8565:7907":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:2378:22302":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:12881:8156":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"6:1589:5549":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"11:835:7923":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:13983:4230":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:11475:22257":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"6:8031:6455":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:40902:8181":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"struct"},"4:9392:6563":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:11818:7686":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"6:5635:6017":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"4:12406:895":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"16:6205:22168":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"5:894:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:2766:201":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:13970:4229":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:317:7638":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:39953:213":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"6:5288:5862":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:15549:4624":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"16:6064:5000":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"16:6749:5065":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"16:4873:5033":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"4:6817:15131":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"4:12387:1188":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"11:1140:7933":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"16:8669:5174":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:23289:8316":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:41612:3526":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:3826:71":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"17:13006:4118":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"16:7372:5005":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"6:586:5488":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"6:1551:5525":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"16:6852:7095":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:42685:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"4:11066:6554":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"17:12306:7724":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"6:5230:5829":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:2771:135":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"4:2715:3188":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:12727:2751":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:5570:5985":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:23455:6616":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"1:41111:3550":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:3093:3150":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"4:3848:15056":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:46179:6868":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"5:1614:7919":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:43088:3422":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:43642:8198":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"6:5441:5929":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:15121:4460":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:6273:3542":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"4:3910:8011":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:40788:7158":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:33153:3045":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:46393:6889":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"16:6256:7045":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:13958:4228":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"4:4338:9272":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"16:8223:7897":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:12648:4100":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:16084:4780":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:42370:6840":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:46194:6871":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"4:1639:7939":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:12082:7703":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"4:532:14967":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"6:7350:6317":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:10677:3417":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:11998:7693":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:40994:3692":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"5:1794:35044":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:44176:8209":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"5:5825:3632":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"5:798:119":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"16:6998:7839":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:44576:8176":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:10729:4019":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:12711:8154":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"4:1982:3145":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"6:5224:5826":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:46600:6908":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:15:2714":{"crate_id":1,"path":["core","write"],"kind":"macro"},"6:7586:6432":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"16:6368:7062":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:23203:6595":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"11:854:7926":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"4:11381:8117":{"crate_id":4,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"11:2349:7931":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"1:42759:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:12840:7752":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"18:635:3893":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"5:3313:7939":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:10063:30179":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"16:6781:5068":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"4:4015:8013":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:47490:6987":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:40028:214":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"4:8796:3661":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"17:15760:4671":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"6:6419:6067":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:47618:7000":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:41082:3541":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:13822:3033":{"crate_id":1,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"1:42833:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"16:6822:22171":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"1:45242:3600":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:41627:3528":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"16:7883:5175":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"16:5449:5051":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"4:5274:8019":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:10784:7655":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"5:7869:3627":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:23124:6590":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:12044:7701":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:9401:3247":{"crate_id":1,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"4:7946:33211":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"18:531:7614":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:32622:237":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:40954:3674":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"6:4914:5719":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:39277:3064":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:46209:6872":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:506:3957":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:10167:22231":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"16:2660:4978":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"4:9305:116":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"4:1097:7930":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"6:1584:5547":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"9:0:3013":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"6:8302:6468":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:12920:7760":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:5367:988":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:824:190":{"crate_id":1,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"1:2936:15048":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"4:8196:8061":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"16:6890:4996":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"6:6680:6200":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:42522:226":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"1:22464:30149":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:45176:151":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"16:2570:4974":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:3293:3069":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"4:8271:3189":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"18:538:3879":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:11617:7661":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:45276:180":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"5:5962:251":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:16613:4206":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"17:13322:22245":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:15963:4724":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"4:12404:908":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"1:4453:8124":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:15351:4520":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"11:2533:5332":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"4:6424:8033":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:5266:438":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"17:15852:4691":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"11:671:3411":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"6:5217:5825":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:13157:7770":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"17:14807:4409":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:44084:8204":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"4:8731:15115":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:47225:6976":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:12941:8160":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:14405:4330":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"4:4812:15062":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:47270:6977":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:15887:4702":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:42505:3590":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"4:8250:8006":{"crate_id":4,"path":["std","hash","random","RandomState"],"kind":"struct"},"11:1085:35540":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:13361:4141":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"4:3307:8563":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"0:24:2379":{"crate_id":0,"path":["either","for_both"],"kind":"macro"},"5:7747:3677":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:41060:3174":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:44886:8166":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"4:4677:15085":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"6:8343:6478":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"6:7469:6359":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:5387:5896":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"18:735:26431":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:44677:8227":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"6:7391:6344":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:21926:30145":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:16786:4952":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"1:22891:15048":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"17:13095:4120":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"1:3665:3076":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"6:4875:5698":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"4:12399:747":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"6:6449:6084":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:22026:15048":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"6:7316:6298":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"6:1690:5618":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:44834:9652":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:2045:678":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"1:31035:26685":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"4:7796:8960":{"crate_id":4,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"1:44567:8122":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:14933:4426":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"16:4241:5026":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"0:25:2393":{"crate_id":0,"path":["either","try_left"],"kind":"macro"},"1:45292:7173":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:43331:3432":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"17:11539:4036":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"5:4569:3157":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"11:1893:3626":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"4:8884:3411":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"6:1539:5516":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"4:573:14972":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"5:3465:3626":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:32588:8171":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"5:1533:3411":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:7720:3547":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"11:1914:7940":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"18:80:9239":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:15315:4489":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:2437:7648":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:10928:7657":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"4:9287:6559":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:6977:8312":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"5:7676:15000":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"16:7731:3245":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"4:3310:8564":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"16:903:7638":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"1:2973:257":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"4:12392:335":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"9:355:21169":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"4:8021:8058":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"16:8014:5011":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"6:8199:6456":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:13266:22244":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:12216:7714":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"4:8834:3663":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"4:7384:33209":{"crate_id":4,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"4:9447:8050":{"crate_id":4,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"16:2530:4972":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"4:9455:162":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"16:6462:22170":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"6:6480:6097":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:15836:4689":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"16:8105:5182":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"16:2860:4987":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"11:2495:21231":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"1:23247:26722":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:23139:8313":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"6:7539:6410":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:14947:4428":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:13145:7769":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"5:7501:3622":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:14269:4304":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:21975:14706":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"4:12415:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"6:5036:5778":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:16632:4916":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"5:3716:3411":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:16218:4808":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"4:3536:3203":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"16:896:7779":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"1:39940:3072":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:40048:216":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"6:4947:5734":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:3205:3269":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"6:4957:5737":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:40923:107":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"4:902:2532":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"4:910:7921":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"4:8612:8014":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:11691:7676":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:16019:4736":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"16:5255:5045":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"4:9432:234":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"4:6871:8043":{"crate_id":4,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"4:12414:1435":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"16:7990:7894":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"4:2790:3190":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"4:988:7928":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"5:7784:3639":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"16:2467:4964":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:15077:4453":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:41024:3206":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"5:6116:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"6:5301:5867":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:10411:120":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"1:44523:8219":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"16:6904:7837":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"6:1675:5609":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"16:4956:5036":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"6:5551:5977":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"6:5541:5971":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"16:3141:3902":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"6:5562:5983":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"16:8137:5012":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"6:8330:6474":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"18:515:3877":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"4:5640:8022":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"16:7044:5002":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"4:6217:220":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"6:5334:5879":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"4:8748:3660":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"1:44205:3647":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"5:1410:7930":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"6:6700:6209":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"4:6300:33213":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"6:8008:6442":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:41244:3560":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:11309:7663":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:13169:7771":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"1:41051:3539":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"16:5172:5042":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:13805:8167":{"crate_id":1,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"1:23320:9432":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"18:608:7617":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:22721:14789":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"16:6970:4997":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"4:8201:8062":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:12537:7733":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"4:4824:6339":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"4:11713:6579":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:14902:4421":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"4:4930:15075":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"11:1880:3411":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"5:4377:3411":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"4:8638:8074":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"18:481:7612":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:8804:28400":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:13195:7630":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"16:6421:7065":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:14140:4272":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:46407:6890":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:15540:4623":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"4:12391:1329":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"1:11785:8151":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"16:7508:7870":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"16:5085:5039":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:43081:3423":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:46699:6913":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:14832:4412":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"6:4902:5710":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"16:3834:5022":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:3854:7651":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"5:2304:8297":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:46649:6911":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"6:1667:5608":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:2960:77":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"4:8630:8077":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"11:430:9262":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"6:5186:5806":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"4:4230:15067":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:23178:7151":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:11851:7687":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"4:2751:3179":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:12570:7735":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:43376:26698":{"crate_id":1,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"1:13254:9645":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"4:5976:8026":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"4:6527:220":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:4652:3433":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"17:13537:4110":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"4:8502:3172":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"1:3644:3074":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:14393:4328":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"11:2380:3411":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"17:11291:35563":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:43852:8140":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:43620:157":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:13082:7661":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"4:9437:235":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"4:2493:15039":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"1:42168:6831":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:16822:4223":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"17:11065:7659":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"4:7834:8963":{"crate_id":4,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"17:15036:4448":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"4:957:7919":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:36657:3059":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:46326:6885":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:38698:3063":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"4:12389:1891":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"1:23389:6610":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"4:4208:15063":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:13570:22247":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"4:9442:8049":{"crate_id":4,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"17:11016:7658":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"4:9428:3157":{"crate_id":4,"path":["std","sync","poison","Guard"],"kind":"struct"},"7:0:1921":{"crate_id":7,"path":["unwind"],"kind":"module"},"4:9266:15137":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"4:2551:2347":{"crate_id":4,"path":["std","io"],"kind":"module"},"4:7808:8961":{"crate_id":4,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"17:12860:7757":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:13945:4226":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"6:5282:5859":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:6982:8311":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:33577:3047":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:13349:7775":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:42434:2532":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"5:1636:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:12018:7694":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"6:7332:6310":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:5689:5053":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"5:1898:3626":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:22783:15048":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"11:102:8290":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:43603:8196":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:16656:4921":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"1:22:826":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"16:7471:5123":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:6971:3544":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"5:7853:3626":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:16775:4950":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"5:3729:3412":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"6:1703:5622":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:6462:6085":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"4:8819:3662":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"11:2559:5336":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:33983:3051":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"4:8006:6491":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"4:9491:8096":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:11653:4040":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"4:4359:9273":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"4:7891:4002":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:11222:7661":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:41618:3203":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:5151:5802":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:30741:9403":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"17:11503:4035":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"16:5282:5046":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:13798:4196":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"16:5224:5044":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:13554:4150":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"17:15739:4667":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:41254:3546":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"16:8028:5178":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:45009:6570":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:44065:8202":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"11:2440:3628":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"6:5127:5800":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"5:7550:7133":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"1:41101:134":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"4:1489:156":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"11:873:7928":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:47516:6989":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:11902:4052":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"6:5255:5842":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:12204:7713":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"6:6631:6181":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:22797:14791":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"17:15160:4467":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"6:1500:5497":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:44481:8218":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:13781:4193":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"6:1521:5505":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:14327:4317":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:12897:7759":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:15586:4631":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:46678:6912":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:12816:4107":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"4:6479:7312":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:15573:4626":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"16:6269:7046":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"16:6640:7802":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"1:4441:8123":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:4792:5637":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"4:8208:6493":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"4:8358:8068":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"6:6740:6222":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"4:9359:6560":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:12108:7706":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:42426:3412":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"1:46805:6933":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"4:9185:3411":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:15989:4730":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:16701:4930":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"5:735:7946":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:13209:138":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:12787:4102":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"6:7518:6396":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:13890:4218":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"6:1711:5626":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"4:4777:15103":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:14750:4397":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"16:8503:5233":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"16:6084:7780":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:40861:8179":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"11:488:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:10966:29306":{"crate_id":1,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"1:33916:3053":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:47423:6982":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:10296:22235":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"16:6953:7100":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:12851:7756":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"18:613:35574":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"16:5727:4012":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:42722:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"16:4694:5029":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:40098:3075":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"5:7093:3634":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"17:11788:7682":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"4:8026:6492":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"1:44131:3538":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:44363:8148":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"4:5983:8030":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"9:236:3661":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"16:2684:4979":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"6:4976:5745":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:34117:3052":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:11421:7664":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:10843:4022":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"11:1023:7930":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:44235:8211":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:43095:3424":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:12798:22371":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:13427:4143":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"17:14652:4366":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:40291:9516":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:13845:3553":{"crate_id":1,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"17:13838:4207":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"4:12413:1931":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"17:15024:4447":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:44277:8146":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"11:2148:7931":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:32606:3434":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"5:898:7947":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"6:8319:6473":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"16:6866:22172":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"4:10969:6493":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"4:4888:15107":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"6:523:5453":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:14573:4356":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:12906:4109":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:40822:9559":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"16:6794:7834":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"5:1239:33896":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"4:9224:6556":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:34435:3055":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"16:4267:5027":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"16:6658:7812":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:32592:5174":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"1:2966:145":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:47021:6941":{"crate_id":1,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"1:3217:3270":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"1:44868:7167":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"6:5265:5848":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:44105:6857":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"16:2920:4990":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"5:7232:35067":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"6:4881:5700":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"5:0:309":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:12762:7746":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"6:485:5428":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"11:2301:7874":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"17:11606:4047":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"4:10746:3193":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"16:2820:4985":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"4:9473:6564":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"1:41120:3551":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:13028:7767":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"6:1597:5554":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:10549:4013":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:4:1271":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"1:44820:8233":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:44157:8207":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:13205:7774":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"7:32:21141":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"16:2950:4991":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:12695:9606":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"16:5060:5038":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"5:2357:35516":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:44533:8220":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:14335:4319":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:13818:4206":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"4:7415:8872":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"16:5709:22166":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"4:8541:3175":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"17:14963:4432":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:21924:30147":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"16:8585:7908":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"16:3308:4961":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"6:6876:6260":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:13290:3971":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:42909:91":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"16:7938:7889":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:45005:8328":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:43102:3425":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:41205:3557":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"6:5165:5803":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:46311:6884":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"5:5516:35044":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:23444:6615":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"4:2505:15045":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"5:4217:3412":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"6:8353:6480":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:4921:5723":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"4:11846:8011":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:45303:6867":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"4:1115:7934":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"8:0:3012":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"16:2966:4992":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:22430:14708":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"6:6599:6168":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:41031:3538":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"6:6777:6233":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"1:40709:8174":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:41603:3524":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"12:0:3016":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"6:8255:6458":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:4722:221":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"4:936:3628":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"4:10944:8304":{"crate_id":4,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"1:44845:8234":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"6:4937:5728":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:12056:4055":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:42390:194":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"16:6876:5072":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"4:3072:226":{"crate_id":4,"path":["std","io","error","Result"],"kind":"type_alias"},"4:8005:15048":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"11:2539:5333":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"6:5196:5813":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:2957:78":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"17:14099:4261":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"6:6723:6218":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"17:16198:4805":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"5:7560:33910":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"4:8086:14987":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:40807:8122":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:13909:4219":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:33365:3044":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:3247:3272":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"1:13962:3031":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"16:7424:22175":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"11:2551:35541":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"4:12355:30578":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:21955:30151":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"4:4222:15065":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"4:3347:3195":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"5:6811:2532":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"4:12407:1869":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"1:46241:6876":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"4:4699:15086":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"16:6123:4999":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:32713:115":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"17:11630:4038":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:4488:9534":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"16:6337:7056":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:10430:3427":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:47657:7015":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:5241:5836":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:22425:15048":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"1:3052:138":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"17:13692:4169":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"18:521:26433":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:15439:4583":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"16:6389:7789":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"4:5351:204":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"16:5198:5043":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"4:7820:8962":{"crate_id":4,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"17:16377:4848":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"6:5381:5893":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:5682:6036":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"6:7563:6420":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"4:1628:3626":{"crate_id":4,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"1:2808:202":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:13180:2381":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"1:9551:3644":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"16:7542:7873":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:14975:4434":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"16:7016:7846":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"4:2084:197":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:13181:7772":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"1:46826:6934":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:44977:8321":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:12135:7708":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:2148:9510":{"crate_id":1,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"4:5855:220":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"4:9236:15136":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:11527:7670":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:10823:4021":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:16761:4946":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"1:22154:6588":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:42578:2532":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"5:6532:15140":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"18:96:9240":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"6:6672:6198":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"16:7521:7116":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"4:8901:3666":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"5:5309:7977":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"11:351:9255":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:46361:6887":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:16684:4928":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"17:15769:4672":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:5271:5851":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:14627:4364":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"16:6588:5062":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"16:546:7293":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"4:3349:3196":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:14738:4394":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:11757:8149":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:15812:4680":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:46632:6910":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:15655:4647":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"6:8273:6461":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:11026:35567":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"6:5341:5880":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"4:5094:15104":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:15050:4449":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"4:11963:6580":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"1:43632:3661":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"5:4506:35053":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:16494:4178":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"1:44463:8217":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"5:789:250":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"4:12394:1739":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"5:1645:7952":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"6:4984:5750":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"4:5862:7312":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:13662:4165":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"5:6684:3628":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"18:507:3874":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:13186:3644":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"4:3913:8012":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:15896:4705":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"4:3304:8512":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:12191:7712":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:40068:3073":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1:2713:104":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:10420:3423":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"6:5520:5965":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"6:1530:5510":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"9:390:21155":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:234:226":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:12992:4114":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"5:7184:264":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"16:6843:7836":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"16:6942:7838":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"16:2450:4962":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"16:2590:4975":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:6765:6231":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"4:11446:5395":{"crate_id":4,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"4:6010:8031":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:14228:3621":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"1:23155:6591":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"18:581:3287":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:21941:30153":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"6:545:5466":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"16:3126:21309":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"11:1888:3628":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"18:563:3881":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:46917:6937":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:44259:3177":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"1:11629:8145":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:5019:5769":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"4:11690:3661":{"crate_id":4,"path":["std","sys","thread_local","fast_local","eager","State"],"kind":"enum"},"4:12410:1863":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"5:306:3623":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:2343:6587":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:472:7640":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"4:5533:129":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"16:6808:4994":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"5:2594:6482":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"4:1650:7941":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:43650:8199":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:3212:247":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"16:8320:22180":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:473:5422":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"9:480:21153":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"5:7707:3675":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:46888:6936":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"16:7305:5110":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"16:7401:35552":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:41403:3562":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:14114:4267":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"6:491:5430":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:46226:6875":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:12723:7743":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:44245:3176":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:15557:4625":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"16:8267:5194":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:5471:5950":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:16798:4955":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"6:8284:6465":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"4:6700:8039":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"16:155:7291":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:11448:7665":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:3720:7650":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"16:2724:4981":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:40910:6825":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"6:570:5479":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:13937:205":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"4:10920:8112":{"crate_id":4,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"1:6082:3157":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:8757:150":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"6:497:5433":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:44229:3646":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"4:4308:9270":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:12347:7730":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:31382:196":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"1:3684:26829":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:45001:8327":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:10630:4016":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:12941:4112":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"6:1563:5533":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"6:5462:5944":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"11:1564:21236":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"16:7789:35559":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"16:4152:5024":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"4:661:3147":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"6:4842:5674":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"4:4218:15064":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:46716:6914":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"4:12386:420":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"1:33849:3049":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:6782:3564":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:3671:3078":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"6:7341:6316":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:42983:8139":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"4:11015:33139":{"crate_id":4,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"4:923:7922":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"4:946:3626":{"crate_id":4,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"17:14460:4339":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"4:8230:140":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"4:3599:2349":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"16:2772:4983":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"4:10249:7162":{"crate_id":4,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"4:9420:8036":{"crate_id":4,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"5:1132:35044":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"4:9351:8094":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:23227:26676":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:11303:15048":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:4726:8126":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"1:14093:116":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:3581:211":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"4:12412:977":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"16:8058:7895":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"4:2323:139":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"1:2155:6584":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"4:8874:3664":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"5:4582:35053":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"4:9164:6553":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:11386:22255":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"4:8573:8076":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"13:229:5331":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"6:6790:6240":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:40765:6824":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"16:5144:5041":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:14886:4419":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:15864:4697":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"4:10786:4066":{"crate_id":4,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"6:7454:6353":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:8014:6444":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:40739:7157":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:10637:157":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:7721:3548":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:13398:4142":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:46938:6938":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:47565:6997":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"16:5742:4013":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"4:965:7923":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"13:0:3011":{"crate_id":13,"path":["std_detect"],"kind":"module"},"4:6814:8040":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:4869:5697":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"11:2566:3624":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"16:3889:3907":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:15919:4713":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:16728:4939":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"4:8279:2737":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"4:10626:8084":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:16520:4872":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"4:8263:8065":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:821:9419":{"crate_id":1,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"4:4411:8015":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:14416:4331":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:15064:4452":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:10274:22234":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"5:994:15003":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"4:4174:15062":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"0:26:2396":{"crate_id":0,"path":["either","try_right"],"kind":"macro"},"4:8072:14986":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:10861:139":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"5:221:7945":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"11:1907:7939":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:22862:9494":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"1:12918:8159":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"11:809:3626":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"17:16187:4800":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:13933:4223":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"11:434:9263":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"6:5507:5964":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"17:12280:7720":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"16:8179:5185":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"15:394:21270":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"1:45171:6865":{"crate_id":1,"path":["core","future","async_drop","Noop"],"kind":"struct"},"17:15753:4670":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:41389:3561":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"4:3656:2352":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"17:14845:4414":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"16:4810:5031":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:11579:7673":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"5:3352:33912":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"4:5656:8023":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"17:10597:4015":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"11:1005:7874":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"6:6731:6219":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"16:8723:138":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:12260:22346":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"17:11831:4036":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"16:7919:7882":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:45193:227":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"17:12886:7758":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"4:7170:15139":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"4:8363:3191":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"4:12408:1851":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"1:46294:6883":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:10218:22232":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:43397:3432":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"6:7431:6346":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:14821:4411":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"6:7448:6351":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:40895:8180":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"1:40799:8176":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:23499:6620":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"17:11566:7672":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"5:6274:3157":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"16:2640:4977":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"5:4491:265":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:11878:4047":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"6:5366:5886":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:15997:4731":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"16:6625:7800":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"16:4766:5030":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:11457:4034":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"1:10359:2352":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"4:2729:9624":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"6:7308:6293":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:14672:4369":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:34608:3056":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:14299:4313":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"4:12400:763":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"17:14312:4315":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"17:12625:4099":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:13306:4139":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"5:40:3625":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"6:538:5462":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"4:12371:30274":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"6:4805:5646":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:13416:120":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"5:7610:2532":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"6:6917:6286":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"16:8233:22179":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"4:384:7988":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:43611:3418":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:15621:4635":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:12163:7710":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"17:11432:22256":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:15531:4619":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"6:4829:5664":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:15876:4698":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"4:5869:8025":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"6:5139:5801":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:44855:8238":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:42796:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:47373:6980":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"4:8255:8064":{"crate_id":4,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"1:46955:6939":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:11952:7689":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:41152:3554":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:40750:26700":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:16555:4902":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"3:0:3010":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"1:42587:196":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"6:7414:6345":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:12335:7729":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"16:3987:3915":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"6:6666:6195":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"4:1621:2532":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"5:6169:15191":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:47501:6988":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"6:1632:5583":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"5:6032:3628":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:13140:3649":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"4:7901:8056":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:12234:4125":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:12122:7707":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:11173:35568":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:11509:3177":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"1:46731:6915":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"11:1580:7936":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:8009:3202":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:39936:3070":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"17:12776:7747":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:14043:4243":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"6:7986:6441":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:41161:3563":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"16:7223:7101":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:45051:7169":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"5:4142:3628":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:15410:4572":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:10394:22238":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"16:8711:5245":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:12176:7711":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"6:578:5484":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"6:1625:5579":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:6437:6080":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:10141:22230":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"16:2415:21279":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:2222:189":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:1684:5615":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"4:9763:128":{"crate_id":4,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"1:47444:6983":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:46568:6906":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:10959:29301":{"crate_id":1,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"1:40928:3673":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"18:659:7618":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"11:685:3412":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:16323:4838":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"4:11823:9276":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:45255:29601":{"crate_id":1,"path":["core","task","wake","ExtData"],"kind":"enum"},"17:13921:4222":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"4:1633:7938":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:22811:9494":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"1:23341:15048":{"crate_id":1,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"16:5113:5040":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:15701:4653":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"6:6638:6182":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"11:2400:3412":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"17:12095:7705":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"16:4983:5037":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:13871:4213":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:14708:4375":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:14346:4322":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"16:6408:7795":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"11:1601:7937":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:45266:3597":{"crate_id":1,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"4:1852:703":{"crate_id":4,"path":["std","env"],"kind":"module"},"17:14520:4348":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:47595:6999":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"4:11741:7147":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:47315:6978":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:45179:164":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"5:2157:2737":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:44056:8201":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"9:500:5398":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:47481:6986":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:0:3020":{"crate_id":17,"path":["object"],"kind":"module"},"1:23411:6612":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"6:8308:6469":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"16:6028:4995":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"5:7590:7134":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"14:165:21242":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"4:8511:2351":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"17:12583:4098":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:12035:7698":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"4:10375:8104":{"crate_id":4,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"1:10377:144":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"1:11552:8143":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:46776:6932":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"4:11982:8055":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"4:6201:7312":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:11591:8144":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:10203:3443":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"4:982:7926":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"4:8353:8067":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:11114:7660":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"5:3306:3411":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"4:1624:3628":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"4:2495:15040":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"1:22938:14783":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"17:14084:4255":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"4:11758:8306":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"16:4844:5032":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"6:8296:6467":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:31409:3287":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"1:44662:8222":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:5395:5901":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"4:2018:794":{"crate_id":4,"path":["std","ffi"],"kind":"module"},"4:11034:8024":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"6:5107:5798":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:5375:5892":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:14284:4308":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"15:306:9251":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"6:5205:5818":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"16:6713:7822":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:11163:4047":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"6:5325:5876":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:12341:9507":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"17:12524:7732":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:46340:6886":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:44094:8205":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"4:8890:3665":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"4:2328:2698":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"4:4160:15060":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"4:9300:8086":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:10368:22237":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:8598:7911":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"16:7058:7848":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:22677:14788":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"4:8624:15084":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:43435:2717":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:4507:9535":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"6:6882:6261":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"5:3940:3626":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"16:3014:21307":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"4:11222:6552":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:44381:8149":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:3449:3066":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"16:2486:4970":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:2710:103":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"5:1604:7935":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"11:2137:7930":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:44427:8216":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:41091:3549":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"18:698:7628":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"4:7738:30593":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"1:46585:6907":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:47527:6990":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"6:0:1013":{"crate_id":6,"path":["libc"],"kind":"module"},"16:6573:7797":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"5:1259:9269":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"4:437:185":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"16:8612:5015":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"11:2466:3626":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"4:8548:3176":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"17:14438:4338":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"4:9372:30275":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"5:7771:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:16507:4192":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"4:12339:7148":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"11:2228:7698":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"17:16642:4917":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"4:11989:8055":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"6:5179:5804":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:13515:22246":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"5:7530:3628":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"16:2748:4982":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"4:2011:3146":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"4:685:14984":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"4:9151:6552":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"6:8267:6460":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"4:4330:9271":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:8293:146":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:46976:6940":{"crate_id":1,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"6:1696:5619":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"4:5797:15119":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"5:1586:7921":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:14220:4279":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:3736:3082":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"15:0:3018":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:3699:3081":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"4:12405:914":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"11:123:8291":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:12957:8161":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:10696:4018":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:8395:2916":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:13719:4177":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:11465:7666":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"17:15844:4690":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:14072:4252":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"6:6813:6246":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:10097:22228":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"5:7665:3624":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"16:5417:5050":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"4:11026:8060":{"crate_id":4,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"4:8244:128":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"6:5533:5966":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:12699:7741":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"6:1507:5500":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"4:1083:7874":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:8304:165":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:21887:3287":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:11985:7692":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:47461:6984":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"16:7337:5114":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"6:1494:5494":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"4:6392:33208":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"4:5305:8019":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"4:7490:9274":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:40939:9570":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:2704:4980":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"16:0:3019":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:46503:6903":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"11:1105:7932":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"16:6984:5014":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:12225:7715":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"15:288:9247":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:21943:30139":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"4:11246:33140":{"crate_id":4,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"4:4986:8018":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:0:510":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"16:7358:5004":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:3490:3071":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"16:6608:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"6:5357:5882":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"16:5757:5054":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:14599:4359":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"16:6731:7831":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"11:1158:7934":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"18:0:3021":{"crate_id":18,"path":["memchr"],"kind":"module"},"16:6239:5057":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:41637:3530":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"4:11707:8118":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"6:7577:6429":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"6:6381:6040":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:46617:6909":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:14031:4242":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:13471:4107":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"16:6111:7787":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:46486:6902":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"6:465:5417":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"11:1900:7938":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:45027:131":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"1:23018:7317":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"19:0:1306":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:10115:22229":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"4:9311:8088":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:5287:29609":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:5325:3205":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"1:7615:3470":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"6:1489:5492":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:7554:22176":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"6:6652:6193":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:43389:74":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"5:2265:14967":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"5:2275:7957":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:31009:6623":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"5:1564:2532":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:9877:92":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:11720:7678":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"1:41596:3522":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"4:12393:1705":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"17:12392:4062":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:10428:3426":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"16:7350:5116":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:5477:5953":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:22152:14703":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"4:12398:744":{"crate_id":4,"path":["std","f16"],"kind":"primitive"},"1:2732:113":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"4:8722:8080":{"crate_id":4,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"17:11757:22277":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:41589:8136":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"5:7720:9570":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:41645:3532":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"16:6696:7821":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:3420:125":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"18:623:35573":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"16:4902:5034":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"16:3441:5019":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:4805:3434":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"1:44981:8322":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:41182:3543":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:15418:4575":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"4:6376:3601":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"16:8165:5003":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"4:12401:742":{"crate_id":4,"path":["std","f128"],"kind":"primitive"},"5:291:35044":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:45062:9662":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"16:6680:7818":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"1:42152:6829":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"4:8107:8060":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"6:4890:5705":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"16:8636:22181":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:1657:5602":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"16:7159:7852":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:11319:35569":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:42352:6839":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:44783:8165":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:12605:4047":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:6716:6217":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"17:14692:4370":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:42330:8014":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:13733:4178":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:13070:4047":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"16:8528:7902":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"6:8290:6466":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:11358:22254":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:11232:22257":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"16:7807:35560":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:12249:7719":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"11:299:8292":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"5:3875:7955":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"4:4492:8016":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"4:12360:14988":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:13385:7776":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"4:12388:476":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"4:1928:8001":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"1:47542:6991":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"18:718:3894":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:42484:3249":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:12008:3950":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:40105:6692":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"17:15931:4716":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:11958:7690":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"4:2477:9483":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"1:32681:3211":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"16:8000:5010":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:3461:143":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:43848:8319":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"18:598:35571":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:42611:90":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"6:6770:6232":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"4:10939:8302":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"1:13206:9638":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:11805:7685":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:4914:3436":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"11:772:7921":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"4:3684:2348":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"4:11886:8012":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:583:7641":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"4:5606:8020":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"1:32682:3085":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:45234:3599":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"11:842:15001":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:9438:3248":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"5:2171:7955":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"6:5051:5785":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"4:3074:138":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"17:13014:7765":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"1:40118:6693":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"4:10356:8000":{"crate_id":4,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"1:45183:219":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"4:4168:15061":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"16:8483:5232":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:3402:3079":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:3935:3628":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"1:2610:9494":{"crate_id":1,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"1:14173:152":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"5:3094:7299":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:5986:3157":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"4:9734:139":{"crate_id":4,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"6:5249:5840":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:16399:4854":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"16:3695:5021":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"16:6098:7784":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"6:6691:6203":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"6:559:5474":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:22905:14784":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"5:3860:2737":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:5305:7653":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"4:2325:8005":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"1:11103:29302":{"crate_id":1,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"4:3039:8010":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"4:9134:8084":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"17:13854:4211":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"11:364:9258":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:42443:3245":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"1:7837:3520":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":30}