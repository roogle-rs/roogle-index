{"root":"0:0:2552","crate_version":"1.13.0","includes_private":false,"index":{"0:51:2956":{"id":"0:51:2956","crate_id":0,"name":"size_hint","span":{"filename":"src/iterator.rs","begin":[54,4],"end":[56,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:8332:185":{"id":"1:8332:185","crate_id":1,"name":"Item","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"Iterator","id":"1:8499:190","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"0:176:2445":{"id":"0:176:2445","crate_id":0,"name":"map_either","span":{"filename":"src/lib.rs","begin":[382,4],"end":[391,5]},"visibility":"public","docs":"Apply the functions `f` and `g` to the `Left` and `Right` variants\nrespectively. This is equivalent to\n[bimap](https://hackage.haskell.org/package/bifunctors-5/docs/Data-Bifunctor.html)\nin functional programming.\n\n```\nuse either::*;\n\nlet f = |s: String| s.len();\nlet g = |u: u8| u.to_string();\n\nlet left: Either<String, u8> = Left(\"loopy\".into());\nassert_eq!(left.map_either(f, g), Left(5));\n\nlet right: Either<String, u8> = Right(42);\nassert_eq!(right.map_either(f, g), Right(\"42\".into()));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}],["g",{"generic":"G"}]],"output":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"M"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"M","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3599:155","args":{"parenthesized":{"inputs":[{"generic":"L"}],"output":{"generic":"M"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"G"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3599:155","args":{"parenthesized":{"inputs":[{"generic":"R"}],"output":{"generic":"S"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:26:2444":{"id":"0:26:2444","crate_id":0,"name":"try_right","span":{"filename":"src/lib.rs","begin":[124,0],"end":[131,1]},"visibility":"public","docs":"Dual to [`try_left!`], see its documentation for more information.","links":{"`try_left!`":"0:25:2441"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! try_right {\n    ($expr:expr) => { ... };\n}"}},"0:0:2552":{"id":"0:0:2552","crate_id":0,"name":"either","span":{"filename":"src/lib.rs","begin":[1,0],"end":[1575,1]},"visibility":"public","docs":"The enum [`Either`] with variants `Left` and `Right` is a general purpose\nsum type with two cases.\n\n[`Either`]: enum.Either.html\n\n**Crate features:**\n\n* `\"use_std\"`\n  Enabled by default. Disable to make the library `#![no_std]`.\n\n* `\"serde\"`\n  Disabled by default. Enable to `#[derive(Serialize, Deserialize)]` for `Either`\n","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/either/1/\")]","#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:22-0:368:193","0:23-0:371:241","0:365:2401","0:140-0:405:2446","0:152-0:146:2448","0:24:2427","0:25:2441","0:26:2444"],"is_stripped":false}}},"1:13851:34444":{"id":"1:13851:34444","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:417":{"id":"0:417","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1311,0],"end":[1311,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:3063:78","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:3063:78","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:3063:78","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:420:353"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:380":{"id":"0:380","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[48,15],"end":[48,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::PartialEq","id":"1:2872:213","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::PartialEq","id":"1:2872:213","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2872:213","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:383:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:420:353":{"id":"0:420:353","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[1311,0],"end":[1311,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13826:30830":{"id":"1:13826:30830","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"Returns an iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning at\nmost `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:12652:492","str::splitn":"1:13824:30828","self::pattern":"1:13453:2429"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:44856:8120","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3702","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13460:3702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13477:9674","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:136:1027":{"id":"0:136:1027","crate_id":0,"name":"len","span":{"filename":"src/iterator.rs","begin":[305,4],"end":[307,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:71:2970":{"id":"0:71:2970","crate_id":0,"name":"find_map","span":{"filename":"src/iterator.rs","begin":[120,4],"end":[125,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"generic":"B"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3596:154","args":{"parenthesized":{"inputs":[{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8499:190","args":null}}}],"output":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"generic":"B"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:50:1226":{"id":"0:50:1226","crate_id":0,"name":"next","span":{"filename":"src/iterator.rs","begin":[50,4],"end":[52,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8499:190","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:81:2974":{"id":"0:81:2974","crate_id":0,"name":"rfold","span":{"filename":"src/iterator.rs","begin":[148,4],"end":[153,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["init",{"generic":"Acc"}],["f",{"generic":"G"}]],"output":{"generic":"Acc"},"c_variadic":false},"generics":{"params":[{"name":"Acc","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"G"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3596:154","args":{"parenthesized":{"inputs":[{"generic":"Acc"},{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8499:190","args":null}}}],"output":{"generic":"Acc"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:133":{"id":"0:133","crate_id":0,"name":null,"span":{"filename":"src/iterator.rs","begin":[300,0],"end":[308,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"ExactSizeIterator","id":"1:8447:2976","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"ExactSizeIterator","id":"1:8447:2976","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8447:2976","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterEither","id":"0:405:2446","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:136:1027"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:199:2571":{"id":"0:199:2571","crate_id":0,"name":"right_and_then","span":{"filename":"src/lib.rs","begin":[513,4],"end":[521,5]},"visibility":"public","docs":"Apply the function `f` on the value in the `Right` variant if it is present.\n\n```\nuse either::*;\n\nlet left: Either<_, u32> = Left(123);\nassert_eq!(left.right_and_then(|x| Right(x * 2)), Left(123));\n\nlet right: Either<u32, _> = Right(123);\nassert_eq!(right.right_and_then(|x| Right(x * 2)), Right(246));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3599:155","args":{"parenthesized":{"inputs":[{"generic":"R"}],"output":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2827:26575":{"id":"1:2827:26575","crate_id":1,"name":"clone_to_uninit","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["dst",{"raw_pointer":{"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:222:2661":{"id":"0:222:2661","crate_id":0,"name":"right_or_else","span":{"filename":"src/lib.rs","begin":[797,4],"end":[805,5]},"visibility":"public","docs":"Returns right value or computes it from a closure\n\n# Examples\n\n```\n# use either::*;\nlet left: Either<String, u32> = Left(\"3\".to_string());\nassert_eq!(left.right_or_else(|x| x.parse().unwrap()), 3);\n\nlet right: Either<String, u32> = Right(3);\nassert_eq!(right.right_or_else(|_| unreachable!()), 3);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"generic":"R"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3599:155","args":{"parenthesized":{"inputs":[{"generic":"L"}],"output":{"generic":"R"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:399:902":{"id":"0:399:902","crate_id":0,"name":"hash","span":{"filename":"src/lib.rs","begin":[48,47],"end":[48,51]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:10884:169","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:153":{"id":"0:153","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[148,0],"end":[163,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2810:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2810:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2810:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:156:496","0:157:499"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:156:496":{"id":"0:156:496","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[149,4],"end":[154,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:409":{"id":"0:409","crate_id":0,"name":null,"span":{"filename":"src/iterator.rs","begin":[18,9],"end":[18,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"1:2810:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"1:2810:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2810:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterEither","id":"0:405:2446","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:412:496"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:298:2763":{"id":"0:298:2763","crate_id":0,"name":"consume","span":{"filename":"src/lib.rs","begin":[1240,4],"end":[1242,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["amt",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:341:2450":{"id":"0:341:2450","crate_id":0,"name":"source","span":{"filename":"src/lib.rs","begin":[1389,4],"end":[1391,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"1:3158:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13766:34429":{"id":"1:13766:34429","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:148:2999":{"id":"0:148:2999","crate_id":0,"name":"into_either_with","span":{"filename":"src/into_either.rs","begin":[55,4],"end":[61,5]},"visibility":"default","docs":"Converts `self` into a [`Left`] variant of [`Either<Self, Self>`](Either)\nif `into_left(&self)` returns `true`.\nConverts `self` into a [`Right`] variant of [`Either<Self, Self>`](Either)\notherwise.\n\n# Examples\n\n```\nuse either::{IntoEither, Left, Right};\n\nfn is_even(x: &u8) -> bool {\n    x % 2 == 0\n}\n\nlet x = 0;\nassert_eq!(x.into_either_with(is_even), Left(x));\nassert_eq!(x.into_either_with(|x| !is_even(x)), Right(x));\n```","links":{"Either":"0:365:2401","`Right`":"0:371:241","`Left`":"0:368:193"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["into_left",{"generic":"F"}]],"output":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3599:155","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:60:2964":{"id":"0:60:2964","crate_id":0,"name":"collect","span":{"filename":"src/iterator.rs","begin":[84,4],"end":[89,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"B"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"B"},"bounds":[{"trait_bound":{"trait":{"name":"iter::FromIterator","id":"1:8315:158","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8499:190","args":null}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13844:34440":{"id":"1:13844:34440","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:158":{"id":"0:158","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[165,0],"end":[947,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:161:2457","0:162:2461","0:163:2467","0:164:2472","0:165:353","0:166:2489","0:167:2492","0:168:2495","0:169:2501","0:170:2508","0:173:2515","0:176:2445","0:181:2540","0:187:2552","0:191:2563","0:196:2567","0:199:2571","0:202:985","0:203:1007","0:206:1008","0:209:2608","0:210:2615","0:213:2624","0:216:2635","0:217:2641","0:218:2647","0:220:2653","0:221:2657","0:222:2661","0:224:2670","0:225:2676","0:226:2680","0:227:2685","0:228:2692"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13848:34442":{"id":"1:13848:34442","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13852:34445":{"id":"1:13852:34445","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:12652:492","self::pattern":"1:13453:2429"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3702","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13460:3702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:13482:9673","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13879:30749":{"id":"1:13879:30749","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1148:38810"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13880:34450":{"id":"1:13880:34450","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Returns an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:5068:34450"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:45033:8148","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2825-0:365:2401":{"id":"b:1:2825-0:365:2401","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:3317:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2820:3348","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:2827:26575"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42831:3307-0:405:2446":{"id":"a:1:42831:3307-0:405:2446","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42831:3307","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42831:3307","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42831:3307","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterEither","id":"0:405:2446","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13865:34448":{"id":"1:13865:34448","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12652:492","self::pattern":"1:13453:2429"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3702","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13816:30826":{"id":"1:13816:30826","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"Returns an iterator over substrings of the given string slice, separated\nby characters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:13453:2429","`DoubleEndedIterator`":"1:8394:134","prim@char":"4:12652:492","str::split":"1:13812:3506"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:44752:8117","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3702","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13460:3702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13477:9674","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:131:2975":{"id":"0:131:2975","crate_id":0,"name":"rfind","span":{"filename":"src/iterator.rs","begin":[292,4],"end":[297,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["predicate",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8499:190","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3596:154","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8499:190","args":null}}}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:102:2960":{"id":"0:102:2960","crate_id":0,"name":"for_each","span":{"filename":"src/iterator.rs","begin":[202,4],"end":[207,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3596:154","args":{"parenthesized":{"inputs":[{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8499:190","args":null}}}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:225:2676":{"id":"0:225:2676","crate_id":0,"name":"unwrap_right","span":{"filename":"src/lib.rs","begin":[857,4],"end":[865,5]},"visibility":"public","docs":"Returns the right value\n\n# Examples\n\n```\n# use either::*;\nlet right: Either<(), _> = Right(3);\nassert_eq!(right.unwrap_right(), 3);\n```\n\n# Panics\n\nWhen `Either` is a `Left` value\n\n```should_panic\n# use either::*;\nlet left: Either<_, ()> = Left(3);\nleft.unwrap_right();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"R"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"core::fmt::Debug","id":"1:10656:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42831:3307-0:365:2401":{"id":"a:1:42831:3307-0:365:2401","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42831:3307","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42831:3307","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42831:3307","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:127:2973":{"id":"0:127:2973","crate_id":0,"name":"nth_back","span":{"filename":"src/iterator.rs","begin":[281,4],"end":[283,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8499:190","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:118:2970":{"id":"0:118:2970","crate_id":0,"name":"find_map","span":{"filename":"src/iterator.rs","begin":[257,4],"end":[262,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"generic":"B"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3596:154","args":{"parenthesized":{"inputs":[{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8499:190","args":null}}}],"output":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"generic":"B"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:167:2492":{"id":"0:167:2492","crate_id":0,"name":"as_pin_ref","span":{"filename":"src/lib.rs","begin":[276,4],"end":[285,5]},"visibility":"public","docs":"Convert `Pin<&Either<L, R>>` to `Either<Pin<&L>, Pin<&R>>`,\npinned projections of the inner variants.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"1:42861:2393","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Pin","id":"1:42861:2393","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"L"}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Pin","id":"1:42861:2393","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"R"}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:428:353":{"id":"0:428:353","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[1312,0],"end":[1316,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"::std::path::Path","id":"4:5505:215","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13777:29903":{"id":"1:13777:29903","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:42736:203"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11577:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11577:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13797:26773":{"id":"1:13797:26773","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:45026:8133","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:79:2972":{"id":"0:79:2972","crate_id":0,"name":"next_back","span":{"filename":"src/iterator.rs","begin":[140,4],"end":[142,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8499:190","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5717:35164":{"id":"5:5717:35164","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13875:30580":{"id":"1:13875:30580","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3105-0:365:2401":{"id":"b:1:3105-0:365:2401","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3075:272","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:3108:150","1:3109:1859"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3322:261-0:405:2446":{"id":"a:1:3322:261-0:405:2446","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3322:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3322:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3322:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterEither","id":"0:405:2446","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2822-0:365:2401":{"id":"b:1:2822-0:365:2401","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2810:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2820:3348","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:2824:26575"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:55:2960":{"id":"0:55:2960","crate_id":0,"name":"for_each","span":{"filename":"src/iterator.rs","begin":[65,4],"end":[70,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3596:154","args":{"parenthesized":{"inputs":[{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8499:190","args":null}}}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3109:1859":{"id":"1:3109:1859","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:43002:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42830:3308-0:365:2401":{"id":"a:1:42830:3308-0:365:2401","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:42830:3308","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:42830:3308","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42830:3308","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:227:2685":{"id":"0:227:2685","crate_id":0,"name":"expect_right","span":{"filename":"src/lib.rs","begin":[915,4],"end":[923,5]},"visibility":"public","docs":"Returns the right value\n\n# Examples\n\n```\n# use either::*;\nlet right: Either<(), _> = Right(3);\nassert_eq!(right.expect_right(\"value was Left\"), 3);\n```\n\n# Panics\n\nWhen `Either` is a `Left` value\n\n```should_panic\n# use either::*;\nlet left: Either<_, ()> = Left(3);\nleft.expect_right(\"value was Right\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["msg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"generic":"R"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"core::fmt::Debug","id":"1:10656:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:40":{"id":"0:40","crate_id":0,"name":null,"span":{"filename":"src/iterator.rs","begin":[29,0],"end":[40,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Extend","id":"1:8335:2953","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Extend","id":"1:8335:2953","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["extend_one","extend_reserve","extend_one_unchecked"],"trait":{"name":"Extend","id":"1:8335:2953","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"super::Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:44:2954"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:137":{"id":"0:137","crate_id":0,"name":null,"span":{"filename":"src/iterator.rs","begin":[310,0],"end":[315,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"iter::FusedIterator","id":"1:8804:162","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"iter::FusedIterator","id":"1:8804:162","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8804:162","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterEither","id":"0:405:2446","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:67:343":{"id":"0:67:343","crate_id":0,"name":"any","span":{"filename":"src/iterator.rs","begin":[106,4],"end":[111,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3596:154","args":{"parenthesized":{"inputs":[{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8499:190","args":null}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:104:601":{"id":"0:104:601","crate_id":0,"name":"count","span":{"filename":"src/iterator.rs","begin":[209,4],"end":[211,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13862:34447":{"id":"1:13862:34447","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12652:492","self::pattern":"1:13453:2429"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3702","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13460:3702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13477:9674","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13808:2975":{"id":"1:13808:2975","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:42736:203","prim@char":"4:12652:492","self::pattern":"1:13453:2429"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3702","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13460:3702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13477:9674","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13791:8203":{"id":"1:13791:8203","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:12652:492"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:44710:8185","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5712:35162":{"id":"5:5712:35162","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:299:3682","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:299:3682","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:299:2765":{"id":"0:299:2765","crate_id":0,"name":"read_until","span":{"filename":"src/lib.rs","begin":[1244,4],"end":[1246,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["byte",{"primitive":"u8"}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"std::vec::Vec","id":"5:7200:280","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"4:3095:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:196:2567":{"id":"0:196:2567","crate_id":0,"name":"left_and_then","span":{"filename":"src/lib.rs","begin":[492,4],"end":[500,5]},"visibility":"public","docs":"Apply the function `f` on the value in the `Left` variant if it is present.\n\n```\nuse either::*;\n\nlet left: Either<_, u32> = Left(123);\nassert_eq!(left.left_and_then::<_,()>(|x| Right(x * 2)), Right(246));\n\nlet right: Either<u32, _> = Right(123);\nassert_eq!(right.left_and_then(|x| Right::<(), _>(x * 2)), Right(123));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3599:155","args":{"parenthesized":{"inputs":[{"generic":"L"}],"output":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}},{"type":{"generic":"R"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:150":{"id":"0:150","crate_id":0,"name":null,"span":{"filename":"src/into_either.rs","begin":[64,0],"end":[64,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["into_either_with","into_either"],"trait":{"name":"IntoEither","id":"0:146:2448","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"generic":"T"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:90":{"id":"0:90","crate_id":0,"name":null,"span":{"filename":"src/iterator.rs","begin":[173,0],"end":[178,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"iter::FusedIterator","id":"1:8804:162","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"iter::FusedIterator","id":"1:8804:162","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"L"},"trait":{"name":"","id":"1:8499:190","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8804:162","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"super::Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:782-0:365:2401":{"id":"b:5:782-0:365:2401","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2810:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:778:264","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["5:784:7293","5:785:26581","5:786:26582"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:368:193":{"id":"0:368:193","crate_id":0,"name":"Left","span":{"filename":"src/lib.rs","begin":[51,4],"end":[51,11]},"visibility":"default","docs":"A value of type `L`.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:370:2033"]},"discriminant":null}}},"0:269:2741":{"id":"0:269:2741","crate_id":0,"name":"copied","span":{"filename":"src/lib.rs","begin":[1140,4],"end":[1149,5]},"visibility":"public","docs":"Maps an `Either<&mut L, &mut R>` to an `Either<L, R>` by copying the contents of\neither branch.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:3317:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:3317:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:441":{"id":"0:441","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1322,0],"end":[1326,1]},"visibility":"default","docs":"Requires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:3063:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"::std::ffi::CStr","id":"1:41265:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:3063:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"::std::ffi::CStr","id":"1:41265:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:3063:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"CStr","id":"1:41265:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:444:353"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:140-0:405:2446":{"id":"0:140-0:405:2446","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[143,0],"end":[143,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::iterator::IterEither","name":"IterEither","id":"0:405:2446","glob":false}}},"0:161:2457":{"id":"0:161:2457","crate_id":0,"name":"is_left","span":{"filename":"src/lib.rs","begin":[175,4],"end":[180,5]},"visibility":"public","docs":"Return true if the value is the `Left` variant.\n\n```\nuse either::*;\n\nlet values = [Left(1), Right(\"the right value\")];\nassert_eq!(values[0].is_left(), true);\nassert_eq!(values[1].is_left(), false);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2790-0:405:2446":{"id":"b:1:2790-0:405:2446","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32946:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2784:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterEither","id":"0:405:2446","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:2792:3006"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:318:353":{"id":"0:318:353","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[1333,4],"end":[1335,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"Target"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:784:7293":{"id":"5:784:7293","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:13787:30822":{"id":"1:13787:30822","crate_id":1,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divides one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"1:13788:30823"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13878:30748":{"id":"1:13878:30748","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1148:38810"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:270":{"id":"0:270","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1153,0],"end":[1160,1]},"visibility":"default","docs":"Convert from `Result` to `Either` with `Ok => Right` and `Err => Left`.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3072:157","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Result","id":"1:43002:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"L"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:273:860"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13829:30832":{"id":"1:13829:30832","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3702","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:297:2762":{"id":"0:297:2762","crate_id":0,"name":"fill_buf","span":{"filename":"src/lib.rs","begin":[1236,4],"end":[1238,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"4:3095:238","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:365:2401":{"id":"0:365:2401","crate_id":0,"name":"Either","span":{"filename":"src/lib.rs","begin":[49,0],"end":[54,1]},"visibility":"public","docs":"The enum `Either` with variants `Left` and `Right` is a general purpose\nsum type with two cases.\n\nThe `Either` type is symmetric and treats its variants the same way, without\npreference.\n(For representing success or error, use the regular `Result` enum instead.)","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"variants_stripped":false,"variants":["0:368:193","0:371:241"],"impls":["0:158","0:230","0:234","0:239","0:244","0:249","0:254","0:260","0:265","a:1:32945:249-0:365:2401","a:1:3322:261-0:365:2401","a:1:3357:3329-0:365:2401","a:1:33003:3269-0:365:2401","a:1:42830:3308-0:365:2401","a:1:42831:3307-0:365:2401","b:0:150-0:365:2401","b:1:2790-0:365:2401","b:1:2793-0:365:2401","b:1:2822-0:365:2401","b:1:2825-0:365:2401","b:1:3095-0:365:2401","b:1:3099-0:365:2401","b:1:3105-0:365:2401","b:1:3110-0:365:2401","b:1:3967-0:365:2401","b:1:8330-0:365:2401","b:1:14142-0:365:2401","b:5:782-0:365:2401","b:5:5962-0:365:2401","0:374","0:377","0:380","0:384","0:388","0:392","0:396","0:401","0:40","0:46","0:76","0:86","0:90","0:153","0:270","0:274","0:278","0:283","0:290","0:294","0:301","0:308","0:417","0:421","0:425","0:429","0:433","0:437","0:441","0:445","0:314","0:319","0:324","0:329","0:334","0:338","0:344"]}}},"0:114:343":{"id":"0:114:343","crate_id":0,"name":"any","span":{"filename":"src/iterator.rs","begin":[243,4],"end":[248,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3596:154","args":{"parenthesized":{"inputs":[{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8499:190","args":null}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:444:353":{"id":"0:444:353","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[1322,0],"end":[1326,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"::std::ffi::CStr","id":"1:41265:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:191:2563":{"id":"0:191:2563","crate_id":0,"name":"either_with","span":{"filename":"src/lib.rs","begin":[470,4],"end":[479,5]},"visibility":"public","docs":"Like [`either`][Self::either], but provide some context to whichever of the\nfunctions ends up being called.\n\n```\n// In this example, the context is a mutable reference\nuse either::*;\n\nlet mut result = Vec::new();\n\nlet values = vec![Left(2), Right(2.7)];\n\nfor value in values {\n    value.either_with(&mut result,\n                      |ctx, integer| ctx.push(integer),\n                      |ctx, real| ctx.push(f64::round(real) as i32));\n}\n\nassert_eq!(result, vec![2, 3]);\n```","links":{"Self::either":"0:187:2552"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["ctx",{"generic":"Ctx"}],["f",{"generic":"F"}],["g",{"generic":"G"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[{"name":"Ctx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3599:155","args":{"parenthesized":{"inputs":[{"generic":"Ctx"},{"generic":"L"}],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"G"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3599:155","args":{"parenthesized":{"inputs":[{"generic":"Ctx"},{"generic":"R"}],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:328:2489":{"id":"0:328:2489","crate_id":0,"name":"as_mut","span":{"filename":"src/lib.rs","begin":[1353,4],"end":[1355,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"generic":"Target"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:334":{"id":"0:334","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1370,0],"end":[1378,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"DerefMut","id":"1:3571:2392","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"DerefMut","id":"1:3571:2392","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"L"},"trait":{"name":"","id":"1:3558:128","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"1:3571:2392","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:337:656"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2824:26575":{"id":"1:2824:26575","crate_id":1,"name":"clone_to_uninit","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["dst",{"raw_pointer":{"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13859:30836":{"id":"1:13859:30836","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12652:492","self::pattern":"1:13453:2429"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3702","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13460:3702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13477:9674","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:8330-0:405:2446":{"id":"b:1:8330-0:405:2446","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8499:190","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8326:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterEither","id":"0:405:2446","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:8332:185","1:8333:2580","1:8334:985"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:168:2495":{"id":"0:168:2495","crate_id":0,"name":"as_pin_mut","span":{"filename":"src/lib.rs","begin":[289,4],"end":[301,5]},"visibility":"public","docs":"Convert `Pin<&mut Either<L, R>>` to `Either<Pin<&mut L>, Pin<&mut R>>`,\npinned projections of the inner variants.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"1:42861:2393","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Pin","id":"1:42861:2393","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"L"}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Pin","id":"1:42861:2393","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"R"}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:57:601":{"id":"0:57:601","crate_id":0,"name":"count","span":{"filename":"src/iterator.rs","begin":[72,4],"end":[74,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86":{"id":"0:86","crate_id":0,"name":null,"span":{"filename":"src/iterator.rs","begin":[163,0],"end":[171,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"ExactSizeIterator","id":"1:8447:2976","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"ExactSizeIterator","id":"1:8447:2976","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"L"},"trait":{"name":"","id":"1:8499:190","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8447:2976","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"super::Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:89:1027"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:268:2739":{"id":"0:268:2739","crate_id":0,"name":"cloned","span":{"filename":"src/lib.rs","begin":[1127,4],"end":[1136,5]},"visibility":"public","docs":"Maps an `Either<&mut L, &mut R>` to an `Either<L, R>` by cloning the contents of\neither branch.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2810:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2810:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:304:2769":{"id":"0:304:2769","crate_id":0,"name":"write","span":{"filename":"src/lib.rs","begin":[1262,4],"end":[1264,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"4:3095:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:391:1331":{"id":"0:391:1331","crate_id":0,"name":"partial_cmp","span":{"filename":"src/lib.rs","begin":[48,30],"end":[48,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"1:31705:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62:2966":{"id":"0:62:2966","crate_id":0,"name":"partition","span":{"filename":"src/iterator.rs","begin":[91,4],"end":[97,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"tuple":[{"generic":"B"},{"generic":"B"}]},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"B"},"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:3147:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Extend","id":"1:8335:2953","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8499:190","args":null}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3596:154","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8499:190","args":null}}}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13765:34428":{"id":"1:13765:34428","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13792:3513":{"id":"1:13792:3513","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"Returns an iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:44720:3234","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:371:241":{"id":"0:371:241","crate_id":0,"name":"Right","span":{"filename":"src/lib.rs","begin":[53,4],"end":[53,12]},"visibility":"default","docs":"A value of type `R`.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:373:2033"]},"discriminant":null}}},"0:312:353":{"id":"0:312:353","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[1284,4],"end":[1286,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Target"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13795:3507":{"id":"1:13795:3507","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"Returns an iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:44988:3231","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13874:30584":{"id":"1:13874:30584","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:256:2731":{"id":"0:256:2731","crate_id":0,"name":"into_inner","span":{"filename":"src/lib.rs","begin":[1070,4],"end":[1072,5]},"visibility":"public","docs":"Extract the value of an either over two equivalent types.\n\n```\nuse either::*;\n\nlet left: Either<_, u32> = Left(123);\nassert_eq!(left.into_inner(), 123);\n\nlet right: Either<u32, _> = Right(123);\nassert_eq!(right.into_inner(), 123);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13794:26772":{"id":"1:13794:26772","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:13793:26771"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:45017:8195","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13882:9567":{"id":"1:13882:9567","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Returns an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:5069:9567"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:45042:8093","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:288:2756":{"id":"0:288:2756","crate_id":0,"name":"read_to_end","span":{"filename":"src/lib.rs","begin":[1206,4],"end":[1208,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"std::vec::Vec","id":"5:7200:280","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"4:3095:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:260":{"id":"0:260","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1096,0],"end":[1122,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"L"}}}},{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"R"}}}}],"bindings":[]}}}},"items":["0:263:2739","0:264:2741"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:14145:176":{"id":"1:14145:176","crate_id":1,"name":"IntoFuture","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"F"}}}},"1:2792:3006":{"id":"1:2792:3006","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:203:1007":{"id":"0:203:1007","crate_id":0,"name":"iter","span":{"filename":"src/lib.rs","begin":[560,4],"end":[566,5]},"visibility":"public","docs":"Borrow the inner value as an iterator.\n\nThis requires the `Left` and `Right` iterators to have the same item type.\nSee [`factor_iter`][Either::factor_iter] to iterate different types.\n\n```\nuse either::*;\n\nlet left: Either<_, &[u32]> = Left(vec![2, 3]);\nlet mut right: Either<Vec<u32>, _> = Right(&[4, 5][..]);\nlet mut all = vec![1];\nall.extend(left.iter());\nall.extend(right.iter());\nassert_eq!(all, vec![1, 2, 3, 4, 5]);\n```","links":{"Either::factor_iter":"0:210:2615"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"L"}}},"trait":{"name":"IntoIterator","id":"1:8326:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},{"type":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"R"}}},"trait":{"name":"IntoIterator","id":"1:8326:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"L"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8326:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}]}},{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"R"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8326:177","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"L"}}},"trait":{"name":"IntoIterator","id":"1:8326:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:14146:984":{"id":"1:14146:984","crate_id":1,"name":"into_future","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoFuture","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"IntoFuture","id":"1:45685:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:213:2624":{"id":"0:213:2624","crate_id":0,"name":"factor_iter_mut","span":{"filename":"src/lib.rs","begin":[663,4],"end":[671,5]},"visibility":"public","docs":"Mutably borrows an `Either` of `Iterator`s to be an `Iterator` of `Either`s\n\nUnlike [`iter_mut`][Either::iter_mut], this does not require the\n`Left` and `Right` iterators to have the same item type.\n\n```\nuse either::*;\nlet mut left: Either<_, Vec<u8>> = Left([\"hello\"]);\nleft.factor_iter_mut().for_each(|x| *x.unwrap_left() = \"goodbye\");\nassert_eq!(left, Left([\"goodbye\"]));\nlet mut right: Either<[&str; 2], _> = Right(vec![0, 1, 2]);\nright.factor_iter_mut().for_each(|x| if let Right(r) = x { *r = -*r; });\nassert_eq!(right, Right(vec![0, -1, -2]));\n\n```","links":{"Either::iter_mut":"0:206:1008"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"IterEither","id":"0:405:2446","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"L"}}},"trait":{"name":"IntoIterator","id":"1:8326:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},{"type":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"R"}}},"trait":{"name":"IntoIterator","id":"1:8326:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"L"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8326:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}]}},{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"R"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8326:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:224:2670":{"id":"0:224:2670","crate_id":0,"name":"unwrap_left","span":{"filename":"src/lib.rs","begin":[826,4],"end":[836,5]},"visibility":"public","docs":"Returns the left value\n\n# Examples\n\n```\n# use either::*;\nlet left: Either<_, ()> = Left(3);\nassert_eq!(left.unwrap_left(), 3);\n```\n\n# Panics\n\nWhen `Either` is a `Right` value\n\n```should_panic\n# use either::*;\nlet right: Either<(), _> = Right(3);\nright.unwrap_left();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"L"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"core::fmt::Debug","id":"1:10656:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:281:211":{"id":"0:281:211","crate_id":0,"name":"Output","span":{"filename":"src/lib.rs","begin":[1179,4],"end":[1179,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"L"},"trait":{"name":"Future","id":"1:45682:163","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"0:392":{"id":"0:392","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[48,42],"end":[48,45]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::Ord","id":"1:2908:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::Ord","id":"1:2908:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clamp","max","min"],"trait":{"name":"Ord","id":"1:2908:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:395:504"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13805:2967":{"id":"1:13805:2967","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:42736:203","prim@char":"4:12652:492","self::pattern":"1:13453:2429"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3702","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3108:150":{"id":"1:3108:150","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"b:0:150-0:365:2401":{"id":"b:0:150-0:365:2401","crate_id":0,"name":null,"span":{"filename":"src/into_either.rs","begin":[64,0],"end":[64,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["into_either_with","into_either"],"trait":{"name":"IntoEither","id":"0:146:2448","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5728:30582":{"id":"5:5728:30582","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:13875:30580"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:395:504":{"id":"0:395:504","crate_id":0,"name":"cmp","span":{"filename":"src/lib.rs","begin":[48,42],"end":[48,45]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"1:31705:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13867:34449":{"id":"1:13867:34449","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12652:492","self::pattern":"1:13453:2429"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3702","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13460:3702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13477:9674","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:377":{"id":"0:377","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[48,15],"end":[48,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:32947:258","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:96:185":{"id":"0:96:185","crate_id":0,"name":"Item","span":{"filename":"src/iterator.rs","begin":[185,4],"end":[185,41]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"L"},"trait":{"name":"Iterator","id":"1:8499:190","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"Iterator","id":"1:8499:190","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}}}}},"0:412:496":{"id":"0:412:496","crate_id":0,"name":"clone","span":{"filename":"src/iterator.rs","begin":[18,9],"end":[18,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"IterEither","id":"0:405:2446","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:218:2647":{"id":"0:218:2647","crate_id":0,"name":"left_or_else","span":{"filename":"src/lib.rs","begin":[730,4],"end":[738,5]},"visibility":"public","docs":"Returns left value or computes it from a closure\n\n# Examples\n\n```\n# use either::*;\nlet left: Either<String, u32> = Left(\"3\".to_string());\nassert_eq!(left.left_or_else(|_| unreachable!()), \"3\");\n\nlet right: Either<String, u32> = Right(3);\nassert_eq!(right.left_or_else(|x| x.to_string()), \"3\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"generic":"L"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3599:155","args":{"parenthesized":{"inputs":[{"generic":"R"}],"output":{"generic":"L"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13872:30583":{"id":"1:13872:30583","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:290":{"id":"0:290","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1219,0],"end":[1227,1]},"visibility":"default","docs":"`Either<L, R>` implements `Seek` if both `L` and `R` do.\n\nRequires crate feature `\"use_std\"`","links":{},"attrs":["#[cfg(any(test, feature = \"use_std\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Seek","id":"4:3697:2398","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Seek","id":"4:3697:2398","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["stream_position","stream_len","seek_relative","rewind"],"trait":{"name":"Seek","id":"4:3697:2398","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:293:2760"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:440:2489":{"id":"0:440:2489","crate_id":0,"name":"as_mut","span":{"filename":"src/lib.rs","begin":[1317,0],"end":[1321,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"::std::ffi::OsStr","id":"4:2099:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:166:2489":{"id":"0:166:2489","crate_id":0,"name":"as_mut","span":{"filename":"src/lib.rs","begin":[267,4],"end":[272,5]},"visibility":"public","docs":"Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.\n\n```\nuse either::*;\n\nfn mutate_left(value: &mut Either<u32, u32>) {\n    if let Some(l) = value.as_mut().left() {\n        *l = 999;\n    }\n}\n\nlet mut left = Left(123);\nlet mut right = Right(123);\nmutate_left(&mut left);\nmutate_left(&mut right);\nassert_eq!(left, Left(999));\nassert_eq!(right, Right(123));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"L"}}}},{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"R"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:424:2489":{"id":"0:424:2489","crate_id":0,"name":"as_mut","span":{"filename":"src/lib.rs","begin":[1311,0],"end":[1311,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:220:2653":{"id":"0:220:2653","crate_id":0,"name":"right_or","span":{"filename":"src/lib.rs","begin":[756,4],"end":[761,5]},"visibility":"public","docs":"Return right value or given value\n\nArguments passed to `right_or` are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use\n[`right_or_else`][Self::right_or_else], which is lazily evaluated.\n\n# Examples\n\n```\n# use either::*;\nlet right: Either<&str, &str> = Right(\"right\");\nassert_eq!(right.right_or(\"foo\"), \"right\");\n\nlet left: Either<&str, &str> = Left(\"left\");\nassert_eq!(left.right_or(\"right\"), \"right\");\n```","links":{"Self::right_or_else":"0:222:2661"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["other",{"generic":"R"}]],"output":{"generic":"R"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:421":{"id":"0:421","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1311,0],"end":[1311,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:3066:77","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:3066:77","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsMut","id":"1:3066:77","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:424:2489"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:404:830":{"id":"0:404:830","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[48,53],"end":[48,58]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10623:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10604:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5962-0:365:2401":{"id":"b:5:5962-0:365:2401","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10661:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32946:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5960:265","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["5:5964:1832"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:257:1085":{"id":"0:257:1085","crate_id":0,"name":"map","span":{"filename":"src/lib.rs","begin":[1085,4],"end":[1093,5]},"visibility":"public","docs":"Map `f` over the contained value and return the result in the\ncorresponding variant.\n\n```\nuse either::*;\n\nlet value: Either<_, i32> = Right(42);\n\nlet other = value.map(|x| x * 2);\nassert_eq!(other, Right(84));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"M"}},{"type":{"generic":"M"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"M","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3599:155","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":{"generic":"M"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3099-0:405:2446":{"id":"b:1:3099-0:405:2446","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3072:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterEither","id":"0:405:2446","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:3101:860"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:238:2707":{"id":"0:238:2707","crate_id":0,"name":"factor_err","span":{"filename":"src/lib.rs","begin":[985,4],"end":[990,5]},"visibility":"public","docs":"Factors out a homogenous type from an `Either` of [`Result`].\n\nHere, the homogeneous type is the `Err` type of the [`Result`].\n\n```\nuse either::*;\nlet left: Either<_, Result<String, u32>> = Left(Ok(vec![0]));\nassert_eq!(left.factor_err(), Ok(Left(vec![0])));\n\nlet right: Either<Result<Vec<u8>, u32>, _> = Right(Ok(String::new()));\nassert_eq!(right.factor_err(), Ok(Right(String::new())));\n```","links":{"`Result`":"1:43002:238"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:43002:238","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}}},{"type":{"generic":"E"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:383:725":{"id":"0:383:725","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[48,15],"end":[48,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:300:2767":{"id":"0:300:2767","crate_id":0,"name":"read_line","span":{"filename":"src/lib.rs","begin":[1248,4],"end":[1250,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"std::string::String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"4:3095:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13773:352":{"id":"1:13773:352","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:13774:30799","`u8`":"4:12671:1903"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13834:3049":{"id":"1:13834:3049","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"Returns an iterator over the disjoint matches of a pattern within the\ngiven string slice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:13453:2429","`DoubleEndedIterator`":"1:8394:134","prim@char":"4:12652:492","str::rmatches":"1:13836:34437"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:44938:8191","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3702","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2795:26574":{"id":"1:2795:26574","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:216:2635":{"id":"0:216:2635","crate_id":0,"name":"left_or","span":{"filename":"src/lib.rs","begin":[689,4],"end":[694,5]},"visibility":"public","docs":"Return left value or given value\n\nArguments passed to `left_or` are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use\n[`left_or_else`][Self::left_or_else], which is lazily evaluated.\n\n# Examples\n\n```\n# use either::*;\nlet left: Either<&str, &str> = Left(\"left\");\nassert_eq!(left.left_or(\"foo\"), \"left\");\n\nlet right: Either<&str, &str> = Right(\"right\");\nassert_eq!(right.left_or(\"left\"), \"left\");\n```","links":{"Self::left_or_else":"0:218:2647"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["other",{"generic":"L"}]],"output":{"generic":"L"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:293:2760":{"id":"0:293:2760","crate_id":0,"name":"seek","span":{"filename":"src/lib.rs","begin":[1224,4],"end":[1226,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["pos",{"resolved_path":{"name":"SeekFrom","id":"4:8586:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"4:3095:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13839:34438":{"id":"1:13839:34438","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"Returns an iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:13453:2429","`DoubleEndedIterator`":"1:8394:134","prim@char":"4:12652:492","str::rmatch_indices":"1:13841:34439"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:44884:8189","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3702","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13841:34439":{"id":"1:13841:34439","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"Returns an iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:13453:2429","`DoubleEndedIterator`":"1:8394:134","prim@char":"4:12652:492","str::match_indices":"1:13839:34438"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:44902:8190","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3702","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13460:3702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13477:9674","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13883:34451":{"id":"1:13883:34451","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Returns an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:5066:34451"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:45051:8147","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:23-0:371:241":{"id":"0:23-0:371:241","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[39,30],"end":[39,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::Either::Right","name":"Right","id":"0:371:241","glob":false}}},"0:44:2954":{"id":"0:44:2954","crate_id":0,"name":"extend","span":{"filename":"src/iterator.rs","begin":[34,4],"end":[39,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8326:177","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"A"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:239":{"id":"0:239","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[993,0],"end":[1014,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Result","id":"1:43002:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"L"}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Result","id":"1:43002:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"R"}}],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:243:2713"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:405:2446":{"id":"0:405:2446","crate_id":0,"name":"IterEither","span":{"filename":"src/iterator.rs","begin":[19,0],"end":[21,1]},"visibility":"public","docs":"Iterator that maps left or right iterators to corresponding `Either`-wrapped items.\n\nThis struct is created by the [`Either::factor_into_iter`],\n[`factor_iter`][Either::factor_iter],\nand [`factor_iter_mut`][Either::factor_iter_mut] methods.","links":{"Either::factor_iter_mut":"0:213:2624","Either::factor_iter":"0:210:2615","`Either::factor_into_iter`":"0:209:2608"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:32945:249-0:405:2446","a:1:3322:261-0:405:2446","a:1:3357:3329-0:405:2446","a:1:33003:3269-0:405:2446","a:1:42830:3308-0:405:2446","a:1:42831:3307-0:405:2446","b:0:150-0:405:2446","b:1:2790-0:405:2446","b:1:2793-0:405:2446","b:1:2822-0:405:2446","b:1:3095-0:405:2446","b:1:3099-0:405:2446","b:1:3105-0:405:2446","b:1:3110-0:405:2446","b:1:3967-0:405:2446","b:1:8330-0:405:2446","b:5:782-0:405:2446","0:409","0:413","0:93","0:123","0:133","0:137"]}}},"0:264:2741":{"id":"0:264:2741","crate_id":0,"name":"copied","span":{"filename":"src/lib.rs","begin":[1112,4],"end":[1121,5]},"visibility":"public","docs":"Maps an `Either<&L, &R>` to an `Either<L, R>` by copying the contents of\neither branch.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:3317:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:3317:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13786:30819":{"id":"1:13786:30819","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divides one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:13785:30818","str::split_at_mut_checked":"1:13788:30823"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:413":{"id":"0:413","crate_id":0,"name":null,"span":{"filename":"src/iterator.rs","begin":[18,16],"end":[18,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"1:10656:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"1:10656:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10656:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterEither","id":"0:405:2446","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:416:830"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:58:2961":{"id":"0:58:2961","crate_id":0,"name":"last","span":{"filename":"src/iterator.rs","begin":[76,4],"end":[78,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8499:190","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3101:860":{"id":"1:3101:860","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:373:2033":{"id":"0:373:2033","crate_id":0,"name":"0","span":{"filename":"src/lib.rs","begin":[53,10],"end":[53,11]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"generic":"R"}}},"0:24:2427":{"id":"0:24:2427","crate_id":0,"name":"for_both","span":{"filename":"src/lib.rs","begin":[81,0],"end":[88,1]},"visibility":"public","docs":"Evaluate the provided expression for both [`Either::Left`] and [`Either::Right`].\n\nThis macro is useful in cases where both sides of [`Either`] can be interacted with\nin the same way even though the don't share the same type.\n\nSyntax: `either::for_both!(` *expression* `,` *pattern* `=>` *expression* `)`\n\n# Example\n\n```\nuse either::Either;\n\nfn length(owned_or_borrowed: Either<String, &'static str>) -> usize {\n    either::for_both!(owned_or_borrowed, s => s.len())\n}\n\nfn main() {\n    let borrowed = Either::Right(\"Hello world!\");\n    let owned = Either::Left(\"Hello world!\".to_owned());\n\n    assert_eq!(length(borrowed), 12);\n    assert_eq!(length(owned), 12);\n}\n```","links":{"`Either::Right`":"0:371:241","`Either`":"0:365:2401","`Either::Left`":"0:368:193"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! for_both {\n    ($value:expr, $pattern:pat => $result:expr) => { ... };\n}"}},"0:49:185":{"id":"0:49:185","crate_id":0,"name":"Item","span":{"filename":"src/iterator.rs","begin":[48,4],"end":[48,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"L"},"trait":{"name":"Iterator","id":"1:8499:190","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"1:13788:30823":{"id":"1:13788:30823","crate_id":1,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divides one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"1:13787:30822"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13790:8134":{"id":"1:13790:8134","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:12652:492"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:44704:3704","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3099-0:365:2401":{"id":"b:1:3099-0:365:2401","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3072:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:3101:860"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:337:656":{"id":"0:337:656","crate_id":0,"name":"deref_mut","span":{"filename":"src/lib.rs","begin":[1375,4],"end":[1377,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:3558:128","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13781:2496":{"id":"1:13781:2496","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11577:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11577:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:319":{"id":"0:319","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1338,0],"end":[1346,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Target","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:3066:77","args":{"angle_bracketed":{"args":[{"type":{"generic":"Target"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:3066:77","args":{"angle_bracketed":{"args":[{"type":{"generic":"Target"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsMut","id":"1:3066:77","args":{"angle_bracketed":{"args":[{"type":{"generic":"Target"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:323:2489"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:3114:1857":{"id":"1:3114:1857","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:43002:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32945:249-0:365:2401":{"id":"a:1:32945:249-0:365:2401","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32945:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32945:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32945:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:59:2962":{"id":"0:59:2962","crate_id":0,"name":"nth","span":{"filename":"src/iterator.rs","begin":[80,4],"end":[82,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8499:190","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:273:860":{"id":"0:273:860","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[1154,4],"end":[1159,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["r",{"resolved_path":{"name":"Result","id":"1:43002:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"L"}}],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:342:2777":{"id":"0:342:2777","crate_id":0,"name":"description","span":{"filename":"src/lib.rs","begin":[1394,4],"end":[1396,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:106:2962":{"id":"0:106:2962","crate_id":0,"name":"nth","span":{"filename":"src/iterator.rs","begin":[217,4],"end":[219,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8499:190","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:401":{"id":"0:401","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[48,53],"end":[48,58]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"1:10656:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"1:10656:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10656:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:404:830"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3967-0:405:2446":{"id":"b:1:3967-0:405:2446","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32946:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3965:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterEither","id":"0:405:2446","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:3969:1872"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:116:2967":{"id":"0:116:2967","crate_id":0,"name":"find","span":{"filename":"src/iterator.rs","begin":[250,4],"end":[255,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["predicate",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8499:190","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3596:154","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8499:190","args":null}}}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:210:2615":{"id":"0:210:2615","crate_id":0,"name":"factor_iter","span":{"filename":"src/lib.rs","begin":[637,4],"end":[645,5]},"visibility":"public","docs":"Borrows an `Either` of `Iterator`s to be an `Iterator` of `Either`s\n\nUnlike [`iter`][Either::iter], this does not require the\n`Left` and `Right` iterators to have the same item type.\n\n```\nuse either::*;\nlet left: Either<_, Vec<u8>> = Left([\"hello\"]);\nassert_eq!(left.factor_iter().next(), Some(Left(&\"hello\")));\nlet right: Either<[&str; 2], _> = Right(vec![0, 1]);\nassert_eq!(right.factor_iter().collect::<Vec<_>>(), vec![Right(&0), Right(&1)]);\n\n```","links":{"Either::iter":"0:203:1007"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"IterEither","id":"0:405:2446","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"L"}}},"trait":{"name":"IntoIterator","id":"1:8326:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},{"type":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"R"}}},"trait":{"name":"IntoIterator","id":"1:8326:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"L"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8326:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}]}},{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"R"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8326:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13800:30834":{"id":"1:13800:30834","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"4:12652:492","self::pattern":"1:13453:2429"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3702","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:277:2693":{"id":"0:277:2693","crate_id":0,"name":"into","span":{"filename":"src/lib.rs","begin":[1165,4],"end":[1170,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:43002:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"L"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:202:985":{"id":"0:202:985","crate_id":0,"name":"into_iter","span":{"filename":"src/lib.rs","begin":[537,4],"end":[543,5]},"visibility":"public","docs":"Convert the inner value to an iterator.\n\nThis requires the `Left` and `Right` iterators to have the same item type.\nSee [`factor_into_iter`][Either::factor_into_iter] to iterate different types.\n\n```\nuse either::*;\n\nlet left: Either<_, Vec<u32>> = Left(vec![1, 2, 3, 4, 5]);\nlet mut right: Either<Vec<u32>, _> = Right(vec![]);\nright.extend(left.into_iter());\nassert_eq!(right, Right(vec![1, 2, 3, 4, 5]));\n```","links":{"Either::factor_into_iter":"0:209:2608"},"attrs":["#[allow(clippy::should_implement_trait)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"L"},"trait":{"name":"","id":"1:8326:177","args":null}}}},{"type":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"1:8326:177","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8326:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8326:177","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"L"},"trait":{"name":"","id":"1:8326:177","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:217:2641":{"id":"0:217:2641","crate_id":0,"name":"left_or_default","span":{"filename":"src/lib.rs","begin":[708,4],"end":[716,5]},"visibility":"public","docs":"Return left or a default\n\n# Examples\n\n```\n# use either::*;\nlet left: Either<String, u32> = Left(\"left\".to_string());\nassert_eq!(left.left_or_default(), \"left\");\n\nlet right: Either<String, u32> = Right(42);\nassert_eq!(right.left_or_default(), String::default());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"L"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:3147:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:230":{"id":"0:230","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[949,0],"end":[968,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:233:2699"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:169:2501":{"id":"0:169:2501","crate_id":0,"name":"flip","span":{"filename":"src/lib.rs","begin":[314,4],"end":[319,5]},"visibility":"public","docs":"Convert `Either<L, R>` to `Either<R, L>`.\n\n```\nuse either::*;\n\nlet left: Either<_, ()> = Left(123);\nassert_eq!(left.flip(), Right(123));\n\nlet right: Either<(), _> = Right(\"some value\");\nassert_eq!(right.flip(), Left(\"some value\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"L"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42830:3308-0:405:2446":{"id":"a:1:42830:3308-0:405:2446","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:42830:3308","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:42830:3308","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42830:3308","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterEither","id":"0:405:2446","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5711":{"id":"5:5711","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5712:35162","5:5713:9513","5:5715:35163","5:5717:35164","5:5725:35165","5:5726:35166","5:5727:3260","5:5728:30582","5:5729:30581"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5729:30581":{"id":"5:5729:30581","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:13876:30579"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:263:2739":{"id":"0:263:2739","crate_id":0,"name":"cloned","span":{"filename":"src/lib.rs","begin":[1099,4],"end":[1108,5]},"visibility":"public","docs":"Maps an `Either<&L, &R>` to an `Either<L, R>` by cloning the contents of\neither branch.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2810:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2810:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:46":{"id":"0:46","crate_id":0,"name":null,"span":{"filename":"src/iterator.rs","begin":[43,0],"end":[133,1]},"visibility":"default","docs":"`Either<L, R>` is an iterator if both `L` and `R` are iterators.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8499:190","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8499:190","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"L"},"trait":{"name":"","id":"1:8499:190","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["eq","map","is_sorted","array_chunks","try_reduce","collect_into","flat_map","enumerate","fold","step_by","min","all","by_ref","is_sorted_by","sum","try_find","partition_in_place","find_map","flatten","collect","peekable","any","zip","min_by","le","cloned","partial_cmp","lt","product","ge","rposition","is_sorted_by_key","is_partitioned","position","map_windows","skip_while","intersperse","min_by_key","gt","chain","__iterator_get_unchecked","cmp_by","rev","try_fold","count","fuse","take_while","for_each","intersperse_with","partition","max","take","cmp","copied","partial_cmp_by","unzip","try_for_each","inspect","find","map_while","last","filter","max_by","next_chunk","eq_by","ne","cycle","reduce","try_collect","scan","nth","filter_map","max_by_key","size_hint","skip","advance_by"],"trait":{"name":"Iterator","id":"1:8499:190","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"super::Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:49:185","0:50:1226","0:51:2956","0:52:2957","0:55:2960","0:57:601","0:58:2961","0:59:2962","0:60:2964","0:62:2966","0:65:324","0:67:343","0:69:2967","0:71:2970","0:74:2971"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:14144:211":{"id":"1:14144:211","crate_id":1,"name":"Output","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"Future","id":"1:45682:163","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"0:249":{"id":"0:249","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1037,0],"end":[1056,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"generic":"L"},{"generic":"T"}]}},{"type":{"tuple":[{"generic":"R"},{"generic":"T"}]}}],"bindings":[]}}}},"items":["0:253:2727"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:437":{"id":"0:437","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1317,0],"end":[1321,1]},"visibility":"default","docs":"Requires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:3066:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"::std::ffi::OsStr","id":"4:2099:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:3066:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"::std::ffi::OsStr","id":"4:2099:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsMut","id":"1:3066:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"4:2099:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:440:2489"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:164:2472":{"id":"0:164:2472","crate_id":0,"name":"right","span":{"filename":"src/lib.rs","begin":[224,4],"end":[229,5]},"visibility":"public","docs":"Convert the right side of `Either<L, R>` to an `Option<R>`.\n\n```\nuse either::*;\n\nlet left: Either<_, ()> = Left(\"some value\");\nassert_eq!(left.right(),  None);\n\nlet right: Either<(), _> = Right(321);\nassert_eq!(right.right(), Some(321));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3967-0:365:2401":{"id":"b:1:3967-0:365:2401","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32946:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3965:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:3969:1872"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:80:2973":{"id":"0:80:2973","crate_id":0,"name":"nth_back","span":{"filename":"src/iterator.rs","begin":[144,4],"end":[146,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8499:190","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:308":{"id":"0:308","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1279,0],"end":[1287,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Target","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:3063:78","args":{"angle_bracketed":{"args":[{"type":{"generic":"Target"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:3063:78","args":{"angle_bracketed":{"args":[{"type":{"generic":"Target"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:3063:78","args":{"angle_bracketed":{"args":[{"type":{"generic":"Target"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:312:353"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:432:2489":{"id":"0:432:2489","crate_id":0,"name":"as_mut","span":{"filename":"src/lib.rs","begin":[1312,0],"end":[1316,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"::std::path::Path","id":"4:5505:215","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:324":{"id":"0:324","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1348,0],"end":[1356,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Target","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:3066:77","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"Target"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:3066:77","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"Target"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsMut","id":"1:3066:77","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"Target"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:328:2489"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:221:2657":{"id":"0:221:2657","crate_id":0,"name":"right_or_default","span":{"filename":"src/lib.rs","begin":[775,4],"end":[783,5]},"visibility":"public","docs":"Return right or a default\n\n# Examples\n\n```\n# use either::*;\nlet left: Either<String, u32> = Left(\"left\".to_string());\nassert_eq!(left.right_or_default(), u32::default());\n\nlet right: Either<String, u32> = Right(42);\nassert_eq!(right.right_or_default(), 42);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"R"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:3147:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65:324":{"id":"0:65:324","crate_id":0,"name":"all","span":{"filename":"src/iterator.rs","begin":[99,4],"end":[104,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3596:154","args":{"parenthesized":{"inputs":[{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8499:190","args":null}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:152-0:146:2448":{"id":"0:152-0:146:2448","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[146,0],"end":[146,38]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::into_either::IntoEither","name":"IntoEither","id":"0:146:2448","glob":false}}},"1:13779:29904":{"id":"1:13779:29904","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11577:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11577:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:244":{"id":"0:244","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1016,0],"end":[1035,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"generic":"T"},{"generic":"L"}]}},{"type":{"tuple":[{"generic":"T"},{"generic":"R"}]}}],"bindings":[]}}}},"items":["0:248:2720"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:332:263":{"id":"0:332:263","crate_id":0,"name":"Target","span":{"filename":"src/lib.rs","begin":[1363,4],"end":[1363,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"L"},"trait":{"name":"Deref","id":"1:3558:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"0:301":{"id":"0:301","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1257,0],"end":[1277,1]},"visibility":"default","docs":"`Either<L, R>` implements `Write` if both `L` and `R` do.\n\nRequires crate feature `\"use_std\"`","links":{},"attrs":["#[cfg(any(test, feature = \"use_std\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Write","id":"4:3679:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Write","id":"4:3679:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["is_write_vectored","by_ref","write_all","write_vectored","write_all_vectored","write_fmt"],"trait":{"name":"Write","id":"4:3679:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:304:2769","0:305:2770","0:306:2771","0:307:2773"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:416:830":{"id":"0:416:830","crate_id":0,"name":"fmt","span":{"filename":"src/iterator.rs","begin":[18,16],"end":[18,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10623:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10604:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:123":{"id":"0:123","crate_id":0,"name":null,"span":{"filename":"src/iterator.rs","begin":[272,0],"end":[298,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedIterator","id":"1:8394:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedIterator","id":"1:8394:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["nth_back","advance_back_by","rfind","rfold","try_rfold"],"trait":{"name":"DoubleEndedIterator","id":"1:8394:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterEither","id":"0:405:2446","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:126:2972","0:127:2973","0:128:2974","0:131:2975"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13774:30799":{"id":"1:13774:30799","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:12671:1903"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13846:34441":{"id":"1:13846:34441","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:782-0:405:2446":{"id":"b:5:782-0:405:2446","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2810:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:778:264","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterEither","id":"0:405:2446","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["5:784:7293","5:785:26581","5:786:26582"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13775:29902":{"id":"1:13775:29902","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:42736:203"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11577:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11577:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:248:2720":{"id":"0:248:2720","crate_id":0,"name":"factor_first","span":{"filename":"src/lib.rs","begin":[1029,4],"end":[1034,5]},"visibility":"public","docs":"Factor out a homogeneous type from an either of pairs.\n\nHere, the homogeneous type is the first element of the pairs.\n\n```\nuse either::*;\nlet left: Either<_, (u32, String)> = Left((123, vec![0]));\nassert_eq!(left.factor_first().0, 123);\n\nlet right: Either<(u32, Vec<u8>), _> = Right((123, String::new()));\nassert_eq!(right.factor_first().0, 123);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"tuple":[{"generic":"T"},{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13855:34446":{"id":"1:13855:34446","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12652:492","self::pattern":"1:13453:2429"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3702","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:445":{"id":"0:445","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1322,0],"end":[1326,1]},"visibility":"default","docs":"Requires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:3066:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"::std::ffi::CStr","id":"1:41265:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:3066:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"::std::ffi::CStr","id":"1:41265:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsMut","id":"1:3066:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"CStr","id":"1:41265:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:448:2489"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13783:34432":{"id":"1:13783:34432","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:12658:1772","str::slice_mut_unchecked":"1:13784:34433","crate::ops::Index":"1:40277:3132"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13802:30835":{"id":"1:13802:30835","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:12652:492","self::pattern":"1:13453:2429"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3702","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13460:3702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13477:9674","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:107:2964":{"id":"0:107:2964","crate_id":0,"name":"collect","span":{"filename":"src/iterator.rs","begin":[221,4],"end":[226,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"B"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"B"},"bounds":[{"trait_bound":{"trait":{"name":"iter::FromIterator","id":"1:8315:158","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8499:190","args":null}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:147:2447":{"id":"0:147:2447","crate_id":0,"name":"into_either","span":{"filename":"src/into_either.rs","begin":[29,4],"end":[35,5]},"visibility":"default","docs":"Converts `self` into a [`Left`] variant of [`Either<Self, Self>`](Either)\nif `into_left` is `true`.\nConverts `self` into a [`Right`] variant of [`Either<Self, Self>`](Either)\notherwise.\n\n# Examples\n\n```\nuse either::{IntoEither, Left, Right};\n\nlet x = 0;\nassert_eq!(x.into_either(true), Left(x));\nassert_eq!(x.into_either(false), Right(x));\n```","links":{"Either":"0:365:2401","`Right`":"0:371:241","`Left`":"0:368:193"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["into_left",{"primitive":"bool"}]],"output":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:429":{"id":"0:429","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1312,0],"end":[1316,1]},"visibility":"default","docs":"Requires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:3066:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"::std::path::Path","id":"4:5505:215","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:3066:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"::std::path::Path","id":"4:5505:215","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsMut","id":"1:3066:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"4:5505:215","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:432:2489"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:14142-0:365:2401":{"id":"b:1:14142-0:365:2401","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Future","id":"1:45682:163","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoFuture","id":"1:45685:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:14144:211","1:14145:176","1:14146:984"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"F"}}}},"0:89:1027":{"id":"0:89:1027","crate_id":0,"name":"len","span":{"filename":"src/iterator.rs","begin":[168,4],"end":[170,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:165:353":{"id":"0:165:353","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[242,4],"end":[247,5]},"visibility":"public","docs":"Convert `&Either<L, R>` to `Either<&L, &R>`.\n\n```\nuse either::*;\n\nlet left: Either<_, ()> = Left(\"some value\");\nassert_eq!(left.as_ref(), Left(&\"some value\"));\n\nlet right: Either<(), _> = Right(\"some value\");\nassert_eq!(right.as_ref(), Right(&\"some value\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"L"}}}},{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"R"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:84:2975":{"id":"0:84:2975","crate_id":0,"name":"rfind","span":{"filename":"src/iterator.rs","begin":[155,4],"end":[160,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["predicate",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8499:190","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3596:154","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8499:190","args":null}}}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:314":{"id":"0:314","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1328,0],"end":[1336,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Target","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:3063:78","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"Target"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:3063:78","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"Target"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:3063:78","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"Target"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:318:353"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13836:34437":{"id":"1:13836:34437","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"Returns an iterator over the disjoint matches of a pattern within this\nstring slice, yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:13453:2429","`DoubleEndedIterator`":"1:8394:134","prim@char":"4:12652:492","str::matches":"1:13834:3049"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:44956:8192","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3702","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13460:3702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13477:9674","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5727:3260":{"id":"5:5727:3260","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:170:2508":{"id":"0:170:2508","crate_id":0,"name":"map_left","span":{"filename":"src/lib.rs","begin":[333,4],"end":[341,5]},"visibility":"public","docs":"Apply the function `f` on the value in the `Left` variant if it is present rewrapping the\nresult in `Left`.\n\n```\nuse either::*;\n\nlet left: Either<_, u32> = Left(123);\nassert_eq!(left.map_left(|x| x * 2), Left(246));\n\nlet right: Either<u32, _> = Right(123);\nassert_eq!(right.map_left(|x| x * 2), Right(123));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"M"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"M","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3599:155","args":{"parenthesized":{"inputs":[{"generic":"L"}],"output":{"generic":"M"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:234":{"id":"0:234","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[970,0],"end":[991,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Result","id":"1:43002:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"E"}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Result","id":"1:43002:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"E"}}],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:238:2707"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13819:34435":{"id":"1:13819:34435","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"Returns an iterator over substrings of the given string slice, separated\nby characters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:13453:2429","str::split":"1:13812:3506","prim@char":"4:12652:492","`DoubleEndedIterator`":"1:8394:134","str::rsplit_terminator":"1:13821:34436"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:44784:8187","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3702","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13870:2807":{"id":"1:13870:2807","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:13412:149","`FromStr`":"1:13411:3707"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:43002:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:13411:3707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:13411:3707","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:163:2467":{"id":"0:163:2467","crate_id":0,"name":"left","span":{"filename":"src/lib.rs","begin":[206,4],"end":[211,5]},"visibility":"public","docs":"Convert the left side of `Either<L, R>` to an `Option<L>`.\n\n```\nuse either::*;\n\nlet left: Either<_, ()> = Left(\"some value\");\nassert_eq!(left.left(),  Some(\"some value\"));\n\nlet right: Either<(), _> = Right(321);\nassert_eq!(right.left(), None);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3969:1872":{"id":"1:3969:1872","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:40446:6685","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:25:2441":{"id":"0:25:2441","crate_id":0,"name":"try_left","span":{"filename":"src/lib.rs","begin":[113,0],"end":[120,1]},"visibility":"public","docs":"Macro for unwrapping the left side of an [`Either`], which fails early\nwith the opposite side. Can only be used in functions that return\n`Either` because of the early return of `Right` that it provides.\n\nSee also [`try_right!`] for its dual, which applies the same just to the\nright side.\n\n# Example\n\n```\nuse either::{Either, Left, Right};\n\nfn twice(wrapper: Either<u32, &str>) -> Either<u32, &str> {\n    let value = either::try_left!(wrapper);\n    Left(value * 2)\n}\n\nfn main() {\n    assert_eq!(twice(Left(2)), Left(4));\n    assert_eq!(twice(Right(\"ups\")), Right(\"ups\"));\n}\n```","links":{"`Either`":"0:365:2401","`try_right!`":"0:26:2444"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! try_left {\n    ($expr:expr) => { ... };\n}"}},"5:5725:35165":{"id":"5:5725:35165","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3357:3329-0:405:2446":{"id":"a:1:3357:3329-0:405:2446","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"1:3357:3329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"1:3357:3329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3357:3329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterEither","id":"0:405:2446","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:99:2957":{"id":"0:99:2957","crate_id":0,"name":"fold","span":{"filename":"src/iterator.rs","begin":[195,4],"end":[200,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["init",{"generic":"Acc"}],["f",{"generic":"G"}]],"output":{"generic":"Acc"},"c_variadic":false},"generics":{"params":[{"name":"Acc","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"G"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3596:154","args":{"parenthesized":{"inputs":[{"generic":"Acc"},{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8499:190","args":null}}}],"output":{"generic":"Acc"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:233:2699":{"id":"0:233:2699","crate_id":0,"name":"factor_none","span":{"filename":"src/lib.rs","begin":[962,4],"end":[967,5]},"visibility":"public","docs":"Factors out `None` from an `Either` of [`Option`].\n\n```\nuse either::*;\nlet left: Either<_, Option<String>> = Left(Some(vec![0]));\nassert_eq!(left.factor_none(), Some(Left(vec![0])));\n\nlet right: Either<Option<Vec<u8>>, _> = Right(Some(String::new()));\nassert_eq!(right.factor_none(), Some(Right(String::new())));\n```","links":{"`Option`":"1:42734:206"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:162:2461":{"id":"0:162:2461","crate_id":0,"name":"is_right","span":{"filename":"src/lib.rs","begin":[191,4],"end":[193,5]},"visibility":"public","docs":"Return true if the value is the `Right` variant.\n\n```\nuse either::*;\n\nlet values = [Left(1), Right(\"the right value\")];\nassert_eq!(values[0].is_right(), false);\nassert_eq!(values[1].is_right(), true);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:306:2771":{"id":"0:306:2771","crate_id":0,"name":"write_fmt","span":{"filename":"src/lib.rs","begin":[1270,4],"end":[1272,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["fmt",{"resolved_path":{"name":"fmt::Arguments","id":"1:43921:2772","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"4:3095:238","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:173:2515":{"id":"0:173:2515","crate_id":0,"name":"map_right","span":{"filename":"src/lib.rs","begin":[355,4],"end":[363,5]},"visibility":"public","docs":"Apply the function `f` on the value in the `Right` variant if it is present rewrapping the\nresult in `Right`.\n\n```\nuse either::*;\n\nlet left: Either<_, u32> = Left(123);\nassert_eq!(left.map_right(|x| x * 2), Left(123));\n\nlet right: Either<u32, _> = Right(123);\nassert_eq!(right.map_right(|x| x * 2), Right(246));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3599:155","args":{"parenthesized":{"inputs":[{"generic":"R"}],"output":{"generic":"S"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:433":{"id":"0:433","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1317,0],"end":[1321,1]},"visibility":"default","docs":"Requires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:3063:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"::std::ffi::OsStr","id":"4:2099:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:3063:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"::std::ffi::OsStr","id":"4:2099:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:3063:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"4:2099:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:436:353"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:146:2448":{"id":"0:146:2448","crate_id":0,"name":"IntoEither","span":{"filename":"src/into_either.rs","begin":[14,0],"end":[62,1]},"visibility":"public","docs":"Provides methods for converting a type `Self` into either a [`Left`] or [`Right`]\nvariant of [`Either<Self, Self>`](Either).\n\nThe [`into_either`](IntoEither::into_either) method takes a [`bool`] to determine\nwhether to convert to [`Left`] or [`Right`].\n\nThe [`into_either_with`](IntoEither::into_either_with) method takes a\n[predicate function](FnOnce) to determine whether to convert to [`Left`] or [`Right`].","links":{"`Left`":"0:368:193","`bool`":"4:12650:436","IntoEither::into_either_with":"0:148:2999","`Right`":"0:371:241","FnOnce":"1:3599:155","IntoEither::into_either":"0:147:2447","Either":"0:365:2401"},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:147:2447","0:148:2999"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32946:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:150"]}}},"b:1:3110-0:365:2401":{"id":"b:1:3110-0:365:2401","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3069:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:3113:150","1:3114:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13784:34433":{"id":"1:13784:34433","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:12658:1772","crate::ops::IndexMut":"1:3628:3133","str::slice_unchecked":"1:13783:34432"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:0:150-0:405:2446":{"id":"b:0:150-0:405:2446","crate_id":0,"name":null,"span":{"filename":"src/into_either.rs","begin":[64,0],"end":[64,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["into_either_with","into_either"],"trait":{"name":"IntoEither","id":"0:146:2448","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterEither","id":"0:405:2446","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:105:2961":{"id":"0:105:2961","crate_id":0,"name":"last","span":{"filename":"src/iterator.rs","begin":[213,4],"end":[215,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8499:190","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74:2971":{"id":"0:74:2971","crate_id":0,"name":"position","span":{"filename":"src/iterator.rs","begin":[127,4],"end":[132,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["predicate",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3596:154","args":{"parenthesized":{"inputs":[{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8499:190","args":null}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13824:30828":{"id":"1:13824:30828","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"Returns an iterator over substrings of the given string slice, separated\nby a pattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:12652:492","self::pattern":"1:13453:2429","str::rsplitn":"1:13826:30830"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:44838:8119","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3702","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5726:35166":{"id":"5:5726:35166","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:299:3682","`String`":"5:7774:257"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:299:3682","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:289:2757":{"id":"0:289:2757","crate_id":0,"name":"read_to_string","span":{"filename":"src/lib.rs","begin":[1210,4],"end":[1212,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"std::string::String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"4:3095:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13877:30747":{"id":"1:13877:30747","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1148:38810"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:287:2755":{"id":"0:287:2755","crate_id":0,"name":"read_exact","span":{"filename":"src/lib.rs","begin":[1202,4],"end":[1204,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"4:3095:238","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:282:1354":{"id":"0:282:1354","crate_id":0,"name":"poll","span":{"filename":"src/lib.rs","begin":[1181,4],"end":[1186,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"1:42861:2393","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}],["cx",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"core::task::Context","id":"1:14346:119","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"core::task::Poll","id":"1:45707:219","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:45682:163","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3095-0:405:2446":{"id":"b:1:3095-0:405:2446","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3072:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3069:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterEither","id":"0:405:2446","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:3098:2693"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13812:3506":{"id":"1:13812:3506","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"Returns an iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:13453:2429","`DoubleEndedIterator`":"1:8394:134","prim@char":"4:12652:492","str::split_whitespace":"1:13793:26771","str::rsplit":"1:13816:30826"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:44734:3235","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3702","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:344":{"id":"0:344","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1404,0],"end":[1412,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"1:10661:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"1:10661:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:10661:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:347:830"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:93":{"id":"0:93","crate_id":0,"name":null,"span":{"filename":"src/iterator.rs","begin":[180,0],"end":[270,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8499:190","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8499:190","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["eq","map","is_sorted","array_chunks","try_reduce","collect_into","flat_map","enumerate","fold","step_by","min","all","by_ref","is_sorted_by","sum","try_find","partition_in_place","find_map","flatten","collect","peekable","any","zip","min_by","le","cloned","partial_cmp","lt","product","ge","rposition","is_sorted_by_key","is_partitioned","position","map_windows","skip_while","intersperse","min_by_key","gt","chain","__iterator_get_unchecked","cmp_by","rev","try_fold","count","fuse","take_while","for_each","intersperse_with","partition","max","take","cmp","copied","partial_cmp_by","unzip","try_for_each","inspect","find","map_while","last","filter","max_by","next_chunk","eq_by","ne","cycle","reduce","try_collect","scan","nth","filter_map","max_by_key","size_hint","skip","advance_by"],"trait":{"name":"Iterator","id":"1:8499:190","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterEither","id":"0:405:2446","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:96:185","0:97:1226","0:98:2956","0:99:2957","0:102:2960","0:104:601","0:105:2961","0:106:2962","0:107:2964","0:109:2966","0:112:324","0:114:343","0:116:2967","0:118:2970","0:121:2971"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:307:2773":{"id":"0:307:2773","crate_id":0,"name":"flush","span":{"filename":"src/lib.rs","begin":[1274,4],"end":[1276,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"4:3095:238","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13884:31993":{"id":"1:13884:31993","crate_id":1,"name":"substr_range","span":null,"visibility":"public","docs":"Returns the range that a substring points to.\n\nReturns `None` if `substr` does not point within `self`.\n\nUnlike [`str::find`], **this does not search through the string**.\nInstead, it uses pointer arithmetic to find where in the string\n`substr` is derived from.\n\nThis is useful for extending [`str::split`] and similar methods.\n\nNote that this method may return false positives (typically either\n`Some(0..0)` or `Some(self.len()..self.len())`) if `substr` is a\nzero-length `str` that points at the beginning or end of another,\nindependent, `str`.\n\n# Examples\n```\n#![feature(substr_range)]\n\nlet data = \"a, b, b, a\";\nlet mut iter = data.split(\", \").map(|s| data.substr_range(s).unwrap());\n\nassert_eq!(iter.next(), Some(0..1));\nassert_eq!(iter.next(), Some(3..4));\nassert_eq!(iter.next(), Some(6..7));\nassert_eq!(iter.next(), Some(9..10));\n```","links":{"`str::split`":"1:13812:3506","`str::find`":"1:13805:2967"},"attrs":["#[must_use]","#[unstable(feature = \"substr_range\", issue = \"126769\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["substr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Range","id":"1:40309:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13798:29360":{"id":"1:13798:29360","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:12652:492","self::pattern":"1:13453:2429"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3702","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2790-0:365:2401":{"id":"b:1:2790-0:365:2401","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32946:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2784:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:2792:3006"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:52:2957":{"id":"0:52:2957","crate_id":0,"name":"fold","span":{"filename":"src/iterator.rs","begin":[58,4],"end":[63,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["init",{"generic":"Acc"}],["f",{"generic":"G"}]],"output":{"generic":"Acc"},"c_variadic":false},"generics":{"params":[{"name":"Acc","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"G"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3596:154","args":{"parenthesized":{"inputs":[{"generic":"Acc"},{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8499:190","args":null}}}],"output":{"generic":"Acc"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:8330-0:365:2401":{"id":"b:1:8330-0:365:2401","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8499:190","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8326:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:8332:185","1:8333:2580","1:8334:985"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:254":{"id":"0:254","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1058,0],"end":[1094,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:256:2731","0:257:1085"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:278":{"id":"0:278","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1174,0],"end":[1187,1]},"visibility":"default","docs":"`Either<L, R>` is a future if both `L` and `R` are futures.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Future","id":"1:45682:163","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Future","id":"1:45682:163","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"L"},"trait":{"name":"","id":"1:45682:163","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Future","id":"1:45682:163","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:281:211","0:282:1354"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:274":{"id":"0:274","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1164,0],"end":[1171,1]},"visibility":"default","docs":"Convert from `Either` to `Result` with `Right => Ok` and `Left => Err`.","links":{},"attrs":["#[allow(clippy::from_over_into)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3069:175","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Result","id":"1:43002:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"L"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:277:2693"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32945:249-0:405:2446":{"id":"a:1:32945:249-0:405:2446","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32945:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32945:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32945:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterEither","id":"0:405:2446","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3105-0:405:2446":{"id":"b:1:3105-0:405:2446","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3075:272","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterEither","id":"0:405:2446","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:3108:150","1:3109:1859"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:187:2552":{"id":"0:187:2552","crate_id":0,"name":"either","span":{"filename":"src/lib.rs","begin":[440,4],"end":[449,5]},"visibility":"public","docs":"Apply one of two functions depending on contents, unifying their result. If the value is\n`Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second\nfunction `g` is applied.\n\n```\nuse either::*;\n\nfn square(n: u32) -> i32 { (n * n) as i32 }\nfn negate(n: i32) -> i32 { -n }\n\nlet left: Either<u32, i32> = Left(4);\nassert_eq!(left.either(square, negate), 16);\n\nlet right: Either<u32, i32> = Right(-4);\nassert_eq!(right.either(square, negate), 4);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}],["g",{"generic":"G"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3599:155","args":{"parenthesized":{"inputs":[{"generic":"L"}],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"G"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3599:155","args":{"parenthesized":{"inputs":[{"generic":"R"}],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3322:261-0:365:2401":{"id":"a:1:3322:261-0:365:2401","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3322:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3322:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3322:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2793-0:405:2446":{"id":"b:1:2793-0:405:2446","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32946:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2787:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterEither","id":"0:405:2446","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:2795:26574"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:33003:3269-0:365:2401":{"id":"a:1:33003:3269-0:365:2401","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:33003:3269","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:33003:3269","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:33003:3269","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:305:2770":{"id":"0:305:2770","crate_id":0,"name":"write_all","span":{"filename":"src/lib.rs","begin":[1266,4],"end":[1268,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"4:3095:238","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13850:34443":{"id":"1:13850:34443","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:33003:3269-0:405:2446":{"id":"a:1:33003:3269-0:405:2446","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:33003:3269","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:33003:3269","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:33003:3269","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterEither","id":"0:405:2446","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13831:30833":{"id":"1:13831:30833","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3702","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13460:3702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13477:9674","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13785:30818":{"id":"1:13785:30818","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divides one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"1:13787:30822","str::split_at_mut":"1:13786:30819"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13796:34434":{"id":"1:13796:34434","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"Returns an iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:44998:8193","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:128:2974":{"id":"0:128:2974","crate_id":0,"name":"rfold","span":{"filename":"src/iterator.rs","begin":[285,4],"end":[290,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["init",{"generic":"Acc"}],["f",{"generic":"G"}]],"output":{"generic":"Acc"},"c_variadic":false},"generics":{"params":[{"name":"Acc","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"G"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3596:154","args":{"parenthesized":{"inputs":[{"generic":"Acc"},{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8499:190","args":null}}}],"output":{"generic":"Acc"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3098:2693":{"id":"1:3098:2693","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:3072:157"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:370:2033":{"id":"0:370:2033","crate_id":0,"name":"0","span":{"filename":"src/lib.rs","begin":[51,9],"end":[51,10]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"generic":"L"}}},"0:206:1008":{"id":"0:206:1008","crate_id":0,"name":"iter_mut","span":{"filename":"src/lib.rs","begin":[589,4],"end":[597,5]},"visibility":"public","docs":"Mutably borrow the inner value as an iterator.\n\nThis requires the `Left` and `Right` iterators to have the same item type.\nSee [`factor_iter_mut`][Either::factor_iter_mut] to iterate different types.\n\n```\nuse either::*;\n\nlet mut left: Either<_, &mut [u32]> = Left(vec![2, 3]);\nfor l in left.iter_mut() {\n    *l *= *l\n}\nassert_eq!(left, Left(vec![4, 9]));\n\nlet mut inner = [4, 5];\nlet mut right: Either<Vec<u32>, _> = Right(&mut inner[..]);\nfor r in right.iter_mut() {\n    *r *= *r\n}\nassert_eq!(inner, [16, 25]);\n```","links":{"Either::factor_iter_mut":"0:213:2624"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"L"}}},"trait":{"name":"IntoIterator","id":"1:8326:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},{"type":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"R"}}},"trait":{"name":"IntoIterator","id":"1:8326:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"L"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8326:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}]}},{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"R"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8326:177","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"L"}}},"trait":{"name":"IntoIterator","id":"1:8326:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:98:2956":{"id":"0:98:2956","crate_id":0,"name":"size_hint","span":{"filename":"src/iterator.rs","begin":[191,4],"end":[193,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2822-0:405:2446":{"id":"b:1:2822-0:405:2446","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2810:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2820:3348","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterEither","id":"0:405:2446","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:2824:26575"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:3113:150":{"id":"1:3113:150","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32869:3085","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:396":{"id":"0:396","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[48,47],"end":[48,51]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hash","id":"1:10876:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hash","id":"1:10876:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:10876:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:399:902"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:253:2727":{"id":"0:253:2727","crate_id":0,"name":"factor_second","span":{"filename":"src/lib.rs","begin":[1050,4],"end":[1055,5]},"visibility":"public","docs":"Factor out a homogeneous type from an either of pairs.\n\nHere, the homogeneous type is the second element of the pairs.\n\n```\nuse either::*;\nlet left: Either<_, (String, u32)> = Left((vec![0], 123));\nassert_eq!(left.factor_second().1, 123);\n\nlet right: Either<(Vec<u8>, u32), _> = Right((String::new(), 123));\nassert_eq!(right.factor_second().1, 123);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"tuple":[{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},{"generic":"T"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:388":{"id":"0:388","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[48,30],"end":[48,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::PartialOrd","id":"1:2914:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::PartialOrd","id":"1:2914:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["ge","lt","le","gt"],"trait":{"name":"PartialOrd","id":"1:2914:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:391:1331"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:384":{"id":"0:384","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[48,26],"end":[48,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::Eq","id":"1:2877:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::Eq","id":"1:2877:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2877:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:97:1226":{"id":"0:97:1226","crate_id":0,"name":"next","span":{"filename":"src/iterator.rs","begin":[187,4],"end":[189,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8499:190","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:157:499":{"id":"0:157:499","crate_id":0,"name":"clone_from","span":{"filename":"src/lib.rs","begin":[156,4],"end":[162,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["source",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13876:30579":{"id":"1:13876:30579","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3095-0:365:2401":{"id":"b:1:3095-0:365:2401","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3072:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3069:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:3098:2693"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:181:2540":{"id":"0:181:2540","crate_id":0,"name":"map_either_with","span":{"filename":"src/lib.rs","begin":[413,4],"end":[422,5]},"visibility":"public","docs":"Similar to [`map_either`][Self::map_either], with an added context `ctx` accessible to\nboth functions.\n\n```\nuse either::*;\n\nlet mut sum = 0;\n\n// Both closures want to update the same value, so pass it as context.\nlet mut f = |sum: &mut usize, s: String| { *sum += s.len(); s.to_uppercase() };\nlet mut g = |sum: &mut usize, u: usize| { *sum += u; u.to_string() };\n\nlet left: Either<String, usize> = Left(\"loopy\".into());\nassert_eq!(left.map_either_with(&mut sum, &mut f, &mut g), Left(\"LOOPY\".into()));\n\nlet right: Either<String, usize> = Right(42);\nassert_eq!(right.map_either_with(&mut sum, &mut f, &mut g), Right(\"42\".into()));\n\nassert_eq!(sum, 47);\n```","links":{"Self::map_either":"0:176:2445"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["ctx",{"generic":"Ctx"}],["f",{"generic":"F"}],["g",{"generic":"G"}]],"output":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"M"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Ctx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"M","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3599:155","args":{"parenthesized":{"inputs":[{"generic":"Ctx"},{"generic":"L"}],"output":{"generic":"M"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"G"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3599:155","args":{"parenthesized":{"inputs":[{"generic":"Ctx"},{"generic":"R"}],"output":{"generic":"S"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2793-0:365:2401":{"id":"b:1:2793-0:365:2401","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32946:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2787:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:2795:26574"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:283":{"id":"0:283","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1193,0],"end":[1213,1]},"visibility":"default","docs":"`Either<L, R>` implements `Read` if both `L` and `R` do.\n\nRequires crate feature `\"use_std\"`","links":{},"attrs":["#[cfg(any(test, feature = \"use_std\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Read","id":"4:3622:2397","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Read","id":"4:3622:2397","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["chain","read_buf_exact","read_vectored","read_to_end","take","by_ref","is_read_vectored","read_to_string","bytes","read_buf","read_exact"],"trait":{"name":"Read","id":"4:3622:2397","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:286:2753","0:287:2755","0:288:2756","0:289:2757"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13771:30741":{"id":"1:13771:30741","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12976:2806"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13772:34431":{"id":"1:13772:34431","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3357:3329-0:365:2401":{"id":"a:1:3357:3329-0:365:2401","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"1:3357:3329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"1:3357:3329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3357:3329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:22-0:368:193":{"id":"0:22-0:368:193","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[39,24],"end":[39,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::Either::Left","name":"Left","id":"0:368:193","glob":false}}},"0:294":{"id":"0:294","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1231,0],"end":[1251,1]},"visibility":"default","docs":"Requires crate feature `\"use_std\"`","links":{},"attrs":["#[cfg(any(test, feature = \"use_std\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"BufRead","id":"4:3707:2396","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"BufRead","id":"4:3707:2396","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["read_until","split","read_line","has_data_left","skip_until","lines"],"trait":{"name":"BufRead","id":"4:3707:2396","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:297:2762","0:298:2763","0:299:2765","0:300:2767"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:243:2713":{"id":"0:243:2713","crate_id":0,"name":"factor_ok","span":{"filename":"src/lib.rs","begin":[1008,4],"end":[1013,5]},"visibility":"public","docs":"Factors out a homogenous type from an `Either` of [`Result`].\n\nHere, the homogeneous type is the `Ok` type of the [`Result`].\n\n```\nuse either::*;\nlet left: Either<_, Result<u32, String>> = Left(Err(vec![0]));\nassert_eq!(left.factor_ok(), Err(Left(vec![0])));\n\nlet right: Either<Result<u32, Vec<u8>>, _> = Right(Err(String::new()));\nassert_eq!(right.factor_ok(), Err(Right(String::new())));\n```","links":{"`Result`":"1:43002:238"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:43002:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:8333:2580":{"id":"1:8333:2580","crate_id":1,"name":"IntoIter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"I"}}}},"1:8334:985":{"id":"1:8334:985","crate_id":1,"name":"into_iter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"I"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:286:2753":{"id":"0:286:2753","crate_id":0,"name":"read","span":{"filename":"src/lib.rs","begin":[1198,4],"end":[1200,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"4:3095:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:329":{"id":"0:329","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1358,0],"end":[1368,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Deref","id":"1:3558:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Deref","id":"1:3558:128","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"L"},"trait":{"name":"","id":"1:3558:128","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:3558:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:332:263","0:333:654"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:343:463":{"id":"0:343:463","crate_id":0,"name":"cause","span":{"filename":"src/lib.rs","begin":[1399,4],"end":[1401,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"1:3158:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:76":{"id":"0:76","crate_id":0,"name":null,"span":{"filename":"src/iterator.rs","begin":[135,0],"end":[161,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedIterator","id":"1:8394:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedIterator","id":"1:8394:134","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"L"},"trait":{"name":"","id":"1:8499:190","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["nth_back","advance_back_by","rfind","rfold","try_rfold"],"trait":{"name":"DoubleEndedIterator","id":"1:8394:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"super::Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:79:2972","0:80:2973","0:81:2974","0:84:2975"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:109:2966":{"id":"0:109:2966","crate_id":0,"name":"partition","span":{"filename":"src/iterator.rs","begin":[228,4],"end":[234,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"tuple":[{"generic":"B"},{"generic":"B"}]},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"B"},"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:3147:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Extend","id":"1:8335:2953","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8499:190","args":null}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3596:154","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8499:190","args":null}}}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:425":{"id":"0:425","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1312,0],"end":[1316,1]},"visibility":"default","docs":"Requires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:3063:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"::std::path::Path","id":"4:5505:215","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:3063:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"::std::path::Path","id":"4:5505:215","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:3063:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"4:5505:215","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:428:353"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:347:830":{"id":"0:347:830","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[1409,4],"end":[1411,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10623:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10604:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13764:3524":{"id":"1:13764:3524","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13768:34430":{"id":"1:13768:34430","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:13766:34429"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13814:26760":{"id":"1:13814:26760","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"Returns an iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nDiffers from the iterator produced by `split` in that `split_inclusive`\nleaves the matched part as the terminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:12652:492","self::pattern":"1:13453:2429"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:13240:8114","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3702","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3110-0:405:2446":{"id":"b:1:3110-0:405:2446","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3069:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterEither","id":"0:405:2446","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:3113:150","1:3114:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:226:2680":{"id":"0:226:2680","crate_id":0,"name":"expect_left","span":{"filename":"src/lib.rs","begin":[886,4],"end":[894,5]},"visibility":"public","docs":"Returns the left value\n\n# Examples\n\n```\n# use either::*;\nlet left: Either<_, ()> = Left(3);\nassert_eq!(left.expect_left(\"value was Right\"), 3);\n```\n\n# Panics\n\nWhen `Either` is a `Right` value\n\n```should_panic\n# use either::*;\nlet right: Either<(), _> = Right(3);\nright.expect_left(\"value was Right\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["msg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"generic":"L"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"core::fmt::Debug","id":"1:10656:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:374":{"id":"0:374","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[48,9],"end":[48,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::marker::Copy","id":"1:3317:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::marker::Copy","id":"1:3317:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3317:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:323:2489":{"id":"0:323:2489","crate_id":0,"name":"as_mut","span":{"filename":"src/lib.rs","begin":[1343,4],"end":[1345,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Target"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13873:30744":{"id":"1:13873:30744","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:40630:9550","Self::is_ascii":"1:13872:30583"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:40630:9550","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:265":{"id":"0:265","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1124,0],"end":[1150,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"L"}}}},{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"R"}}}}],"bindings":[]}}}},"items":["0:268:2739","0:269:2741"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:209:2608":{"id":"0:209:2608","crate_id":0,"name":"factor_into_iter","span":{"filename":"src/lib.rs","begin":[615,4],"end":[621,5]},"visibility":"public","docs":"Converts an `Either` of `Iterator`s to be an `Iterator` of `Either`s\n\nUnlike [`into_iter`][Either::into_iter], this does not require the\n`Left` and `Right` iterators to have the same item type.\n\n```\nuse either::*;\nlet left: Either<_, Vec<u8>> = Left(&[\"hello\"]);\nassert_eq!(left.factor_into_iter().next(), Some(Left(&\"hello\")));\nlet right: Either<&[&str], _> = Right(vec![0, 1]);\nassert_eq!(right.factor_into_iter().collect::<Vec<_>>(), vec![Right(0), Right(1)]);\n\n```","links":{"Either::into_iter":"0:202:985"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"IterEither","id":"0:405:2446","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"L"},"trait":{"name":"","id":"1:8326:177","args":null}}}},{"type":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"1:8326:177","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8326:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8326:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13762":{"id":"1:13762","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:13763:1027","1:13764:3524","1:13765:34428","1:13766:34429","1:13768:34430","1:13771:30741","1:13772:34431","1:13773:352","1:13774:30799","1:13775:29902","1:13777:29903","1:13779:29904","1:13781:2496","1:13783:34432","1:13784:34433","1:13785:30818","1:13786:30819","1:13787:30822","1:13788:30823","1:13790:8134","1:13791:8203","1:13792:3513","1:13793:26771","1:13794:26772","1:13795:3507","1:13796:34434","1:13797:26773","1:13798:29360","1:13800:30834","1:13802:30835","1:13805:2967","1:13808:2975","1:13812:3506","1:13814:26760","1:13816:30826","1:13819:34435","1:13821:34436","1:13824:30828","1:13826:30830","1:13829:30832","1:13831:30833","1:13834:3049","1:13836:34437","1:13839:34438","1:13841:34439","1:13844:34440","1:13846:34441","1:13848:34442","1:13850:34443","1:13851:34444","1:13852:34445","1:13855:34446","1:13857:30474","1:13859:30836","1:13862:34447","1:13865:34448","1:13867:34449","1:13870:2807","1:13872:30583","1:13873:30744","1:13874:30584","1:13875:30580","1:13876:30579","1:13877:30747","1:13878:30748","1:13879:30749","1:13880:34450","1:13882:9567","1:13883:34451","1:13884:31993"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:69:2967":{"id":"0:69:2967","crate_id":0,"name":"find","span":{"filename":"src/iterator.rs","begin":[113,4],"end":[118,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["predicate",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8499:190","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3596:154","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8499:190","args":null}}}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:436:353":{"id":"0:436:353","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[1317,0],"end":[1321,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"::std::ffi::OsStr","id":"4:2099:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5715:35163":{"id":"5:5715:35163","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3702","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:448:2489":{"id":"0:448:2489","crate_id":0,"name":"as_mut","span":{"filename":"src/lib.rs","begin":[1322,0],"end":[1326,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"::std::ffi::CStr","id":"1:41265:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5713:9513":{"id":"5:5713:9513","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3702","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:786:26582":{"id":"5:786:26582","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:126:2972":{"id":"0:126:2972","crate_id":0,"name":"next_back","span":{"filename":"src/iterator.rs","begin":[277,4],"end":[279,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8499:190","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:228:2692":{"id":"0:228:2692","crate_id":0,"name":"either_into","span":{"filename":"src/lib.rs","begin":[937,4],"end":[946,5]},"visibility":"public","docs":"Convert the contained value into `T`\n\n# Examples\n\n```\n# use either::*;\n// Both u16 and u32 can be converted to u64.\nlet left: Either<u16, u32> = Left(3u16);\nassert_eq!(left.either_into::<u64>(), 3u64);\nlet right: Either<u16, u32> = Right(7u32);\nassert_eq!(right.either_into::<u64>(), 7u64);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3069:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3069:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5964:1832":{"id":"5:5964:1832","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:333:654":{"id":"0:333:654","crate_id":0,"name":"deref","span":{"filename":"src/lib.rs","begin":[1365,4],"end":[1367,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:3558:128","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:785:26581":{"id":"5:785:26581","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:338":{"id":"0:338","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1384,0],"end":[1402,1]},"visibility":"default","docs":"`Either` implements `Error` if *both* `L` and `R` implement it.\n\nRequires crate feature `\"use_std\"`","links":{},"attrs":["#[cfg(any(test, feature = \"use_std\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"1:3158:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"1:3158:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["type_id","provide","source","cause","description"],"trait":{"name":"Error","id":"1:3158:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:365:2401","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:341:2450","0:342:2777","0:343:463"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:121:2971":{"id":"0:121:2971","crate_id":0,"name":"position","span":{"filename":"src/iterator.rs","begin":[264,4],"end":[269,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["predicate",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3596:154","args":{"parenthesized":{"inputs":[{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8499:190","args":null}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13763:1027":{"id":"1:13763:1027","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:12652:492"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13857:30474":{"id":"1:13857:30474","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12652:492","self::pattern":"1:13453:2429"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3702","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13821:34436":{"id":"1:13821:34436","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"Returns an iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:13453:2429","str::split":"1:13812:3506","prim@char":"4:12652:492","str::split_terminator":"1:13819:34435"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:44802:8188","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3702","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13460:3702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13477:9674","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:112:324":{"id":"0:112:324","crate_id":0,"name":"all","span":{"filename":"src/iterator.rs","begin":[236,4],"end":[241,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3596:154","args":{"parenthesized":{"inputs":[{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8499:190","args":null}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13793:26771":{"id":"1:13793:26771","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:13794:26772"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:45008:8194","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"4:4363:9305":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:45689:231":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"17:11603:7640":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"6:4881:5690":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:2908:207":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"1:47139:6899":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"6:1625:5569":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:15733:4643":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"11:718:7888":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:5328:7621":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"11:1063:35776":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"4:8871:3719":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"18:491:7581":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:16717:4920":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"16:6109:7755":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:11269:22385":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"5:1520:3471":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:8335:2953":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"6:6360:6030":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"4:8288:6483":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"1:41203:8150":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"17:12643:4037":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:5503:5954":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"4:11404:30532":{"crate_id":4,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:41286:9603":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:3411:3105":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:12242:7681":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"6:4869:5687":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"16:8708:5235":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"4:9513:3215":{"crate_id":4,"path":["std","sync","poison","Guard"],"kind":"struct"},"4:9569:6554":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"1:41455:3592":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:44720:3234":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"11:389:9293":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:3426:3114":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"1:47368:6926":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:6452:6083":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:12580:8124":{"crate_id":1,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"17:2243:7612":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"4:1944:7970":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"1:48015:6976":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:4897:9577":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:44693:7160":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:40233:3129":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"1:47057:6895":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"4:5575:133":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"4:909:3472":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"4:6605:232":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:12761:7711":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"4:11993:6570":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"4:3622:2397":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"17:10176:22358":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"4:4199:15189":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:45761:26842":{"crate_id":1,"path":["core","task","wake","ExtData"],"kind":"enum"},"5:2810:6478":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"4:6502:8001":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:2914:214":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:39039:3125":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"4:6953:8011":{"crate_id":4,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"4:11393:6543":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:1684:5605":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:5652:6021":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:43806:6837":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"16:8093:7864":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:15908:4688":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"5:214:7913":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:13423:7744":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"16:3012:21434":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"11:123:8265":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:41971:3615":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:46970:6882":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"6:1675:5599":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"16:6638:7770":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"17:14940:4411":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:4921:5713":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"5:4473:281":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"6:586:5478":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:41078:7151":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:11888:7655":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:23706:6613":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"1:41089:26618":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:16658:4907":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"11:292:8266":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:12081:7669":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:11629:3985":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:42528:9610":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"4:3424:3257":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:10733:4008":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"18:635:3880":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:15048:4436":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:47965:6974":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:42734:206":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"17:11502:7634":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"5:7872:3685":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:42770:3472":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"5:40:3684":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"16:7468:5113":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"6:7390:6335":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"14:186:21376":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:46918:6879":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:14413:4317":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:12397:7699":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"18:643:3861":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"4:6557:7306":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:44663:8184":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"11:1542:21364":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"6:8294:6463":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:11883:8115":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:14396:4314":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"4:4852:6331":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"17:13947:4209":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"4:8281:8030":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:42830:3308":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:32929:3494":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"4:4703:15212":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"4:11981:8019":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"4:12656:351":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"5:4322:3215":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"4:7901:8940":{"crate_id":4,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"6:4902:5700":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"14:31:7881":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"5:884:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:5617:6007":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"1:8807:3473":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"4:2750:9659":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"4:9309:6546":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"16:6419:7059":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"4:8742:6316":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"16:7013:7814":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:0:527":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"16:0:3079":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:44128:8172":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:12547:8123":{"crate_id":1,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"11:102:8264":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:14678:4355":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:13771:4168":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:12049:8120":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"11:1892:7908":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:23684:6611":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"1:3965:71":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"0:24:2427":{"crate_id":0,"path":["either","for_both"],"kind":"macro"},"1:22987:15175":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"16:894:7747":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"17:16211:4789":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"6:5107:5788":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:12737:7709":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:2685:9528":{"crate_id":1,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"4:2258:133":{"crate_id":4,"path":["std","ffi","os_str","Display"],"kind":"struct"},"5:3298:7907":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"4:6668:198":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:3782:3135":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"16:7413:7822":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"14:219:5313":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"4:2534:15174":{"crate_id":4,"path":["std","fs","exists"],"kind":"function"},"1:45505:8301":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"6:4890:5695":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"5:3712:3472":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:45485:8296":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"4:5343:7987":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:5381:5883":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"5:4488:34066":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"4:3560:3263":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"4:11585:6566":{"crate_id":4,"path":["std","sys","exit_guard","PThread"],"kind":"struct"},"1:44338:8111":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:14924:4409":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"14:40:4183":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"4:5716:7990":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"4:8106:6482":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"6:1530:5500":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"16:6267:7040":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"4:1114:7898":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"4:12171:7981":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:16755:4934":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"5:7583:2580":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:13585:7746":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"1:31732:3344":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"6:6670:6193":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"4:12253:8023":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:15144:4446":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"11:1042:21363":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:45798:7167":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:5301:5857":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"11:1652:8848":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:14008:4219":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:12214:7679":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"16:7786:35788":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:14039:4228":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"4:963:3679":{"crate_id":4,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"0:25:2441":{"crate_id":0,"path":["either","try_left"],"kind":"macro"},"17:13066:7735":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"4:11165:8083":{"crate_id":4,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"4:3934:7979":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"18:608:7585":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"9:345:21297":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:12621:4088":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:2810:114":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"4:7819:32701":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"11:763:7890":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"14:213:7885":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"4:9214:8053":{"crate_id":4,"path":["std","pipe","PipeWriter"],"kind":"struct"},"4:8298:7136":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"4:12651:1208":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"4:4963:15200":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"4:5222:15239":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"6:8225:6447":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:23651:6608":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"16:5083:5029":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:13243:7742":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:11346:7631":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"5:3843:2792":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:3576:3130":{"crate_id":1,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"1:14389:3657":{"crate_id":1,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"1:41723:3233":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"4:6898:15260":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"4:9457:30496":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"18:735:26566":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:2422:7613":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"16:6950:7094":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:11540:4025":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"14:164:21369":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"4:1883:7966":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"1:41445:146":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:12008:7659":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"16:2433:21433":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"5:3448:3679":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:2872:213":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"4:436:197":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:16040:4725":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"6:8326:6470":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"5:7510:3681":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:13673:4149":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"6:465:5407":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:12187:7677":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"6:7326:6307":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:4805:5636":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:23585:6602":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"1:42556:6831":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:14955:4415":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"4:9551:174":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"6:5658:6023":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:23015:9528":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"1:22188:30152":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"17:12229:7680":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"17:15763:4654":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"6:7515:6400":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:34391:3109":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:10333:22363":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:22675:6582":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"4:8335:8032":{"crate_id":4,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"1:41962:3263":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"16:8063:22305":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"18:515:3864":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"4:8629:3235":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"17:12854:4097":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:11512:22385":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"9:0:3073":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:12063:8121":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"4:2509:15166":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"17:12588:4085":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:47308:6908":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"16:6406:7763":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:22686:30154":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"5:1366:7842":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"4:8713:8042":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:10062:22355":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"16:6694:7789":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"4:10810:30556":{"crate_id":4,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"1:41940:3609":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:22790:14739":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:13014:4103":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"18:531:7582":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:41404:3232":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"11:1083:7900":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"5:1247:9302":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:5521:5956":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:32945:249":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"6:1696:5609":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:3423:3113":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"1:48053:6978":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:4850:3494":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"16:2898:4979":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"4:12650:436":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"4:8648:8044":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:47480:6930":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:10553:22370":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:45677:6859":{"crate_id":1,"path":["core","future","async_drop","Noop"],"kind":"struct"},"1:14072:3092":{"crate_id":1,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"17:596:7609":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"6:5604:6001":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"16:7728:3303":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"4:11447:6561":{"crate_id":4,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"17:11423:22383":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"16:5280:5036":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"6:5057:5777":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:5494:5948":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"6:553:5461":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"16:6864:22299":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"16:7209:7821":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:14337:4303":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"1:44884:8189":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"16:3108:5006":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:12357:7695":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:11494:4024":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"17:15713:4639":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"16:8102:5172":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"6:6500:6108":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"4:6053:7994":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"6:1489:5482":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"4:4193:15188":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"16:8623:7880":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"5:7723:9603":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:3792:268":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"16:2658:4968":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:10665:3483":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:45017:8195":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"6:1703:5612":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:10898:151":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"4:11465:174":{"crate_id":4,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"6:6737:6220":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"6:4875:5688":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:43072:208":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:10669:3485":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:47160:6900":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"16:7880:5165":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:48249:7009":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:6617:6172":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"16:7946:4998":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:3571:2392":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"18:680:7593":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"11:2394:2580":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"1:10663:3482":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"5:3858:7923":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:15:2769":{"crate_id":1,"path":["core","write"],"kind":"macro"},"10:0:3074":{"crate_id":10,"path":["adler"],"kind":"module"},"4:7915:8941":{"crate_id":4,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"18:659:7586":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:10667:3484":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:14834:4397":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"4:5389:216":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"4:6295:232":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"5:0:325":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:12344:7692":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"17:16288:4812":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:47817:6970":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"16:2770:4973":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:12045:3940":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:43845:5199":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:10431:22366":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:45154:8201":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"16:4808:5021":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"16:6571:7765":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:23640:6607":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"6:8175:6446":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:45685:176":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:13471:7598":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"16:6335:7050":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"16:2948:4981":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"16:5058:5028":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:8315:158":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"4:9351:15266":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:43566:3483":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:42753:185":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"5:2156:7923":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"6:5428:5909":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:11667:4028":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"4:9270:3471":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:2671:697":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:41244:8152":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"struct"},"6:5007:5753":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:7635:3531":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"4:12672:1885":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"5:3090:34255":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:14093:4234":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:3809:3140":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:3599:155":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"4:8433:8036":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"6:5196:5803":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:16814:4945":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"1:10876:165":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"4:707:15113":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"4:10886:3255":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"1:2228:9544":{"crate_id":1,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"6:6590:6163":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:5311:5861":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:23109:14819":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"14:159:7881":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:4413:3215":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"1:4959:3496":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"4:10517:8073":{"crate_id":4,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"1:43394:91":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"6:5036:5768":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"16:7916:7850":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"4:3371:3255":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:11868:4026":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"4:8642:8042":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"16:6300:7046":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:15995:4714":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"11:686:7887":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:42714:6833":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:32946:251":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"1:34949:3118":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"5:2167:7924":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"6:578:5474":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"6:5664:6026":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:8277:3625":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"13:0:3071":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:14122:4245":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:15963:4706":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:43468:8110":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"18:651:3861":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"4:2032:813":{"crate_id":4,"path":["std","ffi"],"kind":"module"},"11:820:15130":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:41598:3588":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:23503:6601":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:16068:4733":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:43058:2580":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:44591:6851":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:48172:6992":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:4701:3493":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"17:14443:4320":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"4:5873:15248":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"1:909:9454":{"crate_id":1,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"16:8230:22306":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"4:12021:7141":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:11921:8116":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:44704:3704":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"16:4402:5018":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:13202:8132":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"4:11380:6542":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"16:7459:7832":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"5:2364:8274":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:32947:258":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:3063:78":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"5:7599:7128":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"4:8330:7974":{"crate_id":4,"path":["std","hash","random","RandomState"],"kind":"struct"},"1:3147:127":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:44334:8293":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:42909:8167":{"crate_id":1,"path":["core","range","iter","IterRangeInclusive"],"kind":"struct"},"16:7539:7841":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"6:6638:6184":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"11:1118:7901":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:11564:7638":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:41956:3613":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"4:9336:15264":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"16:7421:22302":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"11:676:2580":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:10202:22359":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"15:288:9280":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"4:3697:2398":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"1:32915:5164":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"1:23607:6604":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"1:47323:6909":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"4:8428:8035":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:12287:7687":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:41127:7152":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:15569:4609":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"7:78:21276":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"4:10657:116":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"11:344:9288":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"17:15611:4616":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"4:2096:210":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"16:2964:4982":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:12254:7682":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:41395:3581":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"6:4976:5735":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"4:5139:15232":{"crate_id":4,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"16:8562:7875":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"6:6719:6212":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"4:12668:927":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"6:5441:5919":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:15477:4573":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:13304:22372":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"5:1411:7902":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:13344:4129":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"4:12675:1879":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"11:1001:7898":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:10675:3487":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:44570:8178":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"6:5357:5872":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"6:6390:6055":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:22142:30143":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"1:41733:3603":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:10405:22365":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"18:80:9272":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:42662:7159":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:45513:6560":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:10311:22362":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:10673:3486":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"6:5265:5838":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"16:6121:4989":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:11356:35803":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"5:1397:7898":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:44680:3705":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"15:306:9284":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:10623:156":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"17:14845:4399":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"4:1632:3471":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"4:4185:15187":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:34324:3110":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"16:3124:21436":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:6197:3594":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:7806:9311":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"5:7856:3679":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"5:6513:15327":{"crate_id":5,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"4:2772:3239":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:14160:29762":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:5356:454":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"17:16315:4819":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:31326:3350":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"18:613:35807":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"5:3686:194":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:2122:696":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"1:31062:9401":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"4:8559:3262":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"16:8666:5164":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"5:7627:2580":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:45338:9687":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"6:8243:6450":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:10571:4002":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:41473:8160":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"4:8091:6481":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:47397:6927":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:12272:4115":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:3315:277":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"17:14637:4349":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"6:485:5418":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:11112:35799":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:22788:15175":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:13909:4203":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:12160:7675":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"16:8500:5223":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"6:5471:5940":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:46932:6880":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:4906:3495":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:41464:3593":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"6:6651:6188":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"4:1132:7902":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:14859:4401":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"6:5165:5793":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:47568:6934":{"crate_id":1,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"17:16613:4186":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"4:8568:3264":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"17:16359:4834":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:12924:7726":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"5:6030:3686":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:3797:159":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:16838:4213":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"16:7027:5065":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"4:2348:2757":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"4:8586:2399":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"10:44:5329":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"10:36:5328":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"4:4848:6327":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"17:13996:4218":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"4:4134:15185":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"5:3358:7909":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:15985:4711":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"6:5575:5982":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"4:8027:30567":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:14055:8138":{"crate_id":1,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"4:8764:6525":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:44551:8176":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"6:7524:6403":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:47642:6936":{"crate_id":1,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"17:12146:7674":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"6:1500:5487":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:12907:4135":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:11014:35797":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:48036:6977":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:11842:7653":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:16730:4926":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"17:13157:4111":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"4:11074:8278":{"crate_id":4,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"4:11206:6544":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"16:3693:5011":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:31332:6616":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:41378:3580":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"16:6586:5052":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"6:6513:6114":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"11:983:7842":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"5:1535:3472":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:42674:7982":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:45239:8206":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"11:1862:2580":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:13436:4132":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"16:6850:7089":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:11318:7630":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:7009:8285":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:48157:6991":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:31705:208":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"17:13360:22373":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"11:1858:3471":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:13553:22374":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:15876:4680":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:12979:4102":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:12072:7666":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:45008:8194":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:7553:6419":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"11:1871:3679":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1:47547:6933":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:10369:22364":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:33004:3142":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:23142:14818":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"16:6729:7799":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:11084:27625":{"crate_id":1,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"6:5405:5898":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"18:689:7595":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"6:5550:5973":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"4:12657:1738":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"1:12960:8125":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"4:4039:7981":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"16:7997:5000":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:16631:4196":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"16:6820:22298":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"1:8813:3622":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:6878:6265":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:41275:3746":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:34603:3116":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:16403:4841":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"4:3061:7978":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:43281:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:43833:6846":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"16:6779:5058":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"4:12150:7980":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"4:9674:7969":{"crate_id":4,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"17:13892:4201":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"14:7:7881":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"11:2519:5324":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"4:1123:7899":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:48108:6983":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"5:724:7914":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"16:6806:4984":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:45390:8137":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:12093:4045":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"4:12673:1891":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"17:14057:4229":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"4:6778:8007":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:15587:4614":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:4536:9568":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:46833:6870":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"4:10892:3253":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"4:1506:168":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:40630:9550":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"17:15746:4649":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"4:988:15130":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:14307:4294":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"4:619:7958":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"4:12678:1460":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"17:13575:4100":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"16:8220:7865":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"5:2251:15095":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:43816:3492":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"7:0:1957":{"crate_id":7,"path":["unwind"],"kind":"module"},"6:5341:5870":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"1:8326:177":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"4:12655:1352":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"17:15578:4613":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:23516:7146":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"5:1591:7903":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:15978:4710":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"4:9528:246":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"4:789:166":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"4:11430:6554":{"crate_id":4,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"1:47740:6969":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:11776:3472":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:14365:4307":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"4:12032:8279":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:23673:6610":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"16:2746:4972":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"6:5488:5946":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"16:2918:4980":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:16744:4929":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"4:4255:15194":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"5:6274:3215":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"4:6060:7998":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:11939:4042":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:14152:4257":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"11:2206:7666":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"9:168:21349":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:12825:4092":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"4:9372:6549":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:23469:26594":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"17:13700:4155":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"4:0:1764":{"crate_id":4,"path":["std"],"kind":"module"},"17:11825:7650":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:4555:9569":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"17:16029:4721":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"18:765:26567":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"4:12624:15117":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:6121:3215":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"5:7519:2580":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:3481:3119":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"6:1657:5592":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:47994:6975":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:3877:7619":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:41157:8148":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"15:0:3078":{"crate_id":15,"path":["addr2line"],"kind":"module"},"19:0:1327":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:8055:7863":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:13928:4208":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:41333:3743":{"crate_id":1,"path":["core","ffi","va_list","VaList"],"kind":"struct"},"4:12652:492":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"17:15691:4637":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:14498:4329":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:12409:4050":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:2062:6574":{"crate_id":2,"path":["compiler_builtins","int","big","u256"],"kind":"struct"},"5:3079:7293":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"6:1494:5484":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"4:3097:150":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"4:11412:6560":{"crate_id":4,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"4:6279:7306":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:12878:7720":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"8:0:3072":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"16:2794:4974":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"4:2339:151":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"17:14558:4338":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:14971:4416":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:3874:132":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:12201:7678":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"17:14521:4334":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:519:3947":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:10455:22367":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:13260:22371":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:10441:3499":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"17:12608:7703":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:13819:4183":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"4:2811:3250":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:45481:8295":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:10586:4003":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:34776:3117":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:23052:14827":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:12814:7715":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"6:7424:6341":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"4:11251:30552":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:4171:2580":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:4501:8095":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"18:573:3861":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:14373:4309":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:24260:248":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"6:6852:6250":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:13120:7629":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"17:16177:4777":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"16:4764:5020":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:23410:6588":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"16:7189:22301":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"9:412:21284":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"4:6895:8008":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"5:299:3682":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:47224:6904":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:40277:3132":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"17:10815:7622":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"1:45740:3658":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:45477:8294":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"1:9484:3306":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"4:8738:8047":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:32922:8143":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"4:10496:7968":{"crate_id":4,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"16:7041:4992":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"4:1648:7906":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"5:3337:34251":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:16301:4817":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"6:1711:5616":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"16:2528:4962":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:12331:7690":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"16:6237:5047":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"11:2533:5326":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:10605:2400":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"17:15062:4437":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"4:12663:766":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"16:8317:22307":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"16:6157:7031":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"6:6505:6109":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:43573:3482":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:40446:6685":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"1:40309:222":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"6:6610:6171":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:14585:4343":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"6:1667:5598":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:15951:4703":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"11:321:8269":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:32936:8144":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"1:44580:8179":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:41517:3597":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:45497:8299":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:43133:97":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:15128:4444":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"16:2818:4975":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:44752:8117":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:12976:2806":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:23347:8287":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:11215:27626":{"crate_id":1,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"1:10296:29679":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:44097:3478":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"6:4957:5727":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"4:7408:8937":{"crate_id":4,"path":["std","sys","backtrace","print","DisplayBacktrace"],"kind":"struct"},"4:683:3208":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"4:12239:30510":{"crate_id":4,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:9447:3305":{"crate_id":1,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"1:43921:2772":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"18:96:9273":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:8852:29678":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"16:8134:5002":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:13021:22501":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"4:3373:3256":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"4:12669:933":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"16:6171:7034":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:13207:7739":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"0:26:2444":{"crate_id":0,"path":["either","try_right"],"kind":"macro"},"1:46886:6877":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"16:2465:4954":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:13195:7738":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"5:1612:7888":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"4:5505:215":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"17:15469:4572":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:321:7607":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"6:6679:6199":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"17:15102:4442":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:22257:15175":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:16164:4771":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:13509:4097":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:44956:8192":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"16:8118:222":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:42869:8166":{"crate_id":1,"path":["core","range","iter","IterRange"],"kind":"struct"},"16:5725:4002":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:12022:7660":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:11552:7637":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"5:7668:3683":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:42474:182":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:45051:8147":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"4:4925:15212":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:45682:163":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:22277:6581":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"16:544:7287":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"4:969:7903":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"5:7619:2580":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"4:12603:7142":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:22373:15175":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"5:4990:229":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:11564:15175":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:13328:3961":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"6:4929:5716":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:6602:6170":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:43580:3484":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:47209:6903":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:13399:4131":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"4:12677:1967":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"11:859:7897":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:41237:8151":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"16:8040:35792":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"4:3640:3224":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:43042:3471":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"16:5170:5032":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:2784:103":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"16:2588:4965":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"4:11137:30529":{"crate_id":4,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"1:33033:3332":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"4:9262:6544":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"4:9403:30495":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"11:813:7891":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"5:7710:3749":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:4489:8094":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:3628:3133":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:3540:3128":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:41301:3745":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:12663:4089":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"6:5462:5934":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:42927:8168":{"crate_id":1,"path":["core","range","iter","IterRangeFrom"],"kind":"struct"},"1:46818:6869":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"6:523:5443":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"4:8124:4056":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"6:7984:6432":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:45324:8207":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"4:595:15101":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"6:6893:6276":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:13856:4196":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"5:5515:34056":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"4:4233:15190":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:12990:7730":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:13044:4108":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"5:3925:3679":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1:3357:3329":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"4:8823:3718":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"17:10766:4009":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"5:7591:222":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:14897:4405":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:7741:3590":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"6:6459:6087":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:45748:3659":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"4:940:7890":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"16:7575:6550":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"16:8595:7879":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"4:982:7891":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:10830:3886":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"6:4970:5732":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:12898:7725":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"4:9286:2580":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:12035:7661":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"5:3332:7906":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"5:7527:7949":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:42821:3304":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"16:4954:5026":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:10919:3476":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"4:6774:3611":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"4:10388:7156":{"crate_id":4,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"17:13730:4159":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"6:5186:5796":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:11814:7648":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"16:7072:22300":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:14746:4365":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"6:1632:5573":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"6:5319:5865":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"5:5564:15303":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"5:6700:3686":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"4:11266:30554":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"4:2521:15172":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"1:44734:3235":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"17:5154:7620":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"16:5316:5037":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:5417:1007":{"crate_id":1,"path":["core","iter"],"kind":"module"},"4:7877:8938":{"crate_id":4,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"1:8447:2976":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"6:8304:6464":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"4:7982:8024":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"5:2344:34147":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"6:8316:6468":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:14611:4346":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:43900:150":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:13163:8130":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"6:6687:6203":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"17:13133:4110":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"4:12667:921":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"17:11063:35798":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:23396:26590":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"4:12087:9309":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"6:1584:5537":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:41933:8107":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"16:8025:5168":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"16:4871:5023":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"9:435:21282":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:5450:5925":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:23385:7145":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:8394:134":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:42696:6832":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"16:6887:4986":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:41539:3598":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"5:7787:3697":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"6:5623:6010":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:11469:22384":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"6:6769:6230":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"4:5045:15199":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"9:226:3719":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"5:1573:7889":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:12055:7662":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"6:8284:6459":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"4:9834:151":{"crate_id":4,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"1:45372:7161":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:41496:3596":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:16650:4906":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"17:14624:4347":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:10601:4004":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"6:5019:5759":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:13411:3707":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"16:7804:35789":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"6:7580:6425":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:14598:4344":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"16:7256:7107":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"4:508:30542":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"4:1919:7968":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"1:3364:3331":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"17:15659:4625":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:4621:8096":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"6:0:1032":{"crate_id":6,"path":["libc"],"kind":"module"},"5:5289:7945":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"16:6736:35785":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:8030:3262":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:41747:3604":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"4:9533:247":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"6:5477:5943":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"5:7750:3748":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:47095:6897":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:15884:4681":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:11956:8117":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:10671:218":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"6:1507:5490":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:8148:5003":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"6:5025:5762":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:3587:3131":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:15861:4678":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:2687:9529":{"crate_id":1,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"17:13529:4137":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:33003:3269":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:22259:14737":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:45181:8205":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"16:5707:22293":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:12725:7708":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:11053:7626":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"16:8720:150":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"5:3324:7908":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"6:7539:6410":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"5:3699:3471":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"11:2115:7898":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"4:1660:7908":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:3401:3107":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"18:507:3861":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"6:532:5449":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"16:4182:5015":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:22881:14823":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"4:9219:8054":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"17:14730:4360":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"4:9444:6550":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:12575:7701":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"6:5088:5787":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:15771:4657":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:38929:3123":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:46786:6865":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:10114:92":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"16:8176:5175":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:3837:115":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:12800:7714":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:45033:8148":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:46903:6878":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"4:11174:7992":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"11:427:9296":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"4:8687:7982":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"6:1589:5539":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"4:4965:15202":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"16:7398:35786":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"4:953:3686":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"6:5375:5882":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:15595:4615":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:45168:8204":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:15919:4692":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"11:2414:3686":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"5:6116:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"4:11116:6557":{"crate_id":4,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"16:3139:3889":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:14190:4265":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:12133:7673":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:23362:6584":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"16:8582:7876":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:40409:3136":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"15:394:21397":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"1:912:202":{"crate_id":1,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"4:4838:15189":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:5323:27590":{"crate_id":1,"path":["core","ffi","va_list","sealed_trait","VaArgSafe"],"kind":"trait"},"11:2540:3683":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"5:7200:280":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"6:6441:6075":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"16:7935:7857":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"16:2448:4952":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"6:5230:5819":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"4:8359:2792":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:16828:4946":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"16:7220:7095":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:13219:7740":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"1:45809:6861":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"17:10524:22369":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"1:47509:6931":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"16:6711:7790":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:14476:4328":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:16341:4828":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"6:6802:6239":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"11:1558:7904":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:41981:3617":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"16:8480:5222":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"5:6547:15269":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"16:5755:5044":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"5:1623:222":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:44560:8177":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"6:5512:5955":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"17:13757:4167":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:10656:123":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"4:8949:3722":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"17:15456:4565":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"4:12438:8851":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"5:6915:34056":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:23662:6609":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"17:11161:35800":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:46953:6881":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:16417:4844":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:13959:4212":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:1919:3455":{"crate_id":1,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"1:45531:135":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"1:2229:9517":{"crate_id":1,"path":["core","ptr","metadata","metadata"],"kind":"function"},"6:5044:5773":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:11576:4026":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"4:4436:7983":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:46850:6871":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:10604:238":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"4:1005:7896":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"4:7889:8939":{"crate_id":4,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"4:11069:8276":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"1:33494:3104":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:41323:3744":{"crate_id":1,"path":["core","ffi","va_list","VaListImpl"],"kind":"struct"},"1:3322:261":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"4:1665:7909":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"4:9396:8058":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"4:999:7894":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:42512:6824":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:48073:6980":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:13630:4145":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"6:5224:5816":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"16:2702:4970":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"4:12671:1903":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"1:23277:7312":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:15353:4479":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"4:9390:119":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"4:10935:4056":{"crate_id":4,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"4:8719:6524":{"crate_id":4,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"4:1654:7907":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:45273:8136":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:42496:6822":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:47663:6937":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"3:0:3070":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"1:2303:201":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:15792:4661":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:44542:8175":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:47613:6935":{"crate_id":1,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"16:7279:7109":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"6:473:5412":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:15817:4666":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:15640:4624":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"4:3517:3242":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"4:6087:7999":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:15174:4100":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"6:491:5420":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"5:1582:7890":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:46801:6866":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:2834:3349":{"crate_id":1,"path":["core","clone","InitializingSlice"],"kind":"struct"},"16:7835:22304":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:4928:3141":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:12774:7712":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"4:12658:1772":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"1:40281:3134":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"18:538:3866":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"11:481:166":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:11995:7658":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"4:699:7959":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"4:3707:2396":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"6:479:5415":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"0:368:193":{"crate_id":0,"path":["either","Either","Left"],"kind":"variant"},"17:2453:7616":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"4:8351:3249":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:12787:7713":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:13030:4104":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:13971:4213":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:43861:26757":{"crate_id":1,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"17:14165:4261":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:14571:4058":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"5:2142:2792":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"4:8086:15175":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"4:4243:15191":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"4:3328:8488":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"14:201:3696":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"16:3985:3902":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"11:2507:5322":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"16:2548:4963":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:11915:4037":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"18:0:3081":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:45821:8216":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"4:11079:8030":{"crate_id":4,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"16:6203:22295":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"16:2878:4978":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"4:537:15095":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"11:0:3075":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"5:6826:2580":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:44612:3580":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:44634:8181":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"16:6500:21405":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"16:6606:218":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"16:2504:4961":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:11794:22405":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:44653:8183":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:12619:9541":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"5:1382:7899":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:14021:4220":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"6:1690:5608":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"18:563:3868":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:16058:4728":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:15721:4640":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"16:5196:5033":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"16:4927:5025":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"4:11153:8047":{"crate_id":4,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"16:7165:5088":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:9597:3702":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"4:12007:7139":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"11:1878:7906":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"16:2858:4977":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"16:6792:7802":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"1:23629:6606":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"4:3688:32756":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:42762:3471":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:43207:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:43883:3492":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"6:4937:5718":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:5069:5786":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:15801:4662":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"4:974:7887":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:47291:6907":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:13247:150":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"4:3426:3258":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"4:5802:7992":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"6:5217:5815":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:4767:233":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"4:9477:6553":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:16021:4720":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:12749:7710":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"16:8633:22308":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:16203:4786":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:22163:30146":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"6:6858:6251":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"15:327:21391":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"16:2618:4966":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:5241:5826":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"16:6911:7092":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"4:6378:30546":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"6:5557:5975":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"4:3469:3254":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"4:4140:15184":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"4:8894:3720":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"5:6746:34056":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"16:906:7607":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"5:284:34056":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"4:8694:8275":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:3327:3327":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"5:7074:3690":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:15971:4709":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"5:2579:6472":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"5:7539:3686":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"5:3086:34254":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"6:4816:5644":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"4:8976:3724":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:40457:6686":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"5:7738:3747":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"5:3792:34056":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:10700:4007":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"16:6082:7748":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:41141:8147":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:2787:104":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"4:2568:2395":{"crate_id":4,"path":["std","io"],"kind":"module"},"17:13079:7736":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"17:11715:7643":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"11:851:7896":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:15896:4687":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"11:2323:7899":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"16:2988:4983":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"5:7273:34119":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:42937:222":{"crate_id":1,"path":["core","range","Range"],"kind":"struct"},"17:11963:4044":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:13482:9673":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:3042:15175":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"6:5395:5891":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"16:901:7606":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"1:42790:3303":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"1:44106:169":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"6:5482:5945":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"16:6438:22296":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:15513:4603":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:34257:3112":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"5:7774:257":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:14788:4387":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"4:9543:8018":{"crate_id":4,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"17:12173:7676":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"6:5271:5841":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:11222:27627":{"crate_id":1,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"1:11801:3235":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"17:10965:7625":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"6:6744:6221":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"17:10255:22360":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"6:5585:5987":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"4:12676:996":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"17:14081:4233":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:12946:9641":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:47530:6932":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:40197:3127":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"4:8271:3941":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"1:46865:6872":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"6:6792:6236":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:3317:121":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"4:8577:3230":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"1:43875:74":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"11:2275:7842":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"18:521:26568":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"16:6096:7752":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:23001:14826":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"5:1001:3471":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"11:357:9291":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"16:6981:5004":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"16:6026:4985":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"5:5414:15300":{"crate_id":5,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"4:5696:7989":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"16:5377:5039":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:3822:29207":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:10109:85":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"16:7505:7838":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"4:11670:5385":{"crate_id":4,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"4:8616:3233":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"4:6454:3660":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:16013:4718":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:45501:8300":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"5:7248:34115":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:46985:6883":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"6:5117:5789":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:45139:8196":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:538:5452":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:41042:8093":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"4:383:7956":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:13465:4133":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"6:6422:6073":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:41048:8145":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:45782:192":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"16:7355:4994":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"4:11099:6483":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"16:6040:4988":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:41947:3611":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"11:832:7894":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:10924:3477":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"4:11189:30506":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"11:750:7889":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"4:4355:9304":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"6:5051:5775":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"4:2511:15167":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"17:11200:4037":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:47014:6885":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"16:7302:5100":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"4:12653:1925":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"1:14483:3680":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"1:12077:8122":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"4:12670:914":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"2:2077:6575":{"crate_id":2,"path":["compiler_builtins","int","big","i256"],"kind":"struct"},"17:15088:4439":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:16848:4218":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"4:7569:9307":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:22178:30151":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:23332:6583":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:23095:15175":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"11:1866:3686":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:16250:4798":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"6:5249:5830":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"5:5960:265":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"4:7250:15268":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:22963:14825":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"17:15809:4664":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"6:1514:5492":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:8007:6445":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:6254:7039":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:42982:224":{"crate_id":1,"path":["core","range","RangeFrom"],"kind":"struct"},"6:7445:6349":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:7317:6306":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:44802:8188":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"4:4171:15186":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:40331:224":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"4:9225:211":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"4:1867:722":{"crate_id":4,"path":["std","env"],"kind":"module"},"6:6472:6096":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"4:5870:6237":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"17:16700:4918":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"16:6186:7756":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:41558:3600":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"4:3872:15183":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:47435:6929":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:47028:6886":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:43170:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"18:623:35808":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:12385:7698":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"18:581:3344":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"18:481:7580":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"6:6695:6207":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"1:13186:8131":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:14690:4356":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:48119:6984":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"4:2736:3248":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:12711:7704":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:6998:3586":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:1785:238":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:41417:3582":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"16:4981:5027":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:43244:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:44623:8180":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"5:4519:3215":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:12263:7683":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"4:11604:8088":{"crate_id":4,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"17:10667:4006":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"16:2838:4976":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:4964:5730":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"4:9841:8029":{"crate_id":4,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"17:12065:7663":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"1:39618:3126":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:6810:3606":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"4:4803:15230":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:41265:107":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:33918:3106":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"4:3467:3253":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:3558:128":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:23695:6612":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"4:9505:8004":{"crate_id":4,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"4:927:7889":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"5:928:15131":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"16:4118:5013":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:11654:7629":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:31358:26602":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"1:3043:3086":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:13592:4140":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"16:7987:7862":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"4:8324:131":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:44321:6850":{"crate_id":1,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"1:14187:217":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"17:13489:4135":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:2226:9543":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:16051:4726":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"18:113:9276":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"6:4914:5709":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"4:11917:3719":{"crate_id":4,"path":["std","sys","thread_local","native","eager","State"],"kind":"enum"},"17:1352:7611":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"4:1996:3203":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"1:41104:6817":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"6:7284:6283":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:11901:7656":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"16:4692:5019":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"18:589:3869":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:11577:252":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:43318:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"16:7956:7860":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"16:6901:7805":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"5:7098:3691":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:41989:3619":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:11259:7629":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:13000:22500":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:0:585":{"crate_id":1,"path":["core"],"kind":"module"},"1:48062:6979":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:7857:3607":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"17:11151:7628":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"4:12246:8023":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:15928:4695":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:22176:30149":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:11844:8114":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:15324:4459":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:41426:3583":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:16802:4942":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"5:1551:2580":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:40294:225":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:22648:15175":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"17:16219:4790":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"6:6702:6208":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"17:10634:4005":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"16:6656:7780":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"5:4362:3471":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"4:7022:245":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:13460:3702":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"16:3306:4951":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:11102:7627":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"4:8438:3251":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"6:8260:6455":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:4896:5697":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"4:9500:199":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:40369:226":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:44902:8190":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"5:7762:7951":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:44838:8119":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"6:497:5423":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"5:7108:3692":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"4:12664:782":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"16:3439:5009":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"16:7055:7816":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:13608:22342":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:47192:6902":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"6:6523:6121":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:13126:8127":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"9:380:21283":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"4:12038:8280":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"6:4997:5746":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"5:3082:6475":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"5:6169:15319":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:44081:3479":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:45489:8297":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:6310:3584":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"4:9863:131":{"crate_id":4,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"16:4900:5024":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:12103:4046":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:11590:7639":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"16:5142:5031":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"6:6645:6185":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"11:423:9295":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"6:545:5456":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"5:7694:3750":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:13477:9674":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"4:1100:7842":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:6428:6074":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"4:7471:30562":{"crate_id":4,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:45349:8208":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:14811:4396":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"5:5821:3690":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"4:8172:15149":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"9:49:21300":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:2424:6580":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:23548:15175":{"crate_id":1,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"1:43050:3472":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"18:598:35806":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:3075:272":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"17:12298:22474":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"5:3262:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"4:8636:3231":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"11:2297:7898":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"4:3679:2400":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"1:23066:9528":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"1:44491:8174":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:11752:3471":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:14427:164":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:14258:4269":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"16:5253:5035":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"11:2099:7842":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"16:7977:4999":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"4:8623:3234":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"1:22385:6581":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:47418:6928":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:16380:4837":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:485:7608":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"6:6710:6209":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"1:13530:9680":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:48134:6985":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:40389:228":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"4:12666:939":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"6:6578:6158":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"4:9587:8066":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:12373:7697":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"6:1569:5525":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"16:6142:22294":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:13876:4197":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"6:6631:6183":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:14985:4418":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:48093:6982":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"4:4725:15213":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:11438:4020":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"16:3585:5010":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"1:42640:26623":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"4:2663:3247":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"18:726:3884":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:38874:3122":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:45359:8212":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:11359:27628":{"crate_id":1,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"17:12447:22475":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"6:5179:5794":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:16766:4935":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"17:10283:22361":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"13:229:5321":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:46771:6862":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:41313:3234":{"crate_id":1,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"1:11994:8118":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"4:9278:8055":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:23496:8290":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:11855:7654":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:11728:7644":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:44089:8170":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:45772:3656":{"crate_id":1,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"1:44856:8120":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"4:8343:8033":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"4:11272:30555":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:45707:219":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"11:1579:7905":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:13183:7737":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"4:12674:1897":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"6:5151:5792":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:14910:4406":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"16:6062:4990":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"9:470:21281":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:44998:8193":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:11458:7632":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"6:6727:6213":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"4:4967:15203":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:14665:4354":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"4:10889:3257":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"16:3832:5012":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"18:718:3881":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:41252:6818":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:23454:26593":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"4:5022:7986":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"4:8965:3723":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"1:47270:6906":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"0:0:2552":{"crate_id":0,"path":["either"],"kind":"module"},"4:8705:8045":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:5412:1279":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:16005:4717":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"4:2495:15162":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"16:8264:5184":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"5:888:7915":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"16:8609:5005":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:3431:3115":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"17:15035:4435":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"4:5932:232":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"4:3334:8540":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:680:3992":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"4:8806:15243":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:11989:7657":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:7990:6434":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:42961:226":{"crate_id":1,"path":["core","range","RangeInclusive"],"kind":"struct"},"16:8543:7872":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"4:8166:15116":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:8281:3624":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:5127:5790":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:22925:14824":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"4:3590:3215":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"1:4653:7308":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"11:2354:3471":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"4:4591:7985":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"6:8249:6451":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:42852:3649":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:45042:8093":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"5:7559:7127":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"4:12635:30528":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"5:5560:15302":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"5:4157:34056":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:1233:7610":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:47907:6972":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:8231:6448":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"11:2513:5323":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"18:698:7596":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:10884:169":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"17:14110:4242":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"4:650:15111":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"4:12665:761":{"crate_id":4,"path":["std","f128"],"kind":"primitive"},"1:45555:7163":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:16329:4826":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"6:1727:5621":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"5:1632:7920":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:13983:4216":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:2043:3215":{"crate_id":1,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"16:6747:5055":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:16512:4168":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"16:5687:5043":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"0:365:2401":{"crate_id":0,"path":["either","Either"],"kind":"enum"},"17:12430:4052":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:10479:22368":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:3079:271":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"4:5939:7306":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:11757:7646":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"1:47862:6971":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"11:1703:168":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"6:7367:6334":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:10860:4011":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:15074:4438":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:45566:9697":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"6:1643:5581":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"6:5529:5961":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"16:5346:5038":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:2877:147":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"17:15534:4608":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"6:5539:5967":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:22265:14740":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:4842:5664":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"5:5134:3215":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"16:7347:5106":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:5349:5871":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"4:8959:3471":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"17:15624:4621":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:16525:4182":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"6:6486:6107":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"12:0:3076":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"6:5282:5849":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"4:9249:6543":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"6:6416:6070":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:31347:3492":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"4:1011:7897":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:13108:4037":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"1:41588:3602":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"5:778:264":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:45509:8302":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:33706:3103":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"4:5946:7993":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:23137:14820":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"1:13240:8114":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"6:1539:5506":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"4:11987:8089":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:10274:830":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"4:4333:9303":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"4:5682:7988":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"5:1781:34056":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"4:4384:9306":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:43096:90":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"6:1521:5495":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"4:11090:7137":{"crate_id":4,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"5:7569:34144":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:33035:118":{"crate_id":1,"path":["core","marker","ConstParamTy_"],"kind":"trait"},"5:1885:3679":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"16:2568:4964":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:1597:5544":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:559:5464":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"16:4150:5014":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:3596:154":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"5:787:122":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:43002:238":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"11:2126:7899":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:41149:8093":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:23418:6589":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:43431:98":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"7:31:21269":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:16395:4838":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"16:7334:5104":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:4513:111":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"5:1211:9301":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"11:2440:3679":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"17:12935:7727":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:16672:4911":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"1:2820:3348":{"crate_id":1,"path":["core","clone","CloneToUninit"],"kind":"trait"},"1:46999:6884":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:11210:35801":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:15448:4562":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:12889:7724":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:2129:6576":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"4:377:7954":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"11:1898:7909":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"16:6678:7786":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"6:4829:5654":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"5:3080:34256":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"4:8152:15115":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:3158:150":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"17:14178:4262":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"4:702:7961":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"16:5447:5041":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:16191:4783":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"16:3887:3894":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:35122:3120":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:8499:190":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"11:776:3686":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"6:7407:6336":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"5:4292:3215":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"4:919:2580":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:23596:6603":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"4:5732:7991":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"16:6873:5062":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"6:4947:5724":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"4:978:7888":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:7463:6360":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:45699:239":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"4:4247:15192":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:41353:3730":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:32911:8142":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"4:9385:8056":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:41574:3601":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"6:4792:5627":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"16:6841:7804":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"16:6967:4987":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"16:6366:7056":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:43587:3485":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:12562:7700":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:13453:2429":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"16:5222:5034":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"6:8278:6458":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"13:110:35778":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"6:6543:6137":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:48210:6994":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"16:7762:5146":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:40349:227":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"6:8266:6456":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:16269:4811":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"4:10515:8074":{"crate_id":4,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"1:10301:26915":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"4:8653:15182":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"9:490:5388":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"4:12662:763":{"crate_id":4,"path":["std","f16"],"kind":"primitive"},"1:3396:3102":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"4:562:8390":{"crate_id":4,"path":["std","thread","thread_name_string","ThreadNameString"],"kind":"struct"},"1:3069:175":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"1:41435:3591":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"16:5740:4003":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:3072:157":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"16:4265:5017":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:14710:4359":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:11485:7633":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:3743:7618":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"4:9436:8064":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"4:3095:238":{"crate_id":4,"path":["std","io","error","Result"],"kind":"type_alias"},"1:22165:30148":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"4:11128:3230":{"crate_id":4,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"18:706:7598":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:3593:153":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"17:15186:4453":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:11770:22404":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"5:7797:3698":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:45026:8133":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"5:2261:7925":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:15868:4679":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:4776:8098":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"18:670:7592":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:22134:3344":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"4:12619:32702":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"4:3331:8539":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:44938:8191":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"17:11395:22382":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:13093:4026":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"1:3066:77":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"16:7966:7861":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:3803:3137":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:11643:4037":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"6:5420:5904":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"4:12659:1862":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"6:5139:5791":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:5334:5869":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"5:7679:15124":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:12120:7671":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"16:2413:21406":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:16241:4796":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"4:8187:8028":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:15001:4422":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"11:1885:7907":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"4:8606:3232":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"17:15159:4450":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:23222:7311":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"16:7492:7835":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:23527:9453":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"4:9292:6545":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:26660:283":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"16:6939:7806":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"4:1639:3686":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:22204:15175":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"17:15389:4510":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"6:7308:6300":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:22383:14738":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"4:12110:7979":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:7740:3589":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"17:13795:4182":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:14545:4335":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:41549:3599":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:38984:3124":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:12686:4090":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:14454:4321":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"4:7972:3992":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:4:1292":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"1:14095:3595":{"crate_id":1,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"16:7369:4995":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:31294:3677":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"5:3291:3471":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:14431:4318":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:14350:4305":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"1:47241:6905":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"6:4990:5743":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:23013:30378":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"17:15677:4633":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:11690:4030":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"4:9846:30551":{"crate_id":4,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"5:3303:34250":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"5:4565:34066":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:44136:8173":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"11:2525:35775":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:42861:2393":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"16:3046:21435":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:4071:3686":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"6:8272:6457":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:34190:3108":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"6:5630:6013":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:517:5440":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:15115:4443":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:8090:3610":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"4:1643:3679":{"crate_id":4,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"1:45118:9686":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:14650:4351":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:14322:4298":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:47078:6896":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:40439:3138":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"16:2638:4967":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"4:11109:152":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"16:4239:5016":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:34458:3111":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:15198:4457":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:14069:4232":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:2394:22430":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"6:6749:6222":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"1:13688:123":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"5:2291:8271":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"4:6470:30550":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:42778:2580":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"4:9431:8063":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"4:6967:8015":{"crate_id":4,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"6:570:5469":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"16:7518:7110":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:12958:7728":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"4:12679:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"17:16573:4892":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"4:11145:30531":{"crate_id":4,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:41487:3595":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"4:896:3471":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"6:7962:6431":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"6:6756:6223":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"1:45493:8298":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:12864:7716":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"6:7430:6343":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:14212:3093":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:5136:9587":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"11:2469:21359":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"17:15699:4638":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"0:371:241":{"crate_id":0,"path":["either","Either","Right"],"kind":"variant"},"4:9321:15265":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"11:808:7903":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:11743:7645":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:3524:7617":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"4:4517:7984":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:44643:8182":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:48082:6981":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"16:7383:5108":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"6:7337:6312":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:12318:7688":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:2159:1397":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"1:41164:9593":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"9:318:5365":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:22152:30143":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"16:5111:5030":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:47110:6898":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"5:7549:7950":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"5:1227:34253":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:11328:35802":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"16:8206:4991":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"6:5295:5854":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:14384:4312":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:13387:7743":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"4:11161:8028":{"crate_id":4,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"6:5325:5866":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"6:5255:5832":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"4:4922:15234":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"4:8276:8029":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"4:1942:7969":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"17:14870:4402":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:10821:7623":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"17:16777:4936":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"1:44710:8185":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"4:3937:7980":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"4:8101:8026":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"16:8295:7866":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"6:6398:6057":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:36998:3121":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"6:7344:6316":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"11:1027:7899":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:3719:223":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"14:0:3077":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"16:6995:7807":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:15785:4660":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"4:8310:152":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"16:4842:5022":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:44118:3719":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"17:12836:22499":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:42831:3307":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"16:7904:5166":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:48187:6993":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:32869:3085":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"4:4371:15210":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"4:6816:7307":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:23434:26592":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"4:11493:6562":{"crate_id":4,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"16:6387:7757":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:4984:5740":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"4:2341:7973":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"6:5640:6014":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"4:2493:9517":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"4:8909:3721":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"4:1636:2580":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"11:2374:3472":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"17:16791:4940":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"1:22206:14741":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"18:754:7605":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:16116:4770":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:41526:3585":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:5375:3236":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"1:44988:3231":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"17:316:7606":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"16:2722:4971":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"4:4850:6329":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"17:14776:4384":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:13648:4148":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"4:9236:6542":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"1:41371:3237":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"17:12944:4099":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"4:2099:209":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"4:12227:6571":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"4:8797:8048":{"crate_id":4,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"1:3199:3207":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"5:6148:7945":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:10661:133":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:43355:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:33036:278":{"crate_id":1,"path":["core","marker","UnsizedConstParamTy"],"kind":"trait"},"1:4840:8284":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"11:1136:7902":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"11:649:3471":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:16230:4795":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"4:11050:8082":{"crate_id":4,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"16:155:7285":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:15937:4696":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:11616:7641":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:13836:4186":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:41117:8146":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"4:10674:32662":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"6:5366:5876":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"16:8162:4993":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:14369:3660":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"6:5288:5852":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:16538:4862":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"16:2484:4960":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"4:12270:30565":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"4:10766:8054":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:4771:8097":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"4:5748:116":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"4:6132:8000":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:47936:6973":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:14137:4251":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"6:1563:5523":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:22:845":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"6:7439:6347":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:47177:6901":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:13052:7733":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"4:5154:15233":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:16684:4913":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"1:44784:8187":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"6:5205:5808":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"4:5130:15231":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:8804:162":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"6:7562:6422":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"16:6623:7768":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:12969:4100":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"16:8525:7870":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"16:8011:5001":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:41505:3605":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"11:2340:7912":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"5:1483:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:22653:14743":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"4:7501:8850":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"4:9538:8017":{"crate_id":4,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"17:15013:4424":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:14346:119":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"5:4127:3686":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:5568:5980":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:10150:22357":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"16:6460:22297":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"4:8699:15211":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:23618:6605":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"18:548:165":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:10975:35796":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"6:5387:5886":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:564:5466":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:15844:4670":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"16:7713:35787":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"5:4202:3472":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"4:11759:30558":{"crate_id":4,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"16:7551:22303":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"16:5415:5040":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:10880:4012":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"6:7494:6386":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"4:9209:8052":{"crate_id":4,"path":["std","pipe","PipeReader"],"kind":"struct"},"6:7292:6288":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"6:5611:6004":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"16:5647:5042":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"4:2344:2753":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"17:10840:3234":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:8237:6449":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"16:2682:4969":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"5:1122:34056":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"4:2025:3204":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"16:6835:7803":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:12035:8119":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"4:9424:8062":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:2235:6577":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"5:984:15132":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"11:787:3679":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"17:0:3080":{"crate_id":17,"path":["object"],"kind":"module"},"17:14883:4404":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"5:4552:3215":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"5:6566:15270":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"4:1885:7967":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"6:6659:6190":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"6:1551:5515":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"5:1601:7887":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"16:7156:7820":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:16350:4832":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"11:663:3472":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:10132:22356":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"17:13231:7741":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"1:7004:8286":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"4:5312:7987":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":33}